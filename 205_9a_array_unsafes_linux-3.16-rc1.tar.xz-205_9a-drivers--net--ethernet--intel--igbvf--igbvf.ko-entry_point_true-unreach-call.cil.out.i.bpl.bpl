var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: ref;

var $M.3: i32;

var $M.4: ref;

var $M.5: i32;

var $M.6: ref;

var $M.7: i32;

var $M.8: ref;

var $M.9: i32;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i32;

var $M.13: [ref]i32;

var $M.14: [ref]i64;

var $M.15: [ref]ref;

var $M.16: [ref]i32;

var $M.17: [ref]i32;

var $M.18: [ref]ref;

var $M.19: [ref]i64;

var $M.20: [ref]i8;

var $M.21: [ref]i8;

var $M.22: [ref]ref;

var $M.23: ref;

var $M.24: i32;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: i32;

var $M.28: [ref]i32;

var $M.29: [ref]i32;

var $M.30: i32;

var $M.31: i32;

var $M.32: ref;

var $M.33: i32;

var $M.34: i32;

var $M.35: ref;

var $M.36: i32;

var $M.37: i32;

var $M.38: ref;

var $M.39: i32;

var $M.40: i32;

var $M.41: ref;

var $M.42: i32;

var $M.43: ref;

var $M.46: [ref]i8;

var $M.47: ref;

var $M.48: ref;

var $M.49: ref;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: ref;

var $M.54: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: ref;

var $M.59: i32;

var $M.60: i32;

var $M.61: ref;

var $M.62: i32;

var $M.63: i32;

var $M.64: ref;

var $M.65: i32;

var $M.66: i32;

var $M.67: ref;

var $M.68: ref;

var $M.69: i32;

var $M.70: i32;

var $M.71: ref;

var $M.72: i32;

var $M.73: i32;

var $M.74: ref;

var $M.75: i32;

var $M.76: i32;

var $M.77: ref;

var $M.78: i32;

var $M.79: i32;

var $M.80: ref;

var $M.81: ref;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.110: [ref]i8;

var $M.111: [ref]i8;

var $M.112: [ref]i8;

var $M.113: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 607858);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_3_1: ref;

axiom ldv_irq_3_1 == $sub.ref(0, 1028);

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 2056);

const ldv_irq_3_2: ref;

axiom ldv_irq_3_2 == $sub.ref(0, 3084);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 4112);

const ldv_irq_3_0: ref;

axiom ldv_irq_3_0 == $sub.ref(0, 5140);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 6168);

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 7196);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 8224);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 9252);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 10280);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 11308);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 12336);

const ldv_irq_3_3: ref;

axiom ldv_irq_3_3 == $sub.ref(0, 13364);

const igbvf_ethtool_ops_group1: ref;

axiom igbvf_ethtool_ops_group1 == $sub.ref(0, 14396);

const igbvf_ethtool_ops_group0: ref;

axiom igbvf_ethtool_ops_group0 == $sub.ref(0, 15428);

const igbvf_ethtool_ops_group2: ref;

axiom igbvf_ethtool_ops_group2 == $sub.ref(0, 16460);

const igbvf_ethtool_ops_group4: ref;

axiom igbvf_ethtool_ops_group4 == $sub.ref(0, 17492);

const igbvf_ethtool_ops_group5: ref;

axiom igbvf_ethtool_ops_group5 == $sub.ref(0, 18524);

const igbvf_ethtool_ops_group3: ref;

axiom igbvf_ethtool_ops_group3 == $sub.ref(0, 19556);

const igbvf_ethtool_ops_group6: ref;

axiom igbvf_ethtool_ops_group6 == $sub.ref(0, 20588);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 21616);

const {:count 6} igbvf_driver_name: ref;

axiom igbvf_driver_name == $sub.ref(0, 22646);

const {:count 8} igbvf_driver_version: ref;

axiom igbvf_driver_version == $sub.ref(0, 23678);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 24706);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 25738);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 26766);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 27798);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 28826);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 29858);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 30886);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 31918);

const igbvf_driver_group0: ref;

axiom igbvf_driver_group0 == $sub.ref(0, 32950);

const igbvf_netdev_ops_group1: ref;

axiom igbvf_netdev_ops_group1 == $sub.ref(0, 33982);

const ldv_irq_line_3_0: ref;

axiom ldv_irq_line_3_0 == $sub.ref(0, 35010);

const ldv_irq_data_3_0: ref;

axiom ldv_irq_data_3_0 == $sub.ref(0, 36042);

const ldv_irq_line_3_1: ref;

axiom ldv_irq_line_3_1 == $sub.ref(0, 37070);

const ldv_irq_data_3_1: ref;

axiom ldv_irq_data_3_1 == $sub.ref(0, 38102);

const ldv_irq_line_3_2: ref;

axiom ldv_irq_line_3_2 == $sub.ref(0, 39130);

const ldv_irq_data_3_2: ref;

axiom ldv_irq_data_3_2 == $sub.ref(0, 40162);

const ldv_irq_line_3_3: ref;

axiom ldv_irq_line_3_3 == $sub.ref(0, 41190);

const ldv_irq_data_3_3: ref;

axiom ldv_irq_data_3_3 == $sub.ref(0, 42222);

const ldv_timer_list_4_0: ref;

axiom ldv_timer_list_4_0 == $sub.ref(0, 43254);

const ldv_timer_4_0: ref;

axiom ldv_timer_4_0 == $sub.ref(0, 44282);

const ldv_timer_list_4_1: ref;

axiom ldv_timer_list_4_1 == $sub.ref(0, 45314);

const ldv_timer_4_1: ref;

axiom ldv_timer_4_1 == $sub.ref(0, 46342);

const ldv_timer_list_4_2: ref;

axiom ldv_timer_list_4_2 == $sub.ref(0, 47374);

const ldv_timer_4_2: ref;

axiom ldv_timer_4_2 == $sub.ref(0, 48402);

const ldv_timer_list_4_3: ref;

axiom ldv_timer_list_4_3 == $sub.ref(0, 49434);

const ldv_timer_4_3: ref;

axiom ldv_timer_4_3 == $sub.ref(0, 50462);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 51490);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 52522);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 53550);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 54582);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 55610);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 56642);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 57670);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 58702);

const igbvf_err_handler_group0: ref;

axiom igbvf_err_handler_group0 == $sub.ref(0, 59734);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 60762);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 61790);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 62818);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 63846);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 64874);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 65902);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 66930);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 67958);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 68986);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 70014);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 71042);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 72070);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 73098);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 74126);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 75154);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 76182);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 77210);

const last_index: ref;

axiom last_index == $sub.ref(0, 78238);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 79270);

const __mod_pci__igbvf_pci_tbl_device_table: ref;

axiom __mod_pci__igbvf_pci_tbl_device_table == $sub.ref(0, 80326);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 81470);

const igbvf_netdev_ops: ref;

axiom igbvf_netdev_ops == $sub.ref(0, 82974);

const debug: ref;

axiom debug == $sub.ref(0, 84002);

const igbvf_i350_vf_info: ref;

axiom igbvf_i350_vf_info == $sub.ref(0, 85058);

const igbvf_vf_info: ref;

axiom igbvf_vf_info == $sub.ref(0, 86114);

const {:count 2} igbvf_info_tbl: ref;

axiom igbvf_info_tbl == $sub.ref(0, 87154);

const {:count 45} igbvf_copyright: ref;

axiom igbvf_copyright == $sub.ref(0, 88223);

const {:count 49} igbvf_driver_string: ref;

axiom igbvf_driver_string == $sub.ref(0, 89296);

const igbvf_err_handler: ref;

axiom igbvf_err_handler == $sub.ref(0, 90368);

const {:count 3} igbvf_pci_tbl: ref;

axiom igbvf_pci_tbl == $sub.ref(0, 91488);

const igbvf_driver: ref;

axiom igbvf_driver == $sub.ref(0, 92824);

const igbvf_gstrings_test: ref;

axiom igbvf_gstrings_test == $sub.ref(0, 93880);

const {:count 13} igbvf_gstrings_stats: ref;

axiom igbvf_gstrings_stats == $sub.ref(0, 95476);

const igbvf_ethtool_ops: ref;

axiom igbvf_ethtool_ops == $sub.ref(0, 96876);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 26} .str.7: ref;

axiom .str.7 == $sub.ref(0, 97926);

const {:count 19} .str.6: ref;

axiom .str.6 == $sub.ref(0, 98969);

const {:count 41} .str.3: ref;

axiom .str.3 == $sub.ref(0, 100034);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 26} .str.13: ref;

axiom .str.13 == $sub.ref(0, 101084);

const {:count 37} .str.4: ref;

axiom .str.4 == $sub.ref(0, 102145);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 34} .str.5: ref;

axiom .str.5 == $sub.ref(0, 103203);

const {:count 59} .str.1: ref;

axiom .str.1 == $sub.ref(0, 104286);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const .str: ref;

axiom .str == $sub.ref(0, 105370);

const {:count 20} .str.9: ref;

axiom .str.9 == $sub.ref(0, 106414);

const {:count 70} .str.8: ref;

axiom .str.8 == $sub.ref(0, 107508);

const {:count 239} .str.2: ref;

axiom .str.2 == $sub.ref(0, 108771);

const {:count 39} .str.44: ref;

axiom .str.44 == $sub.ref(0, 109834);

const {:count 41} .str.14: ref;

axiom .str.14 == $sub.ref(0, 110899);

const {:count 8} .str.15: ref;

axiom .str.15 == $sub.ref(0, 111931);

const {:count 8} .str.16: ref;

axiom .str.16 == $sub.ref(0, 112963);

const {:count 39} .str.24: ref;

axiom .str.24 == $sub.ref(0, 114026);

const {:count 50} .str.25: ref;

axiom .str.25 == $sub.ref(0, 115100);

const {:count 28} .str.26: ref;

axiom .str.26 == $sub.ref(0, 116152);

const {:count 44} .str.27: ref;

axiom .str.27 == $sub.ref(0, 117220);

const {:count 31} .str.28: ref;

axiom .str.28 == $sub.ref(0, 118275);

const {:count 23} .str.29: ref;

axiom .str.29 == $sub.ref(0, 119322);

const {:count 26} .str.30: ref;

axiom .str.30 == $sub.ref(0, 120372);

const {:count 6} .str.31: ref;

axiom .str.31 == $sub.ref(0, 121402);

const {:count 32} .str.41: ref;

axiom .str.41 == $sub.ref(0, 122458);

const {:count 33} .str.42: ref;

axiom .str.42 == $sub.ref(0, 123515);

const {:count 14} .str.43: ref;

axiom .str.43 == $sub.ref(0, 124553);

const {:count 14} .str.37: ref;

axiom .str.37 == $sub.ref(0, 125591);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 5} .str.39: ref;

axiom .str.39 == $sub.ref(0, 126620);

const {:count 5} .str.40: ref;

axiom .str.40 == $sub.ref(0, 127649);

const {:count 30} .str.38: ref;

axiom .str.38 == $sub.ref(0, 128703);

const {:count 34} .str.32: ref;

axiom .str.32 == $sub.ref(0, 129761);

const {:count 31} .str.33: ref;

axiom .str.33 == $sub.ref(0, 130816);

const {:count 48} .str.35: ref;

axiom .str.35 == $sub.ref(0, 131888);

const {:count 19} .str.36: ref;

axiom .str.36 == $sub.ref(0, 132931);

const {:count 40} .str.34: ref;

axiom .str.34 == $sub.ref(0, 133995);

const {:count 40} .str.10: ref;

axiom .str.10 == $sub.ref(0, 135059);

const {:count 42} .str.11: ref;

axiom .str.11 == $sub.ref(0, 136125);

const {:count 29} .str.12: ref;

axiom .str.12 == $sub.ref(0, 137178);

const {:count 27} .str.19: ref;

axiom .str.19 == $sub.ref(0, 138229);

const {:count 28} .str.20: ref;

axiom .str.20 == $sub.ref(0, 139281);

const {:count 19} .str.18: ref;

axiom .str.18 == $sub.ref(0, 140324);

const {:count 30} .str.17: ref;

axiom .str.17 == $sub.ref(0, 141378);

const {:count 25} .str.21: ref;

axiom .str.21 == $sub.ref(0, 142427);

const {:count 12} .str.22: ref;

axiom .str.22 == $sub.ref(0, 143463);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 6} .str.23: ref;

axiom .str.23 == $sub.ref(0, 144493);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 145525);

const {:count 3} .str.1.104: ref;

axiom .str.1.104 == $sub.ref(0, 146552);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 147590);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 148618);

const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 149650);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 0} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := malloc($i0);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} __VERIFIER_assume($i7);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 150682);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 151714);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 6} $r := $malloc($i0);
    return;
}



const igbvf_get_settings: ref;

axiom igbvf_get_settings == $sub.ref(0, 152746);

procedure igbvf_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p2 := netdev_priv($p0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 32);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 32);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $sub.i8(0, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 2);
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(8, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i12 := readl($p11);
    call {:si_unique_call 9} {:cexpr "status"} boogie_si_record_i32($i12);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 2);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} ethtool_cmd_speed_set($p1, $sub.i32(0, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 1));
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i12, 128);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i12, 64);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} ethtool_cmd_speed_set($p1, 10);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i12, 1);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(14, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 1);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} ethtool_cmd_speed_set($p1, 100);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} ethtool_cmd_speed_set($p1, 1000);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const igbvf_set_settings: ref;

axiom igbvf_set_settings == $sub.ref(0, 153778);

procedure igbvf_set_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_set_settings($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const igbvf_get_drvinfo: ref;

axiom igbvf_get_drvinfo == $sub.ref(0, 154810);

procedure igbvf_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var vslice_dummy_var_192: i64;
  var vslice_dummy_var_193: i64;
  var vslice_dummy_var_194: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p2 := netdev_priv($p0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} vslice_dummy_var_192 := strlcpy($p5, igbvf_driver_name, 32);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} vslice_dummy_var_193 := strlcpy($p8, igbvf_driver_version, 32);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p12 := pci_name($p11);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} vslice_dummy_var_194 := strlcpy($p14, $p12, 32);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i16 := igbvf_get_regs_len($p0);
    call {:si_unique_call 20} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(192, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i18 := igbvf_get_eeprom_len($p0);
    call {:si_unique_call 22} {:cexpr "tmp___2"} boogie_si_record_i32($i18);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(188, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_get_regs_len: ref;

axiom igbvf_get_regs_len == $sub.ref(0, 155842);

procedure igbvf_get_regs_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_get_regs_len($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $r := 32;
    return;
}



const igbvf_get_regs: ref;

axiom igbvf_get_regs == $sub.ref(0, 156874);

procedure igbvf_get_regs($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_get_regs($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $p3 := netdev_priv($p0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 24} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p2, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 16);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 16777216);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i13, $i18);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $i23 := readl($p22);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i23);
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(8, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i27 := readl($p26);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p6, $mul.ref(1, 4));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    $p29 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(10248, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i32 := readl($p31);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(10256, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i37 := readl($p36);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p6, $mul.ref(3, 4));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    $p39 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(10264, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i42 := readl($p41);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p6, $mul.ref(4, 4));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    $p44 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(14344, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i47 := readl($p46);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p6, $mul.ref(5, 4));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    $p49 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(14352, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i52 := readl($p51);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p6, $mul.ref(6, 4));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(14360, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i57 := readl($p56);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p6, $mul.ref(7, 4));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_get_wol: ref;

axiom igbvf_get_wol == $sub.ref(0, 157906);

procedure igbvf_get_wol($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_get_wol($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_set_wol: ref;

axiom igbvf_set_wol == $sub.ref(0, 158938);

procedure igbvf_set_wol($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_set_wol($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const igbvf_get_msglevel: ref;

axiom igbvf_get_msglevel == $sub.ref(0, 159970);

procedure igbvf_get_msglevel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_get_msglevel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $p1 := netdev_priv($p0);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(2540, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const igbvf_set_msglevel: ref;

axiom igbvf_set_msglevel == $sub.ref(0, 161002);

procedure igbvf_set_msglevel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_set_msglevel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} {:cexpr "igbvf_set_msglevel:arg:data"} boogie_si_record_i32($i1);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p2 := netdev_priv($p0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(2540, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i1);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_nway_reset: ref;

axiom igbvf_nway_reset == $sub.ref(0, 162034);

procedure igbvf_nway_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_nway_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p1 := netdev_priv($p0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i3 := netif_running($p0);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 38} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} igbvf_reinit_locked($p2);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 163066);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 40} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 41} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const igbvf_get_eeprom_len: ref;

axiom igbvf_get_eeprom_len == $sub.ref(0, 164098);

procedure igbvf_get_eeprom_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_get_eeprom_len($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const igbvf_get_eeprom: ref;

axiom igbvf_get_eeprom == $sub.ref(0, 165130);

procedure igbvf_get_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_get_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const igbvf_set_eeprom: ref;

axiom igbvf_set_eeprom == $sub.ref(0, 166162);

procedure igbvf_set_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_set_eeprom($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const igbvf_get_coalesce: ref;

axiom igbvf_get_coalesce == $sub.ref(0, 167194);

procedure igbvf_get_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_get_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $p2 := netdev_priv($p0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1040, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i6 := $ule.i32($i5, 3);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i11, 2);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1040, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const igbvf_set_coalesce: ref;

axiom igbvf_set_coalesce == $sub.ref(0, 168226);

procedure igbvf_set_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_set_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i64;
  var $p49: ref;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $p2 := netdev_priv($p0);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 9);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 3);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 4);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 256);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i37 := $udiv.i32(1000000000, $i36);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1040, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 304)), $mul.ref(268, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i64($i47);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p43, $mul.ref($i48, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} writel($i41, $p49);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb16;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 488);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1040, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i10 := $ule.i32($i9, 10000);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 2);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 256);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32(1000000000, $i17);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1040, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const igbvf_get_ringparam: ref;

axiom igbvf_get_ringparam == $sub.ref(0, 169258);

procedure igbvf_get_ringparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p2 := netdev_priv($p0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 4096);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 4096);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_set_ringparam: ref;

axiom igbvf_set_ringparam == $sub.ref(0, 170290);

procedure igbvf_set_ringparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_set_ringparam($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i77: i32;
  var $p120: ref;
  var $i55: i32;
  var $p121: ref;
  var $i10: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p2 := netdev_priv($p0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 47} {:cexpr "_max1"} boogie_si_record_i32($i12);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 80);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i14 := 80;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32($i14, 4096);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i16 := 4096;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 7);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, $sub.i32(0, 8));
    call {:si_unique_call 48} {:cexpr "new_rx_count"} boogie_si_record_i32($i18);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 49} {:cexpr "_max1___0"} boogie_si_record_i32($i20);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32($i20, 80);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i22 := 80;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i22, 4096);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i24 := 4096;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 7);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 8));
    call {:si_unique_call 50} {:cexpr "new_tx_count"} boogie_si_record_i32($i26);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, $i26);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i38 := test_and_set_bit(1, $p37);
    call {:si_unique_call 52} {:cexpr "tmp___0"} boogie_si_record_i32($i38);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i44 := netif_running($p43);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 57} {:cexpr "tmp___1"} boogie_si_record_i8($i45);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p56 := vmalloc(304);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} igbvf_down($p3);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, $i26);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i89 := 0;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, $i18);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i118 := $i89;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i77 := $i118;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_195 := igbvf_up($p3);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p57);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vfree($p120);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i55 := $i77;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} clear_bit(1, $p121);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i10 := $i55;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb57:
    assume $i94 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i64(304, 63);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i95 == 1);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p57);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 71} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p100, $p103, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p57, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p104, $i18);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $i105 := igbvf_setup_rx_resources($p3, $p57);
    call {:si_unique_call 73} {:cexpr "err"} boogie_si_record_i32($i105);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} igbvf_free_rx_resources($p108);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i109 := $ugt.i64(304, 63);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i109 == 1);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p57);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 76} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p116, $p117, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i118 := $i105;
    goto $bb68;

  $bb65:
    assume $i109 == 1;
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p57);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 75} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p112, $p113, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i106 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i77 := $i105;
    goto $bb51;

  $bb59:
    assume $i95 == 1;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p57);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 70} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p96, $p99, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb44:
    assume $i64 == 1;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i65 := $ugt.i64(304, 63);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i65 == 1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p57);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_5 := $M.0;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 62} cmdloc_dummy_var_7 := $memcpy.i8(cmdloc_dummy_var_5, cmdloc_dummy_var_6, $p70, $p73, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p57, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i26);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i75 := igbvf_setup_tx_resources($p3, $p57);
    call {:si_unique_call 64} {:cexpr "err"} boogie_si_record_i32($i75);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} igbvf_free_tx_resources($p79);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i80 := $ugt.i64(304, 63);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i80 == 1);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p57);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 69} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p87, $p88, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i89 := $i75;
    goto $bb56;

  $bb53:
    assume $i80 == 1;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p57);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 68} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p83, $p84, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume $i76 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i77 := $i75;
    goto $bb51;

  $bb46:
    assume $i65 == 1;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p57);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 61} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p66, $p69, 304, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb41:
    assume $i59 == 1;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 12);
    goto $bb39;

  $bb37:
    assume $i48 == 1;
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i26);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i18);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb39;

  $bb34:
    assume $i46 == 1;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb36;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $i40, $i41 := igbvf_set_ringparam_loop_$bb29($p37, $i40, $i41);
    goto $bb29_last;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} msleep(1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i40 := test_and_set_bit(1, $p37);
    call {:si_unique_call 55} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb31_dummy;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, $i18);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb22;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb19;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb16;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto $bb30;
}



const igbvf_get_pauseparam: ref;

axiom igbvf_get_pauseparam == $sub.ref(0, 171322);

procedure igbvf_get_pauseparam($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation igbvf_get_pauseparam($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_set_pauseparam: ref;

axiom igbvf_set_pauseparam == $sub.ref(0, 172354);

procedure igbvf_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_set_pauseparam($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const igbvf_diag_test: ref;

axiom igbvf_diag_test == $sub.ref(0, 173386);

procedure igbvf_diag_test($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_diag_test($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_196: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p3 := netdev_priv($p0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} set_bit(0, $p5);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i6 := igbvf_link_test($p4, $p2);
    call {:si_unique_call 80} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} clear_bit(0, $p12);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} vslice_dummy_var_196 := msleep_interruptible(4000);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 2);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const igbvf_get_strings: ref;

axiom igbvf_get_strings == $sub.ref(0, 174418);

procedure igbvf_get_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_get_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;

  $bb0:
    call {:si_unique_call 83} {:cexpr "igbvf_get_strings:arg:stringset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb15, $bb16;

  $bb16:
    assume !(0 == 1);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 87} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p2, igbvf_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb21, $bb22;

  $bb22:
    assume !(0 == 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 89} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p7, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $i8 := $add.i64(32, 32);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref($i8, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb25, $bb26;

  $bb26:
    assume !(0 == 1);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 91} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p9, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    $i10 := $add.i64($i8, 32);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p2, $mul.ref($i10, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb29, $bb30;

  $bb30:
    assume !(0 == 1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 93} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p11, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $i12 := $add.i64($i10, 32);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref($i12, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb33, $bb34;

  $bb34:
    assume !(0 == 1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 95} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p13, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    $i14 := $add.i64($i12, 32);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p2, $mul.ref($i14, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb37, $bb38;

  $bb38:
    assume !(0 == 1);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 97} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p15, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    $i16 := $add.i64($i14, 32);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p2, $mul.ref($i16, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb41, $bb42;

  $bb42:
    assume !(0 == 1);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 99} cmdloc_dummy_var_73 := $memcpy.i8(cmdloc_dummy_var_71, cmdloc_dummy_var_72, $p17, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_73;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $i18 := $add.i64($i16, 32);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref($i18, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb45, $bb46;

  $bb46:
    assume !(0 == 1);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 101} cmdloc_dummy_var_79 := $memcpy.i8(cmdloc_dummy_var_77, cmdloc_dummy_var_78, $p19, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    $i20 := $add.i64($i18, 32);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p2, $mul.ref($i20, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb49, $bb50;

  $bb50:
    assume !(0 == 1);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 103} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p21, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $i22 := $add.i64($i20, 32);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p2, $mul.ref($i22, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb53, $bb54;

  $bb54:
    assume !(0 == 1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.0;
    cmdloc_dummy_var_90 := $M.0;
    call {:si_unique_call 105} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p23, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_91;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    $i24 := $add.i64($i22, 32);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p2, $mul.ref($i24, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb57, $bb58;

  $bb58:
    assume !(0 == 1);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.0;
    cmdloc_dummy_var_96 := $M.0;
    call {:si_unique_call 107} cmdloc_dummy_var_97 := $memcpy.i8(cmdloc_dummy_var_95, cmdloc_dummy_var_96, $p25, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_97;
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    $i26 := $add.i64($i24, 32);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i26, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb61, $bb62;

  $bb62:
    assume !(0 == 1);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.0;
    cmdloc_dummy_var_102 := $M.0;
    call {:si_unique_call 109} cmdloc_dummy_var_103 := $memcpy.i8(cmdloc_dummy_var_101, cmdloc_dummy_var_102, $p27, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_103;
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    $i28 := $add.i64($i26, 32);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p2, $mul.ref($i28, 1));
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb65, $bb66;

  $bb66:
    assume !(0 == 1);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.0;
    cmdloc_dummy_var_108 := $M.0;
    call {:si_unique_call 111} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p29, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_109;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb65:
    assume 0 == 1;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_104 := $M.0;
    cmdloc_dummy_var_105 := $M.0;
    call {:si_unique_call 110} cmdloc_dummy_var_106 := $memcpy.i8(cmdloc_dummy_var_104, cmdloc_dummy_var_105, $p29, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_106;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb61:
    assume 0 == 1;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.0;
    cmdloc_dummy_var_99 := $M.0;
    call {:si_unique_call 108} cmdloc_dummy_var_100 := $memcpy.i8(cmdloc_dummy_var_98, cmdloc_dummy_var_99, $p27, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_100;
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb57:
    assume 0 == 1;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.0;
    cmdloc_dummy_var_93 := $M.0;
    call {:si_unique_call 106} cmdloc_dummy_var_94 := $memcpy.i8(cmdloc_dummy_var_92, cmdloc_dummy_var_93, $p25, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_94;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb53:
    assume 0 == 1;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 104} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p23, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb49:
    assume 0 == 1;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 102} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p21, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb45:
    assume 0 == 1;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.0;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 100} cmdloc_dummy_var_76 := $memcpy.i8(cmdloc_dummy_var_74, cmdloc_dummy_var_75, $p19, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb41:
    assume 0 == 1;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 98} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p17, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume 0 == 1;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 96} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p15, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume 0 == 1;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 94} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p13, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb29:
    assume 0 == 1;
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 92} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p11, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume 0 == 1;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 90} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p9, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume 0 == 1;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 88} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p7, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume 0 == 1;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 86} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p2, igbvf_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb6;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64(32, 63);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 85} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p2, igbvf_gstrings_test, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 84} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p2, igbvf_gstrings_test, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const igbvf_get_ethtool_stats: ref;

axiom igbvf_get_ethtool_stats == $sub.ref(0, 175450);

procedure igbvf_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i64;
  var $i14: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i31: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i48: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $i65: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i64;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $i87: i64;
  var $i82: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i64;
  var $p100: ref;
  var $i101: i64;
  var $p102: ref;
  var $i103: i64;
  var $i104: i64;
  var $i99: i64;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i64;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $i120: i64;
  var $i121: i64;
  var $i116: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i64;
  var $p134: ref;
  var $i135: i64;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $i133: i64;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i64;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $i150: i64;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i64;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i64;
  var $i167: i64;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $i183: i64;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $i188: i64;
  var $i189: i64;
  var $i184: i64;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i64;
  var $p202: ref;
  var $i203: i64;
  var $p204: ref;
  var $i205: i64;
  var $i206: i64;
  var $i201: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i64;
  var $p219: ref;
  var $i220: i64;
  var $p221: ref;
  var $i222: i64;
  var $i223: i64;
  var $i218: i64;
  var $p224: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p3 := netdev_priv($p0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} igbvf_update_stats($p4);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1888, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p4);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(1776, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3, $bb4;

  $bb4:
    assume !(1 == 1);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p6);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p8);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i16, $i18);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i14);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p4);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1896, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p4);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(1784, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb8, $bb9;

  $bb9:
    assume !(1 == 1);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p22);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p24);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i26, $i28);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i31);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p4);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(1904, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(1792, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb12, $bb13;

  $bb13:
    assume !(1 == 1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p39);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p41);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i43, $i45);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p54, $i48);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p4);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(1912, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p4);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(1800, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(1 == 1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p56);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p58);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32($i60, $i62);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p2, $mul.ref(3, 8));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p71, $i65);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p4);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(1920, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p4);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(1808, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb20, $bb21;

  $bb21:
    assume !(1 == 1);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p73);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p75);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i77, $i79);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p2, $mul.ref(4, 8));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i82);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p4);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(1944, 1));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p4);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p91, $mul.ref(1832, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb24, $bb25;

  $bb25:
    assume !(1 == 1);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p90);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p92);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i94, $i96);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i98 := $zext.i32.i64($i97);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p2, $mul.ref(5, 8));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p105, $i99);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p4);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(1952, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p4);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(1840, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb28, $bb29;

  $bb29:
    assume !(1 == 1);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p107);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p109);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i114 := $sub.i32($i111, $i113);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i116 := $i115;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p2, $mul.ref(6, 8));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p122, $i116);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p4);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p123, $mul.ref(1096, 1));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p4);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(1960, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb32, $bb33;

  $bb33:
    assume !(0 == 1);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p124);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p126);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i131 := $sub.i32($i128, $i130);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i132 := $zext.i32.i64($i131);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i133 := $i132;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p2, $mul.ref(7, 8));
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p139, $i133);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p4);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p140, $mul.ref(1904, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p4);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p142, $mul.ref(1792, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb36, $bb37;

  $bb37:
    assume !(1 == 1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p141);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p143);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i148 := $sub.i32($i145, $i147);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i149 := $zext.i32.i64($i148);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i150 := $i149;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p2, $mul.ref(8, 8));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p156, $i150);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p4);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p157, $mul.ref(1176, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p4);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p159, $mul.ref(1960, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb40, $bb41;

  $bb41:
    assume !(1 == 1);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p158);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p160);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i165 := $sub.i32($i162, $i164);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i166 := $zext.i32.i64($i165);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i167 := $i166;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p2, $mul.ref(9, 8));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p173, $i167);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p4);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p174, $mul.ref(1168, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p4);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p176, $mul.ref(1960, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb44, $bb45;

  $bb45:
    assume !(1 == 1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p175);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p177);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i182 := $sub.i32($i179, $i181);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i183 := $zext.i32.i64($i182);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $i184 := $i183;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($p2, $mul.ref(10, 8));
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p190, $i184);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p4);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p191, $mul.ref(1184, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p4);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p193, $mul.ref(1960, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb48, $bb49;

  $bb49:
    assume !(1 == 1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p192);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p194);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i199 := $sub.i32($i196, $i198);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i200 := $zext.i32.i64($i199);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i201 := $i200;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($p2, $mul.ref(11, 8));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p207, $i201);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p4);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p208, $mul.ref(1192, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p4);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p210, $mul.ref(1960, 1));
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb52, $bb53;

  $bb53:
    assume !(0 == 1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p209);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.0, $p212);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p211);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.0, $p214);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i216 := $sub.i32($i213, $i215);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i217 := $zext.i32.i64($i216);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i218 := $i217;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p2, $mul.ref(12, 8));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p224, $i218);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb52:
    assume 0 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p209);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i220 := $load.i64($M.0, $p219);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p211);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i222 := $load.i64($M.0, $p221);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i223 := $sub.i64($i220, $i222);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i218 := $i223;
    goto $bb54;

  $bb48:
    assume 1 == 1;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p192);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i203 := $load.i64($M.0, $p202);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p194);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i205 := $load.i64($M.0, $p204);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i206 := $sub.i64($i203, $i205);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i201 := $i206;
    goto $bb50;

  $bb44:
    assume 1 == 1;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p175);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i186 := $load.i64($M.0, $p185);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p177);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i188 := $load.i64($M.0, $p187);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i189 := $sub.i64($i186, $i188);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i184 := $i189;
    goto $bb46;

  $bb40:
    assume 1 == 1;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p158);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i169 := $load.i64($M.0, $p168);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p160);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.0, $p170);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i172 := $sub.i64($i169, $i171);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i167 := $i172;
    goto $bb42;

  $bb36:
    assume 1 == 1;
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p141);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i152 := $load.i64($M.0, $p151);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p143);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.0, $p153);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i155 := $sub.i64($i152, $i154);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i150 := $i155;
    goto $bb38;

  $bb32:
    assume 0 == 1;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p124);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p126);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i138 := $sub.i64($i135, $i137);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $i133 := $i138;
    goto $bb34;

  $bb28:
    assume 1 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p107);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.0, $p117);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p109);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i120 := $load.i64($M.0, $p119);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i121 := $sub.i64($i118, $i120);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i116 := $i121;
    goto $bb30;

  $bb24:
    assume 1 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p90);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p92);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.0, $p102);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i104 := $sub.i64($i101, $i103);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i99 := $i104;
    goto $bb26;

  $bb20:
    assume 1 == 1;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p73);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p75);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i87 := $sub.i64($i84, $i86);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i82 := $i87;
    goto $bb22;

  $bb16:
    assume 1 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p56);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i67 := $load.i64($M.0, $p66);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p58);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i70 := $sub.i64($i67, $i69);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i65 := $i70;
    goto $bb18;

  $bb12:
    assume 1 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p39);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p41);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i53 := $sub.i64($i50, $i52);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i48 := $i53;
    goto $bb14;

  $bb8:
    assume 1 == 1;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p22);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.0, $p32);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p24);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i36 := $sub.i64($i33, $i35);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb10;

  $bb3:
    assume 1 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p6);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p8);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i10, $i12);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb5;
}



const igbvf_get_sset_count: ref;

axiom igbvf_get_sset_count == $sub.ref(0, 176482);

procedure igbvf_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_get_sset_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    call {:si_unique_call 114} {:cexpr "igbvf_get_sset_count:arg:stringset"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i5 := 13;
    goto $bb9;

  $bb2:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb7:
    assume $i4 == 1;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb9;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 177514);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const igbvf_update_stats: ref;

axiom igbvf_update_stats == $sub.ref(0, 178546);

procedure igbvf_update_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_update_stats($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p34: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p63: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i64;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p92: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p121: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $i126: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p138: ref;
  var $i139: i64;
  var $i140: i64;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i64;
  var $p150: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p167: ref;
  var $i168: i64;
  var $i169: i64;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i64;
  var $p179: ref;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $i184: i64;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p196: ref;
  var $i197: i64;
  var $i198: i64;
  var $p200: ref;
  var $p202: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i64;
  var $p208: ref;
  var $p210: ref;
  var $i211: i64;
  var $i212: i64;
  var $i213: i64;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i32;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var $p225: ref;
  var $i226: i64;
  var $i227: i64;
  var $p229: ref;
  var $p231: ref;
  var $p233: ref;
  var $i234: i64;
  var $i235: i64;
  var $p237: ref;
  var $p239: ref;
  var $i240: i64;
  var $i241: i64;
  var $i242: i64;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i32;
  var $p250: ref;
  var $i251: i32;
  var $i252: i1;
  var $p254: ref;
  var $i255: i64;
  var $i256: i64;
  var $p258: ref;
  var $p260: ref;
  var $p262: ref;
  var $i263: i64;
  var $i264: i64;
  var $p266: ref;
  var $p268: ref;
  var $i269: i64;
  var $i270: i64;
  var $i271: i64;
  var $p273: ref;
  var $p275: ref;
  var $i276: i64;
  var $p278: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(950, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $i9 := constant_test_bit(1, $p8);
    call {:si_unique_call 116} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i11 := pci_channel_offline($p3);
    call {:si_unique_call 118} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(3856, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i16 := readl($p15);
    call {:si_unique_call 120} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(72, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, $i16);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(72, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i16);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(112, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, $sub.i64(0, 4294967296));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(112, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i32);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(112, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i16);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i39 := $or.i64($i37, $i38);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(112, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, $i39);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(3864, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i45 := readl($p44);
    call {:si_unique_call 122} {:cexpr "tmp___2"} boogie_si_record_i32($i45);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(80, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i49 := $ugt.i32($i48, $i45);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(80, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i45);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(128, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, $sub.i64(0, 4294967296));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(128, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, $i61);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(128, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i45);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i68 := $or.i64($i66, $i67);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(128, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, $i68);
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(3860, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $i74 := readl($p73);
    call {:si_unique_call 124} {:cexpr "tmp___3"} boogie_si_record_i32($i74);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(76, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i32($i77, $i74);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(76, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i74);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(120, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, $sub.i64(0, 4294967296));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(120, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p92, $i90);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(120, 1));
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i95 := $load.i64($M.0, $p94);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i74);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i97 := $or.i64($i95, $i96);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(120, 1));
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, $i97);
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p101, $mul.ref(3892, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} $i103 := readl($p102);
    call {:si_unique_call 126} {:cexpr "tmp___4"} boogie_si_record_i32($i103);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(84, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i107 := $ugt.i32($i106, $i103);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(84, 1));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i103);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(136, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.0, $p117);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i119 := $and.i64($i118, $sub.i64(0, 4294967296));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(136, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p121, $i119);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(136, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i124 := $load.i64($M.0, $p123);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i125 := $zext.i32.i64($i103);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i126 := $or.i64($i124, $i125);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(136, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p128, $i126);
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(3900, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i132 := readl($p131);
    call {:si_unique_call 128} {:cexpr "tmp___5"} boogie_si_record_i32($i132);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(88, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i136 := $ugt.i32($i135, $i132);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(88, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i132);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(144, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i147 := $load.i64($M.0, $p146);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i148 := $and.i64($i147, $sub.i64(0, 4294967296));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(144, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p150, $i148);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(144, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i154 := $zext.i32.i64($i132);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i155 := $or.i64($i153, $i154);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(144, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p157, $i155);
    $p158 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p159, $mul.ref(3920, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i161 := readl($p160);
    call {:si_unique_call 130} {:cexpr "tmp___6"} boogie_si_record_i32($i161);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(92, 1));
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i165 := $ugt.i32($i164, $i161);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(92, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p173, $i161);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(152, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i176 := $load.i64($M.0, $p175);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i177 := $and.i64($i176, $sub.i64(0, 4294967296));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(152, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p179, $i177);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(152, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.0, $p181);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i183 := $zext.i32.i64($i161);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i184 := $or.i64($i182, $i183);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(152, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p186, $i184);
    $p187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p188, $mul.ref(3908, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $i190 := readl($p189);
    call {:si_unique_call 132} {:cexpr "tmp___7"} boogie_si_record_i32($i190);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(96, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i194 := $ugt.i32($i193, $i190);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(96, 1));
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p202, $i190);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(160, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i205 := $load.i64($M.0, $p204);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i206 := $and.i64($i205, $sub.i64(0, 4294967296));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(160, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p208, $i206);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(160, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i211 := $load.i64($M.0, $p210);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i212 := $zext.i32.i64($i190);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i213 := $or.i64($i211, $i212);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(160, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, $i213);
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.0, $p216);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p217, $mul.ref(3912, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i219 := readl($p218);
    call {:si_unique_call 134} {:cexpr "tmp___8"} boogie_si_record_i32($i219);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(100, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p221);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i223 := $ugt.i32($i222, $i219);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(100, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p231, $i219);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(168, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i234 := $load.i64($M.0, $p233);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i235 := $and.i64($i234, $sub.i64(0, 4294967296));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(168, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p237, $i235);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(168, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i240 := $load.i64($M.0, $p239);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i241 := $zext.i32.i64($i219);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i242 := $or.i64($i240, $i241);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(168, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p244, $i242);
    $p245 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($p246, $mul.ref(3904, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i248 := readl($p247);
    call {:si_unique_call 136} {:cexpr "tmp___9"} boogie_si_record_i32($i248);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(104, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.0, $p250);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i252 := $ugt.i32($i251, $i248);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(104, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p260, $i248);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(176, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i263 := $load.i64($M.0, $p262);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i264 := $and.i64($i263, $sub.i64(0, 4294967296));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(176, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p266, $i264);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(176, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i269 := $load.i64($M.0, $p268);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i270 := $zext.i32.i64($i248);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i271 := $or.i64($i269, $i270);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(176, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p273, $i271);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(144, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i276 := $load.i64($M.0, $p275);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1192, 1)), $mul.ref(64, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p278, $i276);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i252 == 1;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(176, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i255 := $load.i64($M.0, $p254);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i256 := $add.i64($i255, 4294967296);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(176, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p258, $i256);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i223 == 1;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(168, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i226 := $load.i64($M.0, $p225);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i227 := $add.i64($i226, 4294967296);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(168, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p229, $i227);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i194 == 1;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(160, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i197 := $load.i64($M.0, $p196);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i198 := $add.i64($i197, 4294967296);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(160, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p200, $i198);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i165 == 1;
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(152, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i168 := $load.i64($M.0, $p167);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i169 := $add.i64($i168, 4294967296);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(152, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p171, $i169);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i136 == 1;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(144, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.0, $p138);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i140 := $add.i64($i139, 4294967296);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(144, 1));
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p142, $i140);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i107 == 1;
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(136, 1));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.0, $p109);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i110, 4294967296);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(136, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p113, $i111);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i78 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(120, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i81, 4294967296);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(120, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, $i82);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(128, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i52, 4294967296);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(128, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p55, $i53);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(112, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 4294967296);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(112, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i24);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 179578);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const pci_channel_offline: ref;

axiom pci_channel_offline == $sub.ref(0, 180610);

procedure pci_channel_offline($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_channel_offline($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(144, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 1);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 181642);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 138} $i2 := devirtbounce(0, $p1);
    call {:si_unique_call 139} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 182674);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const set_bit: ref;

axiom set_bit == $sub.ref(0, 183706);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 141} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_link_test: ref;

axiom igbvf_link_test == $sub.ref(0, 184738);

procedure igbvf_link_test($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_link_test($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i64;
  var $i15: i32;
  var vslice_dummy_var_197: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, 0);
    $p5 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 142} vslice_dummy_var_197 := devirtbounce.2($p6, $p2);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(8, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i11 := readl($p10);
    call {:si_unique_call 144} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 2);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p1);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, 1);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 185770);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 146} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    return;
}



const msleep_interruptible: ref;

axiom msleep_interruptible == $sub.ref(0, 186802);

procedure msleep_interruptible($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msleep_interruptible($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 147} {:cexpr "msleep_interruptible:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 148} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 149} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 187834);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 188866);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 152} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 153} devirtbounce.3(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 189898);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 155} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 190930);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p1 := external_alloc();
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const igbvf_down: ref;

axiom igbvf_down == $sub.ref(0, 191962);

procedure igbvf_down($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $CurrAddr, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_down($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} set_bit(2, $p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(10280, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i8 := readl($p7);
    call {:si_unique_call 160} {:cexpr "rxdctl"} boogie_si_record_i32($i8);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 33554433));
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(10280, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} writel($i9, $p12);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} netif_stop_queue($p2);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(14376, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i16 := readl($p15);
    call {:si_unique_call 164} {:cexpr "txdctl"} boogie_si_record_i32($i16);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 33554433));
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(14376, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} writel($i17, $p20);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(8, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} vslice_dummy_var_198 := readl($p23);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} msleep(10);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} napi_disable($p27);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} igbvf_irq_disable($p0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(0, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} vslice_dummy_var_199 := ldv_del_timer_sync_51($p28);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} netif_carrier_off($p2);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} igbvf_update_stats($p0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(950, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 0);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(952, 1));
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} igbvf_reset($p0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} igbvf_clean_tx_ring($p33);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} igbvf_clean_rx_ring($p35);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_setup_tx_resources: ref;

axiom igbvf_setup_tx_resources == $sub.ref(0, 192994);

procedure igbvf_setup_tx_resources($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_setup_tx_resources($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i39: i32;
  var vslice_dummy_var_200: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 40);
    call {:si_unique_call 176} {:cexpr "size"} boogie_si_record_i32($i6);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p8 := vzalloc($i7);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 16);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 4095);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 4096));
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p29 := dma_alloc_attrs($p24, $i27, $p28, 208, $0.ref);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p29);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 0);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} vfree($p42);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} vslice_dummy_var_200 := dev_err.ref.ref($p45, .str);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb8;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const igbvf_free_tx_resources: ref;

axiom igbvf_free_tx_resources == $sub.ref(0, 194026);

procedure igbvf_free_tx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_free_tx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} igbvf_clean_tx_ring($p0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} vfree($p7);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} dma_free_attrs($p9, $i12, $p15, $i17, $0.ref);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_setup_rx_resources: ref;

axiom igbvf_setup_rx_resources == $sub.ref(0, 195058);

procedure igbvf_setup_rx_resources($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_setup_rx_resources($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i39: i32;
  var vslice_dummy_var_201: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 40);
    call {:si_unique_call 184} {:cexpr "size"} boogie_si_record_i32($i6);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p8 := vzalloc($i7);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 16);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 4095);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 4096));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p29 := dma_alloc_attrs($p24, $i27, $p28, 208, $0.ref);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p29);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p0);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vfree($p42);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_201 := dev_err.ref.ref($p46, .str.1);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 12);
    goto $bb8;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const igbvf_free_rx_resources: ref;

axiom igbvf_free_rx_resources == $sub.ref(0, 196090);

procedure igbvf_free_rx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.24;



implementation igbvf_free_rx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} igbvf_clean_rx_ring($p0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vfree($p7);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $0.ref);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} dma_free_attrs($p9, $i12, $p15, $i17, $0.ref);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_up: ref;

axiom igbvf_up == $sub.ref(0, 197122);

procedure igbvf_up($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_up($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} igbvf_configure($p0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} clear_bit(2, $p2);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} napi_enable($p5);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(5504, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} vslice_dummy_var_202 := readl($p12);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} igbvf_irq_enable($p0);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(132, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, jiffies);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_203 := ldv_mod_timer_50($p16, $i18);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} igbvf_configure_msix($p0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 198154);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_configure: ref;

axiom igbvf_configure == $sub.ref(0, 199186);

procedure igbvf_configure($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $CurrAddr, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_configure($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} igbvf_set_multi($p2);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} igbvf_restore_vlan($p0);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} igbvf_configure_tx($p0);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} igbvf_setup_srrctl($p0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} igbvf_configure_rx($p0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $i5 := igbvf_desc_unused($p4);
    call {:si_unique_call 205} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} igbvf_alloc_rx_buffers($p7, $i5);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    return;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 200218);

procedure napi_enable($p0: ref);
  free requires assertsPassed;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 208} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 210} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 212} devirtbounce.5(0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} clear_bit(0, $p8);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 211} devirtbounce.4(0, .str.7, 492, 12);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const igbvf_configure_msix: ref;

axiom igbvf_configure_msix == $sub.ref(0, 201250);

procedure igbvf_configure_msix($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_configure_msix($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i16;
  var $i35: i64;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i7 := $add.i32(0, 1);
    call {:si_unique_call 214} {:cexpr "vector"} boogie_si_record_i32($i7);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} igbvf_assign_vector($p0, $sub.i32(0, 1), 0, 0);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i9, $i11);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(260, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(268, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i19);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p17, $mul.ref($i20, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} writel($i15, $p21);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i7, 1);
    call {:si_unique_call 217} {:cexpr "vector"} boogie_si_record_i32($i22);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} igbvf_assign_vector($p0, 0, $sub.i32(0, 1), $i7);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i24, $i26);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 304)), $mul.ref(260, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 304)), $mul.ref(268, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i64($i34);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p32, $mul.ref($i35, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} writel($i30, $p36);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i22, 1);
    call {:si_unique_call 220} {:cexpr "vector"} boogie_si_record_i32($i37);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i22, 128);
    call {:si_unique_call 221} {:cexpr "tmp"} boogie_si_record_i32($i38);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(5952, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} writel($i38, $p41);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32(1, $i37);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i37, $sub.i32(0, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32(1, $i45);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2560, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(8, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_204 := readl($p50);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_irq_enable: ref;

axiom igbvf_irq_enable == $sub.ref(0, 202282);

procedure igbvf_irq_enable($p0: ref);
  free requires assertsPassed;



implementation igbvf_irq_enable($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(5420, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} writel($i3, $p6);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(5424, 1));
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} writel($i8, $p11);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2556, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(5412, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} writel($i13, $p16);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_50: ref;

axiom ldv_mod_timer_50 == $sub.ref(0, 203314);

procedure ldv_mod_timer_50($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation ldv_mod_timer_50($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "ldv_mod_timer_50:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 229} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} activate_pending_timer_4($p0, $i1, 1);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 204346);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 231} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 1} true;
    call {:si_unique_call 232} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 233} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_4: ref;

axiom activate_pending_timer_4 == $sub.ref(0, 205378);

procedure activate_pending_timer_4($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation activate_pending_timer_4($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "activate_pending_timer_4:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 235} {:cexpr "activate_pending_timer_4:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p3 := $M.2;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.4;
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.6;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.8;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} activate_suitable_timer_4($p0, $i1);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i34 := $M.9;
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p37 := $M.8;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 239} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i25 := $M.7;
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $p28 := $M.6;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 238} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(1);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $i16 := $M.5;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p19 := $M.4;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 237} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(1);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i7 := $M.3;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.2 := $p0;
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p10 := $M.2;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 236} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(1);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_4: ref;

axiom activate_suitable_timer_4 == $sub.ref(0, 206410);

procedure activate_suitable_timer_4($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation activate_suitable_timer_4($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "activate_suitable_timer_4:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i4 := $M.3;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.9;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i22 := $M.9;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.8 := $p0;
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p24 := $M.8;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 245} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.6 := $p0;
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p18 := $M.6;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 244} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.4 := $p0;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p12 := $M.4;
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 243} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.2 := $p0;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p6 := $M.2;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 242} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const writel: ref;

axiom writel == $sub.ref(0, 207442);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 247} devirtbounce.6(0, $i0, $p2);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_assign_vector: ref;

axiom igbvf_assign_vector == $sub.ref(0, 208474);

procedure igbvf_assign_vector($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_assign_vector($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i20: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $p35: ref;
  var $i36: i1;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i51: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} {:cexpr "igbvf_assign_vector:arg:rx_queue"} boogie_si_record_i32($i1);
    call {:si_unique_call 249} {:cexpr "igbvf_assign_vector:arg:tx_queue"} boogie_si_record_i32($i2);
    call {:si_unique_call 250} {:cexpr "igbvf_assign_vector:arg:msix_vector"} boogie_si_record_i32($i3);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i1, 0);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i36 := $sge.i32($i2, 0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i37 := $ashr.i32($i2, 1);
    call {:si_unique_call 259} {:cexpr "index"} boogie_si_record_i32($i37);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i37, 2);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i40);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i42 := $add.i64($i41, 5888);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p39, $mul.ref($i42, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i44 := readl($p43);
    call {:si_unique_call 261} {:cexpr "ivar"} boogie_si_record_i32($i44);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i2, 1);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i46 == 1);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i44, $sub.i32(0, 65281));
    call {:si_unique_call 264} {:cexpr "ivar"} boogie_si_record_i32($i52);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i3, 128);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i54 := $shl.i32($i53, 8);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, $i52);
    call {:si_unique_call 265} {:cexpr "ivar"} boogie_si_record_i32($i55);
    assume {:verifier.code 0} true;
    $i51 := $i55;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32(1, $i3);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p58, $mul.ref($i59, 304)), $mul.ref(256, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i56);
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32($i37, 2);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i66 := $add.i64($i65, 5888);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p63, $mul.ref($i66, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} writel($i51, $p67);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i46 == 1;
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i44, 16777215);
    call {:si_unique_call 262} {:cexpr "ivar"} boogie_si_record_i32($i47);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i3, 128);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i48, 24);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, $i47);
    call {:si_unique_call 263} {:cexpr "ivar"} boogie_si_record_i32($i50);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i1, 1);
    call {:si_unique_call 251} {:cexpr "index"} boogie_si_record_i32($i6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i6, 2);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i10, 5888);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p8, $mul.ref($i11, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i13 := readl($p12);
    call {:si_unique_call 253} {:cexpr "ivar"} boogie_si_record_i32($i13);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i1, 1);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i13, $sub.i32(0, 256));
    call {:si_unique_call 256} {:cexpr "ivar"} boogie_si_record_i32($i21);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i3, $i21);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 128);
    call {:si_unique_call 257} {:cexpr "ivar"} boogie_si_record_i32($i23);
    assume {:verifier.code 0} true;
    $i20 := $i23;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32(1, $i3);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref($i27, 304)), $mul.ref(256, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i24);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32($i6, 2);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i34 := $add.i64($i33, 5888);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p31, $mul.ref($i34, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} writel($i20, $p35);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i15 == 1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i13, $sub.i32(0, 16711681));
    call {:si_unique_call 254} {:cexpr "ivar"} boogie_si_record_i32($i16);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i3, 128);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 16);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $i16);
    call {:si_unique_call 255} {:cexpr "ivar"} boogie_si_record_i32($i19);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb5;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 209506);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 268} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const igbvf_set_multi: ref;

axiom igbvf_set_multi == $sub.ref(0, 210538);

procedure igbvf_set_multi($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_set_multi($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i37: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i28: i32;
  var $p29: ref;
  var $i51: i32;
  var $i27: i32;
  var $p54: ref;
  var $p55: ref;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p1 := netdev_priv($p0);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(16, 1));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $p15 := $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i22, $i25);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    call {:si_unique_call 275} devirtbounce.7($p55, $p3, $p15, $i27, 0, 0);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} kfree($p15);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i28, $p29 := 0, $p19;
    goto $bb11;

  $bb11:
    call $i30, $i31, $i32, $i33, $p34, $p35, $p36, $i38, $i39, $i40, $p41, $p42, $p43, $i37, $p45, $p46, $p47, $p48, $i49, $i50, $i28, $p29, $i51, cmdloc_dummy_var_110, cmdloc_dummy_var_111, cmdloc_dummy_var_112, cmdloc_dummy_var_113, cmdloc_dummy_var_114, cmdloc_dummy_var_115 := igbvf_set_multi_loop_$bb11($p15, $i25, $i30, $i31, $i32, $i33, $p34, $p35, $p36, $i38, $i39, $i40, $p41, $p42, $p43, $i37, $p45, $p46, $p47, $p48, $i49, $i50, $i28, $p29, $i51, cmdloc_dummy_var_110, cmdloc_dummy_var_111, cmdloc_dummy_var_112, cmdloc_dummy_var_113, cmdloc_dummy_var_114, cmdloc_dummy_var_115);
    goto $bb11_last;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i64(6, 63);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i28, 1);
    call {:si_unique_call 273} {:cexpr "i"} boogie_si_record_i32($i38);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i28, 6);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p15, $mul.ref($i40, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p29, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.0;
    cmdloc_dummy_var_114 := $M.0;
    call {:si_unique_call 274} cmdloc_dummy_var_115 := $memcpy.i8(cmdloc_dummy_var_113, cmdloc_dummy_var_114, $p41, $p43, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_115;
    assume {:verifier.code 0} true;
    $i37 := $i38;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $i25);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i51 := $i37;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i27 := $i51;
    goto $bb10;

  $bb16:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i28, $p29 := $i37, $p46;
    goto $bb16_dummy;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i28, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i28, 6);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p15, $mul.ref($i33, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p29, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.0;
    cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 272} cmdloc_dummy_var_112 := $memcpy.i8(cmdloc_dummy_var_110, cmdloc_dummy_var_111, $p34, $p36, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_112;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i37 := $i31;
    goto $bb15;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(16, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p12 := kmalloc_array($i11, 6, 32);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $p12;
    goto $bb7;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1913;
}



const igbvf_restore_vlan: ref;

axiom igbvf_restore_vlan == $sub.ref(0, 211570);

procedure igbvf_restore_vlan($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_restore_vlan($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $i7: i16;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(424, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i3 := find_first_bit($p2, 4096);
    call {:si_unique_call 278} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    call {:si_unique_call 279} {:cexpr "vid"} boogie_si_record_i16($i4);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i6 := $ule.i32($i5, 4095);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i7, vslice_dummy_var_205 := igbvf_restore_vlan_loop_$bb4($p0, $p8, $p9, $i10, $i11, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i7, vslice_dummy_var_205);
    goto $bb4_last;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i7);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} vslice_dummy_var_205 := igbvf_vlan_rx_add_vid($p9, 129, $i11);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(424, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i7);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $i18 := find_next_bit($p14, 4096, $i17);
    call {:si_unique_call 282} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i16($i18);
    call {:si_unique_call 283} {:cexpr "vid"} boogie_si_record_i16($i19);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i21 := $ule.i32($i20, 4095);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;
}



const igbvf_configure_tx: ref;

axiom igbvf_configure_tx == $sub.ref(0, 212602);

procedure igbvf_configure_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_configure_tx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(14376, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i7 := readl($p6);
    call {:si_unique_call 285} {:cexpr "txdctl"} boogie_si_record_i32($i7);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 33554433));
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(14376, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} writel($i8, $p11);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(8, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} vslice_dummy_var_206 := readl($p14);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} msleep(10);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 16);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(14344, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} writel($i18, $p21);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    call {:si_unique_call 290} {:cexpr "tdba"} boogie_si_record_i64($i23);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(14336, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} writel($i24, $p27);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i64($i23, 32);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(14340, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} writel($i29, $p32);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(14352, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} writel(0, $p35);
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(14360, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} writel(0, $p38);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(36, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, 14352);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(38, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, 14360);
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(14356, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $i44 := readl($p43);
    call {:si_unique_call 296} {:cexpr "dca_txctrl"} boogie_si_record_i32($i44);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $sub.i32(0, 2049));
    call {:si_unique_call 297} {:cexpr "dca_txctrl"} boogie_si_record_i32($i45);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(14356, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} writel($i45, $p48);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i7, 33554432);
    call {:si_unique_call 299} {:cexpr "txdctl"} boogie_si_record_i32($i49);
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(14376, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} writel($i49, $p52);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1060, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 50331648);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1060, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 134217728);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1060, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_setup_srrctl: ref;

axiom igbvf_setup_srrctl == $sub.ref(0, 213634);

procedure igbvf_setup_srrctl($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_setup_srrctl($p0: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i14: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i2 := $and.i32(0, $sub.i32(0, 234897280));
    call {:si_unique_call 301} {:cexpr "srrctl"} boogie_si_record_i32($i2);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, $sub.i32(0, 2147483648));
    call {:si_unique_call 302} {:cexpr "srrctl"} boogie_si_record_i32($i3);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1023);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 10);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, $i3);
    call {:si_unique_call 303} {:cexpr "srrctl"} boogie_si_record_i32($i8);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 2047);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 128);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 2);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $i8);
    call {:si_unique_call 305} {:cexpr "srrctl"} boogie_si_record_i32($i19);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 167772160);
    call {:si_unique_call 306} {:cexpr "srrctl"} boogie_si_record_i32($i20);
    assume {:verifier.code 0} true;
    $i14 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(10252, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} writel($i14, $p23);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i8, 33554432);
    call {:si_unique_call 304} {:cexpr "srrctl"} boogie_si_record_i32($i13);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const igbvf_configure_rx: ref;

axiom igbvf_configure_rx == $sub.ref(0, 214666);

procedure igbvf_configure_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_configure_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(10280, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i7 := readl($p6);
    call {:si_unique_call 309} {:cexpr "rxdctl"} boogie_si_record_i32($i7);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 33554433));
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(10280, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} writel($i8, $p11);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(8, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} vslice_dummy_var_207 := readl($p14);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} msleep(10);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(16, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    call {:si_unique_call 313} {:cexpr "rdba"} boogie_si_record_i64($i17);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(10240, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} writel($i18, $p21);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i64($i17, 32);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(10244, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} writel($i23, $p26);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 16);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(10248, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} writel($i29, $p32);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(36, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 10256);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 304)), $mul.ref(38, 1));
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, 10264);
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(10256, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} writel(0, $p37);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(10264, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} writel(0, $p40);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i7, 33554432);
    call {:si_unique_call 319} {:cexpr "rxdctl"} boogie_si_record_i32($i41);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, $sub.i32(0, 1048576));
    call {:si_unique_call 320} {:cexpr "rxdctl"} boogie_si_record_i32($i42);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, 16);
    call {:si_unique_call 321} {:cexpr "rxdctl"} boogie_si_record_i32($i43);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 2048);
    call {:si_unique_call 322} {:cexpr "rxdctl"} boogie_si_record_i32($i44);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 65536);
    call {:si_unique_call 323} {:cexpr "rxdctl"} boogie_si_record_i32($i45);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} igbvf_set_rlpml($p0);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(10280, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} writel($i45, $p48);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_desc_unused: ref;

axiom igbvf_desc_unused == $sub.ref(0, 215698);

procedure igbvf_desc_unused($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_desc_unused($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i3, $i6);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i18, $i21);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i22, $i25);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i26, 1);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i16 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i10, $i13);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, $sub.i32(0, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const igbvf_alloc_rx_buffers: ref;

axiom igbvf_alloc_rx_buffers == $sub.ref(0, 216730);

procedure igbvf_alloc_rx_buffers($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.0, $M.25, $M.24;



implementation igbvf_alloc_rx_buffers($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i20: i32;
  var $i23: i32;
  var $i24: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $i115: i32;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i64;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i64;
  var $p167: ref;
  var $i168: i32;
  var $i169: i1;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i170: i32;
  var $i25: i32;
  var $i107: i32;
  var $i63: i32;
  var $p171: ref;
  var $i172: i16;
  var $i173: i32;
  var $i174: i1;
  var $i175: i16;
  var $p176: ref;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i182: i32;
  var $i181: i32;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i16;
  var $i188: i64;
  var $p189: ref;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "igbvf_alloc_rx_buffers:arg:cleaned_count"} boogie_si_record_i32($i1);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.10, $p4);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.11, $p6);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    call {:si_unique_call 327} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i10);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 40));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.12, $p15);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.13, $p21);
    call {:si_unique_call 329} {:cexpr "bufsz"} boogie_si_record_i32($i22);
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "igbvf_alloc_rx_buffers:arg:tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i1, 1);
    call {:si_unique_call 331} {:cexpr "cleaned_count"} boogie_si_record_i32($i23);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i1, 0);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i25 := $i10;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i107 := $i25;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i63 := $i107;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i172 := $load.i16($M.0, $p171);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i173, $i63);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume $i174 == 1;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i63);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p176, $i175);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i63, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i177 == 1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i182 := $sub.i32($i63, 1);
    call {:si_unique_call 347} {:cexpr "i"} boogie_si_record_i32($i182);
    assume {:verifier.code 0} true;
    $i181 := $i182;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} devirtbounce.5(0);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.22, $p184);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(38, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i187 := $load.i16($M.0, $p186);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i188 := $zext.i16.i64($i187);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p185, $mul.ref($i188, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} writel($i181, $p189);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i177 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32($i179, 1);
    call {:si_unique_call 346} {:cexpr "i"} boogie_si_record_i32($i180);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i181 := $i180;
    goto $bb48;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i26, $i27, $p28 := $i23, $i10, $p14;
    goto $bb7;

  $bb7:
    call $p29, $p30, $i31, $p32, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $i58, $p64, $p65, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $i85, $p86, $p87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $p96, $i97, $p108, $p109, $i110, $i111, $p112, $i113, $i114, $i115, $p120, $p121, $p122, $p123, $i124, $i125, $p126, $p127, $p128, $i129, $i130, $i131, $p132, $i133, $p140, $i141, $i142, $p143, $p144, $p145, $i146, $p147, $p148, $p149, $i150, $p151, $p152, $p153, $i154, $p155, $p156, $p157, $p158, $i159, $p160, $i161, $i162, $i163, $p164, $p165, $i166, $p167, $i168, $i169, $i26, $i27, $p28, $i170 := igbvf_alloc_rx_buffers_loop_$bb7($p0, $p3, $p5, $p7, $i20, $p29, $p30, $i31, $p32, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $p50, $p51, $p52, $p53, $p54, $p55, $i56, $i57, $i58, $p64, $p65, $p66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $p75, $p76, $p77, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $i85, $p86, $p87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $p96, $i97, $p108, $p109, $i110, $i111, $p112, $i113, $i114, $i115, $p120, $p121, $p122, $p123, $i124, $i125, $p126, $p127, $p128, $i129, $i130, $i131, $p132, $i133, $p140, $i141, $i142, $p143, $p144, $p145, $i146, $p147, $p148, $p149, $i150, $p151, $p152, $p153, $i154, $p155, $p156, $p157, $p158, $i159, $p160, $i161, $i162, $i163, $p164, $p165, $i166, $p167, $i168, $i169, $i26, $i27, $p28, $i170);
    goto $bb7_last;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i27);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p30, $mul.ref($i31, 16));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.12, $p34);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.18, $p108);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i111 := $eq.i64($i110, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.12, $p140);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i142 == 1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i154 := $load.i64($M.19, $p153);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p33);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p156, $i154);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p33);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p158, 0);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i27, 1);
    call {:si_unique_call 344} {:cexpr "i"} boogie_si_record_i32($i159);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, $i159);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i163 := $i159;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i166 := $zext.i32.i64($i163);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p165, $mul.ref($i166, 40));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32($i26, 1);
    call {:si_unique_call 345} {:cexpr "cleaned_count"} boogie_si_record_i32($i168);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i169 := $ne.i32($i26, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i170 := $i163;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i25 := $i170;
    goto $bb6;

  $bb41:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    $i26, $i27, $p28 := $i168, $i163, $p167;
    goto $bb41_dummy;

  $bb38:
    assume $i162 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i163 := 0;
    goto $bb40;

  $bb35:
    assume $i142 == 1;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.14, $p145);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p33);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, $p148, $i146);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i150 := $load.i64($M.19, $p149);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p33);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p152, $i150);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i111 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p112 := netdev_alloc_skb_ip_align($p5, $i20);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i115 := $i27;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p120, $p112);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p112, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i20);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $i125 := dma_map_single_attrs($p121, $p123, $i124, 2, $0.ref);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, $p126, $i125);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.19, $p128);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i130 := dma_mapping_error($p127, $i129);
    call {:si_unique_call 341} {:cexpr "tmp___0"} boogie_si_record_i32($i130);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p132, $i133 := $p28, $i27;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p132, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.18, $p134);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} ldv_skb_free($p136);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p132, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p137, $0.ref);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} vslice_dummy_var_209 := dev_err.ref.ref($p138, .str.6);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i63 := $i133;
    goto $bb18;

  $bb28:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1152, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.16, $p116);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i118 := $add.i32($i117, 1);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1152, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p119, $i118);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i63 := $i115;
    goto $bb18;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.14, $p39);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.15, $p44);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i47 == 1);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.17, $p69);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i71 := $xor.i32($i70, 2048);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p74, $i71);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.15, $p78);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.17, $p82);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i83);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i85 := dma_map_page($p75, $p79, $i84, 2048, 2);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, $p88, $i85);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.14, $p92);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i94 := dma_mapping_error($p89, $i93);
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i32($i94);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p96, $i97 := $p28, $i27;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p96, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.15, $p100);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} __free_pages($p101, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p96, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p104, $0.ref);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_208 := dev_err.ref.ref($p105, .str.6);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i107 := $i97;
    goto $bb23;

  $bb14:
    assume $i47 == 1;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p48 := alloc_pages(32, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, $p51, $p48);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.15, $p54);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i58 := $i27;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p66, 0);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1152, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.16, $p59);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1152, 1));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p62, $i61);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i63 := $i58;
    goto $bb18;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.12, $p18);
    call {:si_unique_call 328} {:cexpr "bufsz"} boogie_si_record_i32($i19);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb3;

  $bb41_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 217762);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 351} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 218794);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "dma_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 354} {:cexpr "dma_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 355} {:cexpr "dma_map_page:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p5 := get_dma_ops($p0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $p6 := lowmem_page_address($p1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i2, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i3);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} kmemcheck_mark_initialized($p7, $i8);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i9 := valid_dma_direction($i4);
    call {:si_unique_call 360} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 362} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 364} $i17 := devirtbounce.8($p16, $p0, $p1, $i2, $i3, $i4, $0.ref);
    call {:si_unique_call 365} {:cexpr "addr"} boogie_si_record_i64($i17);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} debug_dma_map_page($p0, $p1, $i2, $i3, $i4, $i17, 0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 363} devirtbounce.4(0, .str.3, 79, 12);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 219826);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $p2 := get_dma_ops($p0);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 370} $i9 := devirtbounce.9($p8, $p0, $i1);
    call {:si_unique_call 371} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 220858);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 221890);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 1} true;
    call {:si_unique_call 373} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 374} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 375} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 376} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netdev_alloc_skb_ip_align: ref;

axiom netdev_alloc_skb_ip_align == $sub.ref(0, 222922);

procedure netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} {:cexpr "netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p2 := __netdev_alloc_skb_ip_align($p0, $i1, 32);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 223954);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 380} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $p5 := get_dma_ops($p0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 384} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 386} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i14 := __phys_addr($i13);
    call {:si_unique_call 389} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 390} $i21 := devirtbounce.8($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 391} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i23 := __phys_addr($i22);
    call {:si_unique_call 393} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 387} devirtbounce.4(0, .str.3, 19, 12);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 224986);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p1 := $M.23;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} ldv_set_remove($p1, $p2);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 226018);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.25, $M.24;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i2 := $M.24;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 397} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i18 := $M.24;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.24;
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $M.24 := $i31;
    call {:si_unique_call 399} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.25, $p22);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, $p26, $p23);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 398} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i28 := $M.24;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.25, $p7);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i14 := $M.24;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 227050);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 401} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 228082);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    return;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 229114);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 230146);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 404} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 405} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 406} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 231178);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 408} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 409} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 410} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 411} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    return;
}



const __netdev_alloc_skb_ip_align: ref;

axiom __netdev_alloc_skb_ip_align == $sub.ref(0, 232210);

procedure __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} {:cexpr "__netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    call {:si_unique_call 413} {:cexpr "__netdev_alloc_skb_ip_align:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p3 := __netdev_alloc_skb($p0, $i1, $i2);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 233242);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 416} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $p3 := external_alloc();
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 234274);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 418} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 419} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 235306);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 236338);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 237370);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 422} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p2 := external_alloc();
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const igbvf_set_rlpml: ref;

axiom igbvf_set_rlpml == $sub.ref(0, 238402);

procedure igbvf_set_rlpml($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_set_rlpml($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1164, 1));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 4);
    call {:si_unique_call 424} {:cexpr "max_frame_size"} boogie_si_record_i32($i4);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} e1000_rlpml_set_vf($p1, $i7);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    return;
}



const e1000_rlpml_set_vf: ref;

axiom e1000_rlpml_set_vf == $sub.ref(0, 239434);

procedure e1000_rlpml_set_vf($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_rlpml_set_vf($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_210: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 427} {:cexpr "e1000_rlpml_set_vf:arg:max_size"} boogie_si_record_i16($i1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 5);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    call {:si_unique_call 428} vslice_dummy_var_210 := devirtbounce.10($p9, $p0, $p10, 2);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    return;
}



const find_first_bit: ref;

axiom find_first_bit == $sub.ref(0, 240466);

procedure find_first_bit($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_first_bit($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 429} {:cexpr "find_first_bit:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 1} true;
    call {:si_unique_call 430} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 431} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const igbvf_vlan_rx_add_vid: ref;

axiom igbvf_vlan_rx_add_vid == $sub.ref(0, 241498);

procedure igbvf_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i19: i32;
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "igbvf_vlan_rx_add_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 433} {:cexpr "igbvf_vlan_rx_add_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p3 := netdev_priv($p0);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    $p8 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i2);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    call {:si_unique_call 435} $i12 := devirtbounce.11($p9, $p5, $i11, 1);
    call {:si_unique_call 436} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i2);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(424, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} set_bit($i20, $p22);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i2);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_211 := dev_err.ref.ref.i32($p16, .str.13, $i17);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;
}



const find_next_bit: ref;

axiom find_next_bit == $sub.ref(0, 242530);

procedure find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation find_next_bit($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 439} {:cexpr "find_next_bit:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 440} {:cexpr "find_next_bit:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 441} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 442} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 243562);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 444} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 445} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 244594);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} free_($p0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 245626);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 448} $free($p0);
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 246658);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 450} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p2 := ldv_malloc($i0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const igbvf_clean_rx_ring: ref;

axiom igbvf_clean_rx_ring == $sub.ref(0, 247690);

procedure igbvf_clean_rx_ring($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.25, $M.24;



implementation igbvf_clean_rx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i12: i32;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i64;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i16;
  var $i103: i64;
  var $p104: ref;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i77);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i79 := $mul.i64($i78, 40);
    call {:si_unique_call 458} {:cexpr "size"} boogie_si_record_i64($i79);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_116 := $M.0;
    call {:si_unique_call 459} cmdloc_dummy_var_117 := $memset.i8(cmdloc_dummy_var_116, $p82, 0, $i79, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_117;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_118 := $M.0;
    call {:si_unique_call 460} cmdloc_dummy_var_119 := $memset.i8(cmdloc_dummy_var_118, $p85, 0, $i88, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_119;
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(36, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i64($i95);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p93, $mul.ref($i96, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} writel(0, $p97);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(38, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i64($i102);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p100, $mul.ref($i103, 1));
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} writel(0, $p104);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    call $p13, $p14, $i15, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $p29, $p30, $i31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $i75, $i12 := igbvf_clean_rx_ring_loop_$bb8($p0, $p2, $p4, $p9, $p13, $p14, $i15, $p17, $i18, $i19, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $i27, $i28, $p29, $p30, $i31, $p32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $p60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $i75, $i12);
    goto $bb8_last;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i12);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i12, 1);
    call {:si_unique_call 457} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p9);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i75 := $ugt.i32($i74, $i73);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i75 == 1);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb25:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i73;
    goto $bb25_dummy;

  $bb19:
    assume $i49 == 1;
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} put_page($p63);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $0.ref);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, 0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} dma_unmap_page($p55, $i59, 2048, 2);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} ldv_skb_free($p42);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} dma_unmap_single_attrs($p29, $i31, $i34, 2, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p35, 0);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p14, $mul.ref($i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} dma_unmap_single_attrs($p23, $i25, $i28, 2, $0.ref);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 248722);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_212: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 464} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p5 := get_dma_ops($p0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i6 := arch_local_save_flags();
    call {:si_unique_call 467} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 469} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 470} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 472} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_212 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 476} devirtbounce.12($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} warn_slowpath_null(.str.4, 166);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 249754);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 478} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 480} $i7 := devirtbounce.13(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 481} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 479} devirtbounce.4(0, .str.5, 804, 12);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 250786);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 251818);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 252850);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 485} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 253882);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 487} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 488} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p5 := get_dma_ops($p0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 491} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 493} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 495} devirtbounce.14($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 494} devirtbounce.4(0, .str.3, 36, 12);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 254914);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} {:cexpr "dma_unmap_page:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 498} {:cexpr "dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 499} {:cexpr "dma_unmap_page:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p4 := get_dma_ops($p0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 502} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 504} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 506} devirtbounce.14($p16, $p0, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 505} devirtbounce.4(0, .str.3, 91, 12);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 255946);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 256978);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 258010);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 509} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 510} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 511} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    return;
}



const vzalloc: ref;

axiom vzalloc == $sub.ref(0, 259042);

procedure vzalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vzalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} {:cexpr "vzalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p1 := external_alloc();
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 260074);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 515} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $p5 := get_dma_ops($p0);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 517} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 519} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 521} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 522} $p20 := devirtbounce.15($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 261106);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 262138);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 526} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 528} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 527} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 263170);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 530} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 264202);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 532} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 533} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const igbvf_clean_tx_ring: ref;

axiom igbvf_clean_tx_ring == $sub.ref(0, 265234);

procedure igbvf_clean_tx_ring($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_clean_tx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i10: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i64;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i16;
  var $i45: i64;
  var $p46: ref;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 40);
    call {:si_unique_call 536} {:cexpr "size"} boogie_si_record_i64($i21);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_120 := $M.0;
    call {:si_unique_call 537} cmdloc_dummy_var_121 := $memset.i8(cmdloc_dummy_var_120, $p24, 0, $i21, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_121;
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(24, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_122 := $M.0;
    call {:si_unique_call 538} cmdloc_dummy_var_123 := $memset.i8(cmdloc_dummy_var_122, $p27, 0, $i30, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_123;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(36, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i64($i37);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p35, $mul.ref($i38, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} writel(0, $p39);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(38, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i64($i44);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p42, $mul.ref($i45, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} writel(0, $p46);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    call $p11, $p12, $i13, $p14, $i15, $i16, $i17, $i10 := igbvf_clean_tx_ring_loop_$bb8($p0, $p2, $p7, $p11, $p12, $i13, $p14, $i15, $i16, $i17, $i10);
    goto $bb8_last;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i10);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 40));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} igbvf_put_txbuf($p2, $p14);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i10, 1);
    call {:si_unique_call 535} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p7);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, $i15);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb10_dummy;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;
}



const igbvf_put_txbuf: ref;

axiom igbvf_put_txbuf == $sub.ref(0, 266266);

procedure igbvf_put_txbuf($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_put_txbuf($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p41, 0);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} dev_kfree_skb_any($p37);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $0.ref);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i64($i29);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} dma_unmap_single_attrs($p23, $i25, $i30, 1, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, 0);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i19);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} dma_unmap_page($p13, $i15, $i20, 1);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 267298);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 268330);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    return;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 269362);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} netif_tx_stop_queue($p1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 270394);

procedure napi_disable($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __might_sleep(.str.7, 476, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} set_bit(1, $p1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i3 := test_and_set_bit(0, $p2);
    call {:si_unique_call 551} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} clear_bit(1, $p7);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := napi_disable_loop_$bb4($p2, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} msleep(1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i5 := test_and_set_bit(0, $p2);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const igbvf_irq_disable: ref;

axiom igbvf_irq_disable == $sub.ref(0, 271426);

procedure igbvf_irq_disable($p0: ref);
  free requires assertsPassed;



implementation igbvf_irq_disable($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(5416, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} writel($sub.i32(0, 1), $p4);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(5420, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} writel(0, $p11);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_del_timer_sync_51: ref;

axiom ldv_del_timer_sync_51 == $sub.ref(0, 272458);

procedure ldv_del_timer_sync_51($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_sync_51($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i1 := del_timer_sync($p0);
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} disable_suitable_timer_4($p0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 273490);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_reset: ref;

axiom igbvf_reset == $sub.ref(0, 274522);

procedure igbvf_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_reset($p0: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 561} $i9 := devirtbounce.2($p8, $p5);
    call {:si_unique_call 562} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p16 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 564} vslice_dummy_var_214 := devirtbounce.2($p17, $p5);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i23 := is_valid_ether_addr($p22);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 566} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, jiffies);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2608, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    call {:si_unique_call 567} {:cexpr "__len"} boogie_si_record_i64($i28);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_124 := $M.0;
    cmdloc_dummy_var_125 := $M.0;
    call {:si_unique_call 568} cmdloc_dummy_var_126 := $memcpy.i8(cmdloc_dummy_var_124, cmdloc_dummy_var_125, $p30, $p34, $i28, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_126;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    call {:si_unique_call 569} {:cexpr "__len___0"} boogie_si_record_i64($i37);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 3176)), $mul.ref(548, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.0;
    cmdloc_dummy_var_128 := $M.0;
    call {:si_unique_call 570} cmdloc_dummy_var_129 := $memcpy.i8(cmdloc_dummy_var_127, cmdloc_dummy_var_128, $p39, $p43, $i37, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_129;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_213 := dev_err.ref.ref($p13, .str.9);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 275554);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 572} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 574} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 276586);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 277618);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 278650);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 575} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 576} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_4: ref;

axiom disable_suitable_timer_4 == $sub.ref(0, 279682);

procedure disable_suitable_timer_4($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation disable_suitable_timer_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.5;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.7;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.9;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p22 := $M.8;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 580} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p16 := $M.6;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 579} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p10 := $M.4;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 578} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p4 := $M.2;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 577} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 280714);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 582} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 281746);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 282778);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 584} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 586} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 589} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} set_bit(0, $p15);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_215 := printk.ref(.str.8);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} warn_slowpath_null(.str.7, 2212);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 283810);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 1} true;
    call {:si_unique_call 592} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 593} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 1} true;
    call {:si_unique_call 594} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 595} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 596} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 597} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const igbvf_reinit_locked: ref;

axiom igbvf_reinit_locked == $sub.ref(0, 284842);

procedure igbvf_reinit_locked($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_reinit_locked($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var vslice_dummy_var_216: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} __might_sleep(.str.2, 1666, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i2 := test_and_set_bit(1, $p1);
    call {:si_unique_call 600} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} igbvf_down($p0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_216 := igbvf_up($p0);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} clear_bit(1, $p7);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i4, $i5 := igbvf_reinit_locked_loop_$bb4($p1, $i4, $i5);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} msleep(1);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $i4 := test_and_set_bit(1, $p1);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 285874);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 608} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 609} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 286906);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $p2 := dev_name($p1);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 287938);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p9 := kobject_name($p8);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 288970);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ethtool_cmd_speed_set: ref;

axiom ethtool_cmd_speed_set == $sub.ref(0, 290002);

procedure ethtool_cmd_speed_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ethtool_cmd_speed_set($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} {:cexpr "ethtool_cmd_speed_set:arg:speed"} boogie_si_record_i32($i1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i1, 16);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 44)), $mul.ref(28, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_probe: ref;

axiom igbvf_probe == $sub.ref(0, 291034);

procedure igbvf_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.42, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.29, $M.28, $M.43, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i16: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $p71: ref;
  var $p74: ref;
  var $i75: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p83: ref;
  var $i84: i64;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p92: ref;
  var $i93: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i119: i32;
  var $i120: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i1;
  var $p135: ref;
  var $i136: i64;
  var $i137: i64;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $p158: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i1;
  var $i180: i8;
  var $i181: i1;
  var $p182: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i64;
  var $p187: ref;
  var $p188: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i1;
  var $i196: i8;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $p202: ref;
  var $i203: i8;
  var $i204: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i64;
  var $p214: ref;
  var $p215: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p233: ref;
  var $p235: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p246: ref;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i121: i32;
  var $i118: i32;
  var $p265: ref;
  var $p266: ref;
  var $i109: i32;
  var $i29: i32;
  var $i25: i32;
  var $i22: i32;
  var $i12: i32;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var cmdloc_dummy_var_138: [ref]i8;
  var cmdloc_dummy_var_139: [ref]i8;
  var cmdloc_dummy_var_140: [ref]i8;
  var cmdloc_dummy_var_141: [ref]i8;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(igbvf_info_tbl, $mul.ref(0, 16)), $mul.ref($i7, 8));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.26, $p8);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i10 := pci_enable_device_mem($p0);
    call {:si_unique_call 618} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i14 := dma_set_mask_and_coherent($p13, $sub.i64(0, 1));
    call {:si_unique_call 620} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i18 := dma_set_mask_and_coherent($p17, 4294967295);
    call {:si_unique_call 622} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i23 := pci_request_regions($p0, igbvf_driver_name);
    call {:si_unique_call 624} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} pci_set_master($p0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $p26 := alloc_etherdev_mqs(2688, 1, 1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p30);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p26);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} pci_set_drvdata($p0, $p33);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p34 := netdev_priv($p26);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p26);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(416, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p9);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(2580, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(2600, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(0, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p34);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(124, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i50);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i54 := $M.27;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i55 := netif_msg_init($i54, 7);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(2540, 1));
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(60, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    $p59 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(278, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i58);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    $p62 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(272, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, $i61);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(64, 1));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    $p65 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(274, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p65, $i64);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(66, 1));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    $p68 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(276, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $i67);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(72, 1));
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    $p71 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(280, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $i70);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i80 == 1);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i84, $i88);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i89 == 1);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $p101 := ioremap($i75, $i100);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $p101);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i107, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i119 := igbvf_sw_init($p35);
    call {:si_unique_call 639} {:cexpr "err"} boogie_si_record_i32($i119);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(488, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p122, igbvf_netdev_ops);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} igbvf_set_ethtool_ops($p26);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(1048, 1));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, 1250);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p124 := pci_name($p0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} $p127 := strncpy($p126, $p124, 15);
    assume $isExternal($p127);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(936, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $u0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p129, 17180983315);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(216, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.0, $p130);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i132 := $or.i64($i131, 896);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p133, $i132);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i16, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i141 := $or.i64($i140, 65536);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p142, $i141);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i144 := $load.i64($M.0, $p143);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i145 := $or.i64($i144, 1048576);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p146, $i145);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, $p147);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i149 := $or.i64($i148, 2);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p150, $i149);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i152 := $load.i64($M.0, $p151);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i153 := $or.i64($i152, 16);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p154, $i153);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.0, $p155);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i157 := $or.i64($i156, 1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(232, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p158, $i157);
    $p161 := $add.ref($add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    call {:si_unique_call 644} $i163 := devirtbounce.2($p162, $p36);
    call {:si_unique_call 645} {:cexpr "err"} boogie_si_record_i32($i163);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i164 == 1);
    $p169 := $add.ref($add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    call {:si_unique_call 647} $i171 := devirtbounce.2($p170, $p36);
    call {:si_unique_call 648} {:cexpr "err"} boogie_si_record_i32($i171);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i172 == 1);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i179 := is_zero_ether_addr($p178);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i180 := $zext.i1.i8($i179);
    call {:si_unique_call 653} {:cexpr "tmp___3"} boogie_si_record_i8($i180);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i8.i1($i180);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.0, $p184);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i64($i185);
    call {:si_unique_call 654} {:cexpr "__len"} boogie_si_record_i64($i186);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_130 := $M.0;
    cmdloc_dummy_var_131 := $M.0;
    call {:si_unique_call 655} cmdloc_dummy_var_132 := $memcpy.i8(cmdloc_dummy_var_130, cmdloc_dummy_var_131, $p188, $p192, $i186, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_132;
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} $i195 := is_valid_ether_addr($p194);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i196 := $zext.i1.i8($i195);
    call {:si_unique_call 650} {:cexpr "tmp___4"} boogie_si_record_i8($i196);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i197 := $trunc.i8.i1($i196);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    $i198 := 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(0, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p35);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_222 := reg_timer_4($p211, igbvf_watchdog, $i212);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(256, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} __init_work($p214, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p215, 137438953408);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(256, 1)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p219 := $bitcast.ref.ref($p3);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_136 := $M.0;
    cmdloc_dummy_var_137 := $M.0;
    call {:si_unique_call 663} cmdloc_dummy_var_138 := $memcpy.i8(cmdloc_dummy_var_136, cmdloc_dummy_var_137, $p218, $p219, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_138;
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(256, 1)), $mul.ref(32, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} lockdep_init_map($p221, .str.29, $p2, 0);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(256, 1)), $mul.ref(8, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} INIT_LIST_HEAD($p223);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(256, 1)), $mul.ref(24, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p225, igbvf_reset_task);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(336, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} __init_work($p226, 0);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p227, 137438953408);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p5);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_139 := $M.0;
    cmdloc_dummy_var_140 := $M.0;
    call {:si_unique_call 667} cmdloc_dummy_var_141 := $memcpy.i8(cmdloc_dummy_var_139, cmdloc_dummy_var_140, $p230, $p231, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_141;
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(336, 1)), $mul.ref(32, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} lockdep_init_map($p233, .str.30, $p4, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(336, 1)), $mul.ref(8, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} INIT_LIST_HEAD($p235);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(336, 1)), $mul.ref(24, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p237, igbvf_watchdog_task);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.0, $p238);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p240, 1024);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.0, $p241);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p242, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, 1024);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} igbvf_reset($p35);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(124, 1));
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.0, $p246);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 2);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $p254 := $bitcast.ref.ref($p253);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p255 := strcpy($p254, .str.31);
    assume $isExternal($p255);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i256 := ldv_register_netdev_54($p26);
    call {:si_unique_call 673} {:cexpr "err"} boogie_si_record_i32($i256);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} netif_carrier_off($p26);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} netif_stop_queue($p26);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} igbvf_print_device_info($p35);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} igbvf_initialize_last_counter_stats($p35);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb62:
    assume $i257 == 1;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $p259 := $load.ref($M.0, $p258);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p260 := $bitcast.ref.ref($p259);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} kfree($p260);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p262 := $load.ref($M.0, $p261);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p263 := $bitcast.ref.ref($p262);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} kfree($p263);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i121 := $i256;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} igbvf_reset_interrupt_capability($p35);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $i118 := $i121;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.0, $p265);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} iounmap($p266);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i109 := $i118;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} ldv_free_netdev_55($p26);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i29 := $i109;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} pci_release_regions($p0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i25 := $i29;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} pci_disable_device($p0);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i12 := $i22;
    goto $bb3;

  $bb59:
    assume $i248 == 1;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(2600, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p249);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i251 := $or.i32($i250, 2);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(2600, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p252, $i251);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb56:
    assume $i199 == 1;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_221 := _dev_info.ref.ref($p200, .str.28);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} eth_hw_addr_random($p26);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i64($i203);
    call {:si_unique_call 659} {:cexpr "__len___0"} boogie_si_record_i64($i204);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($add.ref($p35, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_133 := $M.0;
    cmdloc_dummy_var_134 := $M.0;
    call {:si_unique_call 660} cmdloc_dummy_var_135 := $memcpy.i8(cmdloc_dummy_var_133, cmdloc_dummy_var_134, $p208, $p210, $i204, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_135;
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i197 == 1;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i198 := 0;
    goto $bb55;

  $bb50:
    assume $i181 == 1;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_220 := _dev_info.ref.ref($p182, .str.27);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i172 == 1;
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vslice_dummy_var_219 := _dev_info.ref.ref($p173, .str.26);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i164 == 1;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_218 := _dev_info.ref.ref($p165, .str.25);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i134 == 1;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.0, $p135);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i137 := $or.i64($i136, 32);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p26, $mul.ref(0, 3176)), $mul.ref(208, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p138, $i137);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume $i120 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i121 := $i119;
    goto $bb39;

  $bb30:
    assume $i113 == 1;
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p9, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    call {:si_unique_call 635} $i116 := devirtbounce.16($p115, $p35);
    call {:si_unique_call 636} {:cexpr "err"} boogie_si_record_i32($i116);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb32:
    assume $i117 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i118 := $i116;
    goto $bb34;

  $bb26:
    assume $i108 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i109 := $sub.i32(0, 5);
    goto $bb28;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i98 := $sub.i64($i93, $i97);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i99 := $add.i64($i98, 1);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb21;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb18;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb14;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vslice_dummy_var_217 := dev_err.ref.ref($p20, .str.24);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i22 := $i18;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;
}



const igbvf_remove: ref;

axiom igbvf_remove == $sub.ref(0, 292066);

procedure igbvf_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9, $M.42, $M.0;



implementation igbvf_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i1;
  var vslice_dummy_var_225: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p3 := netdev_priv($p2);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} set_bit(2, $p6);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(0, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_223 := ldv_del_timer_sync_56($p7);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(256, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_224 := cancel_work_sync($p9);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(336, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vslice_dummy_var_225 := cancel_work_sync($p11);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} ldv_unregister_netdev_57($p2);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} igbvf_reset_interrupt_capability($p4);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} netif_napi_del($p15);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} kfree($p18);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} kfree($p21);
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} iounmap($p23);
    $p24 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(16, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} pci_release_regions($p0);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ldv_free_netdev_58($p2);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} pci_disable_device($p0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i27 == 1;
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(16, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} iounmap($p29);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const igbvf_suspend: ref;

axiom igbvf_suspend == $sub.ref(0, 293098);

procedure igbvf_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var vslice_dummy_var_226: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p3, $i1);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p6 := netdev_priv($p5);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} netif_device_detach($p5);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i8 := netif_running($p5);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 701} {:cexpr "tmp___3"} boogie_si_record_i8($i9);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i24 := pci_save_state($p0);
    call {:si_unique_call 712} {:cexpr "retval"} boogie_si_record_i32($i24);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} pci_disable_device($p0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i26 := $i24;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i12 := constant_test_bit(1, $p11);
    call {:si_unique_call 703} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 704} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i14);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 706} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_226 := ldv__builtin_expect($i22, 0);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} igbvf_down($p7);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} igbvf_free_irq($p7);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} warn_slowpath_null(.str.2, 2539);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const igbvf_resume: ref;

axiom igbvf_resume == $sub.ref(0, 294130);

procedure igbvf_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i9: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p3 := netdev_priv($p2);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} pci_restore_state($p0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i5 := pci_enable_device_mem($p0);
    call {:si_unique_call 718} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} pci_set_master($p0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i10 := netif_running($p2);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 722} {:cexpr "tmp___3"} boogie_si_record_i8($i11);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} igbvf_reset($p4);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i15 := netif_running($p2);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 727} {:cexpr "tmp___4"} boogie_si_record_i8($i16);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} netif_device_attach($p2);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_228 := igbvf_up($p4);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i13 := igbvf_request_irq($p4);
    call {:si_unique_call 724} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_227 := dev_err.ref.ref($p7, .str.44);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i9 := $i5;
    goto $bb3;
}



const igbvf_shutdown: ref;

axiom igbvf_shutdown == $sub.ref(0, 295162);

procedure igbvf_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $M.28, $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var vslice_dummy_var_229: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.29 := $store.i32($M.29, $p2, 2);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.29, $p3);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_229 := igbvf_suspend($p0, $i4);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 296194);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 297226);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device_mem: ref;

axiom pci_enable_device_mem == $sub.ref(0, 298258);

procedure pci_enable_device_mem($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device_mem($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 733} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 734} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 299290);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_request_irq: ref;

axiom igbvf_request_irq == $sub.ref(0, 300322);

procedure igbvf_request_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $M.30, $M.34, $M.35, $M.33, $M.37, $M.38, $M.36, $M.40, $M.41, $M.39, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24;



implementation igbvf_request_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_230: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_230 := dev_err.ref.ref.i32($p10, .str.14, $i6);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i5 := igbvf_request_msix($p0);
    call {:si_unique_call 736} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 301354);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_request_msix: ref;

axiom igbvf_request_msix == $sub.ref(0, 302386);

procedure igbvf_request_msix($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.31, $M.32, $M.30, $M.34, $M.35, $M.33, $M.37, $M.38, $M.36, $M.40, $M.41, $M.39, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24;



implementation igbvf_request_msix($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $i60: i32;
  var $i113: i32;
  var cmdloc_dummy_var_142: [ref]i8;
  var cmdloc_dummy_var_143: [ref]i8;
  var cmdloc_dummy_var_144: [ref]i8;
  var cmdloc_dummy_var_145: [ref]i8;
  var cmdloc_dummy_var_146: [ref]i8;
  var cmdloc_dummy_var_147: [ref]i8;
  var cmdloc_dummy_var_148: [ref]i8;
  var cmdloc_dummy_var_149: [ref]i8;
  var cmdloc_dummy_var_150: [ref]i8;
  var cmdloc_dummy_var_151: [ref]i8;
  var cmdloc_dummy_var_152: [ref]i8;
  var cmdloc_dummy_var_153: [ref]i8;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i5 := strlen($p4);
    call {:si_unique_call 739} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i5, 10);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i64(16, 63);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_145 := $M.0;
    cmdloc_dummy_var_146 := $M.0;
    call {:si_unique_call 745} cmdloc_dummy_var_147 := $memcpy.i8(cmdloc_dummy_var_145, cmdloc_dummy_var_146, $p31, $p33, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_147;
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i64(16, 63);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_151 := $M.0;
    cmdloc_dummy_var_152 := $M.0;
    call {:si_unique_call 747} cmdloc_dummy_var_153 := $memcpy.i8(cmdloc_dummy_var_151, cmdloc_dummy_var_152, $p44, $p46, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_153;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64(0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p48, $mul.ref($i49, 8)), $mul.ref(0, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p2);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i58 := ldv_request_irq_46($i52, igbvf_intr_msix_tx, 0, $p56, $p57);
    call {:si_unique_call 743} {:cexpr "err"} boogie_si_record_i32($i58);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i61 := $add.i32(0, 1440);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i64 := $mul.i32($i63, 4);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 304)), $mul.ref(268, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $i65);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 304)), $mul.ref(260, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i70);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i74 := $add.i32(0, 1);
    call {:si_unique_call 748} {:cexpr "vector"} boogie_si_record_i32($i74);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i74);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p76, $mul.ref($i77, 8)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p2);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i86 := ldv_request_irq_47($i80, igbvf_intr_msix_rx, 0, $p84, $p85);
    call {:si_unique_call 750} {:cexpr "err"} boogie_si_record_i32($i86);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i74, 1440);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i91 := $mul.i32($i90, 4);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i32.i16($i91);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 304)), $mul.ref(268, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $i92);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 304)), $mul.ref(260, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i97);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i74, 1);
    call {:si_unique_call 751} {:cexpr "vector"} boogie_si_record_i32($i101);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i101);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p103, $mul.ref($i104, 8)), $mul.ref(0, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p2);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i111 := ldv_request_irq_48($i107, igbvf_msix_other, 0, $p109, $p110);
    call {:si_unique_call 753} {:cexpr "err"} boogie_si_record_i32($i111);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} igbvf_configure_msix($p0);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i113 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $r := $i113;
    return;

  $bb17:
    assume $i112 == 1;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i60 := $i111;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i113 := $i60;
    goto $bb20;

  $bb14:
    assume $i87 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i60 := $i86;
    goto $bb12;

  $bb10:
    assume $i59 == 1;
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb12;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_148 := $M.0;
    cmdloc_dummy_var_149 := $M.0;
    call {:si_unique_call 746} cmdloc_dummy_var_150 := $memcpy.i8(cmdloc_dummy_var_148, cmdloc_dummy_var_149, $p38, $p40, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_150;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_142 := $M.0;
    cmdloc_dummy_var_143 := $M.0;
    call {:si_unique_call 744} cmdloc_dummy_var_144 := $memcpy.i8(cmdloc_dummy_var_142, cmdloc_dummy_var_143, $p25, $p27, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_144;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} vslice_dummy_var_231 := sprintf.ref.ref.ref($p10, .str.15, $p12);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 304)), $mul.ref(232, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_232 := sprintf.ref.ref.ref($p17, .str.16, $p19);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 303418);

procedure strlen($p0: ref) returns ($r: i64);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 304450);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const igbvf_intr_msix_tx: ref;

axiom igbvf_intr_msix_tx == $sub.ref(0, 305482);

procedure igbvf_intr_msix_tx($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation igbvf_intr_msix_tx($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "igbvf_intr_msix_tx:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p3 := netdev_priv($p2);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1072, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1076, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i25 := igbvf_clean_tx_irq($p7);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 759} {:cexpr "tmp___0"} boogie_si_record_i8($i26);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    $p37 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(5412, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} writel($i36, $p39);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(5408, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} writel($i31, $p34);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(260, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 304)), $mul.ref(268, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i64($i17);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p15, $mul.ref($i18, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} writel($i12, $p19);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_request_irq_46: ref;

axiom ldv_request_irq_46 == $sub.ref(0, 306514);

procedure ldv_request_irq_46($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.30, $M.34, $M.35, $M.33, $M.37, $M.38, $M.36, $M.40, $M.41, $M.39;



implementation ldv_request_irq_46($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "ldv_request_irq_46:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 763} {:cexpr "ldv_request_irq_46:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 765} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i6 := reg_check_3($p1);
    call {:si_unique_call 767} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} activate_suitable_irq_3($i0, $p4);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const igbvf_intr_msix_rx: ref;

axiom igbvf_intr_msix_rx == $sub.ref(0, 307546);

procedure igbvf_intr_msix_rx($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation igbvf_intr_msix_rx($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $i34: i8;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} {:cexpr "igbvf_intr_msix_rx:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $p3 := netdev_priv($p2);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(2564, 1));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(2564, 1));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i33 := napi_schedule_prep($p32);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i33);
    call {:si_unique_call 773} {:cexpr "tmp___0"} boogie_si_record_i8($i34);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i34);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1080, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1084, 1));
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} __napi_schedule($p40);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 304)), $mul.ref(260, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 304)), $mul.ref(268, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i24);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p20, $mul.ref($i25, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} writel($i17, $p26);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 304)), $mul.ref(272, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, 0);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_request_irq_47: ref;

axiom ldv_request_irq_47 == $sub.ref(0, 308578);

procedure ldv_request_irq_47($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.30, $M.34, $M.35, $M.33, $M.37, $M.38, $M.36, $M.40, $M.41, $M.39;



implementation ldv_request_irq_47($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} {:cexpr "ldv_request_irq_47:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 776} {:cexpr "ldv_request_irq_47:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 778} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i6 := reg_check_3($p1);
    call {:si_unique_call 780} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} activate_suitable_irq_3($i0, $p4);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const igbvf_msix_other: ref;

axiom igbvf_msix_other == $sub.ref(0, 309610);

procedure igbvf_msix_other($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation igbvf_msix_other($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var vslice_dummy_var_233: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} {:cexpr "igbvf_msix_other:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p3 := netdev_priv($p2);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(2568, 1));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(2568, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} netif_carrier_off($p2);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(132, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 1);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i13 := constant_test_bit(2, $p12);
    call {:si_unique_call 786} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(2560, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(5412, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} writel($i20, $p23);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(0, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, jiffies);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 1);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_233 := ldv_mod_timer_45($p15, $i17);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_request_irq_48: ref;

axiom ldv_request_irq_48 == $sub.ref(0, 310642);

procedure ldv_request_irq_48($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.30, $M.34, $M.35, $M.33, $M.37, $M.38, $M.36, $M.40, $M.41, $M.39;



implementation ldv_request_irq_48($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "ldv_request_irq_48:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 790} {:cexpr "ldv_request_irq_48:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 792} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i6 := reg_check_3($p1);
    call {:si_unique_call 794} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} activate_suitable_irq_3($i0, $p4);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 311674);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 797} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 799} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_3: ref;

axiom reg_check_3 == $sub.ref(0, 312706);

procedure reg_check_3($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_3($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(igbvf_msix_other));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_3: ref;

axiom activate_suitable_irq_3 == $sub.ref(0, 313738);

procedure activate_suitable_irq_3($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.30, $M.34, $M.35, $M.33, $M.37, $M.38, $M.36, $M.40, $M.41, $M.39;



implementation activate_suitable_irq_3($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} {:cexpr "activate_suitable_irq_3:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i2 := $M.30;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.33;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.36;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.39;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.40 := $i0;
    call {:si_unique_call 807} {:cexpr "ldv_irq_line_3_3"} boogie_si_record_i32($i0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $M.41 := $p1;
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 808} {:cexpr "ldv_irq_3_3"} boogie_si_record_i32(1);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $M.37 := $i0;
    call {:si_unique_call 805} {:cexpr "ldv_irq_line_3_2"} boogie_si_record_i32($i0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.38 := $p1;
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 806} {:cexpr "ldv_irq_3_2"} boogie_si_record_i32(1);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.34 := $i0;
    call {:si_unique_call 803} {:cexpr "ldv_irq_line_3_1"} boogie_si_record_i32($i0);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $M.35 := $p1;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 804} {:cexpr "ldv_irq_3_1"} boogie_si_record_i32(1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.31 := $i0;
    call {:si_unique_call 801} {:cexpr "ldv_irq_line_3_0"} boogie_si_record_i32($i0);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.32 := $p1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.30 := 1;
    call {:si_unique_call 802} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32(1);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 314770);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 809} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 810} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 811} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 812} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mod_timer_45: ref;

axiom ldv_mod_timer_45 == $sub.ref(0, 315802);

procedure ldv_mod_timer_45($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation ldv_mod_timer_45($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} {:cexpr "ldv_mod_timer_45:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 815} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} activate_pending_timer_4($p0, $i1, 1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 316834);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule_prep($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i1 := napi_disable_pending($p0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 818} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i7 := test_and_set_bit(0, $p6);
    call {:si_unique_call 820} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 317866);

procedure __napi_schedule($p0: ref);
  free requires assertsPassed;



implementation __napi_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 318898);

procedure napi_disable_pending($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 822} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const igbvf_clean_tx_irq: ref;

axiom igbvf_clean_tx_irq == $sub.ref(0, 319930);

procedure igbvf_clean_tx_irq($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation igbvf_clean_tx_irq($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $i69: i8;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i16;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i125: i16;
  var $p126: ref;
  var $i127: i1;
  var $i128: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i132: i1;
  var $i133: i8;
  var $i134: i1;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $i147: i1;
  var $i148: i8;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p158: ref;
  var $i159: i64;
  var $i160: i64;
  var $i161: i64;
  var $p163: ref;
  var $p165: ref;
  var $i166: i64;
  var $i167: i64;
  var $i168: i64;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    call {:si_unique_call 823} {:cexpr "i"} boogie_si_record_i32($i7);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i7);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 40));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 40)), $mul.ref(16, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i18, $i19, $i20, $i21 := 0, 0, $i7, 0;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p22, $i23, $i24, $p25, $i26, $i27 := $p11, 0, $i7, $p15, 0, 0;
    goto $bb4;

  $bb4:
    call $i28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p22, $i23, $i24, $p25, $i26, $i27, $p44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $p54, $p55, $p61, $p62, $i63, $p64, $p65, $i66, $i67, $i68, $i69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $p99, $i100, $i101, $i102, $p103, $p104, $i105, $p106, $i107, $i108, $p56, $i57, $i58, $i59, $i60, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $i121, $i122, $i123, $i124 := igbvf_clean_tx_irq_loop_$bb4($p0, $p2, $i28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p22, $i23, $i24, $p25, $i26, $i27, $p44, $p45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $p53, $p54, $p55, $p61, $p62, $i63, $p64, $p65, $i66, $i67, $i68, $i69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $p99, $i100, $i101, $i102, $p103, $p104, $i105, $p106, $i107, $i108, $p56, $i57, $i58, $i59, $i60, $i109, $i110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $i121, $i122, $i123, $i124);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p25);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i49, $i50, $i51, $i52 := $i27, $i26, $i24, $i23;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $0.ref);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $p56, $i57, $i58, $i59, $i60 := $p22, $i23, $i24, $i26, $i27;
    goto $bb13;

  $bb13:
    call $p61, $p62, $i63, $p64, $p65, $i66, $i67, $i68, $i69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $p99, $i100, $i101, $i102, $p103, $p104, $i105, $p106, $i107, $i108, $p56, $i57, $i58, $i59, $i60, $i109, $i110, $i111, $i112, $p113 := igbvf_clean_tx_irq_loop_$bb13($p0, $p2, $p25, $p61, $p62, $i63, $p64, $p65, $i66, $i67, $i68, $i69, $p70, $p71, $i72, $i73, $p74, $p75, $p76, $i77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $p89, $i90, $i91, $i92, $i93, $i94, $i95, $p96, $p97, $i98, $p99, $i100, $i101, $i102, $p103, $p104, $i105, $p106, $i107, $i108, $p56, $i57, $i58, $i59, $i60, $i109, $i110, $i111, $i112, $p113);
    goto $bb13_last;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i58);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 16));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p25);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i66, $i67);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    call {:si_unique_call 826} {:cexpr "cleaned"} boogie_si_record_i8($i69);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p56, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i94, $i95 := $i60, $i59;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} igbvf_put_txbuf($p2, $p56);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p65);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, 0);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i58, 1);
    call {:si_unique_call 836} {:cexpr "i"} boogie_si_record_i32($i98);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, $i98);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $i98;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i105 := $zext.i32.i64($i102);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p104, $mul.ref($i105, 40));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i57, 1);
    call {:si_unique_call 837} {:cexpr "count"} boogie_si_record_i32($i107);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i8.i1($i69);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i109, $i110, $i111, $i112, $p113 := $i94, $i95, $i102, $i107, $p106;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    $p56, $i57, $i58, $i59, $i60 := $p106, $i107, $i102, $i95, $i94;
    goto $bb25_dummy;

  $bb24:
    assume $i108 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i120 := $ugt.i32($i119, $i112);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i28, $i29, $p30, $i31, $i32, $p33, $i121, $i122, $i123, $i124 := $i109, $i110, $p117, $i111, $i112, $p113, $i109, $i110, $i111, $i112;
    assume true;
    goto $bb5, $bb27;

  $bb27:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := $i121, $i122, $i123, $i124;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i32.i16($i42);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(34, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p126, $i125);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i43, 0);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 825} {:cexpr "tmp___5"} boogie_si_record_i64($i130);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i139 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1192, 1)), $mul.ref(24, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i159 := $load.i64($M.0, $p158);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i160 := $zext.i32.i64($i41);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i161 := $add.i64($i159, $i160);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1192, 1)), $mul.ref(24, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p163, $i161);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1192, 1)), $mul.ref(8, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i166 := $load.i64($M.0, $p165);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i167 := $zext.i32.i64($i40);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i168 := $add.i64($i166, $i167);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1192, 1)), $mul.ref(8, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p170, $i168);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i173 := $ugt.i32($i172, $i43);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $r := $i173;
    return;

  $bb35:
    assume $i140 == 1;
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i141 := igbvf_desc_unused($p0);
    call {:si_unique_call 843} {:cexpr "tmp___9"} boogie_si_record_i32($i141);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i142 := $sgt.i32($i141, 31);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i32($i142);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i143);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 845} {:cexpr "tmp___10"} boogie_si_record_i64($i145);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb37:
    assume $i146 == 1;
    call {:si_unique_call 846} devirtbounce.5(0);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i147 := netif_queue_stopped($p4);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i148 := $zext.i1.i8($i147);
    call {:si_unique_call 848} {:cexpr "tmp___3"} boogie_si_record_i8($i148);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i8.i1($i148);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i149 == 1;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i151 := constant_test_bit(2, $p150);
    call {:si_unique_call 850} {:cexpr "tmp___4"} boogie_si_record_i32($i151);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i152 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} netif_wake_queue($p4);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1056, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i154, 1);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1056, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb29:
    assume $i131 == 1;
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i132 := netif_carrier_ok($p4);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i8($i132);
    call {:si_unique_call 839} {:cexpr "tmp___6"} boogie_si_record_i8($i133);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i133);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i135 := $zext.i1.i64($i134);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i136 := ldv__builtin_expect($i135, 0);
    call {:si_unique_call 841} {:cexpr "tmp___7"} boogie_si_record_i64($i136);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i139 := $i138;
    goto $bb34;

  $bb31:
    assume $i137 == 1;
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i138 := 1;
    goto $bb33;

  $bb5:
    assume $i120 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p30);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i34, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i36, $i37, $i38, $i39 := $i28, $i29, $i31, $i32;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $p22, $i23, $i24, $p25, $i26, $i27 := $p33, $i32, $i31, $p30, $i29, $i28;
    goto $bb7_dummy;

  $bb6:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i18, $i19, $i20, $i21 := $i36, $i37, $i38, $i39;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := $i18, $i19, $i20, $i21;
    goto $bb8;

  $bb21:
    assume $i101 == 1;
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i102 := 0;
    goto $bb23;

  $bb15:
    assume $i73 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p74 := skb_end_pointer($p71);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i85 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i86 := skb_headlen($p71);
    call {:si_unique_call 831} {:cexpr "tmp___2"} boogie_si_record_i32($i86);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32($i85, 1);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i88 := $mul.i32($i87, $i86);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p71, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i88, $i90);
    call {:si_unique_call 832} {:cexpr "bytecount"} boogie_si_record_i32($i91);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i60, $i85);
    call {:si_unique_call 833} {:cexpr "total_packets"} boogie_si_record_i32($i92);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i59, $i91);
    call {:si_unique_call 834} {:cexpr "total_bytes"} boogie_si_record_i32($i93);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i94, $i95 := $i92, $i93;
    goto $bb20;

  $bb17:
    assume $i79 == 1;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p80 := skb_end_pointer($p71);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i84 := $zext.i16.i32($i83);
    call {:si_unique_call 829} {:cexpr "segs"} boogie_si_record_i32($i84);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i85 := $i84;
    goto $bb19;

  $bb10:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i40, $i41, $i42, $i43 := $i49, $i50, $i51, $i52;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb25_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4337;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 320962);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 321994);

procedure skb_headlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 323026);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_carrier_ok($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i2 := constant_test_bit(2, $p1);
    call {:si_unique_call 853} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 324058);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 856} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 325090);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} netif_tx_wake_queue($p1);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 326122);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation netif_tx_wake_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i2 := test_and_clear_bit(0, $p1);
    call {:si_unique_call 860} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(8, 1));
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} __netif_schedule($p5);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 327154);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 863} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 864} devirtbounce.3(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 328186);

procedure __netif_schedule($p0: ref);
  free requires assertsPassed;



implementation __netif_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 329218);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 866} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 330250);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 331282);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_free_irq: ref;

axiom igbvf_free_irq == $sub.ref(0, 332314);

procedure igbvf_free_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.30, $M.33, $M.36, $M.39;



implementation igbvf_free_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    call $p8, $p9, $i10, $p12, $i13, $p14, $i15, $i16, $i7 := igbvf_free_irq_loop_$bb3($p0, $p2, $p8, $p9, $i10, $p12, $i13, $p14, $i15, $i16, $i7);
    goto $bb3_last;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 8)), $mul.ref(0, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_free_irq_49($i13, $p14);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i7, 1);
    call {:si_unique_call 868} {:cexpr "vector"} boogie_si_record_i32($i15);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i16 := $sle.i32($i15, 2);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i15;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4532;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 333346);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 1} true;
    call {:si_unique_call 869} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 870} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 334378);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_49: ref;

axiom ldv_free_irq_49 == $sub.ref(0, 335410);

procedure ldv_free_irq_49($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.30, $M.33, $M.36, $M.39;



implementation ldv_free_irq_49($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} {:cexpr "ldv_free_irq_49:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} free_irq($i0, $p1);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} disable_suitable_irq_3($i0, $p1);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 336442);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_3: ref;

axiom disable_suitable_irq_3 == $sub.ref(0, 337474);

procedure disable_suitable_irq_3($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.30, $M.33, $M.36, $M.39;



implementation disable_suitable_irq_3($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} {:cexpr "disable_suitable_irq_3:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i2 := $M.30;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.33;
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.36;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.39;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i16 := $M.40;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 879} {:cexpr "ldv_irq_3_3"} boogie_si_record_i32(0);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i12 := $M.37;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 878} {:cexpr "ldv_irq_3_2"} boogie_si_record_i32(0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i8 := $M.34;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 877} {:cexpr "ldv_irq_3_1"} boogie_si_record_i32(0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i4 := $M.31;
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.30 := 0;
    call {:si_unique_call 876} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32(0);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_del_timer_sync_56: ref;

axiom ldv_del_timer_sync_56 == $sub.ref(0, 338506);

procedure ldv_del_timer_sync_56($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation ldv_del_timer_sync_56($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i1 := del_timer_sync($p0);
    call {:si_unique_call 881} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} disable_suitable_timer_4($p0);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 339538);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 884} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_unregister_netdev_57: ref;

axiom ldv_unregister_netdev_57 == $sub.ref(0, 340570);

procedure ldv_unregister_netdev_57($p0: ref);
  free requires assertsPassed;
  modifies $M.42;



implementation ldv_unregister_netdev_57($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} unregister_netdev($p0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 886} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_reset_interrupt_capability: ref;

axiom igbvf_reset_interrupt_capability == $sub.ref(0, 341602);

procedure igbvf_reset_interrupt_capability($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_reset_interrupt_capability($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} pci_disable_msix($p6);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} kfree($p9);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_napi_del: ref;

axiom netif_napi_del == $sub.ref(0, 342634);

procedure netif_napi_del($p0: ref);
  free requires assertsPassed;



implementation netif_napi_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    return;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 343666);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 344698);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_58: ref;

axiom ldv_free_netdev_58 == $sub.ref(0, 345730);

procedure ldv_free_netdev_58($p0: ref);
  free requires assertsPassed;
  modifies $M.42;



implementation ldv_free_netdev_58($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} free_netdev($p0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 890} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 346762);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 347794);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 348826);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask_and_coherent: ref;

axiom dma_set_mask_and_coherent == $sub.ref(0, 349858);

procedure dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_234: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} {:cexpr "dma_set_mask_and_coherent:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i2 := dma_set_mask($p0, $i1);
    call {:si_unique_call 893} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} vslice_dummy_var_234 := dma_set_coherent_mask($p0, $i1);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 350890);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 351922);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 898} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 899} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p3 := external_alloc();
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 352954);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} dev_set_drvdata($p2, $p1);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    return;
}



const netif_msg_init: ref;

axiom netif_msg_init == $sub.ref(0, 353986);

procedure netif_msg_init($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netif_msg_init($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} {:cexpr "netif_msg_init:arg:debug_value"} boogie_si_record_i32($i0);
    call {:si_unique_call 903} {:cexpr "netif_msg_init:arg:default_msg_enable_bits"} boogie_si_record_i32($i1);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i0, 31);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32(1, $i0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i5 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 355018);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 905} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const igbvf_sw_init: ref;

axiom igbvf_sw_init == $sub.ref(0, 356050);

procedure igbvf_sw_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.28, $CurrAddr, $M.3, $M.5, $M.7, $M.9, $M.42, $M.2, $M.4, $M.6, $M.8, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_sw_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i31: i32;
  var vslice_dummy_var_235: ref;
  var vslice_dummy_var_236: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1522);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, 18);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1164, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1168, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 64);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1064, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 8);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1068, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 32);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1120, 1));
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1124, 1));
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 8);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1040, 1));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 3);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1044, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 488);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(416, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    call {:si_unique_call 909} devirtbounce.17($p21, $p22);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    call {:si_unique_call 910} $i29 := devirtbounce.2($p27, $p28);
    call {:si_unique_call 911} {:cexpr "rc"} boogie_si_record_i32($i29);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    call {:si_unique_call 912} $i38 := devirtbounce.2($p36, $p37);
    call {:si_unique_call 913} {:cexpr "rc"} boogie_si_record_i32($i38);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} igbvf_set_interrupt_capability($p0);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i40 := igbvf_alloc_queues($p0);
    call {:si_unique_call 916} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(960, 1));
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_235 := spinlock_check($p42);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(960, 1)), $mul.ref(0, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} __raw_spin_lock_init($p46, .str.32, $p1);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} igbvf_irq_disable($p0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1376, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} vslice_dummy_var_236 := spinlock_check($p47);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1376, 1)), $mul.ref(0, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} __raw_spin_lock_init($p51, .str.33, $p2);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} set_bit(2, $p52);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i31 := $i38;
    goto $bb3;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb3;
}



const igbvf_set_ethtool_ops: ref;

axiom igbvf_set_ethtool_ops == $sub.ref(0, 357082);

procedure igbvf_set_ethtool_ops($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_set_ethtool_ops($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(496, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, igbvf_ethtool_ops);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    return;
}



const strncpy: ref;

axiom strncpy == $sub.ref(0, 358114);

procedure strncpy($p0: ref, $p1: ref, $i2: i64) returns ($r: ref);



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 359146);

procedure _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 1} true;
    call {:si_unique_call 923} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 924} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 1} true;
    call {:si_unique_call 925} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 926} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const eth_hw_addr_random: ref;

axiom eth_hw_addr_random == $sub.ref(0, 360178);

procedure eth_hw_addr_random($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_hw_addr_random($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(580, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 1);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} eth_random_addr($p3);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_watchdog: ref;

axiom igbvf_watchdog == $sub.ref(0, 361210);

procedure igbvf_watchdog($i0: i64);
  free requires assertsPassed;



implementation igbvf_watchdog($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_237: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} {:cexpr "igbvf_watchdog:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2616)), $mul.ref(336, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vslice_dummy_var_237 := schedule_work($p2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    return;
}



const reg_timer_4: ref;

axiom reg_timer_4 == $sub.ref(0, 362242);

procedure reg_timer_4($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation reg_timer_4($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} {:cexpr "reg_timer_4:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(igbvf_watchdog));
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} activate_suitable_timer_4($p0, $i2);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 363274);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 364306);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 365338);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_reset_task: ref;

axiom igbvf_reset_task == $sub.ref(0, 366370);

procedure igbvf_reset_task($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_reset_task($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 256), 2616));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} igbvf_reinit_locked($p2);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_watchdog_task: ref;

axiom igbvf_watchdog_task == $sub.ref(0, 367402);

procedure igbvf_watchdog_task($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_watchdog_task($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i8;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i1;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i1;
  var vslice_dummy_var_241: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 336), 2616));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1176, 1));
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1048, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i10 := igbvf_has_link($p2);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 940} {:cexpr "tmp"} boogie_si_record_i8($i11);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 941} {:cexpr "link"} boogie_si_record_i32($i13);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $i27 := netif_carrier_ok($p4);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i8($i27);
    call {:si_unique_call 945} {:cexpr "tmp___2"} boogie_si_record_i8($i28);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i36 := netif_carrier_ok($p4);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 951} {:cexpr "tmp___4"} boogie_si_record_i8($i37);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i38 == 1);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i39 := igbvf_desc_unused($p8);
    call {:si_unique_call 957} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i43 := $ult.i32($i40, $i42);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 958} {:cexpr "tx_pending"} boogie_si_record_i32($i44);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1112, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 304)), $mul.ref(256, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(5408, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} writel($i55, $p58);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1032, 1));
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i60 := constant_test_bit(2, $p59);
    call {:si_unique_call 961} {:cexpr "tmp___6"} boogie_si_record_i32($i60);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, jiffies);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 500);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i64 := round_jiffies($i63);
    call {:si_unique_call 964} {:cexpr "tmp___5"} boogie_si_record_i64($i64);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(0, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_241 := ldv_mod_timer_53($p65, $i64);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1088, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1088, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i48);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(256, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} vslice_dummy_var_240 := schedule_work($p50);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i38 == 1;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} igbvf_update_stats($p2);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(950, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, 0);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(952, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, 0);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1184, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_239 := _dev_info.ref.ref($p34, .str.37);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} netif_carrier_off($p4);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} netif_stop_queue($p4);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i15 := netif_carrier_ok($p4);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i8($i15);
    call {:si_unique_call 943} {:cexpr "tmp___0"} boogie_si_record_i8($i16);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    $p21 := $add.ref($add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(1448, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(950, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 336), 2616)), $mul.ref(952, 1));
    call {:si_unique_call 946} vslice_dummy_var_238 := devirtbounce.18($p22, $p23, $p24, $p25);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} igbvf_print_link_info($p2);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} netif_carrier_on($p4);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} netif_wake_queue($p4);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb5;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 368434);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const ldv_register_netdev_54: ref;

axiom ldv_register_netdev_54 == $sub.ref(0, 369466);

procedure ldv_register_netdev_54($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.43, $M.0, $CurrAddr;



implementation ldv_register_netdev_54($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i1 := register_netdev($p0);
    call {:si_unique_call 967} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 968} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} ldv_net_device_ops_7();
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const igbvf_print_device_info: ref;

axiom igbvf_print_device_info == $sub.ref(0, 370498);

procedure igbvf_print_device_info($p0: ref);
  free requires assertsPassed;



implementation igbvf_print_device_info($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(124, 1));
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} vslice_dummy_var_243 := _dev_info.ref.ref($p12, .str.42);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_244 := _dev_info.ref.ref.ref($p14, .str.43, $p16);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_242 := _dev_info.ref.ref($p10, .str.41);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const igbvf_initialize_last_counter_stats: ref;

axiom igbvf_initialize_last_counter_stats == $sub.ref(0, 371530);

procedure igbvf_initialize_last_counter_stats($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_initialize_last_counter_stats($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $p118: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(3856, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i5 := readl($p4);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(72, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i5);
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(3864, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i11 := readl($p10);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(80, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(3860, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i17 := readl($p16);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(76, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i17);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(3892, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i23 := readl($p22);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(84, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i23);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(3900, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i29 := readl($p28);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(88, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i29);
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p33, $mul.ref(3920, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i35 := readl($p34);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(92, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(3908, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i41 := readl($p40);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(96, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p45, $mul.ref(3912, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i47 := readl($p46);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(100, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i47);
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(3904, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i53 := readl($p52);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(104, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(3856, 1));
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i59 := readl($p58);
    call {:si_unique_call 983} {:cexpr "tmp"} boogie_si_record_i32($i59);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(0, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i60);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(3864, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i66 := readl($p65);
    call {:si_unique_call 985} {:cexpr "tmp___0"} boogie_si_record_i32($i66);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(16, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p69, $i67);
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(3860, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i73 := readl($p72);
    call {:si_unique_call 987} {:cexpr "tmp___1"} boogie_si_record_i32($i73);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(8, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i74);
    $p77 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(3892, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i80 := readl($p79);
    call {:si_unique_call 989} {:cexpr "tmp___2"} boogie_si_record_i32($i80);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(24, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i81);
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(3900, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i87 := readl($p86);
    call {:si_unique_call 991} {:cexpr "tmp___3"} boogie_si_record_i32($i87);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(32, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p90, $i88);
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(3920, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i94 := readl($p93);
    call {:si_unique_call 993} {:cexpr "tmp___4"} boogie_si_record_i32($i94);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(40, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, $i95);
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref(3908, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $i101 := readl($p100);
    call {:si_unique_call 995} {:cexpr "tmp___5"} boogie_si_record_i32($i101);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i101);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(48, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p104, $i102);
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p106, $mul.ref(3912, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i108 := readl($p107);
    call {:si_unique_call 997} {:cexpr "tmp___6"} boogie_si_record_i32($i108);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i109 := $zext.i32.i64($i108);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(56, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p111, $i109);
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref(3904, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i115 := readl($p114);
    call {:si_unique_call 999} {:cexpr "tmp___7"} boogie_si_record_i32($i115);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i116 := $zext.i32.i64($i115);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1736, 1)), $mul.ref(64, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p118, $i116);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_55: ref;

axiom ldv_free_netdev_55 == $sub.ref(0, 372562);

procedure ldv_free_netdev_55($p0: ref);
  free requires assertsPassed;
  modifies $M.42;



implementation ldv_free_netdev_55($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} free_netdev($p0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1001} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 373594);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1002} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1003} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_7: ref;

axiom ldv_net_device_ops_7 == $sub.ref(0, 374626);

procedure ldv_net_device_ops_7();
  free requires assertsPassed;
  modifies $M.43, $M.0, $CurrAddr;



implementation ldv_net_device_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p0 := ldv_zalloc(3264);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 375658);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1005} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1007} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1008} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p4 := calloc(1, $i0);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} __VERIFIER_assume($i7);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const igbvf_has_link: ref;

axiom igbvf_has_link == $sub.ref(0, 376690);

procedure igbvf_has_link($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_has_link($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i28: i1;
  var $i5: i1;
  var vslice_dummy_var_245: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i3 := constant_test_bit(2, $p2);
    call {:si_unique_call 1012} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    $p8 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 1013} $i10 := devirtbounce.2($p9, $p1);
    call {:si_unique_call 1014} {:cexpr "ret_val"} boogie_si_record_i32($i10);
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(132, 1));
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i17 := $xor.i1($i16, 1);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 1015} {:cexpr "link_active"} boogie_si_record_i8($i18);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i10, 0);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i18);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i5 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2608, 1));
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, jiffies);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i21, $i22);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 2500);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i25 := $slt.i64($i24, 0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(256, 1));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} vslice_dummy_var_245 := schedule_work($p26);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const igbvf_print_link_info: ref;

axiom igbvf_print_link_info == $sub.ref(0, 377722);

procedure igbvf_print_link_info($p0: ref);
  free requires assertsPassed;



implementation igbvf_print_link_info($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(950, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(952, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p11 := (if $i10 == 1 then .str.39 else .str.40);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} vslice_dummy_var_246 := _dev_info.ref.ref.i32.ref($p3, .str.38, $i6, $p11);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 378754);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 379786);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i2 := queue_work($p1, $p0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1019} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const round_jiffies: ref;

axiom round_jiffies == $sub.ref(0, 380818);

procedure round_jiffies($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation round_jiffies($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1020} {:cexpr "round_jiffies:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1022} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mod_timer_53: ref;

axiom ldv_mod_timer_53 == $sub.ref(0, 381850);

procedure ldv_mod_timer_53($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation ldv_mod_timer_53($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} {:cexpr "ldv_mod_timer_53:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1025} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} activate_pending_timer_4($p0, $i1, 1);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 382882);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 383914);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1030} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1031} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 384946);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} get_random_bytes($p0, 6);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 385978);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_set_interrupt_capability: ref;

axiom igbvf_set_interrupt_capability == $sub.ref(0, 387010);

procedure igbvf_set_interrupt_capability($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation igbvf_set_interrupt_capability($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var vslice_dummy_var_247: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p1 := kcalloc(3, 8, 208);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} vslice_dummy_var_247 := dev_err.ref.ref($p20, .str.34);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} igbvf_reset_interrupt_capability($p0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p10, 0);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref(1, 8)), $mul.ref(4, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 1);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p27, $mul.ref(2, 8)), $mul.ref(4, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, 2);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i15 := pci_enable_msix_range($p12, $p14, 3, 3);
    call {:si_unique_call 1036} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb7;
}



const igbvf_alloc_queues: ref;

axiom igbvf_alloc_queues == $sub.ref(0, 388042);

procedure igbvf_alloc_queues($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation igbvf_alloc_queues($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p3 := kzalloc(304, 208);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p3);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p11 := kzalloc(304, 208);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p11);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} netif_napi_add($p2, $p23, igbvf_poll, 64);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} kfree($p20);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 389074);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 390106);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 391138);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1044} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const igbvf_poll: ref;

axiom igbvf_poll == $sub.ref(0, 392170);

procedure igbvf_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 393202);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "netif_napi_add:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_clean_rx_irq: ref;

axiom igbvf_clean_rx_irq == $sub.ref(0, 394234);

procedure igbvf_clean_rx_irq($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 395266);

procedure napi_complete($p0: ref);



const igbvf_set_itr: ref;

axiom igbvf_set_itr == $sub.ref(0, 396298);

procedure igbvf_set_itr($p0: ref);



const igbvf_update_itr: ref;

axiom igbvf_update_itr == $sub.ref(0, 397330);

procedure igbvf_update_itr($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const igbvf_range_to_itr: ref;

axiom igbvf_range_to_itr == $sub.ref(0, 398362);

procedure igbvf_range_to_itr($i0: i32) returns ($r: i32);



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 399394);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const skb_put: ref;

axiom skb_put == $sub.ref(0, 400426);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const skb_fill_page_desc: ref;

axiom skb_fill_page_desc == $sub.ref(0, 401458);

procedure skb_fill_page_desc($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32);



const page_count: ref;

axiom page_count == $sub.ref(0, 402490);

procedure page_count($p0: ref) returns ($r: i32);



const get_page: ref;

axiom get_page == $sub.ref(0, 403522);

procedure get_page($p0: ref);



const dev_kfree_skb_irq: ref;

axiom dev_kfree_skb_irq == $sub.ref(0, 404554);

procedure dev_kfree_skb_irq($p0: ref);



const igbvf_rx_checksum_adv: ref;

axiom igbvf_rx_checksum_adv == $sub.ref(0, 405586);

procedure igbvf_rx_checksum_adv($p0: ref, $i1: i32, $p2: ref);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 406618);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const igbvf_receive_skb: ref;

axiom igbvf_receive_skb == $sub.ref(0, 407650);

procedure igbvf_receive_skb($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i16);



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 408682);

procedure __fswab16($i0: i16) returns ($r: i16);



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 409714);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);



const __vlan_hwaccel_put_tag: ref;

axiom __vlan_hwaccel_put_tag == $sub.ref(0, 410746);

procedure __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);



const napi_gro_receive: ref;

axiom napi_gro_receive == $sub.ref(0, 411778);

procedure napi_gro_receive($p0: ref, $p1: ref) returns ($r: i32);



const skb_checksum_none_assert: ref;

axiom skb_checksum_none_assert == $sub.ref(0, 412810);

procedure skb_checksum_none_assert($p0: ref);



const __dev_kfree_skb_irq: ref;

axiom __dev_kfree_skb_irq == $sub.ref(0, 413842);

procedure __dev_kfree_skb_irq($p0: ref, $i1: i32);



const PageTail: ref;

axiom PageTail == $sub.ref(0, 414874);

procedure PageTail($p0: ref) returns ($r: i32);



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 415906);

procedure __get_page_tail($p0: ref) returns ($r: i1);



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 416938);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dump_page: ref;

axiom dump_page == $sub.ref(0, 417970);

procedure dump_page($p0: ref, $p1: ref);



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 419002);

procedure atomic_inc($p0: ref);



const compound_head: ref;

axiom compound_head == $sub.ref(0, 420034);

procedure compound_head($p0: ref) returns ($r: ref);



const compound_head_by_tail: ref;

axiom compound_head_by_tail == $sub.ref(0, 421066);

procedure compound_head_by_tail($p0: ref) returns ($r: ref);



const __skb_fill_page_desc: ref;

axiom __skb_fill_page_desc == $sub.ref(0, 422098);

procedure __skb_fill_page_desc($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32);



const skb_frag_size_set: ref;

axiom skb_frag_size_set == $sub.ref(0, 423130);

procedure skb_frag_size_set($p0: ref, $i1: i32);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 424162);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1048} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 425194);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1051} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1052} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_enable_msix_range: ref;

axiom pci_enable_msix_range == $sub.ref(0, 426226);

procedure pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1054} {:cexpr "pci_enable_msix_range:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1055} {:cexpr "pci_enable_msix_range:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1056} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1057} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 427258);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 1059} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $p2 := external_alloc();
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 428290);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 429322);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1061} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1062} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1063} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 430354);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 1066} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 431386);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1067} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1068} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1069} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const igbvf_io_error_detected: ref;

axiom igbvf_io_error_detected == $sub.ref(0, 432418);

procedure igbvf_io_error_detected($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $CurrAddr, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_io_error_detected($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} {:cexpr "igbvf_io_error_detected:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p2 := pci_get_drvdata($p0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $p4 := netdev_priv($p3);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} netif_device_detach($p3);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 3);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i8 := netif_running($p3);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1075} {:cexpr "tmp___1"} boogie_si_record_i8($i9);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} pci_disable_device($p0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} igbvf_down($p5);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i7 := 4;
    goto $bb3;
}



const igbvf_io_slot_reset: ref;

axiom igbvf_io_slot_reset == $sub.ref(0, 433450);

procedure igbvf_io_slot_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_io_slot_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i9: i32;
  var vslice_dummy_var_248: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $p3 := netdev_priv($p2);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i5 := pci_enable_device_mem($p0);
    call {:si_unique_call 1081} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} pci_set_master($p0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} igbvf_reset($p4);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i9 := 5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} vslice_dummy_var_248 := dev_err.ref.ref($p7, .str.11);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i9 := 4;
    goto $bb3;
}



const igbvf_io_resume: ref;

axiom igbvf_io_resume == $sub.ref(0, 434482);

procedure igbvf_io_resume($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_io_resume($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var vslice_dummy_var_249: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $p3 := netdev_priv($p2);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i5 := netif_running($p2);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 1088} {:cexpr "tmp___2"} boogie_si_record_i8($i6);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} netif_device_attach($p2);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i8 := igbvf_up($p4);
    call {:si_unique_call 1090} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_249 := dev_err.ref.ref($p10, .str.10);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const e1000_init_function_pointers_vf: ref;

axiom e1000_init_function_pointers_vf == $sub.ref(0, 435514);

procedure e1000_init_function_pointers_vf($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation e1000_init_function_pointers_vf($p0: ref)
{
  var $p3: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, e1000_init_mac_params_vf);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, e1000_init_mbx_params_vf);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    return;
}



const e1000_init_mac_params_vf: ref;

axiom e1000_init_mac_params_vf == $sub.ref(0, 436546);

procedure e1000_init_mac_params_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation e1000_init_mac_params_vf($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(128, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, 128);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(130, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, 1);
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, e1000_reset_hw_vf);
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, e1000_init_hw_vf);
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, e1000_check_for_link_vf);
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, e1000_get_link_up_info_vf);
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, e1000_update_mc_addr_list_vf);
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, e1000_rar_set_vf);
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, e1000_read_mac_addr_vf);
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, e1000_set_vfta_vf);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const e1000_init_mbx_params_vf: ref;

axiom e1000_init_mbx_params_vf == $sub.ref(0, 437578);

procedure e1000_init_mbx_params_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation e1000_init_mbx_params_vf($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(88, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 500);
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(92, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, 16);
    $p6 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, e1000_read_mbx_vf);
    $p8 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, e1000_write_mbx_vf);
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, e1000_read_posted_mbx);
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, e1000_write_posted_mbx);
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, e1000_check_for_msg_vf);
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, e1000_check_for_ack_vf);
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, e1000_check_for_rst_vf);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(4, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(12, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 0);
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 0);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const e1000_read_mbx_vf: ref;

axiom e1000_read_mbx_vf == $sub.ref(0, 438610);

procedure e1000_read_mbx_vf($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_read_mbx_vf($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i7: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} {:cexpr "e1000_read_mbx_vf:arg:size"} boogie_si_record_i16($i2);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $i3 := e1000_obtain_mbx_lock_vf($p0);
    call {:si_unique_call 1095} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i5);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(3136, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} writel(2, $p25);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(4, 1));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 1);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(4, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i30);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb8;

  $bb8:
    call $p8, $p9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i7 := e1000_read_mbx_vf_loop_$bb8($p0, $p1, $i5, $p8, $p9, $i10, $i11, $i12, $i13, $p14, $i15, $i16, $p17, $i18, $i19, $i20, $i21, $i22, $i7);
    goto $bb8_last;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i7);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 2);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i12, 2048);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p9, $mul.ref($i13, 1));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i15 := readl($p14);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i64($i7);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p1, $mul.ref($i16, 4));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i15);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i7);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    call {:si_unique_call 1097} {:cexpr "i"} boogie_si_record_i16($i20);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, $i5);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb10_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5364;
}



const e1000_write_mbx_vf: ref;

axiom e1000_write_mbx_vf == $sub.ref(0, 439642);

procedure e1000_write_mbx_vf($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_write_mbx_vf($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i9: i16;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} {:cexpr "e1000_write_mbx_vf:arg:size"} boogie_si_record_i16($i2);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i3 := e1000_obtain_mbx_lock_vf($p0);
    call {:si_unique_call 1101} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vslice_dummy_var_250 := e1000_check_for_ack_vf($p0);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} vslice_dummy_var_251 := e1000_check_for_msg_vf($p0);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i2);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32(0, $i7);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 1);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i29);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(3136, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} writel(1, $p35);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    call $i10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i9 := e1000_write_mbx_vf_loop_$bb8($p0, $p1, $i7, $i10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i9);
    goto $bb8_last;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i9);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref($i10, 4));
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i9);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32($i15, 2);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2048);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p14, $mul.ref($i18, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} writel($i12, $p19);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i9);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, 1);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    call {:si_unique_call 1105} {:cexpr "i"} boogie_si_record_i16($i22);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, $i7);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb10_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5408;
}



const e1000_read_posted_mbx: ref;

axiom e1000_read_posted_mbx == $sub.ref(0, 440674);

procedure e1000_read_posted_mbx($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_read_posted_mbx($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} {:cexpr "e1000_read_posted_mbx:arg:size"} boogie_si_record_i16($i2);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i10 := e1000_poll_for_msg($p0);
    call {:si_unique_call 1109} {:cexpr "ret_val"} boogie_si_record_i32($i10);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i10;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i9 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i11 == 1;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i2);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i16($i15);
    call {:si_unique_call 1110} $i17 := devirtbounce.10($p14, $p0, $p1, $i16);
    call {:si_unique_call 1111} {:cexpr "ret_val"} boogie_si_record_i32($i17);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 15);
    goto $bb3;
}



const e1000_write_posted_mbx: ref;

axiom e1000_write_posted_mbx == $sub.ref(0, 441706);

procedure e1000_write_posted_mbx($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_write_posted_mbx($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} {:cexpr "e1000_write_posted_mbx:arg:size"} boogie_si_record_i16($i2);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i2);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    call {:si_unique_call 1113} $i18 := devirtbounce.10($p15, $p0, $p1, $i17);
    call {:si_unique_call 1114} {:cexpr "ret_val"} boogie_si_record_i32($i18);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i18;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i12 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i20 := e1000_poll_for_ack($p0);
    call {:si_unique_call 1116} {:cexpr "ret_val"} boogie_si_record_i32($i20);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 15);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const e1000_check_for_msg_vf: ref;

axiom e1000_check_for_msg_vf == $sub.ref(0, 442738);

procedure e1000_check_for_msg_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_check_for_msg_vf($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i1 := e1000_check_for_bit_vf($p0, 16);
    call {:si_unique_call 1118} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 15);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(12, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(12, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i7);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const e1000_check_for_ack_vf: ref;

axiom e1000_check_for_ack_vf == $sub.ref(0, 443770);

procedure e1000_check_for_ack_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_check_for_ack_vf($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i1 := e1000_check_for_bit_vf($p0, 32);
    call {:si_unique_call 1120} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 15);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i7);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const e1000_check_for_rst_vf: ref;

axiom e1000_check_for_rst_vf == $sub.ref(0, 444802);

procedure e1000_check_for_rst_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_check_for_rst_vf($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p10: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i1 := e1000_check_for_bit_vf($p0, 192);
    call {:si_unique_call 1122} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 15);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1)), $mul.ref(16, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i7);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const e1000_check_for_bit_vf: ref;

axiom e1000_check_for_bit_vf == $sub.ref(0, 445834);

procedure e1000_check_for_bit_vf($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_check_for_bit_vf($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} {:cexpr "e1000_check_for_bit_vf:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i2 := e1000_read_v2p_mailbox($p0);
    call {:si_unique_call 1125} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $i1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 15);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i10 := $xor.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, $i10);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i11);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const e1000_read_v2p_mailbox: ref;

axiom e1000_read_v2p_mailbox == $sub.ref(0, 446866);

procedure e1000_read_v2p_mailbox($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_read_v2p_mailbox($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(3136, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i4 := readl($p3);
    call {:si_unique_call 1127} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i8, $i4);
    call {:si_unique_call 1128} {:cexpr "v2p_mailbox"} boogie_si_record_i32($i9);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i9, 176);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i13, $i14);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i15);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const e1000_poll_for_ack: ref;

axiom e1000_poll_for_ack == $sub.ref(0, 447898);

procedure e1000_poll_for_ack($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_poll_for_ack($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i12: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i18: i32;
  var $i11: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i9: i32;
  var $i28: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1129} {:cexpr "countdown"} boogie_si_record_i32($i3);
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i3, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i11 := $i3;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i25 := $i11;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i9 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i9, 0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 0 else $sub.i32(0, 15));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb16:
    assume $i26 == 1;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb8;

  $bb8:
    call $i13, $p14, $i15, $i16, $i17, $i12, $p20, $p21, $i22, $i23, $i24, $i18 := e1000_poll_for_ack_loop_$bb8($p0, $i13, $p14, $i15, $i16, $i17, $i12, $p20, $p21, $i22, $i23, $i24, $i18);
    goto $bb8_last;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1130} $i22 := devirtbounce.2($p21, $p0);
    call {:si_unique_call 1131} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $i24 := $i12;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb14;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i12, 1);
    call {:si_unique_call 1132} {:cexpr "countdown"} boogie_si_record_i32($i13);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(88, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __udelay($i16);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i13, 0);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i18 := $i13;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb7;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb10_dummy;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5578;
}



const __udelay: ref;

axiom __udelay == $sub.ref(0, 448930);

procedure __udelay($i0: i64);
  free requires assertsPassed;



implementation __udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} {:cexpr "__udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    return;
}



const e1000_poll_for_msg: ref;

axiom e1000_poll_for_msg == $sub.ref(0, 449962);

procedure e1000_poll_for_msg($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_poll_for_msg($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i10: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i1;
  var $i12: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i18: i32;
  var $i11: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i9: i32;
  var $i28: i1;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1135} {:cexpr "countdown"} boogie_si_record_i32($i3);
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i3, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i11 := $i3;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i25 := $i11;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i9 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i9, 0);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 0 else $sub.i32(0, 15));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb16:
    assume $i26 == 1;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 0);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i12 := $i3;
    goto $bb8;

  $bb8:
    call $i13, $p14, $i15, $i16, $i17, $i12, $p20, $p21, $i22, $i23, $i24, $i18 := e1000_poll_for_msg_loop_$bb8($p0, $i13, $p14, $i15, $i16, $i17, $i12, $p20, $p21, $i22, $i23, $i24, $i18);
    goto $bb8_last;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1136} $i22 := devirtbounce.2($p21, $p0);
    call {:si_unique_call 1137} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i24 := $i12;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb14;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i12, 1);
    call {:si_unique_call 1138} {:cexpr "countdown"} boogie_si_record_i32($i13);
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(88, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __udelay($i16);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i13, 0);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i18 := $i13;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb7;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb10_dummy;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_5619;
}



const e1000_obtain_mbx_lock_vf: ref;

axiom e1000_obtain_mbx_lock_vf == $sub.ref(0, 450994);

procedure e1000_obtain_mbx_lock_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_obtain_mbx_lock_vf($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(3136, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} writel(4, $p3);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $i4 := e1000_read_v2p_mailbox($p0);
    call {:si_unique_call 1142} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 15);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const e1000_reset_hw_vf: ref;

axiom e1000_reset_hw_vf == $sub.ref(0, 452026);

procedure e1000_reset_hw_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_reset_hw_vf($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i17: i32;
  var $i24: i32;
  var $i16: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var cmdloc_dummy_var_154: [ref]i8;
  var cmdloc_dummy_var_155: [ref]i8;
  var cmdloc_dummy_var_156: [ref]i8;
  var cmdloc_dummy_var_157: [ref]i8;
  var cmdloc_dummy_var_158: [ref]i8;
  var cmdloc_dummy_var_159: [ref]i8;
  var vslice_dummy_var_252: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(1, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i7 := readl($p6);
    call {:si_unique_call 1145} {:cexpr "ctrl"} boogie_si_record_i32($i7);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 67108864);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} writel($i8, $p10);
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1147} $i14 := devirtbounce.2($p13, $p0);
    call {:si_unique_call 1148} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i16 := 200;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i16, 0);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 5);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb9:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2000);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1153} vslice_dummy_var_252 := devirtbounce.10($p30, $p0, $p31, 1);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} msleep(10);
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p1);
    call {:si_unique_call 1155} $i37 := devirtbounce.10($p35, $p0, $p36, 3);
    call {:si_unique_call 1156} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i37;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i51 := $i50;
    goto $bb20;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, $sub.i32(0, 2147483647));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb19;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i42 := $ugt.i64(6, 63);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(118, 1));
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_157 := $M.0;
    cmdloc_dummy_var_158 := $M.0;
    call {:si_unique_call 1158} cmdloc_dummy_var_159 := $memcpy.i8(cmdloc_dummy_var_157, cmdloc_dummy_var_158, $p48, $p4, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_159;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i49 := $i37;
    goto $bb18;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(118, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_154 := $M.0;
    cmdloc_dummy_var_155 := $M.0;
    call {:si_unique_call 1157} cmdloc_dummy_var_156 := $memcpy.i8(cmdloc_dummy_var_154, cmdloc_dummy_var_155, $p45, $p4, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_156;
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i17 := 200;
    goto $bb4;

  $bb4:
    call $i18, $p19, $i20, $i21, $i22, $i23, $i17, $i24 := e1000_reset_hw_vf_loop_$bb4($p0, $p12, $i18, $p19, $i20, $i21, $i22, $i23, $i17, $i24);
    goto $bb4_last;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, 1);
    call {:si_unique_call 1149} {:cexpr "timeout"} boogie_si_record_i32($i18);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __const_udelay(21475);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p12);
    call {:si_unique_call 1151} $i20 := devirtbounce.2($p19, $p0);
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i18, 0);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i23 := $and.i1($i21, $i22);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i24 := $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i16 := $i24;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5670;
}



const e1000_init_hw_vf: ref;

axiom e1000_init_hw_vf == $sub.ref(0, 453058);

procedure e1000_init_hw_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_init_hw_vf($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} e1000_rar_set_vf($p0, $p3, 0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const e1000_check_for_link_vf: ref;

axiom e1000_check_for_link_vf == $sub.ref(0, 454090);

procedure e1000_check_for_link_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_check_for_link_vf($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1161} $i7 := devirtbounce.2($p6, $p0);
    call {:si_unique_call 1162} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(132, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb7:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(8, 1));
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i20 := readl($p19);
    call {:si_unique_call 1164} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 2);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 1165} $i26 := devirtbounce.10($p25, $p0, $p1, 1);
    call {:si_unique_call 1166} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 536870912);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(84, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(132, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 5);
    goto $bb9;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p1);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1073741824);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $i16 := $i34;
    goto $bb9;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 5);
    goto $bb21;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(132, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const e1000_get_link_up_info_vf: ref;

axiom e1000_get_link_up_info_vf == $sub.ref(0, 455122);

procedure e1000_get_link_up_info_vf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_get_link_up_info_vf($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(8, 1));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i6 := readl($p5);
    call {:si_unique_call 1168} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 128);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i6, 64);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, 10);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i6, 1);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p2, 2);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, 100);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p1, 1000);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const e1000_update_mc_addr_list_vf: ref;

axiom e1000_update_mc_addr_list_vf == $sub.ref(0, 456154);

procedure e1000_update_mc_addr_list_vf($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_update_mc_addr_list_vf($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{
  var $p5: ref;
  var $p7: ref;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i1;
  var $i20: i32;
  var $i21: i16;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i18: i32;
  var $p19: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_253: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p5 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    call {:si_unique_call 1170} {:cexpr "e1000_update_mc_addr_list_vf:arg:mc_addr_count"} boogie_si_record_i32($i2);
    call {:si_unique_call 1171} {:cexpr "e1000_update_mc_addr_list_vf:arg:rar_used_count"} boogie_si_record_i32($i3);
    call {:si_unique_call 1172} {:cexpr "e1000_update_mc_addr_list_vf:arg:rar_count"} boogie_si_record_i32($i4);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p5);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32(30, $i2);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i10 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 3);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i10, 16);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i13, $i14);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 4));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32(0, $i10);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    call {:si_unique_call 1176} vslice_dummy_var_253 := devirtbounce.10($p30, $p0, $p31, 16);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i18, $p19 := 0, $p1;
    goto $bb7;

  $bb7:
    call $i20, $i21, $i22, $i23, $p24, $p25, $i26, $i27, $i18, $p19 := e1000_update_mc_addr_list_vf_loop_$bb7($p0, $p7, $i10, $i20, $i21, $i22, $i23, $p24, $p25, $i26, $i27, $i18, $p19);
    goto $bb7_last;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i20 := e1000_hash_mc_addr_vf($p0, $p19);
    call {:si_unique_call 1174} {:cexpr "hash_value"} boogie_si_record_i32($i20);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i18);
    $i23 := $add.i64(1, $i22);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p7, $mul.ref($i23, 2));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i21);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p19, $mul.ref(6, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i18, 1);
    call {:si_unique_call 1175} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i27 := $ult.i32($i26, $i10);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i18, $p19 := $i26, $p25;
    goto $bb9_dummy;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i10 := 30;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5832;
}



const e1000_rar_set_vf: ref;

axiom e1000_rar_set_vf == $sub.ref(0, 457186);

procedure e1000_rar_set_vf($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_rar_set_vf($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var cmdloc_dummy_var_160: [ref]i8;
  var cmdloc_dummy_var_161: [ref]i8;
  var cmdloc_dummy_var_162: [ref]i8;
  var cmdloc_dummy_var_163: [ref]i8;
  var cmdloc_dummy_var_164: [ref]i8;
  var cmdloc_dummy_var_165: [ref]i8;
  var cmdloc_dummy_var_166: [ref]i8;
  var cmdloc_dummy_var_167: [ref]i8;
  var vslice_dummy_var_254: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p3 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    call {:si_unique_call 1178} {:cexpr "e1000_rar_set_vf:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_160 := $M.0;
    call {:si_unique_call 1179} cmdloc_dummy_var_161 := $memset.i8(cmdloc_dummy_var_160, $p7, 0, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_161;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 2);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i64(6, 63);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_165 := $M.0;
    cmdloc_dummy_var_166 := $M.0;
    call {:si_unique_call 1181} cmdloc_dummy_var_167 := $memcpy.i8(cmdloc_dummy_var_165, cmdloc_dummy_var_166, $p6, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_167;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p11 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    call {:si_unique_call 1182} $i14 := devirtbounce.10($p12, $p0, $p13, 3);
    call {:si_unique_call 1183} {:cexpr "ret_val"} boogie_si_record_i32($i14);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $sub.i32(0, 536870913));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1073741826);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} vslice_dummy_var_254 := e1000_read_mac_addr_vf($p0);
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i15 == 1;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    call {:si_unique_call 1184} $i20 := devirtbounce.10($p18, $p0, $p19, 3);
    call {:si_unique_call 1185} {:cexpr "ret_val"} boogie_si_record_i32($i20);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_162 := $M.0;
    cmdloc_dummy_var_163 := $M.0;
    call {:si_unique_call 1180} cmdloc_dummy_var_164 := $memcpy.i8(cmdloc_dummy_var_162, cmdloc_dummy_var_163, $p6, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_164;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const e1000_read_mac_addr_vf: ref;

axiom e1000_read_mac_addr_vf == $sub.ref(0, 458218);

procedure e1000_read_mac_addr_vf($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation e1000_read_mac_addr_vf($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var cmdloc_dummy_var_168: [ref]i8;
  var cmdloc_dummy_var_169: [ref]i8;
  var cmdloc_dummy_var_170: [ref]i8;
  var cmdloc_dummy_var_171: [ref]i8;
  var cmdloc_dummy_var_172: [ref]i8;
  var cmdloc_dummy_var_173: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i64(6, 63);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(118, 1));
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_171 := $M.0;
    cmdloc_dummy_var_172 := $M.0;
    call {:si_unique_call 1188} cmdloc_dummy_var_173 := $memcpy.i8(cmdloc_dummy_var_171, cmdloc_dummy_var_172, $p10, $p13, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_173;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(118, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_168 := $M.0;
    cmdloc_dummy_var_169 := $M.0;
    call {:si_unique_call 1187} cmdloc_dummy_var_170 := $memcpy.i8(cmdloc_dummy_var_168, cmdloc_dummy_var_169, $p4, $p7, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_170;
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const e1000_set_vfta_vf: ref;

axiom e1000_set_vfta_vf == $sub.ref(0, 459250);

procedure e1000_set_vfta_vf($p0: ref, $i1: i16, $i2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_set_vfta_vf($p0: ref, $i1: i16, $i2: i1) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var vslice_dummy_var_255: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1190} {:cexpr "e1000_set_vfta_vf:arg:vid"} boogie_si_record_i16($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 1191} {:cexpr "e1000_set_vfta_vf:arg:set"} boogie_si_record_i1($i2);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 4);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i4);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    call {:si_unique_call 1192} vslice_dummy_var_255 := devirtbounce.10($p16, $p0, $p17, 2);
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    call {:si_unique_call 1193} $i23 := devirtbounce.10($p21, $p0, $p22, 2);
    call {:si_unique_call 1194} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 536870913));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i23, 0);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i32 := $i23;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1073741828);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb6;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 5);
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 65536);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const e1000_hash_mc_addr_vf: ref;

axiom e1000_hash_mc_addr_vf == $sub.ref(0, 460282);

procedure e1000_hash_mc_addr_vf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation e1000_hash_mc_addr_vf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i10: i8;
  var $i17: i8;
  var $i9: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1)), $mul.ref(128, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 32);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    call {:si_unique_call 1195} {:cexpr "hash_mask"} boogie_si_record_i32($i7);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 255);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(4, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i9);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(8, $i21);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i23 := $ashr.i32($i20, $i22);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(5, 1));
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i9);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i26, $i27);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i23, $i28);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, $i7);
    call {:si_unique_call 1197} {:cexpr "hash_value"} boogie_si_record_i32($i30);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $i14, $i15, $i16, $i10, $i17 := e1000_hash_mc_addr_vf_loop_$bb4($i7, $i11, $i12, $i13, $i14, $i15, $i16, $i10, $i17);
    goto $bb4_last;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    call {:si_unique_call 1196} {:cexpr "bit_shift"} boogie_si_record_i8($i13);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i7, $i14);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 255);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i17 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i9 := $i17;
    goto $bb3;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5952;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 461314);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_open: ref;

axiom igbvf_open == $sub.ref(0, 462346);

procedure igbvf_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $CurrAddr, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $p34: ref;
  var $p35: ref;
  var $i17: i32;
  var $p36: ref;
  var $p37: ref;
  var $i12: i32;
  var $i7: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $p1 := netdev_priv($p0);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i5 := constant_test_bit(0, $p4);
    call {:si_unique_call 1201} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i10 := igbvf_setup_tx_resources($p2, $p9);
    call {:si_unique_call 1203} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} $i15 := igbvf_setup_rx_resources($p2, $p14);
    call {:si_unique_call 1206} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} igbvf_configure($p2);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i18 := igbvf_request_irq($p2);
    call {:si_unique_call 1210} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} clear_bit(2, $p20);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 304)), $mul.ref(48, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} napi_enable($p23);
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(5504, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} vslice_dummy_var_256 := readl($p26);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} igbvf_irq_enable($p2);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(132, 1));
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 1);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(0, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, jiffies);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, 1);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} vslice_dummy_var_257 := ldv_mod_timer_52($p30, $i32);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} igbvf_free_rx_resources($p35);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} igbvf_free_tx_resources($p37);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i12 := $i17;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} igbvf_reset($p2);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb9:
    assume $i16 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb11;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;
}



const igbvf_close: ref;

axiom igbvf_close == $sub.ref(0, 463378);

procedure igbvf_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $CurrAddr, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_258: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $p1 := netdev_priv($p0);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i4 := constant_test_bit(1, $p3);
    call {:si_unique_call 1219} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 1220} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i6);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1222} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vslice_dummy_var_258 := ldv__builtin_expect($i14, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} igbvf_down($p2);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} igbvf_free_irq($p2);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} igbvf_free_tx_resources($p17);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1112, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} igbvf_free_rx_resources($p19);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} warn_slowpath_null(.str.2, 1836);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const igbvf_xmit_frame: ref;

axiom igbvf_xmit_frame == $sub.ref(0, 464410);

procedure igbvf_xmit_frame($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.0, $CurrAddr;



implementation igbvf_xmit_frame($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $p2 := netdev_priv($p1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i5 := constant_test_bit(2, $p4);
    call {:si_unique_call 1231} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i10 := igbvf_xmit_frame_ring_adv($p0, $p1, $p9);
    call {:si_unique_call 1234} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} dev_kfree_skb_any($p0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const igbvf_set_mac: ref;

axiom igbvf_set_mac == $sub.ref(0, 465442);

procedure igbvf_set_mac($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_set_mac($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i13: i32;
  var cmdloc_dummy_var_174: [ref]i8;
  var cmdloc_dummy_var_175: [ref]i8;
  var cmdloc_dummy_var_176: [ref]i8;
  var cmdloc_dummy_var_177: [ref]i8;
  var cmdloc_dummy_var_178: [ref]i8;
  var cmdloc_dummy_var_179: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $p2 := netdev_priv($p0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i8 := is_valid_ether_addr($p7);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1237} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    call {:si_unique_call 1238} {:cexpr "__len"} boogie_si_record_i64($i16);
    $p18 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_174 := $M.0;
    cmdloc_dummy_var_175 := $M.0;
    call {:si_unique_call 1239} cmdloc_dummy_var_176 := $memcpy.i8(cmdloc_dummy_var_174, cmdloc_dummy_var_175, $p19, $p21, $i16, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_176;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    call {:si_unique_call 1240} devirtbounce.21($p25, $p4, $p28, 0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    $p32 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(112, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i34 := ether_addr_equal($p30, $p33);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 1242} {:cexpr "tmp___2"} boogie_si_record_i8($i35);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(581, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    call {:si_unique_call 1243} {:cexpr "__len___0"} boogie_si_record_i64($i41);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_177 := $M.0;
    cmdloc_dummy_var_178 := $M.0;
    call {:si_unique_call 1244} cmdloc_dummy_var_179 := $memcpy.i8(cmdloc_dummy_var_177, cmdloc_dummy_var_178, $p43, $p45, $i41, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_179;
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 99);
    goto $bb6;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb10;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 99);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const igbvf_ioctl: ref;

axiom igbvf_ioctl == $sub.ref(0, 466474);

procedure igbvf_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_ioctl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 1245} {:cexpr "igbvf_ioctl:arg:cmd"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const igbvf_change_mtu: ref;

axiom igbvf_change_mtu == $sub.ref(0, 467506);

procedure igbvf_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i1;
  var $p24: ref;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;
  var $i38: i1;
  var $i39: i8;
  var $i40: i1;
  var $p42: ref;
  var $i8: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} {:cexpr "igbvf_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $p2 := netdev_priv($p0);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i1, 18);
    call {:si_unique_call 1248} {:cexpr "max_frame"} boogie_si_record_i32($i4);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i1, 67);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i1, 2147483629);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i4, 16128);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i4, 9234);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i15 := test_and_set_bit(1, $p14);
    call {:si_unique_call 1251} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1164, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i4);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i20 := netif_running($p0);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 1256} {:cexpr "tmp___1"} boogie_si_record_i8($i21);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i23 := $sle.i32($i4, 1024);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i23 == 1);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i25 := $sle.i32($i4, 2048);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i25 == 1);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 2048);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i4, 1518);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i28 == 1);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i4, 1522);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} vslice_dummy_var_260 := _dev_info.ref.ref.i32.i32($p33, .str.20, $i35, $i1);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i1);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i38 := netif_running($p0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i8($i38);
    call {:si_unique_call 1260} {:cexpr "tmp___2"} boogie_si_record_i8($i39);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i40 == 1);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} igbvf_reset($p3);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} clear_bit(1, $p42);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb36:
    assume $i40 == 1;
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} vslice_dummy_var_261 := igbvf_up($p3);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 1522);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb31;

  $bb27:
    assume $i25 == 1;
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 2048);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i23 == 1;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 1024);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i22 == 1;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} igbvf_down($p3);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $i17, $i18 := igbvf_change_mtu_loop_$bb16($p14, $i17, $i18);
    goto $bb16_last;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} msleep(1);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i17 := test_and_set_bit(1, $p14);
    call {:si_unique_call 1254} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i18 == 1);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb18_dummy;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vslice_dummy_var_259 := dev_err.ref.ref($p12, .str.19);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const igbvf_tx_timeout: ref;

axiom igbvf_tx_timeout == $sub.ref(0, 468538);

procedure igbvf_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_262: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $p1 := netdev_priv($p0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1088, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1088, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(256, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} vslice_dummy_var_262 := schedule_work($p7);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_get_stats: ref;

axiom igbvf_get_stats == $sub.ref(0, 469570);

procedure igbvf_get_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation igbvf_get_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p1 := netdev_priv($p0);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1192, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const igbvf_vlan_rx_kill_vid: ref;

axiom igbvf_vlan_rx_kill_vid == $sub.ref(0, 470602);

procedure igbvf_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i19: i32;
  var vslice_dummy_var_263: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} {:cexpr "igbvf_vlan_rx_kill_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 1268} {:cexpr "igbvf_vlan_rx_kill_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $p3 := netdev_priv($p0);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1));
    $p8 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $mul.ref(104, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i2);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    call {:si_unique_call 1270} $i12 := devirtbounce.11($p9, $p5, $i11, 0);
    call {:si_unique_call 1271} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i2);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(424, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} clear_bit($i20, $p22);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i2);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} vslice_dummy_var_263 := dev_err.ref.ref.i32($p16, .str.12, $i17);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;
}



const igbvf_netpoll: ref;

axiom igbvf_netpoll == $sub.ref(0, 471634);

procedure igbvf_netpoll($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation igbvf_netpoll($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var vslice_dummy_var_264: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p1 := netdev_priv($p0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} disable_irq($i6);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} vslice_dummy_var_264 := igbvf_clean_tx_irq($p8);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2984)), $mul.ref(1580, 1));
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} enable_irq($i13);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_set_features: ref;

axiom igbvf_set_features == $sub.ref(0, 472666);

procedure igbvf_set_features($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_set_features($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "igbvf_set_features:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p2 := netdev_priv($p0);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i1, 17179869184);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(2600, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(2600, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(2600, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 2));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(2600, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const disable_irq: ref;

axiom disable_irq == $sub.ref(0, 473698);

procedure disable_irq($i0: i32);
  free requires assertsPassed;



implementation disable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} {:cexpr "disable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    return;
}



const enable_irq: ref;

axiom enable_irq == $sub.ref(0, 474730);

procedure enable_irq($i0: i32);
  free requires assertsPassed;



implementation enable_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} {:cexpr "enable_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    return;
}



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 475762);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i3, $i5);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i10, $i14);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i6, $i15);
    call {:si_unique_call 1282} {:cexpr "fold"} boogie_si_record_i32($i16);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const igbvf_xmit_frame_ring_adv: ref;

axiom igbvf_xmit_frame_ring_adv == $sub.ref(0, 476794);

procedure igbvf_xmit_frame_ring_adv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.0, $CurrAddr;



implementation igbvf_xmit_frame_ring_adv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $i44: i8;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $i53: i1;
  var $i54: i32;
  var $i56: i1;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i32;
  var $i55: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i8;
  var $i71: i32;
  var $i72: i8;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $p82: ref;
  var $i9: i32;
  var vslice_dummy_var_265: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p4 := netdev_priv($p1);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p3, 0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2616)), $mul.ref(1032, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i7 := constant_test_bit(2, $p6);
    call {:si_unique_call 1286} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p13 := skb_end_pointer($p0);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 4);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i19 := igbvf_maybe_stop_tx($p1, $i18);
    call {:si_unique_call 1291} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(162, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 4096);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 8);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i33;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    call {:si_unique_call 1295} {:cexpr "first"} boogie_si_record_i32($i42);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i43 := skb_is_gso($p0);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i8($i43);
    call {:si_unique_call 1297} {:cexpr "tmp___5"} boogie_si_record_i8($i44);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i8.i1($i44);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1301} {:cexpr "tmp___6"} boogie_si_record_i64($i51);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i47, 0);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i56 := igbvf_tx_csum($p5, $p2, $p0, $i39);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i57 := $zext.i1.i8($i56);
    call {:si_unique_call 1305} {:cexpr "tmp___7"} boogie_si_record_i8($i57);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i65 := $i39;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i55 := $i65;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $i66 := igbvf_tx_map_adv($p5, $p2, $p0);
    call {:si_unique_call 1307} {:cexpr "count"} boogie_si_record_i32($i66);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i67 == 1);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} dev_kfree_skb_any($p0);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i42);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p75, $mul.ref($i76, 40)), $mul.ref(16, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, 0);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i42);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p82, $i81);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb32:
    assume $i67 == 1;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.46, $p3);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} igbvf_tx_queue_adv($p5, $p2, $i55, $i66, $i42, $i69, $i72);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} vslice_dummy_var_265 := igbvf_maybe_stop_tx($p1, 21);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i58 == 1;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p0);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(124, 1));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 12);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb28;

  $bb29:
    assume $i63 == 1;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i39, 1);
    call {:si_unique_call 1308} {:cexpr "tx_flags"} boogie_si_record_i32($i64);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb31;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i39, 4);
    call {:si_unique_call 1303} {:cexpr "tx_flags"} boogie_si_record_i32($i54);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i55 := $i54;
    goto $bb25;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} dev_kfree_skb_any($p0);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb17:
    assume $i45 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i46 := igbvf_tso($p5, $p2, $p0, $i39, $p3);
    call {:si_unique_call 1299} {:cexpr "tmp___4"} boogie_si_record_i32($i46);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb19;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i33, 8);
    call {:si_unique_call 1294} {:cexpr "tx_flags"} boogie_si_record_i32($i38);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb16;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $i26 := $or.i32(0, 2);
    call {:si_unique_call 1292} {:cexpr "tx_flags"} boogie_si_record_i32($i26);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(162, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, $sub.i32(0, 4097));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i31 := $shl.i32($i30, 16);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, $i26);
    call {:si_unique_call 1293} {:cexpr "tx_flags"} boogie_si_record_i32($i32);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i9 := 16;
    goto $bb3;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} dev_kfree_skb_any($p0);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} dev_kfree_skb_any($p0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const igbvf_maybe_stop_tx: ref;

axiom igbvf_maybe_stop_tx == $sub.ref(0, 477826);

procedure igbvf_maybe_stop_tx($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation igbvf_maybe_stop_tx($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} {:cexpr "igbvf_maybe_stop_tx:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p2 := netdev_priv($p0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i6 := igbvf_desc_unused($p5);
    call {:si_unique_call 1315} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i6, $i1);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} netif_stop_queue($p0);
    call {:si_unique_call 1317} devirtbounce.5(0);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1048, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i11 := igbvf_desc_unused($p10);
    call {:si_unique_call 1319} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, $i1);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} netif_wake_queue($p0);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1056, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2616)), $mul.ref(1056, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const skb_is_gso: ref;

axiom skb_is_gso == $sub.ref(0, 478858);

procedure skb_is_gso($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p1 := skb_end_pointer($p0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const igbvf_tso: ref;

axiom igbvf_tso == $sub.ref(0, 479890);

procedure igbvf_tso($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.46, $M.0;



implementation igbvf_tso($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i12: i32;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $p35: ref;
  var $i36: i1;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i32;
  var $i82: i64;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i64;
  var $i91: i8;
  var $i92: i32;
  var $i93: i64;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i16;
  var $p130: ref;
  var $i11: i32;
  var vslice_dummy_var_266: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} {:cexpr "igbvf_tso:arg:tx_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p4, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i5 := skb_cow_head($p2, 0);
    call {:si_unique_call 1324} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i12 := tcp_hdrlen($p2);
    call {:si_unique_call 1327} {:cexpr "l4len"} boogie_si_record_i32($i12);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.46, $p4);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i12);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i14, $i16);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p4, $i18);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 8);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i36 := skb_is_gso_v6($p2);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i37 := $zext.i1.i8($i36);
    call {:si_unique_call 1333} {:cexpr "tmp___7"} boogie_si_record_i8($i37);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    call {:si_unique_call 1334} {:cexpr "i"} boogie_si_record_i32($i53);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i53);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i53);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p59, $mul.ref($i60, 16));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i3, 2);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $i68 := skb_network_offset($p2);
    call {:si_unique_call 1343} {:cexpr "tmp___8"} boogie_si_record_i32($i68);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i69 := $shl.i32($i68, 9);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, $i67);
    call {:si_unique_call 1344} {:cexpr "info"} boogie_si_record_i32($i70);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i71 := skb_network_offset($p2);
    call {:si_unique_call 1346} {:cexpr "tmp___9"} boogie_si_record_i32($i71);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.46, $p4);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i71);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i73, $i75);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p4, $i77);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $p78 := skb_transport_header($p2);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p79 := skb_network_header($p2);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p78);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i64.i32($i80);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p79);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i64.i32($i82);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i81, $i83);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, $i70);
    call {:si_unique_call 1349} {:cexpr "info"} boogie_si_record_i32($i85);
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p86 := skb_transport_header($p2);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p87 := skb_network_header($p2);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.46, $p4);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p86);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i8($i90);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p87);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i64.i8($i93);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i92, $i95);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i89, $i96);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $M.46 := $store.i8($M.46, $p4, $i98);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p62, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i85);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i100 := $or.i32(0, 538968064);
    call {:si_unique_call 1352} {:cexpr "tu_cmd"} boogie_si_record_i32($i100);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i102 := $load.i16($M.0, $p101);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 8);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i106 := $i100;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 2048);
    call {:si_unique_call 1354} {:cexpr "tu_cmd"} boogie_si_record_i32($i107);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p62, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i107);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $p109 := skb_end_pointer($p2);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.0, $p111);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i114 := $shl.i32($i113, 16);
    call {:si_unique_call 1356} {:cexpr "mss_l4len_idx"} boogie_si_record_i32($i114);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i115 := $shl.i32($i12, 8);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i116 := $or.i32($i115, $i114);
    call {:si_unique_call 1357} {:cexpr "mss_l4len_idx"} boogie_si_record_i32($i116);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p62, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p117, $i116);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p62, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, 0);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, jiffies);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p55, $mul.ref($i56, 40)), $mul.ref(16, 1));
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p122, $i119);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p55, $mul.ref($i56, 40)), $mul.ref(0, 1));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p123, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i53, 1);
    call {:si_unique_call 1358} {:cexpr "i"} boogie_si_record_i32($i124);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, $i124);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $i124;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i129 := $trunc.i32.i16($i128);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p130, $i129);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb17:
    assume $i127 == 1;
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i128 := 0;
    goto $bb19;

  $bb14:
    assume $i104 == 1;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i100, 1024);
    call {:si_unique_call 1353} {:cexpr "tu_cmd"} boogie_si_record_i32($i105);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i106 := $i105;
    goto $bb16;

  $bb11:
    assume $i64 == 1;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i3, $sub.i32(0, 65536));
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 0);
    call {:si_unique_call 1341} {:cexpr "info"} boogie_si_record_i32($i66);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb13;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p39 := ipv6_hdr($p2);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $p41 := tcp_hdr($p2);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $p42 := ipv6_hdr($p2);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p43 := ipv6_hdr($p2);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i46 := csum_ipv6_magic($p44, $p45, 0, 6, 0);
    call {:si_unique_call 1340} {:cexpr "tmp___6"} boogie_si_record_i16($i46);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i48 := $xor.i32($i47, $sub.i32(0, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p41, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $i49);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p23 := ip_hdr($p2);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(10, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, 0);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p26 := tcp_hdr($p2);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i31 := csum_tcpudp_magic($i28, $i30, 0, 6, 0);
    call {:si_unique_call 1331} {:cexpr "tmp___1"} boogie_si_record_i16($i31);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i33 := $xor.i32($i32, $sub.i32(0, 1));
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p26, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, $i34);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} vslice_dummy_var_266 := dev_err.ref.ref($p9, .str.17);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i11 := $i5;
    goto $bb3;
}



const igbvf_tx_csum: ref;

axiom igbvf_tx_csum == $sub.ref(0, 480922);

procedure igbvf_tx_csum($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_tx_csum($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i1)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i66: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i16;
  var $p89: ref;
  var $i90: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} {:cexpr "igbvf_tx_csum:arg:tx_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(124, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 12);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i3, 2);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $r := $i90;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    call {:si_unique_call 1360} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i13);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i13);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 16));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i3, 2);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i28 := skb_network_offset($p2);
    call {:si_unique_call 1363} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i29 := $shl.i32($i28, 9);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, $i27);
    call {:si_unique_call 1364} {:cexpr "info"} boogie_si_record_i32($i30);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(124, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 12);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i44 := $i30;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i46 := $or.i32(0, 538968064);
    call {:si_unique_call 1368} {:cexpr "tu_cmd"} boogie_si_record_i32($i46);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p2);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(124, 1));
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 12);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i46;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, jiffies);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p81, $i78);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p82, 0);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i13, 1);
    call {:si_unique_call 1374} {:cexpr "i"} boogie_si_record_i32($i83);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, $i83);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i83;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, $i88);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i90 := 1;
    goto $bb34;

  $bb31:
    assume $i86 == 1;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i87 := 0;
    goto $bb33;

  $bb12:
    assume $i51 == 1;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 56710);
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i54, 56710);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i66 := $i46;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i74 := $i66;
    goto $bb30;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p67 := ipv6_hdr($p2);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 6);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i46;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i66 := $i73;
    goto $bb25;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i46, 2048);
    call {:si_unique_call 1373} {:cexpr "tu_cmd"} boogie_si_record_i32($i72);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb28;

  $bb15:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i54, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb19;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i46, 1024);
    call {:si_unique_call 1370} {:cexpr "tu_cmd"} boogie_si_record_i32($i58);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p59 := ip_hdr($p2);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 6);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i58;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb25;

  $bb22:
    assume $i63 == 1;
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i58, 2048);
    call {:si_unique_call 1372} {:cexpr "tu_cmd"} boogie_si_record_i32($i64);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb24;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p36 := skb_transport_header($p2);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p37 := skb_network_header($p2);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p36);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p37);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i64.i32($i40);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i39, $i41);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, $i30);
    call {:si_unique_call 1367} {:cexpr "info"} boogie_si_record_i32($i43);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb11;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i3, $sub.i32(0, 65536));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i25, 0);
    call {:si_unique_call 1361} {:cexpr "info"} boogie_si_record_i32($i26);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;
}



const igbvf_tx_map_adv: ref;

axiom igbvf_tx_map_adv == $sub.ref(0, 481954);

procedure igbvf_tx_map_adv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_tx_map_adv($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i16;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $i76: i16;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i106: i32;
  var $i107: i32;
  var $i49: i32;
  var $i50: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p115: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i134: i1;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i132: i32;
  var $i133: i32;
  var $i114: i32;
  var vslice_dummy_var_267: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1184, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i5 := skb_headlen($p2);
    call {:si_unique_call 1376} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    call {:si_unique_call 1377} {:cexpr "i"} boogie_si_record_i32($i8);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 40));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i5, 65535);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1379} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i5);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(16, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p21, $i18);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, jiffies);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(16, 1));
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i22);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(16, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, 0);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i5);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i33 := dma_map_single_attrs($p29, $p31, $i32, 1, $0.ref);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(0, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p34, $i33);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref($i11, 40)), $mul.ref(0, 1));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $i38 := dma_mapping_error($p35, $i37);
    call {:si_unique_call 1383} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p43 := skb_end_pointer($p2);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i32($i47, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i49, $i50 := 0, $i8;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i110 := $zext.i32.i64($i50);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p109, $mul.ref($i110, 40)), $mul.ref(8, 1));
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p112, $p2);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i49, 1);
    call {:si_unique_call 1399} {:cexpr "count"} boogie_si_record_i32($i113);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $r := $i114;
    return;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i51, $i52, $i53 := 0, $i8, 0;
    goto $bb12;

  $bb12:
    call $i54, $i55, $p56, $i57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $p65, $i66, $p67, $p68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $p79, $i80, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $p100, $p101, $p102, $i103, $i104, $i105, $i51, $i52, $i53, $i106, $i107 := igbvf_tx_map_adv_loop_$bb12($p1, $p2, $p4, $i54, $i55, $p56, $i57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $p65, $i66, $p67, $p68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $p77, $p78, $p79, $i80, $p81, $p82, $p83, $p84, $p85, $p86, $p87, $i88, $i89, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i97, $p98, $i99, $p100, $p101, $p102, $i103, $i104, $i105, $i51, $i52, $i53, $i106, $i107);
    goto $bb12_last;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    call {:si_unique_call 1386} {:cexpr "count"} boogie_si_record_i32($i54);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i52, 1);
    call {:si_unique_call 1387} {:cexpr "i"} boogie_si_record_i32($i55);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, $i55);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $i55;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p60 := skb_end_pointer($p2);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i51);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 16));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i66 := skb_frag_size($p65);
    call {:si_unique_call 1390} {:cexpr "len"} boogie_si_record_i32($i66);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i59);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p68, $mul.ref($i69, 40));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i71 := $ugt.i32($i66, 65535);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i72 := $zext.i1.i32($i71);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 1392} {:cexpr "tmp___3"} boogie_si_record_i64($i74);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i66);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), $mul.ref(16, 1));
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i76);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.0, jiffies);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), $mul.ref(16, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i80);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), $mul.ref(16, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, 1);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i66);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $i89 := skb_frag_dma_map($p87, $p65, 0, $i88, 1);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), $mul.ref(0, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p90, $i89);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p68, $mul.ref($i69, 40)), $mul.ref(0, 1));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $i94 := dma_mapping_error($p91, $i93);
    call {:si_unique_call 1396} {:cexpr "tmp___4"} boogie_si_record_i32($i94);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i96, $i97, $p98 := $i54, $i59, $p70;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i51, 1);
    call {:si_unique_call 1397} {:cexpr "f"} boogie_si_record_i32($i99);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p100 := skb_end_pointer($p2);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.0, $p102);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i105 := $ugt.i32($i104, $i99);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i106, $i107 := $i54, $i59;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i49, $i50 := $i106, $i107;
    goto $bb11;

  $bb24:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i51, $i52, $i53 := $i99, $i59, $i54;
    goto $bb24_dummy;

  $bb21:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p40, $i41, $i42 := $p98, $i96, $i97;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} vslice_dummy_var_267 := dev_err.ref.ref($p115, .str.18);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p117, 0);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p119, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p120, 0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p123, 0);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p40, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p126, 0);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i41, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i129 := $i41;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i130 := $sub.i32($i129, 1);
    call {:si_unique_call 1401} {:cexpr "count"} boogie_si_record_i32($i130);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i129, 0);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb27;

  $bb31:
    assume $i131 == 1;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i132, $i133 := $i130, $i42;
    goto $bb34;

  $bb34:
    call $i134, $p135, $i136, $i137, $i138, $i139, $p140, $p141, $i142, $p143, $i144, $i145, $i132, $i133 := igbvf_tx_map_adv_loop_$bb34($p0, $p1, $i134, $p135, $i136, $i137, $i138, $i139, $p140, $p141, $i142, $p143, $i144, $i145, $i132, $i133);
    goto $bb34_last;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 0);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i138 := $i133;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i139 := $sub.i32($i138, 1);
    call {:si_unique_call 1403} {:cexpr "i"} boogie_si_record_i32($i139);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i142 := $zext.i32.i64($i139);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p141, $mul.ref($i142, 40));
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} igbvf_put_txbuf($p0, $p143);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i144 := $sub.i32($i132, 1);
    call {:si_unique_call 1405} {:cexpr "count"} boogie_si_record_i32($i144);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i132, 0);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i145 == 1);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb39:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i132, $i133 := $i144, $i139;
    goto $bb39_dummy;

  $bb36:
    assume $i134 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i137 := $add.i32($i136, $i133);
    call {:si_unique_call 1402} {:cexpr "i"} boogie_si_record_i32($i137);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i138 := $i137;
    goto $bb38;

  $bb28:
    assume $i127 == 1;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i128 := $sub.i32($i41, 1);
    call {:si_unique_call 1400} {:cexpr "count"} boogie_si_record_i32($i128);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i129 := $i128;
    goto $bb30;

  $bb17:
    assume $i75 == 1;
    call {:si_unique_call 1393} devirtbounce.4(0, .str.2, 2225, 12);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    call igbvf_tx_map_adv_loop_$bb19();
    goto $bb19_last;

  $bb14:
    assume $i58 == 1;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb16;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p40, $i41, $i42 := $p12, 0, $i8;
    goto $bb7;

  $bb1:
    assume $i17 == 1;
    call {:si_unique_call 1380} devirtbounce.4(0, .str.2, 2202, 12);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call igbvf_tx_map_adv_loop_$bb3();
    goto $bb3_last;

  $bb39_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6922;

  $bb19_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb24_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const igbvf_tx_queue_adv: ref;

axiom igbvf_tx_queue_adv == $sub.ref(0, 482986);

procedure igbvf_tx_queue_adv($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation igbvf_tx_queue_adv($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i8)
{
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i19: i32;
  var $i20: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i36: i32;
  var $i37: i32;
  var $p68: ref;
  var $i69: i32;
  var $p34: ref;
  var $i35: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i16;
  var $p86: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i16;
  var $i92: i64;
  var $p93: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} {:cexpr "igbvf_tx_queue_adv:arg:tx_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 1407} {:cexpr "igbvf_tx_queue_adv:arg:count"} boogie_si_record_i32($i3);
    call {:si_unique_call 1408} {:cexpr "igbvf_tx_queue_adv:arg:first"} boogie_si_record_i32($i4);
    call {:si_unique_call 1409} {:cexpr "igbvf_tx_queue_adv:arg:paylen"} boogie_si_record_i32($i5);
    call {:si_unique_call 1410} {:cexpr "igbvf_tx_queue_adv:arg:hdr_len"} boogie_si_record_i8($i6);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i2, 2);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i10 := 573571072;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i2, 4);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i2, 1);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19, $i20 := $i24, $i10;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i6);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i5, $i25);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32($i26, 14);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, $i19);
    call {:si_unique_call 1415} {:cexpr "olinfo_status"} boogie_si_record_i32($i28);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    call {:si_unique_call 1416} {:cexpr "i"} boogie_si_record_i32($i31);
    call {:si_unique_call 1417} {:cexpr "igbvf_tx_queue_adv:arg:tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i3, 1);
    call {:si_unique_call 1418} {:cexpr "count"} boogie_si_record_i32($i32);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i3, 0);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p34, $i35 := $0.ref, $i31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p34);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1060, 1));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i72, $i74);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p34);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i75);
    call {:si_unique_call 1422} devirtbounce.5(0);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i4);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p79, $mul.ref($i80, 40)), $mul.ref(16, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p84, $p34);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i35);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(32, 1));
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p86, $i85);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2616)), $mul.ref(1448, 1)), $mul.ref(8, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(38, 1));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i92 := $zext.i16.i64($i91);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p89, $mul.ref($i92, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} writel($i35, $p93);
    call {:si_unique_call 1424} devirtbounce.5(0);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i33 == 1;
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i32, $i31;
    goto $bb16;

  $bb16:
    call $p38, $p39, $i40, $p42, $p43, $i44, $p45, $p46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i36, $i37, $p68, $i69 := igbvf_tx_queue_adv_loop_$bb16($p1, $i20, $i28, $p38, $p39, $i40, $p42, $p43, $i44, $p45, $p46, $p47, $i48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $i61, $p62, $i63, $i64, $i65, $i66, $i67, $i36, $i37, $p68, $i69);
    goto $bb16_last;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i37);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i37);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 16));
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p39, $mul.ref($i40, 40)), $mul.ref(0, 1));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, $p47);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p46);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, $i48);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p39, $mul.ref($i40, 40)), $mul.ref(16, 1));
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, $i20);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p46);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i56);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p46);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i28);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i37, 1);
    call {:si_unique_call 1420} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, $i61);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $i61;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i36, 1);
    call {:si_unique_call 1421} {:cexpr "count"} boogie_si_record_i32($i66);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i36, 0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $p68, $i69 := $p45, $i65;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p34, $i35 := $p68, $i69;
    goto $bb15;

  $bb21:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i36, $i37 := $i66, $i65;
    goto $bb21_dummy;

  $bb18:
    assume $i64 == 1;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb20;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i23 := $or.i32(0, 512);
    call {:si_unique_call 1419} {:cexpr "olinfo_status"} boogie_si_record_i32($i23);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb12;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, $sub.i32(0, 2147483648));
    call {:si_unique_call 1412} {:cexpr "cmd_type_len"} boogie_si_record_i32($i13);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i14 := $or.i32(0, 512);
    call {:si_unique_call 1413} {:cexpr "olinfo_status"} boogie_si_record_i32($i14);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i2, 8);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i14;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i19, $i20 := $i18, $i13;
    goto $bb9;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, 256);
    call {:si_unique_call 1414} {:cexpr "olinfo_status"} boogie_si_record_i32($i17);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb8;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i9 := $or.i32(573571072, 1073741824);
    call {:si_unique_call 1411} {:cexpr "cmd_type_len"} boogie_si_record_i32($i9);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6985;
}



const skb_frag_size: ref;

axiom skb_frag_size == $sub.ref(0, 484018);

procedure skb_frag_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_frag_size($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_frag_dma_map: ref;

axiom skb_frag_dma_map == $sub.ref(0, 485050);

procedure skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} {:cexpr "skb_frag_dma_map:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 1426} {:cexpr "skb_frag_dma_map:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 1427} {:cexpr "skb_frag_dma_map:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p5 := skb_frag_page($p1);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i2);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} $i10 := dma_map_page($p0, $p5, $i9, $i3, $i4);
    call {:si_unique_call 1430} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 486082);

procedure skb_frag_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_frag_page($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_network_offset: ref;

axiom skb_network_offset == $sub.ref(0, 487114);

procedure skb_network_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_network_offset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p1 := skb_network_header($p0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i3, $i7);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const skb_transport_header: ref;

axiom skb_transport_header == $sub.ref(0, 488146);

procedure skb_transport_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_transport_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 489178);

procedure skb_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(194, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ip_hdr: ref;

axiom ip_hdr == $sub.ref(0, 490210);

procedure ip_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ip_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $p1 := skb_network_header($p0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ipv6_hdr: ref;

axiom ipv6_hdr == $sub.ref(0, 491242);

procedure ipv6_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ipv6_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $p1 := skb_network_header($p0);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_cow_head: ref;

axiom skb_cow_head == $sub.ref(0, 492274);

procedure skb_cow_head($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_cow_head($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} {:cexpr "skb_cow_head:arg:headroom"} boogie_si_record_i32($i1);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $i2 := skb_header_cloned($p0);
    call {:si_unique_call 1436} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i3 := __skb_cow($p0, $i1, $i2);
    call {:si_unique_call 1438} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tcp_hdrlen: ref;

axiom tcp_hdrlen == $sub.ref(0, 493306);

procedure tcp_hdrlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcp_hdrlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $p1 := tcp_hdr($p0);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i16($i3, 4);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i5 := $and.i16($i4, 15);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i16.i8($i5);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 4);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcp_hdr: ref;

axiom tcp_hdr == $sub.ref(0, 494338);

procedure tcp_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcp_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $p1 := skb_transport_header($p0);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const csum_tcpudp_magic: ref;

axiom csum_tcpudp_magic == $sub.ref(0, 495370);

procedure csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} {:cexpr "csum_tcpudp_magic:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1442} {:cexpr "csum_tcpudp_magic:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 1443} {:cexpr "csum_tcpudp_magic:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 1444} {:cexpr "csum_tcpudp_magic:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 1445} {:cexpr "csum_tcpudp_magic:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i3);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $i9 := csum_tcpudp_nofold($i0, $i1, $i6, $i8, $i4);
    call {:si_unique_call 1447} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i10 := csum_fold($i9);
    call {:si_unique_call 1449} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const skb_is_gso_v6: ref;

axiom skb_is_gso_v6 == $sub.ref(0, 496402);

procedure skb_is_gso_v6($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso_v6($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $p1 := skb_end_pointer($p0);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 16);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const csum_ipv6_magic: ref;

axiom csum_ipv6_magic == $sub.ref(0, 497434);

procedure csum_ipv6_magic($p0: ref, $p1: ref, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_ipv6_magic($p0: ref, $p1: ref, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1451} {:cexpr "csum_ipv6_magic:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1452} {:cexpr "csum_ipv6_magic:arg:arg3"} boogie_si_record_i16($i3);
    call {:si_unique_call 1453} {:cexpr "csum_ipv6_magic:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1454} $i5 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1455} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i5);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const csum_tcpudp_nofold: ref;

axiom csum_tcpudp_nofold == $sub.ref(0, 498466);

procedure csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} {:cexpr "csum_tcpudp_nofold:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 1457} {:cexpr "csum_tcpudp_nofold:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 1458} {:cexpr "csum_tcpudp_nofold:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 1459} {:cexpr "csum_tcpudp_nofold:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 1460} {:cexpr "csum_tcpudp_nofold:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i3);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i5, $i6);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 8);
    call {:si_unique_call 1461} $i9 := devirtbounce.22(0, $i1, $i0, $i8, $i4);
    call {:si_unique_call 1462} {:cexpr "sum"} boogie_si_record_i32($i9);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const csum_fold: ref;

axiom csum_fold == $sub.ref(0, 499498);

procedure csum_fold($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_fold($i0: i32) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} {:cexpr "csum_fold:arg:sum"} boogie_si_record_i32($i0);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 16);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, $sub.i32(0, 65536));
    call {:si_unique_call 1464} $i3 := devirtbounce.23(0, $i1, $i2);
    call {:si_unique_call 1465} {:cexpr "sum"} boogie_si_record_i32($i3);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 16);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_header_cloned: ref;

axiom skb_header_cloned == $sub.ref(0, 500530);

procedure skb_header_cloned($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_header_cloned($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(124, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p7 := skb_end_pointer($p0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 320)), $mul.ref(36, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i10 := atomic_read($p9);
    call {:si_unique_call 1468} {:cexpr "dataref"} boogie_si_record_i32($i10);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65535);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i10, 16);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i11, $i12);
    call {:si_unique_call 1469} {:cexpr "dataref"} boogie_si_record_i32($i13);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const __skb_cow: ref;

axiom __skb_cow == $sub.ref(0, 501562);

procedure __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} {:cexpr "__skb_cow:arg:headroom"} boogie_si_record_i32($i1);
    call {:si_unique_call 1471} {:cexpr "__skb_cow:arg:cloned"} boogie_si_record_i32($i2);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i3 := skb_headroom($p0);
    call {:si_unique_call 1473} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32($i3, $i1);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32(32, 64);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i11 := 64;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i7);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32(32, 64);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i15 := 64;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, $i15);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, $i16);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i18 := pskb_expand_head($p0, $i17, 0, 32);
    call {:si_unique_call 1478} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb15;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i15 := 32;
    goto $bb14;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i11 := 32;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $i5 := skb_headroom($p0);
    call {:si_unique_call 1475} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i1, $i5);
    call {:si_unique_call 1476} {:cexpr "delta"} boogie_si_record_i32($i6);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 502594);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const pskb_expand_head: ref;

axiom pskb_expand_head == $sub.ref(0, 503626);

procedure pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1479} {:cexpr "pskb_expand_head:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1480} {:cexpr "pskb_expand_head:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1481} {:cexpr "pskb_expand_head:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1482} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1483} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_mod_timer_52: ref;

axiom ldv_mod_timer_52 == $sub.ref(0, 504658);

procedure ldv_mod_timer_52($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation ldv_mod_timer_52($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} {:cexpr "ldv_mod_timer_52:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1486} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} activate_pending_timer_4($p0, $i1, 1);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 505690);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1488} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv_initialize_ethtool_ops_10: ref;

axiom ldv_initialize_ethtool_ops_10 == $sub.ref(0, 506722);

procedure ldv_initialize_ethtool_ops_10();
  free requires assertsPassed;
  modifies $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_10()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $p0 := ldv_zalloc(20);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $M.47 := $p0;
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p2 := ldv_zalloc(44);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.48 := $p2;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p4 := ldv_zalloc(92);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $M.49 := $p4;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $p6 := ldv_zalloc(36);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $M.50 := $p6;
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $p8 := ldv_zalloc(16);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $M.51 := $p8;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p10 := ldv_zalloc(16);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.52 := $p10;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $p12 := ldv_zalloc(3264);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $M.53 := $p12;
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_10: ref;

axiom ldv_main_exported_10 == $sub.ref(0, 507754);

procedure ldv_main_exported_10();
  free requires assertsPassed;
  modifies $M.0, $M.54, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation ldv_main_exported_10()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1496} $i0 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1497} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i0);
    call {:si_unique_call 1498} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} $p1 := ldv_zalloc(12);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $p3 := ldv_zalloc(1);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} $p4 := ldv_zalloc(8);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p6 := ldv_zalloc(1);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p7 := ldv_zalloc(196);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $p9 := ldv_zalloc(1);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1505} $i10 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1506} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i10);
    call {:si_unique_call 1507} {:cexpr "tmp___6"} boogie_si_record_i32($i10);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p11 := ldv_zalloc(1);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p12 := ldv_zalloc(8);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1510} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 1511} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 1512} {:cexpr "tmp___9"} boogie_si_record_i32($i14);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p15 := ldv_zalloc(16);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p17 := ldv_zalloc(8);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1515} $i19 := __VERIFIER_nondet_int();
    call {:si_unique_call 1516} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i19);
    call {:si_unique_call 1517} {:cexpr "tmp___12"} boogie_si_record_i32($i19);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i19, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i19, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i19, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i19, 23);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ldv_stop();
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i140 := $M.54;
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 1);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb123:
    assume $i141 == 1;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p142 := $M.53;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_282 := ethtool_op_get_link($p142);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i135 := $M.54;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb120:
    assume $i136 == 1;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p137 := $M.53;
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p138 := $M.50;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_281 := igbvf_set_ringparam($p137, $p138);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i131 := $M.54;
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 1);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb117:
    assume $i132 == 1;
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p133 := $M.53;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_280 := igbvf_get_regs_len($p133);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i19, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i19, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i127 := $M.54;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i128} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb114:
    assume $i128 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p129 := $M.53;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_279 := igbvf_get_msglevel($p129);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb17:
    assume $i27 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i122 := $M.54;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb111:
    assume $i123 == 1;
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p124 := $M.53;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p125 := $M.51;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_278 := igbvf_set_eeprom($p124, $p125, $p3);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i118 := $M.54;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb108:
    assume $i119 == 1;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p120 := $M.53;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p121 := $M.47;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} igbvf_get_wol($p120, $p121);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb4:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i19, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i19, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i19, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i114 := $M.54;
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 1);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb105:
    assume $i115 == 1;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $p116 := $M.53;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} vslice_dummy_var_277 := igbvf_nway_reset($p116);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb23:
    assume $i30 == 1;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i111 := $M.54;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 1);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb102:
    assume $i112 == 1;
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p113 := $M.53;
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} igbvf_get_strings($p113, $i10, $p6);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i106 := $M.54;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 1);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb99:
    assume $i107 == 1;
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p108 := $M.53;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p109 := $M.51;
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} vslice_dummy_var_276 := igbvf_get_eeprom($p108, $p109, $p11);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb19:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i19, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i19, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i32 == 1);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i103 := $M.54;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb96:
    assume $i104 == 1;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p105 := $M.53;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} igbvf_diag_test($p105, $p16, $p5);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1547} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb27:
    assume $i32 == 1;
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i98 := $M.54;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 1);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb93:
    assume $i99 == 1;
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p100 := $M.53;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p101 := $M.48;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} vslice_dummy_var_275 := igbvf_set_settings($p100, $p101);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb25:
    assume $i31 == 1;
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i94 := $M.54;
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb90:
    assume $i95 == 1;
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $p96 := $M.53;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} vslice_dummy_var_274 := igbvf_get_eeprom_len($p96);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1543} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb2:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i19, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i19, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i19, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i19, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i36 == 1);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i91 := $M.54;
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb87:
    assume $i92 == 1;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p93 := $M.53;
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} igbvf_set_msglevel($p93, $i0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb35:
    assume $i36 == 1;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i86 := $M.54;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb84:
    assume $i87 == 1;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p88 := $M.53;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p89 := $M.47;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} vslice_dummy_var_273 := igbvf_set_wol($p88, $p89);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1539} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb33:
    assume $i35 == 1;
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i81 := $M.54;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb81:
    assume $i82 == 1;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p83 := $M.53;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p84 := $M.49;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_272 := igbvf_set_coalesce($p83, $p84);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb31:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i19, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i19, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i38 == 1);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i76 := $M.54;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb78:
    assume $i77 == 1;
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p78 := $M.53;
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p79 := $M.48;
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_271 := igbvf_get_settings($p78, $p79);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1535} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb39:
    assume $i38 == 1;
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i72 := $M.54;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 1);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb75:
    assume $i73 == 1;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p74 := $M.53;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_270 := igbvf_get_sset_count($p74, $i14);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb37:
    assume $i37 == 1;
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i68 := $M.54;
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb72:
    assume $i69 == 1;
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p70 := $M.53;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p71 := $M.52;
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} igbvf_get_pauseparam($p70, $p71);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1531} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb29:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i19, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i19, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i19, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i41 == 1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i65 := $M.54;
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb69:
    assume $i66 == 1;
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p67 := $M.53;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} igbvf_get_regs($p67, $p2, $p9);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1529} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb45:
    assume $i41 == 1;
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i61 := $M.54;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb66:
    assume $i62 == 1;
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p63 := $M.53;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p64 := $M.50;
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} igbvf_get_ringparam($p63, $p64);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb43:
    assume $i40 == 1;
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $i56 := $M.54;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 1);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb63:
    assume $i57 == 1;
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p58 := $M.53;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p59 := $M.49;
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} vslice_dummy_var_269 := igbvf_get_coalesce($p58, $p59);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1525} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb41:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i19, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i43 == 1);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i53 := $M.54;
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb60:
    assume $i54 == 1;
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p55 := $M.53;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} igbvf_get_ethtool_stats($p55, $p18, $p13);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1523} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb49:
    assume $i43 == 1;
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i48 := $M.54;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb57:
    assume $i49 == 1;
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p50 := $M.53;
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p51 := $M.52;
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} vslice_dummy_var_268 := igbvf_set_pauseparam($p50, $p51);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb47:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i19, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb14;

  $bb51:
    assume $i44 == 1;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i45 := $M.54;
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i46 == 1;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p47 := $M.53;
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} igbvf_get_drvinfo($p47, $p8);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    goto $bb55;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 508786);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 509818);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_irq_3: ref;

axiom ldv_irq_3 == $sub.ref(0, 510850);

procedure ldv_irq_3($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation ldv_irq_3($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} {:cexpr "ldv_irq_3:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1568} {:cexpr "ldv_irq_3:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1569} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1570} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1571} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} ldv_stop();
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i7 := igbvf_msix_other($i1, $p2);
    call {:si_unique_call 1574} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 511882);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.56, $M.0, $CurrAddr;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1579} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} ldv_stop();
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i18 := $M.65;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i19 := $M.66;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p20 := $M.67;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $M.56 := $i21;
    call {:si_unique_call 1583} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i14 := $M.62;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i15 := $M.63;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p16 := $M.64;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $M.56 := $i17;
    call {:si_unique_call 1581} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i10 := $M.59;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i11 := $M.60;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p12 := $M.61;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $M.56 := $i13;
    call {:si_unique_call 1585} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i6 := $M.56;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i7 := $M.57;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p8 := $M.58;
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $M.56 := $i9;
    call {:si_unique_call 1587} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 512914);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1590} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1591} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1592} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1593} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} ldv_stop();
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i7 := igbvf_intr_msix_rx($i1, $p2);
    call {:si_unique_call 1596} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_initialize_pci_driver_5: ref;

axiom ldv_initialize_pci_driver_5 == $sub.ref(0, 513946);

procedure ldv_initialize_pci_driver_5();
  free requires assertsPassed;
  modifies $M.68, $M.0, $CurrAddr;



implementation ldv_initialize_pci_driver_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p0 := ldv_zalloc(2976);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    return;
}



const timer_init_4: ref;

axiom timer_init_4 == $sub.ref(0, 514978);

procedure timer_init_4();
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation timer_init_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1600} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 1601} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 1602} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 1603} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 516010);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.69, $M.0, $CurrAddr;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1604} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1605} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1606} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} ldv_stop();
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i18 := $M.78;
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $i19 := $M.79;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p20 := $M.80;
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $M.69 := $i21;
    call {:si_unique_call 1610} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i14 := $M.75;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $i15 := $M.76;
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p16 := $M.77;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $M.69 := $i17;
    call {:si_unique_call 1608} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i10 := $M.72;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i11 := $M.73;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p12 := $M.74;
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $M.69 := $i13;
    call {:si_unique_call 1612} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i6 := $M.69;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i7 := $M.70;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p8 := $M.71;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $M.69 := $i9;
    call {:si_unique_call 1614} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 517042);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1617} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1618} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1619} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1620} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} ldv_stop();
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $i7 := igbvf_intr_msix_tx($i1, $p2);
    call {:si_unique_call 1623} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const choose_timer_4: ref;

axiom choose_timer_4 == $sub.ref(0, 518074);

procedure choose_timer_4();
  free requires assertsPassed;
  modifies $M.3, $M.5, $M.7, $M.9;



implementation choose_timer_4()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1628} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} ldv_stop();
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $i18 := $M.9;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $M.9 := 2;
    call {:si_unique_call 1635} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(2);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i20 := $M.9;
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p21 := $M.8;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} ldv_timer_4($i20, $p21);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i14 := $M.7;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $M.7 := 2;
    call {:si_unique_call 1633} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(2);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i16 := $M.7;
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p17 := $M.6;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} ldv_timer_4($i16, $p17);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $M.5 := 2;
    call {:si_unique_call 1631} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(2);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i12 := $M.5;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p13 := $M.4;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} ldv_timer_4($i12, $p13);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i6 := $M.3;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1629} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(2);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i8 := $M.3;
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p9 := $M.2;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} ldv_timer_4($i8, $p9);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const ldv_timer_4: ref;

axiom ldv_timer_4 == $sub.ref(0, 519106);

procedure ldv_timer_4($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_timer_4($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} {:cexpr "ldv_timer_4:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} igbvf_watchdog($i3);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_pci_error_handlers_6: ref;

axiom ldv_initialize_pci_error_handlers_6 == $sub.ref(0, 520138);

procedure ldv_initialize_pci_error_handlers_6();
  free requires assertsPassed;
  modifies $M.81, $M.0, $CurrAddr;



implementation ldv_initialize_pci_error_handlers_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $p0 := ldv_zalloc(2976);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $M.81 := $p0;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    return;
}



const choose_interrupt_3: ref;

axiom choose_interrupt_3 == $sub.ref(0, 521170);

procedure choose_interrupt_3();
  free requires assertsPassed;
  modifies $M.0, $M.30, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9;



implementation choose_interrupt_3()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1645} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} ldv_stop();
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i18 := $M.39;
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i19 := $M.40;
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p20 := $M.41;
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i21 := ldv_irq_3($i18, $i19, $p20);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $M.30 := $i21;
    call {:si_unique_call 1649} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i21);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i14 := $M.36;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i15 := $M.37;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p16 := $M.38;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i17 := ldv_irq_3($i14, $i15, $p16);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $M.30 := $i17;
    call {:si_unique_call 1647} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i17);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i10 := $M.33;
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $i11 := $M.34;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p12 := $M.35;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $i13 := ldv_irq_3($i10, $i11, $p12);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $M.30 := $i13;
    call {:si_unique_call 1651} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i6 := $M.30;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i7 := $M.31;
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p8 := $M.32;
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $i9 := ldv_irq_3($i6, $i7, $p8);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $M.30 := $i9;
    call {:si_unique_call 1653} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32($i9);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const main: ref;

axiom main == $sub.ref(0, 522202);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.42, $M.89, $M.90, $M.91, $M.92, $M.3, $M.5, $M.7, $M.9, $M.93, $M.94, $M.95, $M.54, $M.96, $M.0, $M.30, $M.97, $M.98, $M.56, $M.69, $M.99, $M.68, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.81, $M.100, $M.28, $M.101, $M.102, $M.29, $M.33, $M.36, $M.62, $M.59, $M.78, $M.75, $M.72, $M.65, $M.39, $M.57, $M.58, $M.60, $M.61, $M.63, $M.64, $M.66, $M.67, $M.43, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41, $M.2, $M.4, $M.6, $M.8, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.79, $M.80, $M.24, $M.23, $M.25, $M.27, $M.26, $M.110, $M.111, $M.112, $M.113, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.46, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i78: i32;
  var $i79: i1;
  var $i81: i32;
  var $i82: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i1;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i16;
  var $i121: i32;
  var $i122: i16;
  var $i123: i32;
  var $i124: i16;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i16;
  var $i141: i32;
  var $i142: i16;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i16;
  var $i162: i32;
  var $i163: i16;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i16;
  var $i169: i32;
  var $i170: i16;
  var $i171: i32;
  var $i172: i16;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i16;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i16;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i1;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i64;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $i235: i64;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i64;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i258: i32;
  var $i259: i1;
  var $p260: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i1;
  var $p270: ref;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i277: i32;
  var $i278: i32;
  var $i279: i1;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $i285: i32;
  var $i286: i1;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i1;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i32;
  var $i315: i1;
  var $i316: i32;
  var $i317: i1;
  var $i318: i32;
  var $i319: i1;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i1;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i32;
  var $i333: i32;
  var $i334: i1;
  var $i335: i32;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i32;
  var $i344: i1;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i348: i32;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $p353: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $p364: ref;
  var $i365: i32;
  var $i366: i32;
  var $i367: i32;
  var $i368: i1;
  var $p369: ref;
  var $i370: i32;
  var $i371: i32;
  var cmdloc_dummy_var_180: [ref]i8;
  var cmdloc_dummy_var_181: [ref]i8;
  var cmdloc_dummy_var_182: [ref]i8;
  var cmdloc_dummy_var_183: [ref]i8;
  var cmdloc_dummy_var_184: [ref]i8;
  var cmdloc_dummy_var_185: [ref]i8;
  var cmdloc_dummy_var_186: [ref]i8;
  var cmdloc_dummy_var_187: [ref]i8;
  var cmdloc_dummy_var_188: [ref]i8;
  var cmdloc_dummy_var_189: [ref]i8;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: ref;
  var vslice_dummy_var_303: ref;
  var vslice_dummy_var_304: ref;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;
  var vslice_dummy_var_315: i32;

  $bb0:
    call {:si_unique_call 1655} $initialize();
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1656} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1662} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1663} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 1664} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1665} $i6 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1666} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i6);
    call {:si_unique_call 1667} {:cexpr "tmp___0"} boogie_si_record_i16($i6);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p7 := ldv_zalloc(1);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p8 := ldv_zalloc(40);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $p10 := ldv_zalloc(232);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1671} $i12 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1672} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i12);
    call {:si_unique_call 1673} {:cexpr "tmp___4"} boogie_si_record_i16($i12);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1674} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1675} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1676} {:cexpr "tmp___5"} boogie_si_record_i32($i13);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p14 := ldv_zalloc(288);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $p16 := ldv_zalloc(288);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $p18 := ldv_zalloc(32);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} ldv_initialize();
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_180 := $M.82;
    call {:si_unique_call 1681} cmdloc_dummy_var_181 := $memset.i8(cmdloc_dummy_var_180, $p20, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.82 := cmdloc_dummy_var_181;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_182 := $M.83;
    call {:si_unique_call 1682} cmdloc_dummy_var_183 := $memset.i8(cmdloc_dummy_var_182, $p21, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.83 := cmdloc_dummy_var_183;
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_184 := $M.84;
    call {:si_unique_call 1683} cmdloc_dummy_var_185 := $memset.i8(cmdloc_dummy_var_184, $p22, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.84 := cmdloc_dummy_var_185;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_186 := $M.85;
    call {:si_unique_call 1684} cmdloc_dummy_var_187 := $memset.i8(cmdloc_dummy_var_186, $p23, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.85 := cmdloc_dummy_var_187;
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_188 := $M.86;
    call {:si_unique_call 1685} cmdloc_dummy_var_189 := $memset.i8(cmdloc_dummy_var_188, $p24, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.86 := cmdloc_dummy_var_189;
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $M.42 := 0;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $M.89 := 0;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 1690} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1692} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} timer_init_4();
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 1694} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $M.94 := 0;
    call {:si_unique_call 1695} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1696} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 1698} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $p53, $i55, $i56, $p57, $i59, $i60, $p61, $i63, $i64, $p65, $i66, $i68, $i69, $p70, $i71, $i73, $i74, $p75, $i76, $i78, $i79, $i81, $i82, $i84, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i124, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $i133, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $p146, $i148, $i149, $p150, $i152, $i153, $p154, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i165, $i166, $p167, $i168, $i169, $i170, $i171, $i172, $i174, $i175, $p176, $i177, $i178, $i179, $i180, $i181, $i183, $i184, $p185, $i187, $i188, $p189, $i191, $i192, $p193, $i195, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $p203, $i205, $i206, $p207, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i232, $i233, $p234, $i235, $i237, $i238, $p239, $i240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i254, $i255, $p256, $i258, $i259, $p260, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $p331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $p339, $p340, $i341, $i342, $i343, $i344, $i345, $i346, $p347, $i348, $i349, $i350, $i351, $i352, $p353, $i354, $i355, $p356, $i357, $i358, $p359, $i360, $i361, $i362, $i363, $p364, $i365, $i366, $i367, $i368, $p369, $i370, $i371, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297, vslice_dummy_var_298, vslice_dummy_var_299, vslice_dummy_var_300, vslice_dummy_var_301, vslice_dummy_var_302, vslice_dummy_var_303, vslice_dummy_var_304, vslice_dummy_var_305, vslice_dummy_var_306, vslice_dummy_var_307, vslice_dummy_var_308, vslice_dummy_var_309, vslice_dummy_var_310, vslice_dummy_var_311, vslice_dummy_var_312, vslice_dummy_var_313, vslice_dummy_var_314, vslice_dummy_var_315 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $i5, $i6, $p7, $p9, $p11, $i12, $i13, $p15, $p17, $p19, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $p53, $i55, $i56, $p57, $i59, $i60, $p61, $i63, $i64, $p65, $i66, $i68, $i69, $p70, $i71, $i73, $i74, $p75, $i76, $i78, $i79, $i81, $i82, $i84, $i85, $i86, $i87, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i121, $i122, $i123, $i124, $i126, $i127, $p128, $i129, $i130, $i131, $i132, $i133, $i135, $i136, $p137, $i138, $i139, $i140, $i141, $i142, $i144, $i145, $p146, $i148, $i149, $p150, $i152, $i153, $p154, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i165, $i166, $p167, $i168, $i169, $i170, $i171, $i172, $i174, $i175, $p176, $i177, $i178, $i179, $i180, $i181, $i183, $i184, $p185, $i187, $i188, $p189, $i191, $i192, $p193, $i195, $i196, $p197, $i198, $i199, $i200, $i201, $i202, $p203, $i205, $i206, $p207, $i209, $i210, $p211, $i212, $i213, $p214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $i224, $i225, $p226, $i227, $i228, $p229, $i230, $i232, $i233, $p234, $i235, $i237, $i238, $p239, $i240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i254, $i255, $p256, $i258, $i259, $p260, $i262, $i263, $p264, $i265, $i266, $p267, $i268, $i269, $p270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i324, $i325, $i326, $i327, $i328, $i329, $i330, $p331, $i332, $i333, $i334, $i335, $i336, $i337, $i338, $p339, $p340, $i341, $i342, $i343, $i344, $i345, $i346, $p347, $i348, $i349, $i350, $i351, $i352, $p353, $i354, $i355, $p356, $i357, $i358, $p359, $i360, $i361, $i362, $i363, $p364, $i365, $i366, $i367, $i368, $p369, $i370, $i371, vslice_dummy_var_283, vslice_dummy_var_284, vslice_dummy_var_285, vslice_dummy_var_286, vslice_dummy_var_287, vslice_dummy_var_288, vslice_dummy_var_289, vslice_dummy_var_290, vslice_dummy_var_291, vslice_dummy_var_292, vslice_dummy_var_293, vslice_dummy_var_294, vslice_dummy_var_295, vslice_dummy_var_296, vslice_dummy_var_297, vslice_dummy_var_298, vslice_dummy_var_299, vslice_dummy_var_300, vslice_dummy_var_301, vslice_dummy_var_302, vslice_dummy_var_303, vslice_dummy_var_304, vslice_dummy_var_305, vslice_dummy_var_306, vslice_dummy_var_307, vslice_dummy_var_308, vslice_dummy_var_309, vslice_dummy_var_310, vslice_dummy_var_311, vslice_dummy_var_312, vslice_dummy_var_313, vslice_dummy_var_314, vslice_dummy_var_315);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i25, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i25, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i25, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_stop();
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb83_dummy;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i320 := $M.96;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb301:
    assume $i321 == 1;
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1843} $i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 1844} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i322);
    call {:si_unique_call 1845} {:cexpr "tmp___15"} boogie_si_record_i32($i322);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $i323 := $slt.i32($i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $slt.i32($i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} ldv_stop();
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb310:
    assume $i326 == 1;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i357 := $M.96;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 4);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $i362 := $M.96;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 3);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $i367 := $M.96;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i367, 2);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb348:
    assume $i368 == 1;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p369 := $M.68;
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} igbvf_remove($p369);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i370 := $M.94;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i371 := $sub.i32($i370, 1);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.94 := $i371;
    call {:si_unique_call 1868} {:cexpr "ref_cnt"} boogie_si_record_i32($i371);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb345:
    assume $i363 == 1;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p364 := $M.68;
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} igbvf_remove($p364);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1864} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i365 := $M.94;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i366 := $sub.i32($i365, 1);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $M.94 := $i366;
    call {:si_unique_call 1865} {:cexpr "ref_cnt"} boogie_si_record_i32($i366);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb342:
    assume $i358 == 1;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p359 := $M.68;
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} igbvf_remove($p359);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i360 := $M.94;
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i361 := $sub.i32($i360, 1);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $M.94 := $i361;
    call {:si_unique_call 1862} {:cexpr "ref_cnt"} boogie_si_record_i32($i361);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb308:
    assume $i325 == 1;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i351 := $M.96;
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i351, 3);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $i354 := $M.96;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 2);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb339:
    assume $i355 == 1;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p356 := $M.68;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} igbvf_shutdown($p356);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $M.96 := 4;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb336:
    assume $i352 == 1;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $p353 := $M.68;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} igbvf_shutdown($p353);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.96 := 4;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb306:
    assume $i324 == 1;
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i345 := $M.96;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, 3);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb330:
    assume $i346 == 1;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p347 := $M.68;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $i348 := igbvf_resume($p347);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.102 := $i348;
    call {:si_unique_call 1854} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i348);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $i349 := $M.102;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 0);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb332:
    assume $i350 == 1;
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb304:
    assume $i323 == 1;
    assume {:verifier.code 0} true;
    $i327 := $slt.i32($i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i327 == 1);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i337 := $M.96;
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 2);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb324:
    assume $i338 == 1;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p339 := $M.68;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.86, $p340);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} $i342 := igbvf_suspend($p339, $i341);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $M.101 := $i342;
    call {:si_unique_call 1851} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i342);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i343 := $M.101;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i343, 0);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb326:
    assume $i344 == 1;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $M.96 := 3;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb313:
    assume $i327 == 1;
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb312;

  $bb315:
    assume $i328 == 1;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $i329 := $M.96;
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 1);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb317:
    assume $i330 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $p331 := $M.68;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} $i332 := igbvf_probe($p331, $p19);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $M.100 := $i332;
    call {:si_unique_call 1847} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i332);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i333 := $M.100;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 0);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb319:
    assume $i334 == 1;
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1848} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i335 := $M.94;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i336 := $add.i32($i335, 1);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.94 := $i336;
    call {:si_unique_call 1849} {:cexpr "ref_cnt"} boogie_si_record_i32($i336);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb9:
    assume $i29 == 1;
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i318 := $M.54;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i319 := $ne.i32($i318, 0);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb298:
    assume $i319 == 1;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} ldv_main_exported_10();
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i301 := $M.95;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb268:
    assume $i302 == 1;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1823} $i303 := __VERIFIER_nondet_int();
    call {:si_unique_call 1824} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i303);
    call {:si_unique_call 1825} {:cexpr "tmp___14"} boogie_si_record_i32($i303);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $i304 := $slt.i32($i303, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i303, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} ldv_stop();
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb273:
    assume $i305 == 1;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i311 := $M.95;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 1);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb286:
    assume $i312 == 1;
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i313 := igbvf_init_module();
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $M.99 := $i313;
    call {:si_unique_call 1830} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i313);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i314 := $M.99;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $i316 := $M.99;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb291:
    assume $i317 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} ldv_initialize_pci_driver_5();
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} ldv_initialize_ethtool_ops_10();
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_initialize_pci_error_handlers_6();
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb288:
    assume $i315 == 1;
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1831} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb271:
    assume $i304 == 1;
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i303, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !($i306 == 1);
    goto $bb275;

  $bb276:
    assume $i306 == 1;
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i307 := $M.95;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 2);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb278:
    assume $i308 == 1;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i309 := $M.94;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 0);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb280;

  $bb281:
    assume $i310 == 1;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} igbvf_exit_module();
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1827} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb5:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i25, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i25, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i299 := $M.93;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb265:
    assume $i300 == 1;
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} choose_timer_4();
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i297 := $M.92;
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb262:
    assume $i298 == 1;
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} choose_interrupt_1();
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i291 := $M.91;
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i292 := $ne.i32($i291, 0);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb250:
    assume $i292 == 1;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1815} $i293 := __VERIFIER_nondet_int();
    call {:si_unique_call 1816} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i293);
    call {:si_unique_call 1817} {:cexpr "tmp___13"} boogie_si_record_i32($i293);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} ldv_stop();
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb253:
    assume $i294 == 1;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i295 := $M.91;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb255:
    assume $i296 == 1;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} e1000_init_function_pointers_vf($p17);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1819} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb3:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i35 == 1);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i289 := $M.90;
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb247:
    assume $i290 == 1;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} choose_interrupt_2();
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb22:
    assume $i35 == 1;
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i283 := $M.89;
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb235:
    assume $i284 == 1;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1808} $i285 := __VERIFIER_nondet_int();
    call {:si_unique_call 1809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i285);
    call {:si_unique_call 1810} {:cexpr "tmp___12"} boogie_si_record_i32($i285);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} ldv_stop();
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb238:
    assume $i286 == 1;
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i287 := $M.89;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i288 := $eq.i32($i287, 1);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb240:
    assume $i288 == 1;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} e1000_init_function_pointers_vf($p15);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i98 := $M.42;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, 0);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb87:
    assume $i99 == 1;
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1732} $i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 1733} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i100);
    call {:si_unique_call 1734} {:cexpr "tmp___11"} boogie_si_record_i32($i100);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i100, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i100, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    $i103 := $slt.i32($i100, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i100, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i100, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} ldv_stop();
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb98:
    assume $i105 == 1;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i278 := $M.42;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 2);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb229:
    assume $i279 == 1;
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} vslice_dummy_var_315 := ldv_ndo_uninit_7();
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i281 := $M.94;
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i282 := $sub.i32($i281, 1);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $M.94 := $i282;
    call {:si_unique_call 1806} {:cexpr "ref_cnt"} boogie_si_record_i32($i282);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb96:
    assume $i104 == 1;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i271 := $M.42;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 1);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb223:
    assume $i272 == 1;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $i273 := ldv_ndo_init_7();
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $M.98 := $i273;
    call {:si_unique_call 1801} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i273);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i274 := $M.98;
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i274, 0);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb225:
    assume $i275 == 1;
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i276 := $M.94;
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    $i277 := $add.i32($i276, 1);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $M.94 := $i277;
    call {:si_unique_call 1803} {:cexpr "ref_cnt"} boogie_si_record_i32($i277);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb94:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i100, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i106 == 1);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i262 := $M.42;
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 1);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i265 := $M.42;
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 3);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i268 := $M.42;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 2);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb220:
    assume $i269 == 1;
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $p270 := $M.43;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} igbvf_tx_timeout($p270);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb217:
    assume $i266 == 1;
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p267 := $M.43;
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} igbvf_tx_timeout($p267);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb214:
    assume $i263 == 1;
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p264 := $M.43;
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} igbvf_tx_timeout($p264);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb101:
    assume $i106 == 1;
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i250 := $M.42;
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 1);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $i254 := $M.42;
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 3);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i258 := $M.42;
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 2);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb211:
    assume $i259 == 1;
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $p260 := $M.43;
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_314 := igbvf_set_mac($p260, $p7);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb208:
    assume $i255 == 1;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p256 := $M.43;
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_313 := igbvf_set_mac($p256, $p7);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb205:
    assume $i251 == 1;
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p252 := $M.43;
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} vslice_dummy_var_312 := igbvf_set_mac($p252, $p7);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb92:
    assume $i102 == 1;
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i100, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i100, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i108 == 1);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i242 := $M.42;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 3);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i246 := $M.42;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 2);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb202:
    assume $i247 == 1;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $p248 := $M.43;
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} vslice_dummy_var_311 := igbvf_change_mtu($p248, $i13);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb199:
    assume $i243 == 1;
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $p244 := $M.43;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_310 := igbvf_change_mtu($p244, $i13);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb105:
    assume $i108 == 1;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i227 := $M.42;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 1);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i232 := $M.42;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i232, 3);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $i237 := $M.42;
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 2);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb196:
    assume $i238 == 1;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p239 := $M.43;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $i240 := $load.i64($M.83, $p1);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_309 := igbvf_set_features($p239, $i240);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume $i233 == 1;
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $p234 := $M.43;
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i235 := $load.i64($M.83, $p1);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_308 := igbvf_set_features($p234, $i235);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb190:
    assume $i228 == 1;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p229 := $M.43;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i230 := $load.i64($M.83, $p1);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} vslice_dummy_var_307 := igbvf_set_features($p229, $i230);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb103:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i100, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i109 == 1);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i218 := $M.42;
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i221 := $M.42;
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 3);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $i224 := $M.42;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i225 := $eq.i32($i224, 2);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb187:
    assume $i225 == 1;
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p226 := $M.43;
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} igbvf_netpoll($p226);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb184:
    assume $i222 == 1;
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $p223 := $M.43;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} igbvf_netpoll($p223);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume $i219 == 1;
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p220 := $M.43;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} igbvf_netpoll($p220);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb107:
    assume $i109 == 1;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i209 := $M.42;
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 1);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i212 := $M.42;
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 3);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $i215 := $M.42;
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 2);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb178:
    assume $i216 == 1;
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p217 := $M.43;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} igbvf_set_multi($p217);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb175:
    assume $i213 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p214 := $M.43;
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} igbvf_set_multi($p214);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume $i210 == 1;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p211 := $M.43;
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} igbvf_set_multi($p211);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb90:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i100, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i100, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i100, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i112 == 1);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i205 := $M.42;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 3);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb169:
    assume $i206 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p207 := $M.43;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_306 := igbvf_close($p207);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb113:
    assume $i112 == 1;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i201 := $M.42;
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 3);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb166:
    assume $i202 == 1;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p203 := $M.43;
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_305 := igbvf_xmit_frame($p11, $p203);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb111:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i100, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i113 == 1);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i195 := $M.42;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 2);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb160:
    assume $i196 == 1;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p197 := $M.43;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i198 := igbvf_open($p197);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $M.97 := $i198;
    call {:si_unique_call 1760} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i198);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i199 := $M.97;
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i199, 0);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb162:
    assume $i200 == 1;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb115:
    assume $i113 == 1;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i183 := $M.42;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 1);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i187 := $M.42;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 3);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i191 := $M.42;
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 2);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb157:
    assume $i192 == 1;
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p193 := $M.43;
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} vslice_dummy_var_304 := igbvf_get_stats($p193);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb154:
    assume $i188 == 1;
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p189 := $M.43;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} vslice_dummy_var_303 := igbvf_get_stats($p189);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1756} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i184 == 1;
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p185 := $M.43;
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} vslice_dummy_var_302 := igbvf_get_stats($p185);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb109:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i100, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i115 == 1);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i156 := $M.42;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 1);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i165 := $M.42;
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 3);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i174 := $M.42;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 2);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb148:
    assume $i175 == 1;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p176 := $M.43;
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i177 := $load.i16($M.84, $p2);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i177);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i16($i178);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i6);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} vslice_dummy_var_301 := igbvf_vlan_rx_add_vid($p176, $i179, $i181);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb145:
    assume $i166 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $p167 := $M.43;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $i168 := $load.i16($M.84, $p2);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i16($i169);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i6);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i171);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} vslice_dummy_var_300 := igbvf_vlan_rx_add_vid($p167, $i170, $i172);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i157 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p158 := $M.43;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.84, $p2);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i161 := $trunc.i32.i16($i160);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i162 := $zext.i16.i32($i6);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i32.i16($i162);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} vslice_dummy_var_299 := igbvf_vlan_rx_add_vid($p158, $i161, $i163);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb119:
    assume $i115 == 1;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i144 := $M.42;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 1);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i148 := $M.42;
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 3);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i152 := $M.42;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 2);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb139:
    assume $i153 == 1;
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p154 := $M.43;
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} vslice_dummy_var_298 := igbvf_ioctl($p154, $p9, $i5);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i149 == 1;
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $p150 := $M.43;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} vslice_dummy_var_297 := igbvf_ioctl($p150, $p9, $i5);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i145 == 1;
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $p146 := $M.43;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} vslice_dummy_var_296 := igbvf_ioctl($p146, $p9, $i5);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb117:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb100;

  $bb121:
    assume $i116 == 1;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $i117 := $M.42;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i126 := $M.42;
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 3);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i135 := $M.42;
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb129:
    assume $i136 == 1;
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p137 := $M.43;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.85, $p3);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i138);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i12);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} vslice_dummy_var_295 := igbvf_vlan_rx_kill_vid($p137, $i140, $i142);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb126:
    assume $i127 == 1;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p128 := $M.43;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.85, $p3);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i32.i16($i130);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i12);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} vslice_dummy_var_294 := igbvf_vlan_rx_kill_vid($p128, $i131, $i133);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i118 == 1;
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p119 := $M.43;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i120 := $load.i16($M.85, $p3);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i121 := $zext.i16.i32($i120);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i16($i121);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i12);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i16($i123);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} vslice_dummy_var_293 := igbvf_vlan_rx_kill_vid($p119, $i122, $i124);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1736} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb18:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i96 := $M.88;
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb84:
    assume $i97 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} choose_interrupt_3();
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb24:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb13;

  $bb26:
    assume $i37 == 1;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i38 := $M.87;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb28:
    assume $i39 == 1;
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1702} $i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 1703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i40);
    call {:si_unique_call 1704} {:cexpr "tmp___10"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_stop();
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb37:
    assume $i44 == 1;
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i91 := $M.87;
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb77:
    assume $i92 == 1;
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} vslice_dummy_var_292 := ldv_probe_6();
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i94 := $M.94;
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 1);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $M.94 := $i95;
    call {:si_unique_call 1729} {:cexpr "ref_cnt"} boogie_si_record_i32($i95);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb35:
    assume $i43 == 1;
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i81 := $M.87;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 3);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i86 := $M.87;
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb74:
    assume $i87 == 1;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} vslice_dummy_var_291 := ldv_release_6();
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i89 := $M.94;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i90 := $sub.i32($i89, 1);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.94 := $i90;
    call {:si_unique_call 1726} {:cexpr "ref_cnt"} boogie_si_record_i32($i90);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i82 == 1;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} vslice_dummy_var_290 := ldv_release_6();
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i84 := $M.94;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i84, 1);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $M.94 := $i85;
    call {:si_unique_call 1723} {:cexpr "ref_cnt"} boogie_si_record_i32($i85);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb33:
    assume $i42 == 1;
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i78 := $M.87;
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 2);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb68:
    assume $i79 == 1;
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} vslice_dummy_var_289 := ldv_suspend_6();
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb31:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i46 == 1);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $i63 := $M.87;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i68 := $M.87;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 3);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i73 := $M.87;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 2);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb65:
    assume $i74 == 1;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p75 := $M.81;
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.82, $p0);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} vslice_dummy_var_288 := igbvf_io_error_detected($p75, $i76);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i69 == 1;
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p70 := $M.81;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.82, $p0);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} vslice_dummy_var_287 := igbvf_io_error_detected($p70, $i71);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb59:
    assume $i64 == 1;
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $p65 := $M.81;
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.82, $p0);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} vslice_dummy_var_286 := igbvf_io_error_detected($p65, $i66);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1714} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb42:
    assume $i46 == 1;
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i51 := $M.87;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i55 := $M.87;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 3);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i59 := $M.87;
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 2);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb56:
    assume $i60 == 1;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p61 := $M.81;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} vslice_dummy_var_285 := igbvf_io_slot_reset($p61);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i56 == 1;
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p57 := $M.81;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} vslice_dummy_var_284 := igbvf_io_slot_reset($p57);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1710} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i52 == 1;
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p53 := $M.81;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} vslice_dummy_var_283 := igbvf_io_slot_reset($p53);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb40:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb39;

  $bb44:
    assume $i47 == 1;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i48 := $M.87;
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 3);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i49 == 1;
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $p50 := $M.81;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} igbvf_io_resume($p50);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1706} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb83_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1699} $i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 1700} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
    call {:si_unique_call 1701} {:cexpr "tmp___9"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 523234);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 524266);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p0 := $M.23;
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} ldv_set_init($p0);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    return;
}



const ldv_suspend_6: ref;

axiom ldv_suspend_6 == $sub.ref(0, 525298);

procedure ldv_suspend_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1872} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1873} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_release_6: ref;

axiom ldv_release_6 == $sub.ref(0, 526330);

procedure ldv_release_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_release_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1874} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1875} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_6: ref;

axiom ldv_probe_6 == $sub.ref(0, 527362);

procedure ldv_probe_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1876} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1877} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_init_7: ref;

axiom ldv_ndo_init_7 == $sub.ref(0, 528394);

procedure ldv_ndo_init_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1878} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1879} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_7: ref;

axiom ldv_ndo_uninit_7 == $sub.ref(0, 529426);

procedure ldv_ndo_uninit_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1880} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1881} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const igbvf_exit_module: ref;

axiom igbvf_exit_module == $sub.ref(0, 530458);

procedure igbvf_exit_module();
  free requires assertsPassed;



implementation igbvf_exit_module()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} pci_unregister_driver(igbvf_driver);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    return;
}



const igbvf_init_module: ref;

axiom igbvf_init_module == $sub.ref(0, 531490);

procedure igbvf_init_module() returns ($r: i32);
  free requires assertsPassed;



implementation igbvf_init_module() returns ($r: i32)
{
  var $i2: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} vslice_dummy_var_316 := printk.ref.ref.ref(.str.21, igbvf_driver_string, igbvf_driver_version);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} vslice_dummy_var_317 := printk.ref.ref(.str.22, igbvf_copyright);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i2 := __pci_register_driver(igbvf_driver, __this_module, .str.23);
    call {:si_unique_call 1886} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 532522);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p0 := $M.23;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 1888} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 533554);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 534586);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1890} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1891} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 535618);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 536650);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 1892} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 537682);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1893} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 1} true;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 538714);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 539746);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 540778);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 541810);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 542842);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 543874);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 544906);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 545938);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 546970);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 548002);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 549034);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1894} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1895} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1896} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1897} __VERIFIER_assume($i6);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 550066);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 551098);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 552130);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1898} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1899} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1900} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1901} __VERIFIER_assume($i4);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 553162);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 554194);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 555226);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 556258);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1902} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1903} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1904} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1905} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1906} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1907} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1908} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1909} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1910} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1911} __VERIFIER_assume($i7);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1912} __VERIFIER_assume($i11);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 557290);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 558322);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 559354);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 560386);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 561418);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 562450);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1913} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1914} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1915} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1916} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1917} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1918} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1919} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1920} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1921} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1922} __VERIFIER_assume($i7);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1923} __VERIFIER_assume($i11);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 563482);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 564514);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 565546);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 566578);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 567610);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 568642);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 569674);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 570706);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 571738);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1924} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1925} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1926} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1927} __VERIFIER_assume($i10);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 572770);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1928} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1929} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1930} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 573802);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1931} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1932} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1933} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 574834);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1934} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1935} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1936} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 575866);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1937} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1938} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 576898);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 577930);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1939} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1940} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 578962);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 579994);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 581026);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_190: [ref]i8;
  var cmdloc_dummy_var_191: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1941} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1942} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1943} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $p6 := malloc($i5);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_190 := $M.0;
    call {:si_unique_call 1946} cmdloc_dummy_var_191 := $memset.i8(cmdloc_dummy_var_190, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_191;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 582058);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 583090);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.33, $M.56, $M.36, $M.62, $M.30, $M.59, $M.78, $M.69, $M.75, $M.72, $M.65, $M.39, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.0, $M.57, $M.58, $M.60, $M.61, $M.63, $M.64, $M.66, $M.67, $M.68, $M.43, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.79, $M.80, $M.81, $M.87, $M.88, $M.42, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.24, $M.23, $M.25, $M.27, $M.26, $M.110, $M.111, $M.112, $M.113;



implementation __SMACK_static_init()
{

  $bb0:
    $M.33 := 0;
    call {:si_unique_call 1947} {:cexpr "ldv_irq_3_1"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1948} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1949} {:cexpr "ldv_irq_3_2"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1950} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.30 := 0;
    call {:si_unique_call 1951} {:cexpr "ldv_irq_3_0"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1952} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 1953} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1954} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1955} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1956} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.72 := 0;
    call {:si_unique_call 1957} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.65 := 0;
    call {:si_unique_call 1958} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1959} {:cexpr "ldv_irq_3_3"} boogie_si_record_i32(0);
    $M.47 := $0.ref;
    $M.48 := $0.ref;
    $M.49 := $0.ref;
    $M.50 := $0.ref;
    $M.51 := $0.ref;
    $M.52 := $0.ref;
    $M.53 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1960} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, igbvf_driver_name, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_name, $mul.ref(0, 6)), $mul.ref(1, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_name, $mul.ref(0, 6)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_name, $mul.ref(0, 6)), $mul.ref(3, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_name, $mul.ref(0, 6)), $mul.ref(4, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_name, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, igbvf_driver_version, 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_version, $mul.ref(0, 8)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_version, $mul.ref(0, 8)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_version, $mul.ref(0, 8)), $mul.ref(3, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_version, $mul.ref(0, 8)), $mul.ref(4, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_version, $mul.ref(0, 8)), $mul.ref(5, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_version, $mul.ref(0, 8)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_version, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.57 := 0;
    call {:si_unique_call 1961} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.58 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 1962} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.61 := $0.ref;
    $M.63 := 0;
    call {:si_unique_call 1963} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.64 := $0.ref;
    $M.66 := 0;
    call {:si_unique_call 1964} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.67 := $0.ref;
    $M.68 := $0.ref;
    $M.43 := $0.ref;
    $M.31 := 0;
    call {:si_unique_call 1965} {:cexpr "ldv_irq_line_3_0"} boogie_si_record_i32(0);
    $M.32 := $0.ref;
    $M.34 := 0;
    call {:si_unique_call 1966} {:cexpr "ldv_irq_line_3_1"} boogie_si_record_i32(0);
    $M.35 := $0.ref;
    $M.37 := 0;
    call {:si_unique_call 1967} {:cexpr "ldv_irq_line_3_2"} boogie_si_record_i32(0);
    $M.38 := $0.ref;
    $M.40 := 0;
    call {:si_unique_call 1968} {:cexpr "ldv_irq_line_3_3"} boogie_si_record_i32(0);
    $M.41 := $0.ref;
    $M.2 := $0.ref;
    $M.3 := 0;
    call {:si_unique_call 1969} {:cexpr "ldv_timer_4_0"} boogie_si_record_i32(0);
    $M.4 := $0.ref;
    $M.5 := 0;
    call {:si_unique_call 1970} {:cexpr "ldv_timer_4_1"} boogie_si_record_i32(0);
    $M.6 := $0.ref;
    $M.7 := 0;
    call {:si_unique_call 1971} {:cexpr "ldv_timer_4_2"} boogie_si_record_i32(0);
    $M.8 := $0.ref;
    $M.9 := 0;
    call {:si_unique_call 1972} {:cexpr "ldv_timer_4_3"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1973} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.71 := $0.ref;
    $M.73 := 0;
    call {:si_unique_call 1974} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.76 := 0;
    call {:si_unique_call 1975} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.77 := $0.ref;
    $M.79 := 0;
    call {:si_unique_call 1976} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.80 := $0.ref;
    $M.81 := $0.ref;
    $M.87 := 0;
    call {:si_unique_call 1977} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 1978} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1979} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 1980} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1981} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1982} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1983} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 1984} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1985} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 1986} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1987} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 1988} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 1989} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 1990} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 1991} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 1992} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 1993} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1994} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.25 := $store.ref($M.25, set_impl, $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.25 := $store.ref($M.25, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.0 := $store.ref($M.0, igbvf_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(16, 1)), igbvf_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(24, 1)), igbvf_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(32, 1)), igbvf_xmit_frame);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(56, 1)), igbvf_set_multi);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(64, 1)), igbvf_set_mac);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(80, 1)), igbvf_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(96, 1)), igbvf_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(112, 1)), igbvf_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(128, 1)), igbvf_get_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(136, 1)), igbvf_vlan_rx_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(144, 1)), igbvf_vlan_rx_kill_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(152, 1)), igbvf_netpoll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(344, 1)), igbvf_set_features);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_netdev_ops, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.27 := $sub.i32(0, 1);
    call {:si_unique_call 1995} {:cexpr "debug"} boogie_si_record_i32($sub.i32(0, 1));
    $M.0 := $store.i32($M.0, igbvf_i350_vf_info, 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_i350_vf_info, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_i350_vf_info, $mul.ref(0, 32)), $mul.ref(8, 1)), 10);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_i350_vf_info, $mul.ref(0, 32)), $mul.ref(16, 1)), e1000_init_function_pointers_vf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_i350_vf_info, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.i32($M.0, igbvf_vf_info, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_vf_info, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(igbvf_vf_info, $mul.ref(0, 32)), $mul.ref(8, 1)), 10);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_vf_info, $mul.ref(0, 32)), $mul.ref(16, 1)), e1000_init_function_pointers_vf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_vf_info, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.26 := $store.ref($M.26, igbvf_info_tbl, igbvf_vf_info);
    $M.26 := $store.ref($M.26, $add.ref($add.ref(igbvf_info_tbl, $mul.ref(0, 16)), $mul.ref(1, 8)), igbvf_i350_vf_info);
    $M.110 := $store.i8($M.110, igbvf_copyright, 67);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(1, 1)), 111);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(2, 1)), 112);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(3, 1)), 121);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(4, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(5, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(6, 1)), 103);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(7, 1)), 104);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(8, 1)), 116);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(9, 1)), 32);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(10, 1)), 40);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(11, 1)), 99);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(12, 1)), 41);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(13, 1)), 32);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(14, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(15, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(16, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(17, 1)), 57);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(18, 1)), 32);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(19, 1)), 45);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(20, 1)), 32);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(21, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(22, 1)), 48);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(23, 1)), 49);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(24, 1)), 50);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(25, 1)), 32);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(26, 1)), 73);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(27, 1)), 110);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(28, 1)), 116);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(29, 1)), 101);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(30, 1)), 108);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(31, 1)), 32);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(32, 1)), 67);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(33, 1)), 111);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(34, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(35, 1)), 112);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(36, 1)), 111);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(37, 1)), 114);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(38, 1)), 97);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(39, 1)), 116);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(40, 1)), 105);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(41, 1)), 111);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(42, 1)), 110);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(43, 1)), 46);
    $M.110 := $store.i8($M.110, $add.ref($add.ref(igbvf_copyright, $mul.ref(0, 45)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, igbvf_driver_string, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(5, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(6, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(7, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(9, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(11, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(12, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(17, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(25, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(26, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(27, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(30, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(32, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(34, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(35, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(36, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(37, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(38, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(39, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(40, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(41, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(42, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(43, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(44, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(45, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(46, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(47, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(igbvf_driver_string, $mul.ref(0, 49)), $mul.ref(48, 1)), 0);
    $M.0 := $store.ref($M.0, igbvf_err_handler, igbvf_io_error_detected);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_err_handler, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_err_handler, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_err_handler, $mul.ref(0, 48)), $mul.ref(24, 1)), igbvf_io_slot_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_err_handler, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_err_handler, $mul.ref(0, 48)), $mul.ref(40, 1)), igbvf_io_resume);
    $M.0 := $store.i32($M.0, igbvf_pci_tbl, 32902);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 4298);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 32902);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 5408);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(igbvf_pci_tbl, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.111 := $store.ref($M.111, igbvf_driver, $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), igbvf_driver_name);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), igbvf_pci_tbl);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), igbvf_probe);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), igbvf_remove);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), igbvf_suspend);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), igbvf_resume);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), igbvf_shutdown);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), igbvf_err_handler);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.i8($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.111 := $store.i32($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.111 := $store.i64($M.111, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.111 := $store.ref($M.111, $add.ref($add.ref($add.ref($add.ref(igbvf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i8($M.0, igbvf_gstrings_test, 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(3, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(4, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(12, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(15, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(18, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(19, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(21, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(22, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(23, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_test, $mul.ref(0, 32)), $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, igbvf_gstrings_stats, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(36, 1)), 1888);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(0, 44)), $mul.ref(40, 1)), 1776);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(36, 1)), 1896);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(1, 44)), $mul.ref(40, 1)), 1784);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(36, 1)), 1904);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(2, 44)), $mul.ref(40, 1)), 1792);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(36, 1)), 1912);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(3, 44)), $mul.ref(40, 1)), 1800);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(36, 1)), 1920);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(4, 44)), $mul.ref(40, 1)), 1808);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(36, 1)), 1944);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(5, 44)), $mul.ref(40, 1)), 1832);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(36, 1)), 1952);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(6, 44)), $mul.ref(40, 1)), 1840);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(36, 1)), 1096);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(7, 44)), $mul.ref(40, 1)), 1960);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(36, 1)), 1904);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(8, 44)), $mul.ref(40, 1)), 1792);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(36, 1)), 1176);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(9, 44)), $mul.ref(40, 1)), 1960);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(36, 1)), 1168);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(10, 44)), $mul.ref(40, 1)), 1960);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(32, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(36, 1)), 1184);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(11, 44)), $mul.ref(40, 1)), 1960);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(0, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(7, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(14, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(32, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(36, 1)), 1192);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(igbvf_gstrings_stats, $mul.ref(0, 572)), $mul.ref(12, 44)), $mul.ref(40, 1)), 1960);
    $M.0 := $store.ref($M.0, igbvf_ethtool_ops, igbvf_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), igbvf_set_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), igbvf_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), igbvf_get_regs_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), igbvf_get_regs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), igbvf_get_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), igbvf_set_wol);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), igbvf_get_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), igbvf_set_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), igbvf_nway_reset);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), igbvf_get_eeprom_len);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), igbvf_get_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), igbvf_set_eeprom);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), igbvf_get_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), igbvf_set_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), igbvf_get_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), igbvf_set_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), igbvf_get_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), igbvf_set_pauseparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), igbvf_diag_test);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), igbvf_get_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), igbvf_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), igbvf_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(igbvf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.112 := $store.i8($M.112, .str.15, 37);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(2, 1)), 45);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(3, 1)), 116);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(4, 1)), 120);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(5, 1)), 45);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.112 := $store.i8($M.112, $add.ref($add.ref(.str.15, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.113 := $store.i8($M.113, .str.16, 37);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(1, 1)), 115);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(2, 1)), 45);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(3, 1)), 114);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(4, 1)), 120);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(5, 1)), 45);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(6, 1)), 48);
    $M.113 := $store.i8($M.113, $add.ref($add.ref(.str.16, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    call {:si_unique_call 1996} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 584122);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i54 := $eq.ref(igbvf_close, $p0);
    assume true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i54 == 1);
    $i53 := $eq.ref(igbvf_open, $p0);
    assume {:branchcond $i53} true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i53 == 1);
    $i52 := $eq.ref(e1000_read_mac_addr_vf, $p0);
    assume true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i52 == 1);
    $i51 := $eq.ref(e1000_check_for_link_vf, $p0);
    assume {:branchcond $i51} true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i51 == 1);
    $i50 := $eq.ref(e1000_init_hw_vf, $p0);
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i50 == 1);
    $i49 := $eq.ref(e1000_reset_hw_vf, $p0);
    assume true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i49 == 1);
    $i48 := $eq.ref(e1000_check_for_rst_vf, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i48 == 1);
    $i47 := $eq.ref(e1000_check_for_ack_vf, $p0);
    assume true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i47 == 1);
    $i46 := $eq.ref(e1000_check_for_msg_vf, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i46 == 1);
    $i45 := $eq.ref(e1000_init_mbx_params_vf, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i45 == 1);
    $i44 := $eq.ref(e1000_init_mac_params_vf, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i44 == 1);
    $i43 := $eq.ref(igbvf_io_slot_reset, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i43 == 1);
    $i42 := $eq.ref(igbvf_resume, $p0);
    assume true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i42 == 1);
    $i41 := $eq.ref(igbvf_get_eeprom_len, $p0);
    assume true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i41 == 1);
    $i40 := $eq.ref(ethtool_op_get_link, $p0);
    assume {:branchcond $i40} true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i40 == 1);
    $i39 := $eq.ref(igbvf_nway_reset, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i39 == 1);
    $i38 := $eq.ref(igbvf_get_msglevel, $p0);
    assume {:branchcond $i38} true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i38 == 1);
    $i37 := $eq.ref(igbvf_get_regs_len, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume false;
    return;

  $bb2:
    assume $i37 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1997} $i2 := igbvf_get_regs_len($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i38 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1998} $i4 := igbvf_get_msglevel($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i39 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1999} $i6 := igbvf_nway_reset($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i40 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2000} $i8 := ethtool_op_get_link($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i41 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2001} $i10 := igbvf_get_eeprom_len($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i42 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2002} $i12 := igbvf_resume($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i43 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2003} $i14 := igbvf_io_slot_reset($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i44 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2004} $i16 := e1000_init_mac_params_vf($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i45 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2005} $i18 := e1000_init_mbx_params_vf($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i46 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2006} $i20 := e1000_check_for_msg_vf($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i47 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2007} $i22 := e1000_check_for_ack_vf($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i48 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2008} $i24 := e1000_check_for_rst_vf($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i49 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2009} $i26 := e1000_reset_hw_vf($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i50 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2010} $i28 := e1000_init_hw_vf($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i51 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2011} $i30 := e1000_check_for_link_vf($p29);
    $r := $i30;
    return;

  $bb17:
    assume $i52 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2012} $i32 := e1000_read_mac_addr_vf($p31);
    $r := $i32;
    return;

  $bb18:
    assume $i53 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2013} $i34 := igbvf_open($p33);
    $r := $i34;
    return;

  $bb19:
    assume $i54 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2014} $i36 := igbvf_close($p35);
    $r := $i36;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 585154);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 586186);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i45 := $eq.ref(igbvf_close, $p0);
    assume true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i45 == 1);
    $i44 := $eq.ref(igbvf_open, $p0);
    assume true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i44 == 1);
    $i43 := $eq.ref(e1000_read_mac_addr_vf, $p0);
    assume true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i43 == 1);
    $i42 := $eq.ref(e1000_check_for_link_vf, $p0);
    assume true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i42 == 1);
    $i41 := $eq.ref(e1000_init_hw_vf, $p0);
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i41 == 1);
    $i40 := $eq.ref(e1000_reset_hw_vf, $p0);
    assume {:branchcond $i40} true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i40 == 1);
    $i39 := $eq.ref(e1000_check_for_rst_vf, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i39 == 1);
    $i38 := $eq.ref(e1000_check_for_ack_vf, $p0);
    assume {:branchcond $i38} true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i38 == 1);
    $i37 := $eq.ref(e1000_check_for_msg_vf, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i37 == 1);
    $i36 := $eq.ref(e1000_init_mbx_params_vf, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i36 == 1);
    $i35 := $eq.ref(e1000_init_mac_params_vf, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i35 == 1);
    $i34 := $eq.ref(igbvf_io_slot_reset, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i34 == 1);
    $i33 := $eq.ref(igbvf_resume, $p0);
    assume true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i33 == 1);
    $i32 := $eq.ref(igbvf_get_eeprom_len, $p0);
    assume true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i32 == 1);
    $i31 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i31 == 1);
    $i30 := $eq.ref(igbvf_nway_reset, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i30 == 1);
    $i29 := $eq.ref(igbvf_get_msglevel, $p0);
    assume true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i29 == 1);
    $i28 := $eq.ref(igbvf_get_regs_len, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i28 == 1);
    assume false;
    return;

  $bb2:
    assume $i28 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2015} $i2 := igbvf_get_regs_len($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i29 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2016} $i4 := igbvf_get_msglevel($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i30 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2017} $i6 := igbvf_nway_reset($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i31 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2018} $i8 := ethtool_op_get_link($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i32 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2019} $i10 := igbvf_get_eeprom_len($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i33 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2020} $i12 := igbvf_resume($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i34 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2021} $i14 := igbvf_io_slot_reset($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i35 == 1;
    call {:si_unique_call 2022} $i15 := e1000_init_mac_params_vf(arg);
    $r := $i15;
    return;

  $bb10:
    assume $i36 == 1;
    call {:si_unique_call 2023} $i16 := e1000_init_mbx_params_vf(arg);
    $r := $i16;
    return;

  $bb11:
    assume $i37 == 1;
    call {:si_unique_call 2024} $i17 := e1000_check_for_msg_vf(arg);
    $r := $i17;
    return;

  $bb12:
    assume $i38 == 1;
    call {:si_unique_call 2025} $i18 := e1000_check_for_ack_vf(arg);
    $r := $i18;
    return;

  $bb13:
    assume $i39 == 1;
    call {:si_unique_call 2026} $i19 := e1000_check_for_rst_vf(arg);
    $r := $i19;
    return;

  $bb14:
    assume $i40 == 1;
    call {:si_unique_call 2027} $i20 := e1000_reset_hw_vf(arg);
    $r := $i20;
    return;

  $bb15:
    assume $i41 == 1;
    call {:si_unique_call 2028} $i21 := e1000_init_hw_vf(arg);
    $r := $i21;
    return;

  $bb16:
    assume $i42 == 1;
    call {:si_unique_call 2029} $i22 := e1000_check_for_link_vf(arg);
    $r := $i22;
    return;

  $bb17:
    assume $i43 == 1;
    call {:si_unique_call 2030} $i23 := e1000_read_mac_addr_vf(arg);
    $r := $i23;
    return;

  $bb18:
    assume $i44 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2031} $i25 := igbvf_open($p24);
    $r := $i25;
    return;

  $bb19:
    assume $i45 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2032} $i27 := igbvf_close($p26);
    $r := $i27;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 587218);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 588250);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 589282);

procedure devirtbounce.5(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 590314);

procedure devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 591346);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(e1000_update_mc_addr_list_vf, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2033} e1000_update_mc_addr_list_vf(arg, arg1, arg2, arg3, arg4);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 592378);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 593410);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i3 := $eq.ref(igbvf_set_features, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2034} $i2 := igbvf_set_features($p1, arg1);
    $r := $i2;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 594442);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: ref, arg2: i16) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(igbvf_ioctl, $p0);
    assume {:branchcond $i13} true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i13 == 1);
    $i12 := $eq.ref(e1000_write_posted_mbx, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i12 == 1);
    $i11 := $eq.ref(e1000_read_posted_mbx, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i11 == 1);
    $i10 := $eq.ref(e1000_write_mbx_vf, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i10 == 1);
    $i9 := $eq.ref(e1000_read_mbx_vf, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 2035} $i1 := e1000_read_mbx_vf(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 2036} $i2 := e1000_write_mbx_vf(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 2037} $i3 := e1000_read_posted_mbx(arg, arg1, arg2);
    $r := $i3;
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 2038} $i4 := e1000_write_posted_mbx(arg, arg1, arg2);
    $r := $i4;
    return;

  $bb6:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $i7 := $zext.i16.i32(arg2);
    call {:si_unique_call 2039} $i8 := igbvf_ioctl($p5, $p6, $i7);
    $r := $i8;
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 595474);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i16, arg2: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i16, arg2: i1) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i10 := $eq.ref(igbvf_vlan_rx_kill_vid, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i10 == 1);
    $i9 := $eq.ref(e1000_set_vfta_vf, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i9 == 1);
    $i8 := $eq.ref(igbvf_vlan_rx_add_vid, $p0);
    assume {:branchcond $i8} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i1.i16(arg2);
    call {:si_unique_call 2040} $i3 := igbvf_vlan_rx_add_vid($p1, arg1, $i2);
    $r := $i3;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 2041} $i4 := e1000_set_vfta_vf(arg, arg1, arg2);
    $r := $i4;
    return;

  $bb4:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $i6 := $zext.i1.i16(arg2);
    call {:si_unique_call 2042} $i7 := igbvf_vlan_rx_kill_vid($p5, arg1, $i6);
    $r := $i7;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 596506);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 597538);

procedure devirtbounce.13(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 598570);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 599602);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 600634);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i54 := $eq.ref(igbvf_close, $p0);
    assume true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i54 == 1);
    $i53 := $eq.ref(igbvf_open, $p0);
    assume {:branchcond $i53} true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i53 == 1);
    $i52 := $eq.ref(e1000_read_mac_addr_vf, $p0);
    assume true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i52 == 1);
    $i51 := $eq.ref(e1000_check_for_link_vf, $p0);
    assume {:branchcond $i51} true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i51 == 1);
    $i50 := $eq.ref(e1000_init_hw_vf, $p0);
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i50 == 1);
    $i49 := $eq.ref(e1000_reset_hw_vf, $p0);
    assume true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i49 == 1);
    $i48 := $eq.ref(e1000_check_for_rst_vf, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i48 == 1);
    $i47 := $eq.ref(e1000_check_for_ack_vf, $p0);
    assume true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i47 == 1);
    $i46 := $eq.ref(e1000_check_for_msg_vf, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i46 == 1);
    $i45 := $eq.ref(e1000_init_mbx_params_vf, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i45 == 1);
    $i44 := $eq.ref(e1000_init_mac_params_vf, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i44 == 1);
    $i43 := $eq.ref(igbvf_io_slot_reset, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i43 == 1);
    $i42 := $eq.ref(igbvf_resume, $p0);
    assume true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i42 == 1);
    $i41 := $eq.ref(igbvf_get_eeprom_len, $p0);
    assume true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i41 == 1);
    $i40 := $eq.ref(ethtool_op_get_link, $p0);
    assume {:branchcond $i40} true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i40 == 1);
    $i39 := $eq.ref(igbvf_nway_reset, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i39 == 1);
    $i38 := $eq.ref(igbvf_get_msglevel, $p0);
    assume {:branchcond $i38} true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i38 == 1);
    $i37 := $eq.ref(igbvf_get_regs_len, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume false;
    return;

  $bb2:
    assume $i37 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2043} $i2 := igbvf_get_regs_len($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i38 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2044} $i4 := igbvf_get_msglevel($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i39 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2045} $i6 := igbvf_nway_reset($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i40 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2046} $i8 := ethtool_op_get_link($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i41 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2047} $i10 := igbvf_get_eeprom_len($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i42 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2048} $i12 := igbvf_resume($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i43 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2049} $i14 := igbvf_io_slot_reset($p13);
    $r := $i14;
    return;

  $bb9:
    assume $i44 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2050} $i16 := e1000_init_mac_params_vf($p15);
    $r := $i16;
    return;

  $bb10:
    assume $i45 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2051} $i18 := e1000_init_mbx_params_vf($p17);
    $r := $i18;
    return;

  $bb11:
    assume $i46 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2052} $i20 := e1000_check_for_msg_vf($p19);
    $r := $i20;
    return;

  $bb12:
    assume $i47 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2053} $i22 := e1000_check_for_ack_vf($p21);
    $r := $i22;
    return;

  $bb13:
    assume $i48 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2054} $i24 := e1000_check_for_rst_vf($p23);
    $r := $i24;
    return;

  $bb14:
    assume $i49 == 1;
    $p25 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2055} $i26 := e1000_reset_hw_vf($p25);
    $r := $i26;
    return;

  $bb15:
    assume $i50 == 1;
    $p27 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2056} $i28 := e1000_init_hw_vf($p27);
    $r := $i28;
    return;

  $bb16:
    assume $i51 == 1;
    $p29 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2057} $i30 := e1000_check_for_link_vf($p29);
    $r := $i30;
    return;

  $bb17:
    assume $i52 == 1;
    $p31 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2058} $i32 := e1000_read_mac_addr_vf($p31);
    $r := $i32;
    return;

  $bb18:
    assume $i53 == 1;
    $p33 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2059} $i34 := igbvf_open($p33);
    $r := $i34;
    return;

  $bb19:
    assume $i54 == 1;
    $p35 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2060} $i36 := igbvf_close($p35);
    $r := $i36;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 601666);

procedure devirtbounce.17(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.28, $M.3, $M.5, $M.7, $M.9, $M.42, $M.2, $M.4, $M.6, $M.8, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.17(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i17 := $eq.ref(igbvf_netpoll, $p0);
    assume true;
    goto $bb10, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(igbvf_tx_timeout, $p0);
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(e1000_init_function_pointers_vf, $p0);
    assume true;
    goto $bb8, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(igbvf_io_resume, $p0);
    assume {:branchcond $i14} true;
    goto $bb7, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(igbvf_watchdog_task, $p0);
    assume {:branchcond $i13} true;
    goto $bb6, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(igbvf_reset_task, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(igbvf_shutdown, $p0);
    assume true;
    goto $bb4, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(igbvf_remove, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb12;

  $bb12:
    assume !($i10 == 1);
    $i9 := $eq.ref(igbvf_set_multi, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2061} igbvf_set_multi($p1);
    return;

  $bb3:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2062} igbvf_remove($p2);
    return;

  $bb4:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2063} igbvf_shutdown($p3);
    return;

  $bb5:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2064} igbvf_reset_task($p4);
    return;

  $bb6:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2065} igbvf_watchdog_task($p5);
    return;

  $bb7:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2066} igbvf_io_resume($p6);
    return;

  $bb8:
    assume $i15 == 1;
    call {:si_unique_call 2067} e1000_init_function_pointers_vf(arg);
    return;

  $bb9:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2068} igbvf_tx_timeout($p7);
    return;

  $bb10:
    assume $i17 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2069} igbvf_netpoll($p8);
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 602698);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.18(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(e1000_get_link_up_info_vf, $p0);
    assume {:branchcond $i12} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(igbvf_set_eeprom, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i11 == 1);
    $i10 := $eq.ref(igbvf_get_eeprom, $p0);
    assume {:branchcond $i10} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2070} $i4 := igbvf_get_eeprom($p1, $p2, $p3);
    $r := $i4;
    return;

  $bb3:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    $p7 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 2071} $i8 := igbvf_set_eeprom($p5, $p6, $p7);
    $r := $i8;
    return;

  $bb4:
    assume $i12 == 1;
    call {:si_unique_call 2072} $i9 := e1000_get_link_up_info_vf(arg, arg1, arg2);
    $r := $i9;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 603730);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 604762);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 605794);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(e1000_rar_set_vf, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 2073} e1000_rar_set_vf(arg, arg1, arg2);
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 606826);

procedure devirtbounce.22(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 607858);

procedure devirtbounce.23(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.33, $M.56, $M.36, $M.62, $M.30, $M.59, $M.78, $M.69, $M.75, $M.72, $M.65, $M.39, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.0, $M.57, $M.58, $M.60, $M.61, $M.63, $M.64, $M.66, $M.67, $M.68, $M.43, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.79, $M.80, $M.81, $M.87, $M.88, $M.42, $M.89, $M.90, $M.91, $M.92, $M.93, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.24, $M.23, $M.25, $M.27, $M.26, $M.110, $M.111, $M.112, $M.113, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2074} __SMACK_static_init();
    call {:si_unique_call 2075} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.42, $M.89, $M.90, $M.91, $M.92, $M.3, $M.5, $M.7, $M.9, $M.93, $M.94, $M.95, $M.54, $M.96, $M.0, $M.30, $M.97, $M.98, $M.56, $M.69, $M.99, $M.68, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.81, $M.100, $M.28, $M.101, $M.102, $M.29, $M.33, $M.36, $M.62, $M.59, $M.78, $M.75, $M.72, $M.65, $M.39, $M.57, $M.58, $M.60, $M.61, $M.63, $M.64, $M.66, $M.67, $M.43, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41, $M.2, $M.4, $M.6, $M.8, $M.70, $M.71, $M.73, $M.74, $M.76, $M.77, $M.79, $M.80, $M.24, $M.23, $M.25, $M.27, $M.26, $M.110, $M.111, $M.112, $M.113, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.46;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation igbvf_set_ringparam_loop_$bb29(in_$p37: ref, in_$i40: i32, in_$i41: i1) returns (out_$i40: i32, out_$i41: i1)
{

  entry:
    out_$i40, out_$i41 := in_$i40, in_$i41;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i41 == 1;
    goto $bb31_dummy;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} out_$i40 := test_and_set_bit(1, in_$p37);
    call {:si_unique_call 55} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_375;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} msleep(1);
    goto corral_source_split_374;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i40, out_$i41 := igbvf_set_ringparam_loop_$bb29(in_$p37, out_$i40, out_$i41);
    return;

  exit:
    return;
}



procedure igbvf_set_ringparam_loop_$bb29(in_$p37: ref, in_$i40: i32, in_$i41: i1) returns (out_$i40: i32, out_$i41: i1);
  modifies $CurrAddr;



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation igbvf_set_multi_loop_$bb11(in_$p15: ref, in_$i25: i64, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i38: i32, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i37: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i28: i32, in_$p29: ref, in_$i51: i32, in_cmdloc_dummy_var_110: [ref]i8, in_cmdloc_dummy_var_111: [ref]i8, in_cmdloc_dummy_var_112: [ref]i8, in_cmdloc_dummy_var_113: [ref]i8, in_cmdloc_dummy_var_114: [ref]i8, in_cmdloc_dummy_var_115: [ref]i8) returns (out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i38: i32, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i37: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i28: i32, out_$p29: ref, out_$i51: i32, out_cmdloc_dummy_var_110: [ref]i8, out_cmdloc_dummy_var_111: [ref]i8, out_cmdloc_dummy_var_112: [ref]i8, out_cmdloc_dummy_var_113: [ref]i8, out_cmdloc_dummy_var_114: [ref]i8, out_cmdloc_dummy_var_115: [ref]i8)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i37, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i28, out_$p29, out_$i51, out_cmdloc_dummy_var_110, out_cmdloc_dummy_var_111, out_cmdloc_dummy_var_112, out_cmdloc_dummy_var_113, out_cmdloc_dummy_var_114, out_cmdloc_dummy_var_115 := in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p36, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$i37, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i28, in_$p29, in_$i51, in_cmdloc_dummy_var_110, in_cmdloc_dummy_var_111, in_cmdloc_dummy_var_112, in_cmdloc_dummy_var_113, in_cmdloc_dummy_var_114, in_cmdloc_dummy_var_115;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1913;

  $bb16:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$p29 := out_$i37, out_$p46;
    goto $bb16_dummy;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    out_$i51 := out_$i37;
    assume true;
    goto $bb16;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, in_$i25);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_1939;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p47, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_1937;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1935;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1934;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_113 := $M.0;
    out_cmdloc_dummy_var_114 := $M.0;
    call {:si_unique_call 274} out_cmdloc_dummy_var_115 := $memcpy.i8(out_cmdloc_dummy_var_113, out_cmdloc_dummy_var_114, out_$p41, out_$p43, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_115;
    assume {:verifier.code 0} true;
    out_$i37 := out_$i38;
    goto $bb15;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i31;
    goto $bb15;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_110 := $M.0;
    out_cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 272} out_cmdloc_dummy_var_112 := $memcpy.i8(out_cmdloc_dummy_var_110, out_cmdloc_dummy_var_111, out_$p34, out_$p36, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_112;
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_1923;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p29, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(in_$p15, $mul.ref(out_$i33, 1));
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i32 := $mul.i32(out_$i28, 6);
    goto corral_source_split_1919;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i28, 1);
    call {:si_unique_call 271} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1918;

  $bb13:
    assume out_$i30 == 1;
    goto corral_source_split_1917;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i30 := $ugt.i64(6, 63);
    goto corral_source_split_1915;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p29, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(in_$p15, $mul.ref(out_$i40, 1));
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i40 := $sext.i32.i64(out_$i39);
    goto corral_source_split_1929;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i39 := $mul.i32(out_$i28, 6);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i28, 1);
    call {:si_unique_call 273} {:cexpr "i"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_1927;

  $bb14:
    assume !(out_$i30 == 1);
    goto corral_source_split_1926;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i37, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i28, out_$p29, out_$i51, out_cmdloc_dummy_var_110, out_cmdloc_dummy_var_111, out_cmdloc_dummy_var_112, out_cmdloc_dummy_var_113, out_cmdloc_dummy_var_114, out_cmdloc_dummy_var_115 := igbvf_set_multi_loop_$bb11(in_$p15, in_$i25, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$i37, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i28, out_$p29, out_$i51, out_cmdloc_dummy_var_110, out_cmdloc_dummy_var_111, out_cmdloc_dummy_var_112, out_cmdloc_dummy_var_113, out_cmdloc_dummy_var_114, out_cmdloc_dummy_var_115);
    return;

  exit:
    return;
}



procedure igbvf_set_multi_loop_$bb11(in_$p15: ref, in_$i25: i64, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i38: i32, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i37: i32, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$i28: i32, in_$p29: ref, in_$i51: i32, in_cmdloc_dummy_var_110: [ref]i8, in_cmdloc_dummy_var_111: [ref]i8, in_cmdloc_dummy_var_112: [ref]i8, in_cmdloc_dummy_var_113: [ref]i8, in_cmdloc_dummy_var_114: [ref]i8, in_cmdloc_dummy_var_115: [ref]i8) returns (out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i38: i32, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i37: i32, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$i28: i32, out_$p29: ref, out_$i51: i32, out_cmdloc_dummy_var_110: [ref]i8, out_cmdloc_dummy_var_111: [ref]i8, out_cmdloc_dummy_var_112: [ref]i8, out_cmdloc_dummy_var_113: [ref]i8, out_cmdloc_dummy_var_114: [ref]i8, out_cmdloc_dummy_var_115: [ref]i8);
  modifies $M.0;



implementation igbvf_restore_vlan_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$i7: i16, in_vslice_dummy_var_205: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$i7: i16, out_vslice_dummy_var_205: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_vslice_dummy_var_205 := in_$p8, in_$p9, in_$i10, in_$i11, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i7, in_vslice_dummy_var_205;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1958;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i19;
    goto $bb6_dummy;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$i21 := $ule.i32(out_$i20, 4095);
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i64.i16(out_$i18);
    call {:si_unique_call 283} {:cexpr "vid"} boogie_si_record_i16(out_$i19);
    goto corral_source_split_1971;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} out_$i18 := find_next_bit(out_$p14, 4096, out_$i17);
    call {:si_unique_call 282} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1970;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_1969;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i15, 1);
    goto corral_source_split_1968;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i7);
    goto corral_source_split_1967;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2616)), $mul.ref(424, 1));
    goto corral_source_split_1965;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} out_vslice_dummy_var_205 := igbvf_vlan_rx_add_vid(out_$p9, 129, out_$i11);
    goto corral_source_split_1964;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i32.i16(out_$i10);
    goto corral_source_split_1963;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i7);
    goto corral_source_split_1962;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_1961;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2616)), $mul.ref(1176, 1));
    goto corral_source_split_1960;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_vslice_dummy_var_205 := igbvf_restore_vlan_loop_$bb4(in_$p0, out_$p8, out_$p9, out_$i10, out_$i11, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_vslice_dummy_var_205);
    return;

  exit:
    return;
}



procedure igbvf_restore_vlan_loop_$bb4(in_$p0: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i16, in_$i20: i32, in_$i21: i1, in_$i7: i16, in_vslice_dummy_var_205: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i16, out_$i20: i32, out_$i21: i1, out_$i7: i16, out_vslice_dummy_var_205: i32);
  modifies $M.0, $CurrAddr, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation igbvf_alloc_rx_buffers_loop_$bb7(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i20: i32, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$i115: i32, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$i154: i64, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$p164: ref, in_$p165: ref, in_$i166: i64, in_$p167: ref, in_$i168: i32, in_$i169: i1, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$i170: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$i115: i32, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$i154: i64, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$p164: ref, out_$p165: ref, out_$i166: i64, out_$p167: ref, out_$i168: i32, out_$i169: i1, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$i170: i32)
{

  entry:
    out_$p29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$i146, out_$p147, out_$p148, out_$p149, out_$i150, out_$p151, out_$p152, out_$p153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i26, out_$i27, out_$p28, out_$i170 := in_$p29, in_$p30, in_$i31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$p86, in_$p87, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$p96, in_$i97, in_$p108, in_$p109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$p120, in_$p121, in_$p122, in_$p123, in_$i124, in_$i125, in_$p126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i131, in_$p132, in_$i133, in_$p140, in_$i141, in_$i142, in_$p143, in_$p144, in_$p145, in_$i146, in_$p147, in_$p148, in_$p149, in_$i150, in_$p151, in_$p152, in_$p153, in_$i154, in_$p155, in_$p156, in_$p157, in_$p158, in_$i159, in_$p160, in_$i161, in_$i162, in_$i163, in_$p164, in_$p165, in_$i166, in_$p167, in_$i168, in_$i169, in_$i26, in_$i27, in_$p28, in_$i170;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2185;

  $bb41:
    assume out_$i169 == 1;
    assume {:verifier.code 0} true;
    out_$i26, out_$i27, out_$p28 := out_$i168, out_$i163, out_$p167;
    goto $bb41_dummy;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i170 := out_$i163;
    assume true;
    goto $bb41;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i169 := $ne.i32(out_$i26, 0);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    out_$i168 := $sub.i32(out_$i26, 1);
    call {:si_unique_call 345} {:cexpr "cleaned_count"} boogie_si_record_i32(out_$i168);
    goto corral_source_split_2371;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref(out_$p165, $mul.ref(out_$i166, 40));
    goto corral_source_split_2370;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i166 := $zext.i32.i64(out_$i163);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$p165 := $load.ref($M.0, out_$p164);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2367;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_2366;

  $bb39:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    out_$i163 := out_$i159;
    goto $bb40;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    out_$i163 := 0;
    goto $bb40;

  $bb38:
    assume out_$i162 == 1;
    goto corral_source_split_2364;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, out_$i159);
    goto corral_source_split_2362;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.0, out_$p160);
    goto corral_source_split_2361;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_2360;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i159 := $add.i32(out_$i27, 1);
    call {:si_unique_call 344} {:cexpr "i"} boogie_si_record_i32(out_$i159);
    goto corral_source_split_2359;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, out_$p158, 0);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, out_$p152, out_$i150);
    goto corral_source_split_2348;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(out_$p151, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2347;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2346;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i64($M.19, out_$p149);
    goto corral_source_split_2345;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2344;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, out_$p148, out_$i146);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(out_$p147, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$p147 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i146 := $load.i64($M.14, out_$p145);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p144, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$p144 := $bitcast.ref.ref(out_$p143);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2337;

  $bb35:
    assume out_$i142 == 1;
    goto corral_source_split_2336;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i32(out_$i141, 0);
    goto corral_source_split_2334;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i32($M.12, out_$p140);
    goto corral_source_split_2333;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2332;

  $bb27:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    out_$p132, out_$i133 := out_$p28, out_$i27;
    assume true;
    goto $bb32;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i32(out_$i130, 0);
    goto corral_source_split_2320;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} out_$i130 := dma_mapping_error(out_$p127, out_$i129);
    call {:si_unique_call 341} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_2319;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i64($M.19, out_$p128);
    goto corral_source_split_2318;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2317;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(in_$p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2316;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $M.19 := $store.i64($M.19, out_$p126, out_$i125);
    goto corral_source_split_2315;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} out_$i125 := dma_map_single_attrs(out_$p121, out_$p123, out_$i124, 2, $0.ref);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(in_$i20);
    goto corral_source_split_2312;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_2311;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p112, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2309;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, out_$p120, out_$p112);
    goto corral_source_split_2308;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2307;

  $bb29:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    out_$i115 := out_$i27;
    assume true;
    goto $bb29;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i64(out_$i113, 0);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_2297;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} out_$p112 := netdev_alloc_skb_ip_align(in_$p5, in_$i20);
    goto corral_source_split_2296;

  $bb26:
    assume out_$i111 == 1;
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i64(out_$i110, 0);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p109);
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.18, out_$p108);
    goto corral_source_split_2291;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2290;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    out_$p96, out_$i97 := out_$p28, out_$i27;
    assume true;
    goto $bb22;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} out_$i94 := dma_mapping_error(out_$p89, out_$i93);
    call {:si_unique_call 335} {:cexpr "tmp"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.14, out_$p92);
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(out_$p90);
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.14 := $store.i64($M.14, out_$p88, out_$i85);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p87, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} out_$i85 := dma_map_page(out_$p75, out_$p79, out_$i84, 2048, 2);
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i32.i64(out_$i83);
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.17, out_$p82);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.15, out_$p78);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p76);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2253;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p7, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2252;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, out_$p74, out_$i71);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, out_$p66, 0);
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_2248;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2247;

  $bb17:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i27;
    assume true;
    goto $bb17;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i56, 0);
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.15, out_$p54);
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p53, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(out_$p52);
    goto corral_source_split_2218;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $M.15 := $store.ref($M.15, out_$p51, out_$p48);
    goto corral_source_split_2216;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2215;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2213;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} out_$p48 := alloc_pages(32, 0);
    goto corral_source_split_2212;

  $bb14:
    assume out_$i47 == 1;
    goto corral_source_split_2211;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.15, out_$p44);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2204;

  $bb12:
    assume out_$i41 == 1;
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i64(out_$i40, 0);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.14, out_$p39);
    goto corral_source_split_2200;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_2198;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2197;

  $bb9:
    assume out_$i36 == 1;
    goto corral_source_split_2196;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_2194;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.12, out_$p34);
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2192;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p30, $mul.ref(out_$i31, 16));
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i32.i64(out_$i27);
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2188;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i71 := $xor.i32(out_$i70, 2048);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.17, out_$p69);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2225;

  $bb15:
    assume !(out_$i47 == 1);
    goto corral_source_split_2224;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb11;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(out_$p157, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2357;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    out_$p157 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2356;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $M.20 := $store.i64($M.20, out_$p156, out_$i154);
    goto corral_source_split_2355;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p155, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2354;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    out_$p155 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2353;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i64($M.19, out_$p153);
    goto corral_source_split_2352;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(out_$p28, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2351;

  $bb36:
    assume !(out_$i142 == 1);
    goto corral_source_split_2350;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$i146, out_$p147, out_$p148, out_$p149, out_$i150, out_$p151, out_$p152, out_$p153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i26, out_$i27, out_$p28, out_$i170 := igbvf_alloc_rx_buffers_loop_$bb7(in_$p0, in_$p3, in_$p5, in_$p7, in_$i20, out_$p29, out_$p30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$p87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$p96, out_$i97, out_$p108, out_$p109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$i133, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144, out_$p145, out_$i146, out_$p147, out_$p148, out_$p149, out_$i150, out_$p151, out_$p152, out_$p153, out_$i154, out_$p155, out_$p156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i26, out_$i27, out_$p28, out_$i170);
    return;

  exit:
    return;
}



procedure igbvf_alloc_rx_buffers_loop_$bb7(in_$p0: ref, in_$p3: ref, in_$p5: ref, in_$p7: ref, in_$i20: i32, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$i58: i32, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i64, in_$i85: i64, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$i115: i32, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$i125: i64, in_$p126: ref, in_$p127: ref, in_$p128: ref, in_$i129: i64, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i133: i32, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$i146: i64, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$i154: i64, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$p158: ref, in_$i159: i32, in_$p160: ref, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$p164: ref, in_$p165: ref, in_$i166: i64, in_$p167: ref, in_$i168: i32, in_$i169: i1, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$i170: i32) returns (out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$i58: i32, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i64, out_$i85: i64, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$i115: i32, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$i125: i64, out_$p126: ref, out_$p127: ref, out_$p128: ref, out_$i129: i64, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i133: i32, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$i146: i64, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$i154: i64, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$p158: ref, out_$i159: i32, out_$p160: ref, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$p164: ref, out_$p165: ref, out_$i166: i64, out_$p167: ref, out_$i168: i32, out_$i169: i1, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$i170: i32);
  modifies $M.21, $M.20, $M.0, $M.19, $M.18, $M.14, $M.17, $M.15;



implementation dma_map_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_page_loop_$bb3();



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2515;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$i28 := $M.24;
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 398} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_2524;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.25 := $store.ref($M.25, out_$p26, out_$p23);
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2521;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.25, out_$p22);
    goto corral_source_split_2519;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_2518;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_2517;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.25;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2488;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_2506;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    out_$i14 := $M.24;
    goto corral_source_split_2505;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 396} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2504;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.25, out_$p7);
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_2491;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation igbvf_clean_rx_ring_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i12 := in_$p13, in_$p14, in_$i15, in_$p17, in_$i18, in_$i19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$i12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  $bb25:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i73;
    goto $bb25_dummy;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i75 := $ugt.i32(out_$i74, out_$i73);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.0, in_$p9);
    goto corral_source_split_2775;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i12, 1);
    call {:si_unique_call 457} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_2774;

  $bb20:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, 0);
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p69, 0);
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, $0.ref);
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p65, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} put_page(out_$p63);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_2757;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2756;

  $bb22:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} dma_unmap_page(out_$p55, out_$i59, 2048, 2);
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.0, out_$p58);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2749;

  $bb21:
    assume out_$i54 == 1;
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i64($M.0, out_$p52);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2742;

  $bb19:
    assume out_$i49 == 1;
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i64(out_$i48, 0);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_2735;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(16, 1));
    goto corral_source_split_2734;

  $bb17:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p43, $0.ref);
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2731;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} ldv_skb_free(out_$p42);
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_2729;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2727;

  $bb16:
    assume out_$i39 == 1;
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i64(out_$i38, 0);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_2722;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(8, 1));
    goto corral_source_split_2721;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p35, 0);
    goto corral_source_split_2719;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} dma_unmap_single_attrs(out_$p29, out_$i31, out_$i34, 2, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} dma_unmap_single_attrs(out_$p23, out_$i25, out_$i28, 2, $0.ref);
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_2707;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2705;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2702;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2616)), $mul.ref(1160, 1));
    goto corral_source_split_2697;

  $bb10:
    assume out_$i19 == 1;
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.0, out_$p17);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i12);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_2689;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i33);
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p2, $mul.ref(0, 2616)), $mul.ref(940, 1));
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i64($M.0, out_$p30);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p14, $mul.ref(out_$i15, 40)), $mul.ref(0, 1));
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2711;

  $bb13:
    assume !(out_$i22 == 1);
    goto corral_source_split_2710;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i12 := igbvf_clean_rx_ring_loop_$bb8(in_$p0, in_$p2, in_$p4, in_$p9, out_$p13, out_$p14, out_$i15, out_$p17, out_$i18, out_$i19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$i12);
    return;

  exit:
    return;
}



procedure igbvf_clean_rx_ring_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p4: ref, in_$p9: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i64, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i64, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i12: i32);
  modifies $M.0, $M.25, $M.24;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation dma_unmap_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_page_loop_$bb3();



implementation igbvf_clean_tx_ring_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i10: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i10 := in_$p11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i10;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3008;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i15;
    goto $bb10_dummy;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$i17 := $ugt.i32(out_$i16, out_$i15);
    goto corral_source_split_3017;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, in_$p7);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i10, 1);
    call {:si_unique_call 535} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} igbvf_put_txbuf(in_$p2, out_$p14);
    goto corral_source_split_3014;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 40));
    goto corral_source_split_3013;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i10);
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_3011;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i10 := igbvf_clean_tx_ring_loop_$bb8(in_$p0, in_$p2, in_$p7, out_$p11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i10);
    return;

  exit:
    return;
}



procedure igbvf_clean_tx_ring_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i10: i32);
  modifies $M.0;



implementation napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} out_$i5 := test_and_set_bit(0, in_$p2);
    call {:si_unique_call 554} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_3133;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} msleep(1);
    goto corral_source_split_3132;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := napi_disable_loop_$bb4(in_$p2, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr;



implementation igbvf_reinit_locked_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1)
{

  entry:
    out_$i4, out_$i5 := in_$i4, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i5 == 1;
    goto $bb6_dummy;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} out_$i4 := test_and_set_bit(1, in_$p1);
    call {:si_unique_call 603} {:cexpr "tmp"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_3352;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} msleep(1);
    goto corral_source_split_3351;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i4, out_$i5 := igbvf_reinit_locked_loop_$bb4(in_$p1, out_$i4, out_$i5);
    return;

  exit:
    return;
}



procedure igbvf_reinit_locked_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i5: i1) returns (out_$i4: i32, out_$i5: i1);
  modifies $CurrAddr;



implementation igbvf_clean_tx_irq_loop_$bb13(in_$p0: ref, in_$p2: ref, in_$p25: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$i69: i8, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$p113: ref) returns (out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$i69: i8, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$p113: ref)
{

  entry:
    out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113 := in_$p61, in_$p62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4337;

  $bb25:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$p56, out_$i57, out_$i58, out_$i59, out_$i60 := out_$p106, out_$i107, out_$i102, out_$i95, out_$i94;
    goto $bb25_dummy;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i109, out_$i110, out_$i111, out_$i112, out_$p113 := out_$i94, out_$i95, out_$i102, out_$i107, out_$p106;
    assume true;
    goto $bb25;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i8.i1(out_$i69);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i57, 1);
    call {:si_unique_call 837} {:cexpr "count"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref(out_$p104, $mul.ref(out_$i105, 40));
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i102);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_4391;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4390;

  $bb22:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := out_$i98;
    goto $bb23;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    out_$i102 := 0;
    goto $bb23;

  $bb21:
    assume out_$i101 == 1;
    goto corral_source_split_4388;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, out_$i98);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i58, 1);
    call {:si_unique_call 836} {:cexpr "i"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p97, 0);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p96, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} igbvf_put_txbuf(in_$p2, out_$p56);
    goto corral_source_split_4379;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4378;

  $bb16:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i94, out_$i95 := out_$i60, out_$i59;
    goto $bb20;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$i94, out_$i95 := out_$i92, out_$i93;
    goto $bb20;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i59, out_$i91);
    call {:si_unique_call 834} {:cexpr "total_bytes"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i60, out_$i85);
    call {:si_unique_call 833} {:cexpr "total_packets"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i88, out_$i90);
    call {:si_unique_call 832} {:cexpr "bytecount"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, out_$p89);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p71, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i88 := $mul.i32(out_$i87, out_$i86);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i87 := $sub.i32(out_$i85, 1);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} out_$i86 := skb_headlen(out_$p71);
    call {:si_unique_call 831} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_4369;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4368;

  $bb18:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := 1;
    goto $bb19;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i84;
    goto $bb19;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i83);
    call {:si_unique_call 829} {:cexpr "segs"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i16($M.0, out_$p82);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} out_$p80 := skb_end_pointer(out_$p71);
    goto corral_source_split_4362;

  $bb17:
    assume out_$i79 == 1;
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.0, out_$p76);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_$p74 := skb_end_pointer(out_$p71);
    goto corral_source_split_4354;

  $bb15:
    assume out_$i73 == 1;
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p56, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i8(out_$i68);
    call {:si_unique_call 826} {:cexpr "cleaned"} boogie_si_record_i8(out_$i69);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i64(out_$i66, out_$i67);
    goto corral_source_split_4346;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(in_$p25);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 16));
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i58);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_4340;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113 := igbvf_clean_tx_irq_loop_$bb13(in_$p0, in_$p2, in_$p25, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113);
    return;

  exit:
    return;
}



procedure igbvf_clean_tx_irq_loop_$bb13(in_$p0: ref, in_$p2: ref, in_$p25: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$i69: i8, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$p113: ref) returns (out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$i69: i8, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$p113: ref);
  modifies $M.0;



implementation igbvf_clean_tx_irq_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$i69: i8, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i32) returns (out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$i69: i8, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i32)
{

  entry:
    out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124 := in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p61, in_$p62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$p96, in_$p97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$p106, in_$i107, in_$i108, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27 := out_$p33, out_$i32, out_$i31, out_$p30, out_$i29, out_$i28;
    goto $bb7_dummy;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37, out_$i38, out_$i39 := out_$i28, out_$i29, out_$i31, out_$i32;
    assume true;
    goto $bb7;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i64(out_$i34, 0);
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_4309;

  $bb5:
    assume out_$i120 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4308;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i121, out_$i122, out_$i123, out_$i124 := out_$i109, out_$i110, out_$p117, out_$i111, out_$i112, out_$p113, out_$i109, out_$i110, out_$i111, out_$i112;
    assume true;
    goto $bb5;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    out_$i120 := $ugt.i32(out_$i119, out_$i112);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.0, out_$p118);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p115, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_4399;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4398;

  $bb24:
    assume out_$i108 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i109, out_$i110, out_$i111, out_$i112, out_$p113 := out_$i94, out_$i95, out_$i102, out_$i107, out_$p106;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i8.i1(out_$i69);
    goto corral_source_split_4396;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i57, 1);
    call {:si_unique_call 837} {:cexpr "count"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_4395;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref(out_$p104, $mul.ref(out_$i105, 40));
    goto corral_source_split_4394;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i32.i64(out_$i102);
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_4392;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_4391;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4390;

  $bb22:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := out_$i98;
    goto $bb23;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    out_$i102 := 0;
    goto $bb23;

  $bb21:
    assume out_$i101 == 1;
    goto corral_source_split_4388;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, out_$i98);
    goto corral_source_split_4386;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_4385;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_4384;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i58, 1);
    call {:si_unique_call 836} {:cexpr "i"} boogie_si_record_i32(out_$i98);
    goto corral_source_split_4383;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p97, 0);
    goto corral_source_split_4382;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(out_$p96, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4381;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p65);
    goto corral_source_split_4380;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} igbvf_put_txbuf(in_$p2, out_$p56);
    goto corral_source_split_4379;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4378;

  $bb16:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i94, out_$i95 := out_$i60, out_$i59;
    goto $bb20;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    out_$i94, out_$i95 := out_$i92, out_$i93;
    goto $bb20;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    out_$i93 := $add.i32(out_$i59, out_$i91);
    call {:si_unique_call 834} {:cexpr "total_bytes"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_4376;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i60, out_$i85);
    call {:si_unique_call 833} {:cexpr "total_packets"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_4375;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i88, out_$i90);
    call {:si_unique_call 832} {:cexpr "bytecount"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_4374;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.0, out_$p89);
    goto corral_source_split_4373;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p71, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4372;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    out_$i88 := $mul.i32(out_$i87, out_$i86);
    goto corral_source_split_4371;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i87 := $sub.i32(out_$i85, 1);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} out_$i86 := skb_headlen(out_$p71);
    call {:si_unique_call 831} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_4369;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4368;

  $bb18:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := 1;
    goto $bb19;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i84;
    goto $bb19;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i16.i32(out_$i83);
    call {:si_unique_call 829} {:cexpr "segs"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i16($M.0, out_$p82);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p81, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(out_$p80);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} out_$p80 := skb_end_pointer(out_$p71);
    goto corral_source_split_4362;

  $bb17:
    assume out_$i79 == 1;
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.0, out_$p76);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} out_$p74 := skb_end_pointer(out_$p71);
    goto corral_source_split_4354;

  $bb15:
    assume out_$i73 == 1;
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_4350;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_4349;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p56, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4348;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i8(out_$i68);
    call {:si_unique_call 826} {:cexpr "cleaned"} boogie_si_record_i8(out_$i69);
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i64(out_$i66, out_$i67);
    goto corral_source_split_4346;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_4345;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4343;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 16));
    goto corral_source_split_4342;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i58);
    goto corral_source_split_4341;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_4340;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_4339;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    call out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113 := igbvf_clean_tx_irq_loop_$bb13(in_$p0, in_$p2, out_$p25, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4337;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    out_$p56, out_$i57, out_$i58, out_$i59, out_$i60 := out_$p22, out_$i23, out_$i24, out_$i26, out_$i27;
    goto $bb13;

  $bb25:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    out_$p56, out_$i57, out_$i58, out_$i59, out_$i60 := out_$p106, out_$i107, out_$i102, out_$i95, out_$i94;
    assume false;
    return;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p55, $0.ref);
    goto corral_source_split_4335;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4334;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_4333;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p22, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4332;

  $bb11:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i49, out_$i50, out_$i51, out_$i52 := out_$i27, out_$i26, out_$i24, out_$i23;
    assume true;
    goto $bb11;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 0);
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 1);
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4325;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_4324;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124 := igbvf_clean_tx_irq_loop_$bb4(in_$p0, in_$p2, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$p106, out_$i107, out_$i108, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124);
    return;

  exit:
    return;
}



procedure igbvf_clean_tx_irq_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$i69: i8, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i1, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i16, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$p96: ref, in_$p97: ref, in_$i98: i32, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i102: i32, in_$p103: ref, in_$p104: ref, in_$i105: i64, in_$p106: ref, in_$i107: i32, in_$i108: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i32, in_$i123: i32, in_$i124: i32) returns (out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$i69: i8, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i1, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i16, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$p96: ref, out_$p97: ref, out_$i98: i32, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i102: i32, out_$p103: ref, out_$p104: ref, out_$i105: i64, out_$p106: ref, out_$i107: i32, out_$i108: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i32, out_$i123: i32, out_$i124: i32);
  modifies $M.0;



implementation {:SIextraRecBound 3} igbvf_free_irq_loop_$bb3(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i7 := in_$p8, in_$p9, in_$i10, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i7;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4532;

  $bb5:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i15;
    goto $bb5_dummy;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    out_$i16 := $sle.i32(out_$i15, 2);
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i7, 1);
    call {:si_unique_call 868} {:cexpr "vector"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4542;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} ldv_free_irq_49(out_$i13, out_$p14);
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_4539;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 8)), $mul.ref(0, 1));
    goto corral_source_split_4538;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto corral_source_split_4537;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_4535;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2616)), $mul.ref(2544, 1));
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i7 := igbvf_free_irq_loop_$bb3(in_$p0, in_$p2, out_$p8, out_$p9, out_$i10, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i7);
    return;

  exit:
    return;
}



procedure igbvf_free_irq_loop_$bb3(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i7: i32);
  modifies $M.30, $M.33, $M.36, $M.39;



implementation e1000_read_mbx_vf_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i7: i16) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i7: i16)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i7 := in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i7;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5364;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i20;
    goto $bb10_dummy;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i21, in_$i5);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_5380;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i16(out_$i19);
    call {:si_unique_call 1097} {:cexpr "i"} boogie_si_record_i16(out_$i20);
    goto corral_source_split_5379;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i18, 1);
    goto corral_source_split_5378;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i32(out_$i7);
    goto corral_source_split_5377;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p17, out_$i15);
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(in_$p1, $mul.ref(out_$i16, 4));
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i64(out_$i7);
    goto corral_source_split_5374;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} out_$i15 := readl(out_$p14);
    goto corral_source_split_5373;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p9, $mul.ref(out_$i13, 1));
    goto corral_source_split_5372;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i12, 2048);
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_5370;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    out_$i11 := $shl.i32(out_$i10, 2);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i32(out_$i7);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_5367;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5366;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i7 := e1000_read_mbx_vf_loop_$bb8(in_$p0, in_$p1, in_$i5, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i7);
    return;

  exit:
    return;
}



procedure e1000_read_mbx_vf_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i5: i32, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i64, in_$i13: i64, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i7: i16) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i64, out_$i13: i64, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i7: i16);
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_write_mbx_vf_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i7: i32, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i9: i16) returns (out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i9: i16)
{

  entry:
    out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i9 := in_$i10, in_$p11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i9;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5408;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i22;
    goto $bb10_dummy;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i23, in_$i7);
    goto corral_source_split_5425;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i32.i16(out_$i21);
    call {:si_unique_call 1105} {:cexpr "i"} boogie_si_record_i16(out_$i22);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i20, 1);
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i9);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} writel(out_$i12, out_$p19);
    goto corral_source_split_5420;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p14, $mul.ref(out_$i18, 1));
    goto corral_source_split_5419;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i17, 2048);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$i16 := $shl.i32(out_$i15, 2);
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i9);
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(in_$p1, $mul.ref(out_$i10, 4));
    goto corral_source_split_5411;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i16.i64(out_$i9);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i9 := e1000_write_mbx_vf_loop_$bb8(in_$p0, in_$p1, in_$i7, out_$i10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i9);
    return;

  exit:
    return;
}



procedure e1000_write_mbx_vf_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i7: i32, in_$i10: i64, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i9: i16) returns (out_$i10: i64, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i9: i16);



implementation e1000_poll_for_ack_loop_$bb8(in_$p0: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$i17: i1, in_$i12: i32, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i18: i32) returns (out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$i17: i1, out_$i12: i32, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i18: i32)
{

  entry:
    out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i18 := in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i12, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i18;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_5578;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i13;
    goto $bb10_dummy;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i13;
    assume true;
    goto $bb10;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i13, 0);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __udelay(out_$i16);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_5584;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_5583;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1132} {:cexpr "countdown"} boogie_si_record_i32(out_$i13);
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(88, 1));
    goto corral_source_split_5582;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_5590;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i12;
    assume true;
    goto $bb12;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    call {:si_unique_call 1130} out_$i22 := devirtbounce.2(out_$p21, in_$p0);
    call {:si_unique_call 1131} {:cexpr "tmp"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5579;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i18 := e1000_poll_for_ack_loop_$bb8(in_$p0, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i18);
    return;

  exit:
    return;
}



procedure e1000_poll_for_ack_loop_$bb8(in_$p0: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$i17: i1, in_$i12: i32, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i18: i32) returns (out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$i17: i1, out_$i12: i32, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i18: i32);
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_poll_for_msg_loop_$bb8(in_$p0: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$i17: i1, in_$i12: i32, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i18: i32) returns (out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$i17: i1, out_$i12: i32, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i18: i32)
{

  entry:
    out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i18 := in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i12, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i18;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_5619;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i13;
    goto $bb10_dummy;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i13;
    assume true;
    goto $bb10;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i13, 0);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __udelay(out_$i16);
    goto corral_source_split_5626;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i32.i64(out_$i15);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_5624;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 1138} {:cexpr "countdown"} boogie_si_record_i32(out_$i13);
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(88, 1));
    goto corral_source_split_5623;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume out_$i23 == 1;
    goto corral_source_split_5631;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i12;
    assume true;
    goto $bb12;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_5621;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    call {:si_unique_call 1136} out_$i22 := devirtbounce.2(out_$p21, in_$p0);
    call {:si_unique_call 1137} {:cexpr "tmp"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5620;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i18 := e1000_poll_for_msg_loop_$bb8(in_$p0, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i12, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i18);
    return;

  exit:
    return;
}



procedure e1000_poll_for_msg_loop_$bb8(in_$p0: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i64, in_$i17: i1, in_$i12: i32, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i18: i32) returns (out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i64, out_$i17: i1, out_$i12: i32, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i18: i32);
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_reset_hw_vf_loop_$bb4(in_$p0: ref, in_$p12: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i17: i32, in_$i24: i32) returns (out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i17: i32, out_$i24: i32)
{

  entry:
    out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i17, out_$i24 := in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i17, in_$i24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5670;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i17 := out_$i18;
    goto $bb6_dummy;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i18;
    assume true;
    goto $bb6;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i1(out_$i21, out_$i22);
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i18, 0);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 0);
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, in_$p12);
    call {:si_unique_call 1151} out_$i20 := devirtbounce.2(out_$p19, in_$p0);
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __const_udelay(21475);
    goto corral_source_split_5673;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i17, 1);
    call {:si_unique_call 1149} {:cexpr "timeout"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i17, out_$i24 := e1000_reset_hw_vf_loop_$bb4(in_$p0, in_$p12, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i17, out_$i24);
    return;

  exit:
    return;
}



procedure e1000_reset_hw_vf_loop_$bb4(in_$p0: ref, in_$p12: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i17: i32, in_$i24: i32) returns (out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i17: i32, out_$i24: i32);
  modifies $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41;



implementation e1000_update_mc_addr_list_vf_loop_$bb7(in_$p0: ref, in_$p7: ref, in_$i10: i32, in_$i20: i32, in_$i21: i16, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i18: i32, in_$p19: ref) returns (out_$i20: i32, out_$i21: i16, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i18: i32, out_$p19: ref)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i18, out_$p19 := in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i18, in_$p19;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5832;

  $bb9:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i18, out_$p19 := out_$i26, out_$p25;
    goto $bb9_dummy;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    out_$i27 := $ult.i32(out_$i26, in_$i10);
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1175} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_5840;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p19, $mul.ref(6, 1));
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p24, out_$i21);
    goto corral_source_split_5838;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(in_$p7, $mul.ref(out_$i23, 2));
    goto corral_source_split_5837;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i32.i64(out_$i18);
    out_$i23 := $add.i64(1, out_$i22);
    goto corral_source_split_5836;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_5835;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} out_$i20 := e1000_hash_mc_addr_vf(in_$p0, out_$p19);
    call {:si_unique_call 1174} {:cexpr "hash_value"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_5834;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i18, out_$p19 := e1000_update_mc_addr_list_vf_loop_$bb7(in_$p0, in_$p7, in_$i10, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i18, out_$p19);
    return;

  exit:
    return;
}



procedure e1000_update_mc_addr_list_vf_loop_$bb7(in_$p0: ref, in_$p7: ref, in_$i10: i32, in_$i20: i32, in_$i21: i16, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i18: i32, in_$p19: ref) returns (out_$i20: i32, out_$i21: i16, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i18: i32, out_$p19: ref);
  modifies $M.0;



implementation e1000_hash_mc_addr_vf_loop_$bb4(in_$i7: i32, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i10: i8, in_$i17: i8) returns (out_$i11: i32, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i10: i8, out_$i17: i8)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i10, out_$i17 := in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i10, in_$i17;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5952;

  $bb6:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 255);
    goto corral_source_split_5959;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    out_$i15 := $lshr.i32(in_$i7, out_$i14);
    goto corral_source_split_5958;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_5957;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i32.i8(out_$i12);
    call {:si_unique_call 1196} {:cexpr "bit_shift"} boogie_si_record_i8(out_$i13);
    goto corral_source_split_5956;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i11, 1);
    goto corral_source_split_5955;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i8.i32(out_$i10);
    goto corral_source_split_5954;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i10, out_$i17 := e1000_hash_mc_addr_vf_loop_$bb4(in_$i7, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i10, out_$i17);
    return;

  exit:
    return;
}



procedure e1000_hash_mc_addr_vf_loop_$bb4(in_$i7: i32, in_$i11: i32, in_$i12: i32, in_$i13: i8, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i10: i8, in_$i17: i8) returns (out_$i11: i32, out_$i12: i32, out_$i13: i8, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i10: i8, out_$i17: i8);



implementation igbvf_change_mtu_loop_$bb16(in_$p14: ref, in_$i17: i32, in_$i18: i1) returns (out_$i17: i32, out_$i18: i1)
{

  entry:
    out_$i17, out_$i18 := in_$i17, in_$i18;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb18_dummy;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} out_$i17 := test_and_set_bit(1, in_$p14);
    call {:si_unique_call 1254} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_6165;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} msleep(1);
    goto corral_source_split_6164;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i17, out_$i18 := igbvf_change_mtu_loop_$bb16(in_$p14, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure igbvf_change_mtu_loop_$bb16(in_$p14: ref, in_$i17: i32, in_$i18: i1) returns (out_$i17: i32, out_$i18: i1);
  modifies $CurrAddr;



implementation igbvf_tx_map_adv_loop_$bb34(in_$p0: ref, in_$p1: ref, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$i132: i32, in_$i133: i32) returns (out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$i132: i32, out_$i133: i32)
{

  entry:
    out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i132, out_$i133 := in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$p141, in_$i142, in_$p143, in_$i144, in_$i145, in_$i132, in_$i133;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6922;

  $bb39:
    assume out_$i145 == 1;
    assume {:verifier.code 0} true;
    out_$i132, out_$i133 := out_$i144, out_$i139;
    goto $bb39_dummy;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i32(out_$i132, 0);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$i144 := $sub.i32(out_$i132, 1);
    call {:si_unique_call 1405} {:cexpr "count"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_6938;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} igbvf_put_txbuf(in_$p0, out_$p143);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref(out_$p141, $mul.ref(out_$i142, 40));
    goto corral_source_split_6936;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i32.i64(out_$i139);
    goto corral_source_split_6935;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$p141 := $load.ref($M.0, out_$p140);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$i139 := $sub.i32(out_$i138, 1);
    call {:si_unique_call 1403} {:cexpr "i"} boogie_si_record_i32(out_$i139);
    goto corral_source_split_6932;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_6931;

  $bb37:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := out_$i133;
    goto $bb38;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    out_$i138 := out_$i137;
    goto $bb38;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    out_$i137 := $add.i32(out_$i136, out_$i133);
    call {:si_unique_call 1402} {:cexpr "i"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_6929;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.0, out_$p135);
    goto corral_source_split_6928;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_6927;

  $bb36:
    assume out_$i134 == 1;
    goto corral_source_split_6926;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 0);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i132, out_$i133 := igbvf_tx_map_adv_loop_$bb34(in_$p0, in_$p1, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$p141, out_$i142, out_$p143, out_$i144, out_$i145, out_$i132, out_$i133);
    return;

  exit:
    return;
}



procedure igbvf_tx_map_adv_loop_$bb34(in_$p0: ref, in_$p1: ref, in_$i134: i1, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$i132: i32, in_$i133: i32) returns (out_$i134: i1, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$i132: i32, out_$i133: i32);
  modifies $M.0;



implementation igbvf_tx_map_adv_loop_$bb19()
{

  entry:
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb19_dummy:
    call {:si_unique_call 1} igbvf_tx_map_adv_loop_$bb19();
    return;

  exit:
    return;
}



procedure igbvf_tx_map_adv_loop_$bb19();



implementation igbvf_tx_map_adv_loop_$bb12(in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i71: i1, in_$i72: i32, in_$i73: i64, in_$i74: i64, in_$i75: i1, in_$i76: i16, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$i99: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i1, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i106: i32, in_$i107: i32) returns (out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i71: i1, out_$i72: i32, out_$i73: i64, out_$i74: i64, out_$i75: i1, out_$i76: i16, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$i99: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i1, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i106: i32, out_$i107: i32)
{

  entry:
    out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i51, out_$i52, out_$i53, out_$i106, out_$i107 := in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$p65, in_$i66, in_$p67, in_$p68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$i80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$p100, in_$p101, in_$p102, in_$i103, in_$i104, in_$i105, in_$i51, in_$i52, in_$i53, in_$i106, in_$i107;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  $bb24:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i51, out_$i52, out_$i53 := out_$i99, out_$i59, out_$i54;
    goto $bb24_dummy;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    out_$i106, out_$i107 := out_$i54, out_$i59;
    assume true;
    goto $bb24;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    out_$i105 := $ugt.i32(out_$i104, out_$i99);
    goto corral_source_split_6899;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    out_$i104 := $zext.i8.i32(out_$i103);
    goto corral_source_split_6898;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i8($M.0, out_$p102);
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_6896;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$p101 := $bitcast.ref.ref(out_$p100);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} out_$p100 := skb_end_pointer(in_$p2);
    goto corral_source_split_6894;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i99 := $add.i32(out_$i51, 1);
    call {:si_unique_call 1397} {:cexpr "f"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_6893;

  $bb22:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$p98 := out_$i54, out_$i59, out_$p70;
    assume true;
    goto $bb22;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 0);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} out_$i94 := dma_mapping_error(out_$p91, out_$i93);
    call {:si_unique_call 1396} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i64($M.0, out_$p92);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 40)), $mul.ref(0, 1));
    goto corral_source_split_6886;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p90, out_$i89);
    goto corral_source_split_6884;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 40)), $mul.ref(0, 1));
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} out_$i89 := skb_frag_dma_map(out_$p87, out_$p65, 0, out_$i88, 1);
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i32.i64(out_$i66);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p4, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p86, 1);
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p85, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p84);
    goto corral_source_split_6877;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 40)), $mul.ref(16, 1));
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p83, out_$i80);
    goto corral_source_split_6875;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$p82 := $bitcast.ref.ref(out_$p81);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 40)), $mul.ref(16, 1));
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.0, jiffies);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p79, out_$i76);
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p68, $mul.ref(out_$i69, 40)), $mul.ref(16, 1));
    goto corral_source_split_6867;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i32.i16(out_$i66);
    goto corral_source_split_6866;

  $bb18:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i64(out_$i74, 0);
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} out_$i74 := ldv__builtin_expect(out_$i73, 0);
    call {:si_unique_call 1392} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i74);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_6860;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i1.i32(out_$i71);
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    out_$i71 := $ugt.i32(out_$i66, 65535);
    goto corral_source_split_6858;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p68, $mul.ref(out_$i69, 40));
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i32.i64(out_$i59);
    goto corral_source_split_6856;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_6855;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6854;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$i66 := skb_frag_size(out_$p65);
    call {:si_unique_call 1390} {:cexpr "len"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p63, $mul.ref(out_$i64, 16));
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i32.i64(out_$i51);
    goto corral_source_split_6851;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_6850;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p61, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_6849;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} out_$p60 := skb_end_pointer(in_$p2);
    goto corral_source_split_6847;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6846;

  $bb15:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    out_$i59 := out_$i55;
    goto $bb16;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    out_$i59 := 0;
    goto $bb16;

  $bb14:
    assume out_$i58 == 1;
    goto corral_source_split_6844;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, out_$i55);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$i55 := $add.i32(out_$i52, 1);
    call {:si_unique_call 1387} {:cexpr "i"} boogie_si_record_i32(out_$i55);
    goto corral_source_split_6839;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, 1);
    call {:si_unique_call 1386} {:cexpr "count"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_6838;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i51, out_$i52, out_$i53, out_$i106, out_$i107 := igbvf_tx_map_adv_loop_$bb12(in_$p1, in_$p2, in_$p4, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i51, out_$i52, out_$i53, out_$i106, out_$i107);
    return;

  exit:
    return;
}



procedure igbvf_tx_map_adv_loop_$bb12(in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i54: i32, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$i71: i1, in_$i72: i32, in_$i73: i64, in_$i74: i64, in_$i75: i1, in_$i76: i16, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i64, in_$i89: i64, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i64, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i97: i32, in_$p98: ref, in_$i99: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i8, in_$i104: i32, in_$i105: i1, in_$i51: i32, in_$i52: i32, in_$i53: i32, in_$i106: i32, in_$i107: i32) returns (out_$i54: i32, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$i71: i1, out_$i72: i32, out_$i73: i64, out_$i74: i64, out_$i75: i1, out_$i76: i16, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i64, out_$i89: i64, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i64, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i97: i32, out_$p98: ref, out_$i99: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i8, out_$i104: i32, out_$i105: i1, out_$i51: i32, out_$i52: i32, out_$i53: i32, out_$i106: i32, out_$i107: i32);
  modifies $M.0;



implementation igbvf_tx_map_adv_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} igbvf_tx_map_adv_loop_$bb3();
    return;

  exit:
    return;
}



procedure igbvf_tx_map_adv_loop_$bb3();



implementation igbvf_tx_queue_adv_loop_$bb16(in_$p1: ref, in_$i20: i32, in_$i28: i32, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i36: i32, in_$i37: i32, in_$p68: ref, in_$i69: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i36: i32, out_$i37: i32, out_$p68: ref, out_$i69: i32)
{

  entry:
    out_$p38, out_$p39, out_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i36, out_$i37, out_$p68, out_$i69 := in_$p38, in_$p39, in_$i40, in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i36, in_$i37, in_$p68, in_$i69;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6985;

  $bb21:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i66, out_$i65;
    goto $bb21_dummy;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_$p68, out_$i69 := out_$p45, out_$i65;
    assume true;
    goto $bb21;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i36, 0);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i66 := $sub.i32(out_$i36, 1);
    call {:si_unique_call 1421} {:cexpr "count"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_7021;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7020;

  $bb19:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    out_$i65 := out_$i61;
    goto $bb20;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$i65 := 0;
    goto $bb20;

  $bb18:
    assume out_$i64 == 1;
    goto corral_source_split_7018;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, out_$i61);
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, out_$p62);
    goto corral_source_split_7015;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p1, $mul.ref(0, 304)), $mul.ref(28, 1));
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i37, 1);
    call {:si_unique_call 1420} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_7013;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p60, in_$i28);
    goto corral_source_split_7012;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_7011;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_7010;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, out_$i56);
    goto corral_source_split_7009;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7008;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_7007;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    out_$i56 := $or.i32(out_$i55, in_$i20);
    goto corral_source_split_7006;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i16.i32(out_$i54);
    goto corral_source_split_7005;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i16($M.0, out_$p53);
    goto corral_source_split_7004;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7003;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_7002;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p39, $mul.ref(out_$i40, 40)), $mul.ref(16, 1));
    goto corral_source_split_7001;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p50, out_$i48);
    goto corral_source_split_7000;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p49, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6999;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_6998;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.0, out_$p47);
    goto corral_source_split_6997;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p39, $mul.ref(out_$i40, 40)), $mul.ref(0, 1));
    goto corral_source_split_6996;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_6995;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref(out_$p43, $mul.ref(out_$i44, 16));
    goto corral_source_split_6994;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i32.i64(out_$i37);
    goto corral_source_split_6993;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_6992;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 304)), $mul.ref(8, 1));
    goto corral_source_split_6991;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto corral_source_split_6990;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i37);
    goto corral_source_split_6989;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_6988;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 304)), $mul.ref(40, 1));
    goto corral_source_split_6987;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i36, out_$i37, out_$p68, out_$i69 := igbvf_tx_queue_adv_loop_$bb16(in_$p1, in_$i20, in_$i28, out_$p38, out_$p39, out_$i40, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i36, out_$i37, out_$p68, out_$i69);
    return;

  exit:
    return;
}



procedure igbvf_tx_queue_adv_loop_$bb16(in_$p1: ref, in_$i20: i32, in_$i28: i32, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i16, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i36: i32, in_$i37: i32, in_$p68: ref, in_$i69: i32) returns (out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i16, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i36: i32, out_$i37: i32, out_$p68: ref, out_$i69: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i16, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$i12: i16, in_$i13: i32, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i78: i32, in_$i79: i1, in_$i81: i32, in_$i82: i1, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i16, in_$i121: i32, in_$i122: i16, in_$i123: i32, in_$i124: i16, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i16, in_$i130: i32, in_$i131: i16, in_$i132: i32, in_$i133: i16, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i32, in_$i142: i16, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i16, in_$i160: i32, in_$i161: i16, in_$i162: i32, in_$i163: i16, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i168: i16, in_$i169: i32, in_$i170: i16, in_$i171: i32, in_$i172: i16, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i16, in_$i178: i32, in_$i179: i16, in_$i180: i32, in_$i181: i16, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i64, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i64, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i64, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$i276: i32, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i281: i32, in_$i282: i32, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i1, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i32, in_$i334: i1, in_$i335: i32, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$p340: ref, in_$i341: i32, in_$i342: i32, in_$i343: i32, in_$i344: i1, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i365: i32, in_$i366: i32, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32, in_vslice_dummy_var_300: i32, in_vslice_dummy_var_301: i32, in_vslice_dummy_var_302: ref, in_vslice_dummy_var_303: ref, in_vslice_dummy_var_304: ref, in_vslice_dummy_var_305: i32, in_vslice_dummy_var_306: i32, in_vslice_dummy_var_307: i32, in_vslice_dummy_var_308: i32, in_vslice_dummy_var_309: i32, in_vslice_dummy_var_310: i32, in_vslice_dummy_var_311: i32, in_vslice_dummy_var_312: i32, in_vslice_dummy_var_313: i32, in_vslice_dummy_var_314: i32, in_vslice_dummy_var_315: i32) returns (out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i78: i32, out_$i79: i1, out_$i81: i32, out_$i82: i1, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i16, out_$i121: i32, out_$i122: i16, out_$i123: i32, out_$i124: i16, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i16, out_$i130: i32, out_$i131: i16, out_$i132: i32, out_$i133: i16, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i32, out_$i142: i16, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i16, out_$i160: i32, out_$i161: i16, out_$i162: i32, out_$i163: i16, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i168: i16, out_$i169: i32, out_$i170: i16, out_$i171: i32, out_$i172: i16, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i16, out_$i178: i32, out_$i179: i16, out_$i180: i32, out_$i181: i16, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i64, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i64, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i64, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$i276: i32, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i281: i32, out_$i282: i32, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i1, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i32, out_$i334: i1, out_$i335: i32, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$p340: ref, out_$i341: i32, out_$i342: i32, out_$i343: i32, out_$i344: i1, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i365: i32, out_$i366: i32, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32, out_vslice_dummy_var_300: i32, out_vslice_dummy_var_301: i32, out_vslice_dummy_var_302: ref, out_vslice_dummy_var_303: ref, out_vslice_dummy_var_304: ref, out_vslice_dummy_var_305: i32, out_vslice_dummy_var_306: i32, out_vslice_dummy_var_307: i32, out_vslice_dummy_var_308: i32, out_vslice_dummy_var_309: i32, out_vslice_dummy_var_310: i32, out_vslice_dummy_var_311: i32, out_vslice_dummy_var_312: i32, out_vslice_dummy_var_313: i32, out_vslice_dummy_var_314: i32, out_vslice_dummy_var_315: i32)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i55, out_$i56, out_$p57, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$p65, out_$i66, out_$i68, out_$i69, out_$p70, out_$i71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i78, out_$i79, out_$i81, out_$i82, out_$i84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i183, out_$i184, out_$p185, out_$i187, out_$i188, out_$p189, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$p339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$p356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302, out_vslice_dummy_var_303, out_vslice_dummy_var_304, out_vslice_dummy_var_305, out_vslice_dummy_var_306, out_vslice_dummy_var_307, out_vslice_dummy_var_308, out_vslice_dummy_var_309, out_vslice_dummy_var_310, out_vslice_dummy_var_311, out_vslice_dummy_var_312, out_vslice_dummy_var_313, out_vslice_dummy_var_314, out_vslice_dummy_var_315 := in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i55, in_$i56, in_$p57, in_$i59, in_$i60, in_$p61, in_$i63, in_$i64, in_$p65, in_$i66, in_$i68, in_$i69, in_$p70, in_$i71, in_$i73, in_$i74, in_$p75, in_$i76, in_$i78, in_$i79, in_$i81, in_$i82, in_$i84, in_$i85, in_$i86, in_$i87, in_$i89, in_$i90, in_$i91, in_$i92, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i126, in_$i127, in_$p128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i135, in_$i136, in_$p137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i144, in_$i145, in_$p146, in_$i148, in_$i149, in_$p150, in_$i152, in_$i153, in_$p154, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i165, in_$i166, in_$p167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i174, in_$i175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i183, in_$i184, in_$p185, in_$i187, in_$i188, in_$p189, in_$i191, in_$i192, in_$p193, in_$i195, in_$i196, in_$p197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$p203, in_$i205, in_$i206, in_$p207, in_$i209, in_$i210, in_$p211, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$p223, in_$i224, in_$i225, in_$p226, in_$i227, in_$i228, in_$p229, in_$i230, in_$i232, in_$i233, in_$p234, in_$i235, in_$i237, in_$i238, in_$p239, in_$i240, in_$i242, in_$i243, in_$p244, in_$i246, in_$i247, in_$p248, in_$i250, in_$i251, in_$p252, in_$i254, in_$i255, in_$p256, in_$i258, in_$i259, in_$p260, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$p267, in_$i268, in_$i269, in_$p270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$p331, in_$i332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$p339, in_$p340, in_$i341, in_$i342, in_$i343, in_$i344, in_$i345, in_$i346, in_$p347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$p353, in_$i354, in_$i355, in_$p356, in_$i357, in_$i358, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$p364, in_$i365, in_$i366, in_$i367, in_$i368, in_$p369, in_$i370, in_$i371, in_vslice_dummy_var_283, in_vslice_dummy_var_284, in_vslice_dummy_var_285, in_vslice_dummy_var_286, in_vslice_dummy_var_287, in_vslice_dummy_var_288, in_vslice_dummy_var_289, in_vslice_dummy_var_290, in_vslice_dummy_var_291, in_vslice_dummy_var_292, in_vslice_dummy_var_293, in_vslice_dummy_var_294, in_vslice_dummy_var_295, in_vslice_dummy_var_296, in_vslice_dummy_var_297, in_vslice_dummy_var_298, in_vslice_dummy_var_299, in_vslice_dummy_var_300, in_vslice_dummy_var_301, in_vslice_dummy_var_302, in_vslice_dummy_var_303, in_vslice_dummy_var_304, in_vslice_dummy_var_305, in_vslice_dummy_var_306, in_vslice_dummy_var_307, in_vslice_dummy_var_308, in_vslice_dummy_var_309, in_vslice_dummy_var_310, in_vslice_dummy_var_311, in_vslice_dummy_var_312, in_vslice_dummy_var_313, in_vslice_dummy_var_314, in_vslice_dummy_var_315;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1699} out_$i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 1700} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i25);
    call {:si_unique_call 1701} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb83_dummy;

  $bb355:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb300:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb267:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb29:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1706} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7833;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} igbvf_io_resume(out_$p50);
    goto corral_source_split_7832;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    out_$p50 := $M.81;
    goto corral_source_split_7831;

  $bb46:
    assume out_$i49 == 1;
    goto corral_source_split_7830;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 3);
    goto corral_source_split_7828;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    out_$i48 := $M.87;
    goto corral_source_split_7827;

  $bb44:
    assume out_$i47 == 1;
    goto corral_source_split_7826;

  $bb40:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb31:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i40, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_7804:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1702} out_$i40 := __VERIFIER_nondet_int();
    call {:si_unique_call 1703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i40);
    call {:si_unique_call 1704} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i40);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i39 == 1;
    goto corral_source_split_7804;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_7802;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    out_$i38 := $M.87;
    goto corral_source_split_7801;

  $bb26:
    assume out_$i37 == 1;
    goto corral_source_split_7800;

  $bb24:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb18:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i25, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb57:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1712} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7854;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} out_vslice_dummy_var_285 := igbvf_io_slot_reset(out_$p61);
    goto corral_source_split_7853;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    out_$p61 := $M.81;
    goto corral_source_split_7852;

  $bb56:
    assume out_$i60 == 1;
    goto corral_source_split_7851;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    out_$i60 := $eq.i32(out_$i59, 2);
    goto corral_source_split_7849;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i59 := $M.87;
    goto corral_source_split_7848;

  $bb54:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1710} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7846;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} out_vslice_dummy_var_284 := igbvf_io_slot_reset(out_$p57);
    goto corral_source_split_7845;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    out_$p57 := $M.81;
    goto corral_source_split_7844;

  $bb53:
    assume out_$i56 == 1;
    goto corral_source_split_7843;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 3);
    goto corral_source_split_7841;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i55 := $M.87;
    goto corral_source_split_7840;

  $bb51:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7838;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} out_vslice_dummy_var_283 := igbvf_io_slot_reset(out_$p53);
    goto corral_source_split_7837;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    out_$p53 := $M.81;
    goto corral_source_split_7836;

  $bb50:
    assume out_$i52 == 1;
    goto corral_source_split_7835;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i51, 1);
    goto corral_source_split_7820;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    out_$i51 := $M.87;
    goto corral_source_split_7819;

  $bb42:
    assume out_$i46 == 1;
    goto corral_source_split_7818;

  $bb41:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb66:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7878;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} out_vslice_dummy_var_288 := igbvf_io_error_detected(out_$p75, out_$i76);
    goto corral_source_split_7877;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.82, in_$p0);
    goto corral_source_split_7876;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    out_$p75 := $M.81;
    goto corral_source_split_7875;

  $bb65:
    assume out_$i74 == 1;
    goto corral_source_split_7874;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 2);
    goto corral_source_split_7872;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i73 := $M.87;
    goto corral_source_split_7871;

  $bb63:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1716} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7869;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} out_vslice_dummy_var_287 := igbvf_io_error_detected(out_$p70, out_$i71);
    goto corral_source_split_7868;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.82, in_$p0);
    goto corral_source_split_7867;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    out_$p70 := $M.81;
    goto corral_source_split_7866;

  $bb62:
    assume out_$i69 == 1;
    goto corral_source_split_7865;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 3);
    goto corral_source_split_7863;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i68 := $M.87;
    goto corral_source_split_7862;

  $bb60:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1714} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7860;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} out_vslice_dummy_var_286 := igbvf_io_error_detected(out_$p65, out_$i66);
    goto corral_source_split_7859;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.82, in_$p0);
    goto corral_source_split_7858;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    out_$p65 := $M.81;
    goto corral_source_split_7857;

  $bb59:
    assume out_$i64 == 1;
    goto corral_source_split_7856;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 1);
    goto corral_source_split_7824;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    out_$i63 := $M.87;
    goto corral_source_split_7823;

  $bb43:
    assume !(out_$i46 == 1);
    goto corral_source_split_7822;

  $bb69:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.87 := 3;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7882;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} out_vslice_dummy_var_289 := ldv_suspend_6();
    goto corral_source_split_7881;

  $bb68:
    assume out_$i79 == 1;
    goto corral_source_split_7880;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 2);
    goto corral_source_split_7808;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    out_$i78 := $M.87;
    goto corral_source_split_7807;

  $bb33:
    assume out_$i42 == 1;
    goto corral_source_split_7806;

  $bb32:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb75:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $M.94 := out_$i90;
    call {:si_unique_call 1726} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_7899;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    out_$i90 := $sub.i32(out_$i89, 1);
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    out_$i89 := $M.94;
    goto corral_source_split_7897;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7896;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} out_vslice_dummy_var_291 := ldv_release_6();
    goto corral_source_split_7895;

  $bb74:
    assume out_$i87 == 1;
    goto corral_source_split_7894;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_7892;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i86 := $M.87;
    goto corral_source_split_7891;

  $bb72:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $M.94 := out_$i85;
    call {:si_unique_call 1723} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_7889;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i32(out_$i84, 1);
    goto corral_source_split_7888;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    out_$i84 := $M.94;
    goto corral_source_split_7887;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7886;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} out_vslice_dummy_var_290 := ldv_release_6();
    goto corral_source_split_7885;

  $bb71:
    assume out_$i82 == 1;
    goto corral_source_split_7884;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 3);
    goto corral_source_split_7812;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    out_$i81 := $M.87;
    goto corral_source_split_7811;

  $bb35:
    assume out_$i43 == 1;
    goto corral_source_split_7810;

  $bb34:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb78:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $M.94 := out_$i95;
    call {:si_unique_call 1729} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_7906;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    out_$i95 := $add.i32(out_$i94, 1);
    goto corral_source_split_7905;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    out_$i94 := $M.94;
    goto corral_source_split_7904;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7903;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} out_vslice_dummy_var_292 := ldv_probe_6();
    goto corral_source_split_7902;

  $bb77:
    assume out_$i92 == 1;
    goto corral_source_split_7901;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 1);
    goto corral_source_split_7816;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    out_$i91 := $M.87;
    goto corral_source_split_7815;

  $bb37:
    assume out_$i44 == 1;
    goto corral_source_split_7814;

  $bb36:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i40, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_stop();
    goto corral_source_split_7908;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb39;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i47 == 1);
    goto $bb39;

  $bb85:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} choose_interrupt_3();
    goto corral_source_split_7911;

  $bb84:
    assume out_$i97 == 1;
    goto corral_source_split_7910;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i32(out_$i96, 0);
    goto corral_source_split_7798;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    out_$i96 := $M.88;
    goto corral_source_split_7797;

  $bb25:
    assume !(out_$i36 == 1);
    goto corral_source_split_7796;

  $bb88:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb130:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8009;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} out_vslice_dummy_var_295 := igbvf_vlan_rx_kill_vid(out_$p137, out_$i140, out_$i142);
    goto corral_source_split_8008;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i32.i16(out_$i141);
    goto corral_source_split_8007;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    out_$i141 := $zext.i16.i32(in_$i12);
    goto corral_source_split_8006;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    out_$i140 := $trunc.i32.i16(out_$i139);
    goto corral_source_split_8005;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i16.i32(out_$i138);
    goto corral_source_split_8004;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i16($M.85, in_$p3);
    goto corral_source_split_8003;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    out_$p137 := $M.43;
    goto corral_source_split_8002;

  $bb129:
    assume out_$i136 == 1;
    goto corral_source_split_8001;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 2);
    goto corral_source_split_7999;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i135 := $M.42;
    goto corral_source_split_7998;

  $bb127:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_7996;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} out_vslice_dummy_var_294 := igbvf_vlan_rx_kill_vid(out_$p128, out_$i131, out_$i133);
    goto corral_source_split_7995;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    out_$i133 := $trunc.i32.i16(out_$i132);
    goto corral_source_split_7994;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i16.i32(in_$i12);
    goto corral_source_split_7993;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$i131 := $trunc.i32.i16(out_$i130);
    goto corral_source_split_7992;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i16.i32(out_$i129);
    goto corral_source_split_7991;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i16($M.85, in_$p3);
    goto corral_source_split_7990;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    out_$p128 := $M.43;
    goto corral_source_split_7989;

  $bb126:
    assume out_$i127 == 1;
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 3);
    goto corral_source_split_7986;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i126 := $M.42;
    goto corral_source_split_7985;

  $bb124:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1736} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_7983;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} out_vslice_dummy_var_293 := igbvf_vlan_rx_kill_vid(out_$p119, out_$i122, out_$i124);
    goto corral_source_split_7982;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    out_$i124 := $trunc.i32.i16(out_$i123);
    goto corral_source_split_7981;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i16.i32(in_$i12);
    goto corral_source_split_7980;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i32.i16(out_$i121);
    goto corral_source_split_7979;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i16.i32(out_$i120);
    goto corral_source_split_7978;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i16($M.85, in_$p3);
    goto corral_source_split_7977;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    out_$p119 := $M.43;
    goto corral_source_split_7976;

  $bb123:
    assume out_$i118 == 1;
    goto corral_source_split_7975;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_7973;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    out_$i117 := $M.42;
    goto corral_source_split_7972;

  $bb121:
    assume out_$i116 == 1;
    goto corral_source_split_7971;

  $bb117:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i100, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb109:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i100, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb90:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i100, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i100, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_7913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1732} out_$i100 := __VERIFIER_nondet_int();
    call {:si_unique_call 1733} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i100);
    call {:si_unique_call 1734} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i100);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb87:
    assume out_$i99 == 1;
    goto corral_source_split_7913;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i32(out_$i98, 0);
    goto corral_source_split_7786;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    out_$i98 := $M.42;
    goto corral_source_split_7785;

  $bb20:
    assume out_$i34 == 1;
    goto corral_source_split_7784;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb140:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} out_vslice_dummy_var_298 := igbvf_ioctl(out_$p154, in_$p9, in_$i5);
    goto corral_source_split_8029;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    out_$p154 := $M.43;
    goto corral_source_split_8028;

  $bb139:
    assume out_$i153 == 1;
    goto corral_source_split_8027;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    out_$i153 := $eq.i32(out_$i152, 2);
    goto corral_source_split_8025;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i152 := $M.42;
    goto corral_source_split_8024;

  $bb137:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} out_vslice_dummy_var_297 := igbvf_ioctl(out_$p150, in_$p9, in_$i5);
    goto corral_source_split_8021;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    out_$p150 := $M.43;
    goto corral_source_split_8020;

  $bb136:
    assume out_$i149 == 1;
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 3);
    goto corral_source_split_8017;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i148 := $M.42;
    goto corral_source_split_8016;

  $bb134:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8014;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} out_vslice_dummy_var_296 := igbvf_ioctl(out_$p146, in_$p9, in_$i5);
    goto corral_source_split_8013;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    out_$p146 := $M.43;
    goto corral_source_split_8012;

  $bb133:
    assume out_$i145 == 1;
    goto corral_source_split_8011;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 1);
    goto corral_source_split_7965;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    out_$i144 := $M.42;
    goto corral_source_split_7964;

  $bb119:
    assume out_$i115 == 1;
    goto corral_source_split_7963;

  $bb118:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i100, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb149:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8066;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} out_vslice_dummy_var_301 := igbvf_vlan_rx_add_vid(out_$p176, out_$i179, out_$i181);
    goto corral_source_split_8065;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    out_$i181 := $trunc.i32.i16(out_$i180);
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i16.i32(in_$i6);
    goto corral_source_split_8063;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    out_$i179 := $trunc.i32.i16(out_$i178);
    goto corral_source_split_8062;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    out_$i178 := $zext.i16.i32(out_$i177);
    goto corral_source_split_8061;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$i177 := $load.i16($M.84, in_$p2);
    goto corral_source_split_8060;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    out_$p176 := $M.43;
    goto corral_source_split_8059;

  $bb148:
    assume out_$i175 == 1;
    goto corral_source_split_8058;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 2);
    goto corral_source_split_8056;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i174 := $M.42;
    goto corral_source_split_8055;

  $bb146:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8053;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} out_vslice_dummy_var_300 := igbvf_vlan_rx_add_vid(out_$p167, out_$i170, out_$i172);
    goto corral_source_split_8052;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    out_$i172 := $trunc.i32.i16(out_$i171);
    goto corral_source_split_8051;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    out_$i171 := $zext.i16.i32(in_$i6);
    goto corral_source_split_8050;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    out_$i170 := $trunc.i32.i16(out_$i169);
    goto corral_source_split_8049;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i16.i32(out_$i168);
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i16($M.84, in_$p2);
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    out_$p167 := $M.43;
    goto corral_source_split_8046;

  $bb145:
    assume out_$i166 == 1;
    goto corral_source_split_8045;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 3);
    goto corral_source_split_8043;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i165 := $M.42;
    goto corral_source_split_8042;

  $bb143:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} out_vslice_dummy_var_299 := igbvf_vlan_rx_add_vid(out_$p158, out_$i161, out_$i163);
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$i163 := $trunc.i32.i16(out_$i162);
    goto corral_source_split_8038;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    out_$i162 := $zext.i16.i32(in_$i6);
    goto corral_source_split_8037;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    out_$i161 := $trunc.i32.i16(out_$i160);
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i16.i32(out_$i159);
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i16($M.84, in_$p2);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$p158 := $M.43;
    goto corral_source_split_8033;

  $bb142:
    assume out_$i157 == 1;
    goto corral_source_split_8032;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 1);
    goto corral_source_split_7969;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    out_$i156 := $M.42;
    goto corral_source_split_7968;

  $bb120:
    assume !(out_$i115 == 1);
    goto corral_source_split_7967;

  $bb158:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8087;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} out_vslice_dummy_var_304 := igbvf_get_stats(out_$p193);
    goto corral_source_split_8086;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    out_$p193 := $M.43;
    goto corral_source_split_8085;

  $bb157:
    assume out_$i192 == 1;
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 2);
    goto corral_source_split_8082;

  $bb156:
    assume {:verifier.code 0} true;
    out_$i191 := $M.42;
    goto corral_source_split_8081;

  $bb155:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1756} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8079;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} out_vslice_dummy_var_303 := igbvf_get_stats(out_$p189);
    goto corral_source_split_8078;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    out_$p189 := $M.43;
    goto corral_source_split_8077;

  $bb154:
    assume out_$i188 == 1;
    goto corral_source_split_8076;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 3);
    goto corral_source_split_8074;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i187 := $M.42;
    goto corral_source_split_8073;

  $bb152:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} out_vslice_dummy_var_302 := igbvf_get_stats(out_$p185);
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$p185 := $M.43;
    goto corral_source_split_8069;

  $bb151:
    assume out_$i184 == 1;
    goto corral_source_split_8068;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 1);
    goto corral_source_split_7957;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    out_$i183 := $M.42;
    goto corral_source_split_7956;

  $bb115:
    assume out_$i113 == 1;
    goto corral_source_split_7955;

  $bb111:
    assume out_$i111 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := $slt.i32(out_$i100, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb110:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i100, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb161:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb163:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8097;

  $bb162:
    assume out_$i200 == 1;
    goto corral_source_split_8096;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    out_$i200 := $eq.i32(out_$i199, 0);
    goto corral_source_split_8094;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$i199 := $M.97;
    goto corral_source_split_8093;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $M.97 := out_$i198;
    call {:si_unique_call 1760} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i198);
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} out_$i198 := igbvf_open(out_$p197);
    goto corral_source_split_8091;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$p197 := $M.43;
    goto corral_source_split_8090;

  $bb160:
    assume out_$i196 == 1;
    goto corral_source_split_8089;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 2);
    goto corral_source_split_7961;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    out_$i195 := $M.42;
    goto corral_source_split_7960;

  $bb116:
    assume !(out_$i113 == 1);
    goto corral_source_split_7959;

  $bb167:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8102;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} out_vslice_dummy_var_305 := igbvf_xmit_frame(in_$p11, out_$p203);
    goto corral_source_split_8101;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    out_$p203 := $M.43;
    goto corral_source_split_8100;

  $bb166:
    assume out_$i202 == 1;
    goto corral_source_split_8099;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i201, 3);
    goto corral_source_split_7949;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    out_$i201 := $M.42;
    goto corral_source_split_7948;

  $bb113:
    assume out_$i112 == 1;
    goto corral_source_split_7947;

  $bb112:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    out_$i112 := $slt.i32(out_$i100, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb170:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8107;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} out_vslice_dummy_var_306 := igbvf_close(out_$p207);
    goto corral_source_split_8106;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    out_$p207 := $M.43;
    goto corral_source_split_8105;

  $bb169:
    assume out_$i206 == 1;
    goto corral_source_split_8104;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 3);
    goto corral_source_split_7953;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    out_$i205 := $M.42;
    goto corral_source_split_7952;

  $bb114:
    assume !(out_$i112 == 1);
    goto corral_source_split_7951;

  $bb179:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    goto $bb180;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8128;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} igbvf_set_multi(out_$p217);
    goto corral_source_split_8127;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    out_$p217 := $M.43;
    goto corral_source_split_8126;

  $bb178:
    assume out_$i216 == 1;
    goto corral_source_split_8125;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 2);
    goto corral_source_split_8123;

  $bb177:
    assume {:verifier.code 0} true;
    out_$i215 := $M.42;
    goto corral_source_split_8122;

  $bb176:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8120;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} igbvf_set_multi(out_$p214);
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    out_$p214 := $M.43;
    goto corral_source_split_8118;

  $bb175:
    assume out_$i213 == 1;
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 3);
    goto corral_source_split_8115;

  $bb174:
    assume {:verifier.code 0} true;
    out_$i212 := $M.42;
    goto corral_source_split_8114;

  $bb173:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8112;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} igbvf_set_multi(out_$p211);
    goto corral_source_split_8111;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    out_$p211 := $M.43;
    goto corral_source_split_8110;

  $bb172:
    assume out_$i210 == 1;
    goto corral_source_split_8109;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 1);
    goto corral_source_split_7941;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    out_$i209 := $M.42;
    goto corral_source_split_7940;

  $bb107:
    assume out_$i109 == 1;
    goto corral_source_split_7939;

  $bb103:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i100, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb92:
    assume out_$i102 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i100, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb91:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i100, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb188:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    goto $bb189;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8149;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} igbvf_netpoll(out_$p226);
    goto corral_source_split_8148;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    out_$p226 := $M.43;
    goto corral_source_split_8147;

  $bb187:
    assume out_$i225 == 1;
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$i225 := $eq.i32(out_$i224, 2);
    goto corral_source_split_8144;

  $bb186:
    assume {:verifier.code 0} true;
    out_$i224 := $M.42;
    goto corral_source_split_8143;

  $bb185:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} igbvf_netpoll(out_$p223);
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$p223 := $M.43;
    goto corral_source_split_8139;

  $bb184:
    assume out_$i222 == 1;
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 3);
    goto corral_source_split_8136;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i221 := $M.42;
    goto corral_source_split_8135;

  $bb182:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} igbvf_netpoll(out_$p220);
    goto corral_source_split_8132;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    out_$p220 := $M.43;
    goto corral_source_split_8131;

  $bb181:
    assume out_$i219 == 1;
    goto corral_source_split_8130;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_7945;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    out_$i218 := $M.42;
    goto corral_source_split_7944;

  $bb108:
    assume !(out_$i109 == 1);
    goto corral_source_split_7943;

  $bb197:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    goto $bb198;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} out_vslice_dummy_var_309 := igbvf_set_features(out_$p239, out_$i240);
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    out_$i240 := $load.i64($M.83, in_$p1);
    goto corral_source_split_8171;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    out_$p239 := $M.43;
    goto corral_source_split_8170;

  $bb196:
    assume out_$i238 == 1;
    goto corral_source_split_8169;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 2);
    goto corral_source_split_8167;

  $bb195:
    assume {:verifier.code 0} true;
    out_$i237 := $M.42;
    goto corral_source_split_8166;

  $bb194:
    assume !(out_$i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    goto $bb195;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} out_vslice_dummy_var_308 := igbvf_set_features(out_$p234, out_$i235);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i64($M.83, in_$p1);
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$p234 := $M.43;
    goto corral_source_split_8161;

  $bb193:
    assume out_$i233 == 1;
    goto corral_source_split_8160;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i232, 3);
    goto corral_source_split_8158;

  $bb192:
    assume {:verifier.code 0} true;
    out_$i232 := $M.42;
    goto corral_source_split_8157;

  $bb191:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    goto $bb192;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8155;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_vslice_dummy_var_307 := igbvf_set_features(out_$p229, out_$i230);
    goto corral_source_split_8154;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    out_$i230 := $load.i64($M.83, in_$p1);
    goto corral_source_split_8153;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    out_$p229 := $M.43;
    goto corral_source_split_8152;

  $bb190:
    assume out_$i228 == 1;
    goto corral_source_split_8151;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 1);
    goto corral_source_split_7933;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    out_$i227 := $M.42;
    goto corral_source_split_7932;

  $bb105:
    assume out_$i108 == 1;
    goto corral_source_split_7931;

  $bb104:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i32(out_$i100, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb203:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} out_vslice_dummy_var_311 := igbvf_change_mtu(out_$p248, in_$i13);
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$p248 := $M.43;
    goto corral_source_split_8184;

  $bb202:
    assume out_$i247 == 1;
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 2);
    goto corral_source_split_8181;

  $bb201:
    assume {:verifier.code 0} true;
    out_$i246 := $M.42;
    goto corral_source_split_8180;

  $bb200:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8178;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_vslice_dummy_var_310 := igbvf_change_mtu(out_$p244, in_$i13);
    goto corral_source_split_8177;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    out_$p244 := $M.43;
    goto corral_source_split_8176;

  $bb199:
    assume out_$i243 == 1;
    goto corral_source_split_8175;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 3);
    goto corral_source_split_7937;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    out_$i242 := $M.42;
    goto corral_source_split_7936;

  $bb106:
    assume !(out_$i108 == 1);
    goto corral_source_split_7935;

  $bb212:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} out_vslice_dummy_var_314 := igbvf_set_mac(out_$p260, in_$p7);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$p260 := $M.43;
    goto corral_source_split_8205;

  $bb211:
    assume out_$i259 == 1;
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 2);
    goto corral_source_split_8202;

  $bb210:
    assume {:verifier.code 0} true;
    out_$i258 := $M.42;
    goto corral_source_split_8201;

  $bb209:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_vslice_dummy_var_313 := igbvf_set_mac(out_$p256, in_$p7);
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    out_$p256 := $M.43;
    goto corral_source_split_8197;

  $bb208:
    assume out_$i255 == 1;
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 3);
    goto corral_source_split_8194;

  $bb207:
    assume {:verifier.code 0} true;
    out_$i254 := $M.42;
    goto corral_source_split_8193;

  $bb206:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_vslice_dummy_var_312 := igbvf_set_mac(out_$p252, in_$p7);
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    out_$p252 := $M.43;
    goto corral_source_split_8189;

  $bb205:
    assume out_$i251 == 1;
    goto corral_source_split_8188;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 1);
    goto corral_source_split_7925;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    out_$i250 := $M.42;
    goto corral_source_split_7924;

  $bb101:
    assume out_$i106 == 1;
    goto corral_source_split_7923;

  $bb94:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i100, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb93:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    out_$i103 := $slt.i32(out_$i100, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb221:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8228;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} igbvf_tx_timeout(out_$p270);
    goto corral_source_split_8227;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    out_$p270 := $M.43;
    goto corral_source_split_8226;

  $bb220:
    assume out_$i269 == 1;
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 2);
    goto corral_source_split_8223;

  $bb219:
    assume {:verifier.code 0} true;
    out_$i268 := $M.42;
    goto corral_source_split_8222;

  $bb218:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    goto $bb219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} igbvf_tx_timeout(out_$p267);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$p267 := $M.43;
    goto corral_source_split_8218;

  $bb217:
    assume out_$i266 == 1;
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 3);
    goto corral_source_split_8215;

  $bb216:
    assume {:verifier.code 0} true;
    out_$i265 := $M.42;
    goto corral_source_split_8214;

  $bb215:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    goto $bb216;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} igbvf_tx_timeout(out_$p264);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$p264 := $M.43;
    goto corral_source_split_8210;

  $bb214:
    assume out_$i263 == 1;
    goto corral_source_split_8209;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 1);
    goto corral_source_split_7929;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    out_$i262 := $M.42;
    goto corral_source_split_7928;

  $bb102:
    assume !(out_$i106 == 1);
    goto corral_source_split_7927;

  $bb224:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb226:
    assume !(out_$i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $M.94 := out_$i277;
    call {:si_unique_call 1803} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i277);
    goto corral_source_split_8240;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    out_$i277 := $add.i32(out_$i276, 1);
    goto corral_source_split_8239;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    out_$i276 := $M.94;
    goto corral_source_split_8238;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_8237;

  $bb225:
    assume out_$i275 == 1;
    goto corral_source_split_8236;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    out_$i275 := $eq.i32(out_$i274, 0);
    goto corral_source_split_8234;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    out_$i274 := $M.98;
    goto corral_source_split_8233;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $M.98 := out_$i273;
    call {:si_unique_call 1801} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i273);
    goto corral_source_split_8232;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} out_$i273 := ldv_ndo_init_7();
    goto corral_source_split_8231;

  $bb223:
    assume out_$i272 == 1;
    goto corral_source_split_8230;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 1);
    goto corral_source_split_7917;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    out_$i271 := $M.42;
    goto corral_source_split_7916;

  $bb96:
    assume out_$i104 == 1;
    goto corral_source_split_7915;

  $bb95:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i100, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb230:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $M.94 := out_$i282;
    call {:si_unique_call 1806} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i282);
    goto corral_source_split_8247;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    out_$i282 := $sub.i32(out_$i281, 1);
    goto corral_source_split_8246;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    out_$i281 := $M.94;
    goto corral_source_split_8245;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1805} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_8244;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} out_vslice_dummy_var_315 := ldv_ndo_uninit_7();
    goto corral_source_split_8243;

  $bb229:
    assume out_$i279 == 1;
    goto corral_source_split_8242;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 2);
    goto corral_source_split_7921;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    out_$i278 := $M.42;
    goto corral_source_split_7920;

  $bb98:
    assume out_$i105 == 1;
    goto corral_source_split_7919;

  $bb97:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i100, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} ldv_stop();
    goto corral_source_split_8249;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb99:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb100;

  $bb122:
    assume {:verifier.code 0} true;
    assume !(out_$i116 == 1);
    goto $bb100;

  $bb236:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb241:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8259;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} e1000_init_function_pointers_vf(in_$p15);
    goto corral_source_split_8258;

  $bb240:
    assume out_$i288 == 1;
    goto corral_source_split_8257;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    out_$i288 := $eq.i32(out_$i287, 1);
    goto corral_source_split_8255;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i287 := $M.89;
    goto corral_source_split_8254;

  $bb238:
    assume out_$i286 == 1;
    goto corral_source_split_8253;

  $bb237:
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i285, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb238, $bb239;

  corral_source_split_8251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1808} out_$i285 := __VERIFIER_nondet_int();
    call {:si_unique_call 1809} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i285);
    call {:si_unique_call 1810} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i285);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb235:
    assume out_$i284 == 1;
    goto corral_source_split_8251;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    out_$i284 := $ne.i32(out_$i283, 0);
    goto corral_source_split_7790;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    out_$i283 := $M.89;
    goto corral_source_split_7789;

  $bb22:
    assume out_$i35 == 1;
    goto corral_source_split_7788;

  $bb21:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} ldv_stop();
    goto corral_source_split_8261;

  $bb239:
    assume !(out_$i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb248:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    goto $bb249;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} choose_interrupt_2();
    goto corral_source_split_8264;

  $bb247:
    assume out_$i290 == 1;
    goto corral_source_split_8263;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb247, $bb248;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    out_$i290 := $ne.i32(out_$i289, 0);
    goto corral_source_split_7794;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    out_$i289 := $M.90;
    goto corral_source_split_7793;

  $bb23:
    assume !(out_$i35 == 1);
    goto corral_source_split_7792;

  $bb251:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb256:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1819} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} e1000_init_function_pointers_vf(in_$p17);
    goto corral_source_split_8273;

  $bb255:
    assume out_$i296 == 1;
    goto corral_source_split_8272;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 1);
    goto corral_source_split_8270;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    out_$i295 := $M.91;
    goto corral_source_split_8269;

  $bb253:
    assume out_$i294 == 1;
    goto corral_source_split_8268;

  $bb252:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i32(out_$i293, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb253, $bb254;

  corral_source_split_8266:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1815} out_$i293 := __VERIFIER_nondet_int();
    call {:si_unique_call 1816} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i293);
    call {:si_unique_call 1817} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i293);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb250:
    assume out_$i292 == 1;
    goto corral_source_split_8266;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    out_$i292 := $ne.i32(out_$i291, 0);
    goto corral_source_split_7774;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    out_$i291 := $M.91;
    goto corral_source_split_7773;

  $bb14:
    assume out_$i31 == 1;
    goto corral_source_split_7772;

  $bb5:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i25, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} ldv_stop();
    goto corral_source_split_8276;

  $bb254:
    assume !(out_$i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb263:
    assume !(out_$i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb264;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} choose_interrupt_1();
    goto corral_source_split_8279;

  $bb262:
    assume out_$i298 == 1;
    goto corral_source_split_8278;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb262, $bb263;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    out_$i298 := $ne.i32(out_$i297, 0);
    goto corral_source_split_7778;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    out_$i297 := $M.92;
    goto corral_source_split_7777;

  $bb16:
    assume out_$i32 == 1;
    goto corral_source_split_7776;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i25, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb266:
    assume !(out_$i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    goto $bb267;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} choose_timer_4();
    goto corral_source_split_8282;

  $bb265:
    assume out_$i300 == 1;
    goto corral_source_split_8281;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    out_$i300 := $ne.i32(out_$i299, 0);
    goto corral_source_split_7782;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    out_$i299 := $M.93;
    goto corral_source_split_7781;

  $bb17:
    assume !(out_$i32 == 1);
    goto corral_source_split_7780;

  $bb269:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb279:
    assume {:verifier.code 0} true;
    assume !(out_$i308 == 1);
    goto $bb280;

  $bb282:
    assume {:verifier.code 0} true;
    assume !(out_$i310 == 1);
    goto $bb280;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 0);
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$i309 := $M.94;
    goto corral_source_split_8295;

  $bb278:
    assume out_$i308 == 1;
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 2);
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$i307 := $M.95;
    goto corral_source_split_8291;

  $bb276:
    assume out_$i306 == 1;
    goto corral_source_split_8290;

  $bb271:
    assume out_$i304 == 1;
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i303, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb270:
    assume {:verifier.code 0} true;
    out_$i304 := $slt.i32(out_$i303, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_8284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1823} out_$i303 := __VERIFIER_nondet_int();
    call {:si_unique_call 1824} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i303);
    call {:si_unique_call 1825} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i303);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb268:
    assume out_$i302 == 1;
    goto corral_source_split_8284;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb268, $bb269;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$i302 := $ne.i32(out_$i301, 0);
    goto corral_source_split_7762;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    out_$i301 := $M.95;
    goto corral_source_split_7761;

  $bb7:
    assume out_$i28 == 1;
    goto corral_source_split_7760;

  $bb6:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i25, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb287:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb292:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto $bb293;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1840} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_8325;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} ldv_initialize_pci_error_handlers_6();
    goto corral_source_split_8324;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 1838} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8323;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} ldv_initialize_ethtool_ops_10();
    goto corral_source_split_8322;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.54 := 1;
    call {:si_unique_call 1836} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_8321;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_8320;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} ldv_initialize_pci_driver_5();
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8318;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8317;

  $bb291:
    assume out_$i317 == 1;
    goto corral_source_split_8316;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 0);
    goto corral_source_split_8314;

  $bb290:
    assume {:verifier.code 0} true;
    out_$i316 := $M.99;
    goto corral_source_split_8313;

  $bb289:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    out_$i315 := $ne.i32(out_$i314, 0);
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    out_$i314 := $M.99;
    goto corral_source_split_8307;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $M.99 := out_$i313;
    call {:si_unique_call 1830} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i313);
    goto corral_source_split_8306;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} out_$i313 := igbvf_init_module();
    goto corral_source_split_8305;

  $bb286:
    assume out_$i312 == 1;
    goto corral_source_split_8304;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 1);
    goto corral_source_split_8288;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    out_$i311 := $M.95;
    goto corral_source_split_8287;

  $bb273:
    assume out_$i305 == 1;
    goto corral_source_split_8286;

  $bb272:
    assume !(out_$i304 == 1);
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i303, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} ldv_stop();
    goto corral_source_split_8327;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb274:
    assume {:verifier.code 0} true;
    assume !(out_$i305 == 1);
    goto $bb275;

  $bb277:
    assume {:verifier.code 0} true;
    assume !(out_$i306 == 1);
    goto $bb275;

  $bb299:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    goto $bb300;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} ldv_main_exported_10();
    goto corral_source_split_8330;

  $bb298:
    assume out_$i319 == 1;
    goto corral_source_split_8329;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    out_$i319 := $ne.i32(out_$i318, 0);
    goto corral_source_split_7766;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    out_$i318 := $M.54;
    goto corral_source_split_7765;

  $bb9:
    assume out_$i29 == 1;
    goto corral_source_split_7764;

  $bb8:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i25, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb302:
    assume !(out_$i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb318:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb320:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    goto $bb321;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.94 := out_$i336;
    call {:si_unique_call 1849} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i336);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$i336 := $add.i32(out_$i335, 1);
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    out_$i335 := $M.94;
    goto corral_source_split_8363;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1848} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8362;

  $bb319:
    assume out_$i334 == 1;
    goto corral_source_split_8361;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 0);
    goto corral_source_split_8359;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    out_$i333 := $M.100;
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $M.100 := out_$i332;
    call {:si_unique_call 1847} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i332);
    goto corral_source_split_8357;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} out_$i332 := igbvf_probe(out_$p331, in_$p19);
    goto corral_source_split_8356;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    out_$p331 := $M.68;
    goto corral_source_split_8355;

  $bb317:
    assume out_$i330 == 1;
    goto corral_source_split_8354;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 1);
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    out_$i329 := $M.96;
    goto corral_source_split_8351;

  $bb315:
    assume out_$i328 == 1;
    goto corral_source_split_8350;

  $bb313:
    assume out_$i327 == 1;
    assume {:verifier.code 0} true;
    out_$i328 := $eq.i32(out_$i322, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb304:
    assume out_$i323 == 1;
    assume {:verifier.code 0} true;
    out_$i327 := $slt.i32(out_$i322, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb303:
    assume {:verifier.code 0} true;
    out_$i323 := $slt.i32(out_$i322, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_8332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1843} out_$i322 := __VERIFIER_nondet_int();
    call {:si_unique_call 1844} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i322);
    call {:si_unique_call 1845} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i322);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb301:
    assume out_$i321 == 1;
    goto corral_source_split_8332;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$i321 := $ne.i32(out_$i320, 0);
    goto corral_source_split_7770;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    out_$i320 := $M.96;
    goto corral_source_split_7769;

  $bb11:
    assume out_$i30 == 1;
    goto corral_source_split_7768;

  $bb10:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i25, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb325:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb327:
    assume !(out_$i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $M.96 := 3;
    call {:si_unique_call 1852} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8377;

  $bb326:
    assume out_$i344 == 1;
    goto corral_source_split_8376;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    out_$i344 := $eq.i32(out_$i343, 0);
    goto corral_source_split_8374;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i343 := $M.101;
    goto corral_source_split_8373;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $M.101 := out_$i342;
    call {:si_unique_call 1851} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i342);
    goto corral_source_split_8372;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} out_$i342 := igbvf_suspend(out_$p339, out_$i341);
    goto corral_source_split_8371;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    out_$i341 := $load.i32($M.86, out_$p340);
    goto corral_source_split_8370;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$p340 := $add.ref($add.ref(in_$p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    out_$p339 := $M.68;
    goto corral_source_split_8368;

  $bb324:
    assume out_$i338 == 1;
    goto corral_source_split_8367;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 2);
    goto corral_source_split_8348;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    out_$i337 := $M.96;
    goto corral_source_split_8347;

  $bb314:
    assume !(out_$i327 == 1);
    goto corral_source_split_8346;

  $bb331:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb333:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    goto $bb334;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8387;

  $bb332:
    assume out_$i350 == 1;
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 0);
    goto corral_source_split_8384;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$i349 := $M.102;
    goto corral_source_split_8383;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.102 := out_$i348;
    call {:si_unique_call 1854} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i348);
    goto corral_source_split_8382;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} out_$i348 := igbvf_resume(out_$p347);
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$p347 := $M.68;
    goto corral_source_split_8380;

  $bb330:
    assume out_$i346 == 1;
    goto corral_source_split_8379;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i345, 3);
    goto corral_source_split_8336;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$i345 := $M.96;
    goto corral_source_split_8335;

  $bb306:
    assume out_$i324 == 1;
    goto corral_source_split_8334;

  $bb305:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    out_$i324 := $slt.i32(out_$i322, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb340:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto $bb341;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $M.96 := 4;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_8400;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} igbvf_shutdown(out_$p356);
    goto corral_source_split_8399;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    out_$p356 := $M.68;
    goto corral_source_split_8398;

  $bb339:
    assume out_$i355 == 1;
    goto corral_source_split_8397;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 2);
    goto corral_source_split_8395;

  $bb338:
    assume {:verifier.code 0} true;
    out_$i354 := $M.96;
    goto corral_source_split_8394;

  $bb337:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb338;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.96 := 4;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_8392;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} igbvf_shutdown(out_$p353);
    goto corral_source_split_8391;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    out_$p353 := $M.68;
    goto corral_source_split_8390;

  $bb336:
    assume out_$i352 == 1;
    goto corral_source_split_8389;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    out_$i352 := $eq.i32(out_$i351, 3);
    goto corral_source_split_8340;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    out_$i351 := $M.96;
    goto corral_source_split_8339;

  $bb308:
    assume out_$i325 == 1;
    goto corral_source_split_8338;

  $bb307:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    out_$i325 := $slt.i32(out_$i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb349:
    assume !(out_$i368 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.94 := out_$i371;
    call {:si_unique_call 1868} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i371);
    goto corral_source_split_8430;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    out_$i371 := $sub.i32(out_$i370, 1);
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$i370 := $M.94;
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1867} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8427;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} igbvf_remove(out_$p369);
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$p369 := $M.68;
    goto corral_source_split_8425;

  $bb348:
    assume out_$i368 == 1;
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    out_$i368 := $eq.i32(out_$i367, 2);
    goto corral_source_split_8422;

  $bb347:
    assume {:verifier.code 0} true;
    out_$i367 := $M.96;
    goto corral_source_split_8421;

  $bb346:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $M.94 := out_$i366;
    call {:si_unique_call 1865} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i366);
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$i366 := $sub.i32(out_$i365, 1);
    goto corral_source_split_8418;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    out_$i365 := $M.94;
    goto corral_source_split_8417;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1864} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8416;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} igbvf_remove(out_$p364);
    goto corral_source_split_8415;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    out_$p364 := $M.68;
    goto corral_source_split_8414;

  $bb345:
    assume out_$i363 == 1;
    goto corral_source_split_8413;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 3);
    goto corral_source_split_8411;

  $bb344:
    assume {:verifier.code 0} true;
    out_$i362 := $M.96;
    goto corral_source_split_8410;

  $bb343:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    goto $bb344;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $M.94 := out_$i361;
    call {:si_unique_call 1862} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i361);
    goto corral_source_split_8408;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    out_$i361 := $sub.i32(out_$i360, 1);
    goto corral_source_split_8407;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    out_$i360 := $M.94;
    goto corral_source_split_8406;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8405;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} igbvf_remove(out_$p359);
    goto corral_source_split_8404;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    out_$p359 := $M.68;
    goto corral_source_split_8403;

  $bb342:
    assume out_$i358 == 1;
    goto corral_source_split_8402;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb342, $bb343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 4);
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    out_$i357 := $M.96;
    goto corral_source_split_8343;

  $bb310:
    assume out_$i326 == 1;
    goto corral_source_split_8342;

  $bb309:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i322, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} ldv_stop();
    goto corral_source_split_8432;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb311:
    assume {:verifier.code 0} true;
    assume !(out_$i326 == 1);
    goto $bb312;

  $bb316:
    assume {:verifier.code 0} true;
    assume !(out_$i328 == 1);
    goto $bb312;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} ldv_stop();
    goto corral_source_split_8434;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb13;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb13;

  $bb83_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i55, out_$i56, out_$p57, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$p65, out_$i66, out_$i68, out_$i69, out_$p70, out_$i71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i78, out_$i79, out_$i81, out_$i82, out_$i84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i183, out_$i184, out_$p185, out_$i187, out_$i188, out_$p189, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$p339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$p356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302, out_vslice_dummy_var_303, out_vslice_dummy_var_304, out_vslice_dummy_var_305, out_vslice_dummy_var_306, out_vslice_dummy_var_307, out_vslice_dummy_var_308, out_vslice_dummy_var_309, out_vslice_dummy_var_310, out_vslice_dummy_var_311, out_vslice_dummy_var_312, out_vslice_dummy_var_313, out_vslice_dummy_var_314, out_vslice_dummy_var_315 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$i5, in_$i6, in_$p7, in_$p9, in_$p11, in_$i12, in_$i13, in_$p15, in_$p17, in_$p19, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i55, out_$i56, out_$p57, out_$i59, out_$i60, out_$p61, out_$i63, out_$i64, out_$p65, out_$i66, out_$i68, out_$i69, out_$p70, out_$i71, out_$i73, out_$i74, out_$p75, out_$i76, out_$i78, out_$i79, out_$i81, out_$i82, out_$i84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i126, out_$i127, out_$p128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i144, out_$i145, out_$p146, out_$i148, out_$i149, out_$p150, out_$i152, out_$i153, out_$p154, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i165, out_$i166, out_$p167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i174, out_$i175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i183, out_$i184, out_$p185, out_$i187, out_$i188, out_$p189, out_$i191, out_$i192, out_$p193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$p203, out_$i205, out_$i206, out_$p207, out_$i209, out_$i210, out_$p211, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$p226, out_$i227, out_$i228, out_$p229, out_$i230, out_$i232, out_$i233, out_$p234, out_$i235, out_$i237, out_$i238, out_$p239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$p256, out_$i258, out_$i259, out_$p260, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$p339, out_$p340, out_$i341, out_$i342, out_$i343, out_$i344, out_$i345, out_$i346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$p353, out_$i354, out_$i355, out_$p356, out_$i357, out_$i358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$p364, out_$i365, out_$i366, out_$i367, out_$i368, out_$p369, out_$i370, out_$i371, out_vslice_dummy_var_283, out_vslice_dummy_var_284, out_vslice_dummy_var_285, out_vslice_dummy_var_286, out_vslice_dummy_var_287, out_vslice_dummy_var_288, out_vslice_dummy_var_289, out_vslice_dummy_var_290, out_vslice_dummy_var_291, out_vslice_dummy_var_292, out_vslice_dummy_var_293, out_vslice_dummy_var_294, out_vslice_dummy_var_295, out_vslice_dummy_var_296, out_vslice_dummy_var_297, out_vslice_dummy_var_298, out_vslice_dummy_var_299, out_vslice_dummy_var_300, out_vslice_dummy_var_301, out_vslice_dummy_var_302, out_vslice_dummy_var_303, out_vslice_dummy_var_304, out_vslice_dummy_var_305, out_vslice_dummy_var_306, out_vslice_dummy_var_307, out_vslice_dummy_var_308, out_vslice_dummy_var_309, out_vslice_dummy_var_310, out_vslice_dummy_var_311, out_vslice_dummy_var_312, out_vslice_dummy_var_313, out_vslice_dummy_var_314, out_vslice_dummy_var_315);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i16, in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$i12: i16, in_$i13: i32, in_$p15: ref, in_$p17: ref, in_$p19: ref, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i32, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$p53: ref, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$i59: i32, in_$i60: i1, in_$p61: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$i66: i32, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i73: i32, in_$i74: i1, in_$p75: ref, in_$i76: i32, in_$i78: i32, in_$i79: i1, in_$i81: i32, in_$i82: i1, in_$i84: i32, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i89: i32, in_$i90: i32, in_$i91: i32, in_$i92: i1, in_$i94: i32, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$i100: i32, in_$i101: i1, in_$i102: i1, in_$i103: i1, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i1, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i16, in_$i121: i32, in_$i122: i16, in_$i123: i32, in_$i124: i16, in_$i126: i32, in_$i127: i1, in_$p128: ref, in_$i129: i16, in_$i130: i32, in_$i131: i16, in_$i132: i32, in_$i133: i16, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i16, in_$i139: i32, in_$i140: i16, in_$i141: i32, in_$i142: i16, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i16, in_$i160: i32, in_$i161: i16, in_$i162: i32, in_$i163: i16, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$i168: i16, in_$i169: i32, in_$i170: i16, in_$i171: i32, in_$i172: i16, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i16, in_$i178: i32, in_$i179: i16, in_$i180: i32, in_$i181: i16, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i1, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i224: i32, in_$i225: i1, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$i230: i64, in_$i232: i32, in_$i233: i1, in_$p234: ref, in_$i235: i64, in_$i237: i32, in_$i238: i1, in_$p239: ref, in_$i240: i64, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i258: i32, in_$i259: i1, in_$p260: ref, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i1, in_$p270: ref, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i32, in_$i275: i1, in_$i276: i32, in_$i277: i32, in_$i278: i32, in_$i279: i1, in_$i281: i32, in_$i282: i32, in_$i283: i32, in_$i284: i1, in_$i285: i32, in_$i286: i1, in_$i287: i32, in_$i288: i1, in_$i289: i32, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$i293: i32, in_$i294: i1, in_$i295: i32, in_$i296: i1, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$i303: i32, in_$i304: i1, in_$i305: i1, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i32, in_$i315: i1, in_$i316: i32, in_$i317: i1, in_$i318: i32, in_$i319: i1, in_$i320: i32, in_$i321: i1, in_$i322: i32, in_$i323: i1, in_$i324: i1, in_$i325: i1, in_$i326: i1, in_$i327: i1, in_$i328: i1, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i32, in_$i333: i32, in_$i334: i1, in_$i335: i32, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$p340: ref, in_$i341: i32, in_$i342: i32, in_$i343: i32, in_$i344: i1, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i1, in_$i351: i32, in_$i352: i1, in_$p353: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i365: i32, in_$i366: i32, in_$i367: i32, in_$i368: i1, in_$p369: ref, in_$i370: i32, in_$i371: i32, in_vslice_dummy_var_283: i32, in_vslice_dummy_var_284: i32, in_vslice_dummy_var_285: i32, in_vslice_dummy_var_286: i32, in_vslice_dummy_var_287: i32, in_vslice_dummy_var_288: i32, in_vslice_dummy_var_289: i32, in_vslice_dummy_var_290: i32, in_vslice_dummy_var_291: i32, in_vslice_dummy_var_292: i32, in_vslice_dummy_var_293: i32, in_vslice_dummy_var_294: i32, in_vslice_dummy_var_295: i32, in_vslice_dummy_var_296: i32, in_vslice_dummy_var_297: i32, in_vslice_dummy_var_298: i32, in_vslice_dummy_var_299: i32, in_vslice_dummy_var_300: i32, in_vslice_dummy_var_301: i32, in_vslice_dummy_var_302: ref, in_vslice_dummy_var_303: ref, in_vslice_dummy_var_304: ref, in_vslice_dummy_var_305: i32, in_vslice_dummy_var_306: i32, in_vslice_dummy_var_307: i32, in_vslice_dummy_var_308: i32, in_vslice_dummy_var_309: i32, in_vslice_dummy_var_310: i32, in_vslice_dummy_var_311: i32, in_vslice_dummy_var_312: i32, in_vslice_dummy_var_313: i32, in_vslice_dummy_var_314: i32, in_vslice_dummy_var_315: i32) returns (out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i32, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$p53: ref, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$i59: i32, out_$i60: i1, out_$p61: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$i66: i32, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i73: i32, out_$i74: i1, out_$p75: ref, out_$i76: i32, out_$i78: i32, out_$i79: i1, out_$i81: i32, out_$i82: i1, out_$i84: i32, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i89: i32, out_$i90: i32, out_$i91: i32, out_$i92: i1, out_$i94: i32, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$i100: i32, out_$i101: i1, out_$i102: i1, out_$i103: i1, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i1, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i16, out_$i121: i32, out_$i122: i16, out_$i123: i32, out_$i124: i16, out_$i126: i32, out_$i127: i1, out_$p128: ref, out_$i129: i16, out_$i130: i32, out_$i131: i16, out_$i132: i32, out_$i133: i16, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i16, out_$i139: i32, out_$i140: i16, out_$i141: i32, out_$i142: i16, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i16, out_$i160: i32, out_$i161: i16, out_$i162: i32, out_$i163: i16, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$i168: i16, out_$i169: i32, out_$i170: i16, out_$i171: i32, out_$i172: i16, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i16, out_$i178: i32, out_$i179: i16, out_$i180: i32, out_$i181: i16, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i1, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i224: i32, out_$i225: i1, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$i230: i64, out_$i232: i32, out_$i233: i1, out_$p234: ref, out_$i235: i64, out_$i237: i32, out_$i238: i1, out_$p239: ref, out_$i240: i64, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i258: i32, out_$i259: i1, out_$p260: ref, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i1, out_$p270: ref, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i32, out_$i275: i1, out_$i276: i32, out_$i277: i32, out_$i278: i32, out_$i279: i1, out_$i281: i32, out_$i282: i32, out_$i283: i32, out_$i284: i1, out_$i285: i32, out_$i286: i1, out_$i287: i32, out_$i288: i1, out_$i289: i32, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$i293: i32, out_$i294: i1, out_$i295: i32, out_$i296: i1, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$i303: i32, out_$i304: i1, out_$i305: i1, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i32, out_$i315: i1, out_$i316: i32, out_$i317: i1, out_$i318: i32, out_$i319: i1, out_$i320: i32, out_$i321: i1, out_$i322: i32, out_$i323: i1, out_$i324: i1, out_$i325: i1, out_$i326: i1, out_$i327: i1, out_$i328: i1, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i32, out_$i333: i32, out_$i334: i1, out_$i335: i32, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$p340: ref, out_$i341: i32, out_$i342: i32, out_$i343: i32, out_$i344: i1, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i1, out_$i351: i32, out_$i352: i1, out_$p353: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i365: i32, out_$i366: i32, out_$i367: i32, out_$i368: i1, out_$p369: ref, out_$i370: i32, out_$i371: i32, out_vslice_dummy_var_283: i32, out_vslice_dummy_var_284: i32, out_vslice_dummy_var_285: i32, out_vslice_dummy_var_286: i32, out_vslice_dummy_var_287: i32, out_vslice_dummy_var_288: i32, out_vslice_dummy_var_289: i32, out_vslice_dummy_var_290: i32, out_vslice_dummy_var_291: i32, out_vslice_dummy_var_292: i32, out_vslice_dummy_var_293: i32, out_vslice_dummy_var_294: i32, out_vslice_dummy_var_295: i32, out_vslice_dummy_var_296: i32, out_vslice_dummy_var_297: i32, out_vslice_dummy_var_298: i32, out_vslice_dummy_var_299: i32, out_vslice_dummy_var_300: i32, out_vslice_dummy_var_301: i32, out_vslice_dummy_var_302: ref, out_vslice_dummy_var_303: ref, out_vslice_dummy_var_304: ref, out_vslice_dummy_var_305: i32, out_vslice_dummy_var_306: i32, out_vslice_dummy_var_307: i32, out_vslice_dummy_var_308: i32, out_vslice_dummy_var_309: i32, out_vslice_dummy_var_310: i32, out_vslice_dummy_var_311: i32, out_vslice_dummy_var_312: i32, out_vslice_dummy_var_313: i32, out_vslice_dummy_var_314: i32, out_vslice_dummy_var_315: i32);
  modifies $M.87, $M.0, $M.15, $M.17, $M.16, $M.14, $M.18, $M.19, $M.20, $M.21, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.25, $M.24, $M.30, $M.33, $M.36, $M.39, $M.31, $M.32, $M.34, $M.35, $M.37, $M.38, $M.40, $M.41, $M.94, $M.42, $M.97, $M.46, $M.98, $M.89, $M.56, $M.91, $M.69, $M.81, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.68, $M.96, $M.95, $M.99, $M.100, $M.29, $M.28, $M.43, $M.101, $M.102;


