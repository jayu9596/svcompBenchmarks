var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: [ref]i8;

var $M.3: i32;

var $M.4: [ref]i32;

var $M.5: ref;

var $M.6: i32;

var $M.7: ref;

var $M.8: i32;

var $M.9: ref;

var $M.10: i32;

var $M.11: ref;

var $M.12: i32;

var $M.13: ref;

var $M.14: [ref]i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: [ref]i32;

var $M.18: [ref]i8;

var $M.19: ref;

var $M.20: [ref]i32;

var $M.21: ref;

var $M.22: [ref]i8;

var $M.23: i32;

var $M.24: [ref]i32;

var $M.25: [ref]i32;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: ref;

var $M.32: i32;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: ref;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: ref;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.54: [ref]i16;

var $M.55: [ref]i16;

var $M.56: [ref]i16;

var $M.57: [ref]i16;

var $M.58: [ref]i16;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i64;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 384992);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const gdm_netdev_ops_group1: ref;

axiom gdm_netdev_ops_group1 == $sub.ref(0, 2060);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 3088);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 4116);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 5144);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 6172);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 7200);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 8228);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 9260);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 10288);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 11320);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 12348);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 13380);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 14408);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 15440);

const ldv_work_2_0: ref;

axiom ldv_work_2_0 == $sub.ref(0, 16468);

const ldv_work_struct_2_0: ref;

axiom ldv_work_struct_2_0 == $sub.ref(0, 17500);

const ldv_work_2_1: ref;

axiom ldv_work_2_1 == $sub.ref(0, 18528);

const ldv_work_struct_2_1: ref;

axiom ldv_work_struct_2_1 == $sub.ref(0, 19560);

const ldv_work_2_2: ref;

axiom ldv_work_2_2 == $sub.ref(0, 20588);

const ldv_work_struct_2_2: ref;

axiom ldv_work_struct_2_2 == $sub.ref(0, 21620);

const ldv_work_2_3: ref;

axiom ldv_work_2_3 == $sub.ref(0, 22648);

const ldv_work_struct_2_3: ref;

axiom ldv_work_struct_2_3 == $sub.ref(0, 23680);

const gdm_usb_lte_driver_group1: ref;

axiom gdm_usb_lte_driver_group1 == $sub.ref(0, 24712);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 25740);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 26768);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 27796);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 28824);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 29852);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 30880);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 31908);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 32936);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 33964);

const {:count 3} __mod_usb__id_table_device_table: ref;

axiom __mod_usb__id_table_device_table == $sub.ref(0, 35084);

const {:count 3} id_table: ref;

axiom id_table == $sub.ref(0, 36204);

const gdm_usb_lte_driver: ref;

axiom gdm_usb_lte_driver == $sub.ref(0, 37532);

const usb_rx_wq: ref;

axiom usb_rx_wq == $sub.ref(0, 38564);

const usb_tx_wq: ref;

axiom usb_tx_wq == $sub.ref(0, 39596);

const netlink_mutex: ref;

axiom netlink_mutex == $sub.ref(0, 40780);

const wwan_type: ref;

axiom wwan_type == $sub.ref(0, 41852);

const gdm_netdev_ops: ref;

axiom gdm_netdev_ops == $sub.ref(0, 43404);

const {:count 6} gdm_lte_macaddr: ref;

axiom gdm_lte_macaddr == $sub.ref(0, 44434);

const rcv_cb: ref;

axiom rcv_cb == $sub.ref(0, 45466);

const lte_event: ref;

axiom lte_event == $sub.ref(0, 46506);

const {:count 23} .str.16: ref;

axiom .str.16 == $sub.ref(0, 47553);

const {:count 6} .str.13: ref;

axiom .str.13 == $sub.ref(0, 48583);

const {:count 5} .str.15: ref;

axiom .str.15 == $sub.ref(0, 49612);

const {:count 24} .str.17: ref;

axiom .str.17 == $sub.ref(0, 50660);

const {:count 14} .str.18: ref;

axiom .str.18 == $sub.ref(0, 51698);

const {:count 8} .str.33: ref;

axiom .str.33 == $sub.ref(0, 52730);

const {:count 28} .str.57: ref;

axiom .str.57 == $sub.ref(0, 53782);

const {:count 26} .str.28: ref;

axiom .str.28 == $sub.ref(0, 54832);

const {:count 25} .str.29: ref;

axiom .str.29 == $sub.ref(0, 55881);

const {:count 38} .str.30: ref;

axiom .str.30 == $sub.ref(0, 56943);

const {:count 25} .str.31: ref;

axiom .str.31 == $sub.ref(0, 57992);

const {:count 21} .str.32: ref;

axiom .str.32 == $sub.ref(0, 59037);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 29} .str.58: ref;

axiom .str.58 == $sub.ref(0, 60090);

const {:count 41} .str.41: ref;

axiom .str.41 == $sub.ref(0, 61155);

const {:count 32} .str.42: ref;

axiom .str.42 == $sub.ref(0, 62211);

const {:count 22} .str.43: ref;

axiom .str.43 == $sub.ref(0, 63257);

const {:count 28} .str.44: ref;

axiom .str.44 == $sub.ref(0, 64309);

const {:count 3} .str.5: ref;

axiom .str.5 == $sub.ref(0, 65336);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 66364);

const {:count 9} .str.4: ref;

axiom .str.4 == $sub.ref(0, 67397);

const {:count 47} .str.3: ref;

axiom .str.3 == $sub.ref(0, 68468);

const {:count 30} .str.11: ref;

axiom .str.11 == $sub.ref(0, 69522);

const {:count 17} .str.12: ref;

axiom .str.12 == $sub.ref(0, 70563);

const {:count 33} .str.8: ref;

axiom .str.8 == $sub.ref(0, 71620);

const {:count 33} .str.9: ref;

axiom .str.9 == $sub.ref(0, 72677);

const {:count 39} .str.10: ref;

axiom .str.10 == $sub.ref(0, 73740);

const {:count 23} .str.7: ref;

axiom .str.7 == $sub.ref(0, 74787);

const {:count 20} .str.49: ref;

axiom .str.49 == $sub.ref(0, 75831);

const {:count 23} .str.50: ref;

axiom .str.50 == $sub.ref(0, 76878);

const {:count 27} .str.51: ref;

axiom .str.51 == $sub.ref(0, 77929);

const {:count 28} .str.52: ref;

axiom .str.52 == $sub.ref(0, 78981);

const {:count 26} .str.53: ref;

axiom .str.53 == $sub.ref(0, 80031);

const {:count 27} .str.54: ref;

axiom .str.54 == $sub.ref(0, 81082);

const {:count 26} .str.55: ref;

axiom .str.55 == $sub.ref(0, 82132);

const {:count 27} .str.56: ref;

axiom .str.56 == $sub.ref(0, 83183);

const {:count 40} .str.26: ref;

axiom .str.26 == $sub.ref(0, 84247);

const {:count 38} .str.27: ref;

axiom .str.27 == $sub.ref(0, 85309);

const {:count 12} .str.1: ref;

axiom .str.1 == $sub.ref(0, 86345);

const {:count 31} .str.2: ref;

axiom .str.2 == $sub.ref(0, 87400);

const {:count 42} .str.14: ref;

axiom .str.14 == $sub.ref(0, 88466);

const {:count 33} .str.23: ref;

axiom .str.23 == $sub.ref(0, 89523);

const {:count 11} .str.25: ref;

axiom .str.25 == $sub.ref(0, 90558);

const {:count 27} .str.24: ref;

axiom .str.24 == $sub.ref(0, 91609);

const {:count 37} .str.47: ref;

axiom .str.47 == $sub.ref(0, 92670);

const {:count 38} .str.48: ref;

axiom .str.48 == $sub.ref(0, 93732);

const {:count 37} .str.45: ref;

axiom .str.45 == $sub.ref(0, 94793);

const {:count 36} .str.46: ref;

axiom .str.46 == $sub.ref(0, 95853);

const .str: ref;

axiom .str == $sub.ref(0, 96906);

const init_net: ref;

axiom init_net == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 32} .str.19: ref;

axiom .str.19 == $sub.ref(0, 97962);

const {:count 38} .str.20: ref;

axiom .str.20 == $sub.ref(0, 99024);

const {:count 42} .str.21: ref;

axiom .str.21 == $sub.ref(0, 100090);

const {:count 38} .str.22: ref;

axiom .str.22 == $sub.ref(0, 101152);

const {:count 32} .str.34: ref;

axiom .str.34 == $sub.ref(0, 102208);

const {:count 18} .str.35: ref;

axiom .str.35 == $sub.ref(0, 103250);

const {:count 3} .str.36: ref;

axiom .str.36 == $sub.ref(0, 104277);

const {:count 10} .str.37: ref;

axiom .str.37 == $sub.ref(0, 105311);

const {:count 18} .str.38: ref;

axiom .str.38 == $sub.ref(0, 106353);

const {:count 10} .str.39: ref;

axiom .str.39 == $sub.ref(0, 107387);

const {:count 8} .str.40: ref;

axiom .str.40 == $sub.ref(0, 108419);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 109451);

const {:count 3} .str.1.128: ref;

axiom .str.1.128 == $sub.ref(0, 110478);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 111516);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 112544);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 113576);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 114608);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const gdm_lte_open: ref;

axiom gdm_lte_open == $sub.ref(0, 115640);

procedure gdm_lte_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gdm_lte_open($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} netif_start_queue($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const gdm_lte_close: ref;

axiom gdm_lte_close == $sub.ref(0, 116672);

procedure gdm_lte_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gdm_lte_close($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} netif_stop_queue($p0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const gdm_lte_tx: ref;

axiom gdm_lte_tx == $sub.ref(0, 117704);

procedure gdm_lte_tx($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.17, $M.3, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation gdm_lte_tx($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i16;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p36: ref;
  var $i37: i32;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i32;
  var $i73: i1;
  var $i74: i32;
  var $i72: i32;
  var $i75: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $p81: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $p87: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $p94: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p3 := netdev_priv($p1);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i5 := gdm_lte_tx_nic_type($p1, $p0);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i5, 256);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i5, 512);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i5, 1048576);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 0);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    call {:si_unique_call 17} {:cexpr "data_len"} boogie_si_record_i32($i42);
    assume {:verifier.code 0} true;
    $p36, $i37 := $p40, $i42;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i5, 512);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $i5;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 262144);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i45;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i52 := sscanf.ref.ref.ref($p51, .str.13, $p2);
    call {:si_unique_call 20} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 1);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(200, 1)), $mul.ref(4, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p4);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p2);
    call {:si_unique_call 22} $i67 := devirtbounce($p57, $p61, $p36, $i37, $i64, 0, tx_complete, $p65, $i66, $i49);
    call {:si_unique_call 23} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 3);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i68 == 1);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i67, 2);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i69 == 1);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i67, 1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i67;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i72 := $i74;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i72, 0);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i75 == 1);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i85 := $add.i64($i84, 1);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p87, $i85);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i91 := $sext.i32.i64($i37);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i92 := $add.i64($i90, $i91);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p94, $i92);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} consume_skb($p0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb41:
    assume $i75 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i79 := $add.i64($i78, 1);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p81, $i79);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i73 == 1;
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 19);
    goto $bb40;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} netif_stop_queue($p1);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i67, 3);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 28);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb37;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb36;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb30;

  $bb26:
    assume $i53 == 1;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} consume_skb($p0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i45, 65535);
    call {:si_unique_call 18} {:cexpr "nic_type"} boogie_si_record_i32($i48);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb25;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i45 := 512;
    goto $bb22;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 18)), $mul.ref(14, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i25 := __fswab16($i24);
    call {:si_unique_call 15} {:cexpr "tmp___3"} boogie_si_record_i16($i25);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 4095);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(4, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i34, 4);
    call {:si_unique_call 16} {:cexpr "data_len"} boogie_si_record_i32($i35);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p36, $i37 := $p32, $i35;
    goto $bb19;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i14 := gdm_lte_emulate_ndp($p0, $i5);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 12} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} consume_skb($p0);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i10 := gdm_lte_emulate_arp($p0, $i5);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 9} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} consume_skb($p0);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} netdev_err.ref.ref($p1, .str.16);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 1);
    goto $bb3;
}



const gdm_lte_set_config: ref;

axiom gdm_lte_set_config == $sub.ref(0, 118736);

procedure gdm_lte_set_config($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gdm_lte_set_config($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const gdm_lte_stats: ref;

axiom gdm_lte_stats == $sub.ref(0, 119768);

procedure gdm_lte_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gdm_lte_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p1 := netdev_priv($p0);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(16, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 120800);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3008, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gdm_lte_tx_nic_type: ref;

axiom gdm_lte_tx_nic_type == $sub.ref(0, 121832);

procedure gdm_lte_tx_nic_type($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gdm_lte_tx_nic_type($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i16;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i16;
  var $i37: i16;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i16;
  var $i70: i16;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i65: i32;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $p97: ref;
  var $i98: i16;
  var $i99: i32;
  var $i100: i16;
  var $i101: i16;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i16;
  var $i110: i16;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $i105: i32;
  var $i115: i32;
  var $i90: i32;
  var $i48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p2 := netdev_priv($p0);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 16);
    call {:si_unique_call 28} {:cexpr "nic_type"} boogie_si_record_i32($i6);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i14 := __fswab16($i13);
    call {:si_unique_call 30} {:cexpr "tmp___2"} boogie_si_record_i16($i14);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 33024);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.0, $p33);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $i37 := __fswab16($i36);
    call {:si_unique_call 36} {:cexpr "tmp___1"} boogie_si_record_i16($i37);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    call {:si_unique_call 37} {:cexpr "mac_proto"} boogie_si_record_i32($i38);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(14, 1));
    assume {:verifier.code 0} true;
    $i30, $p31, $i32 := $i38, $p41, $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i30, 2054);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i30, 34525);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i30, 34525);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i48 := $i32;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i32, 131072);
    call {:si_unique_call 38} {:cexpr "nic_type"} boogie_si_record_i32($i76);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p31);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 58);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p77, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 17);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i115 := $i76;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i90 := $i115;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i48 := $i90;
    goto $bb16;

  $bb32:
    assume $i94 == 1;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p31);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p95, $mul.ref(40, 8)), $mul.ref(2, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.0, $p97);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i101 := __fswab16($i100);
    call {:si_unique_call 49} {:cexpr "tmp___5"} boogie_si_record_i16($i101);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 546);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i103 == 1);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p95, $mul.ref(40, 8)), $mul.ref(2, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.0, $p106);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i110 := __fswab16($i109);
    call {:si_unique_call 52} {:cexpr "tmp___6"} boogie_si_record_i16($i110);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 547);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i114 := $i76;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i105 := $i114;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i115 := $i105;
    goto $bb40;

  $bb37:
    assume $i112 == 1;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i76, 262144);
    call {:si_unique_call 53} {:cexpr "nic_type"} boogie_si_record_i32($i113);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb39;

  $bb34:
    assume $i103 == 1;
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i76, 262144);
    call {:si_unique_call 50} {:cexpr "nic_type"} boogie_si_record_i32($i104);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb36;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p31);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p82, $mul.ref(40, 8)), $mul.ref(0, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.0, $p84);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 135);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i89 := $i76;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb31;

  $bb28:
    assume $i87 == 1;
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i76, 512);
    call {:si_unique_call 47} {:cexpr "nic_type"} boogie_si_record_i32($i88);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i89 := $i88;
    goto $bb30;

  $bb7:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i30, 2054);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb11;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i32, 256);
    call {:si_unique_call 39} {:cexpr "nic_type"} boogie_si_record_i32($i47);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i48 := $i47;
    goto $bb16;

  $bb5:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i30, 2048);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb11;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i32, 65536);
    call {:si_unique_call 40} {:cexpr "nic_type"} boogie_si_record_i32($i49);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p31);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 17);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i75 := $i49;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i48 := $i75;
    goto $bb16;

  $bb17:
    assume $i54 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p31);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p55, $mul.ref(20, 8)), $mul.ref(2, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i61 := __fswab16($i60);
    call {:si_unique_call 42} {:cexpr "tmp___3"} boogie_si_record_i16($i61);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 67);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i63 == 1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p55, $mul.ref(20, 8)), $mul.ref(2, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i70 := __fswab16($i69);
    call {:si_unique_call 45} {:cexpr "tmp___4"} boogie_si_record_i16($i70);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 68);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i74 := $i49;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i65 := $i74;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i75 := $i65;
    goto $bb25;

  $bb22:
    assume $i72 == 1;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i49, 262144);
    call {:si_unique_call 46} {:cexpr "nic_type"} boogie_si_record_i32($i73);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb24;

  $bb19:
    assume $i63 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i49, 262144);
    call {:si_unique_call 43} {:cexpr "nic_type"} boogie_si_record_i32($i64);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb21;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i24 := __fswab16($i23);
    call {:si_unique_call 32} {:cexpr "tmp___0"} boogie_si_record_i16($i24);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    call {:si_unique_call 33} {:cexpr "mac_proto"} boogie_si_record_i32($i25);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(18, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i6, 1048576);
    call {:si_unique_call 34} {:cexpr "nic_type"} boogie_si_record_i32($i29);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i30, $p31, $i32 := $i25, $p28, $i29;
    goto $bb3;
}



const netdev_err: ref;

axiom netdev_err == $sub.ref(0, 122864);

procedure netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation netdev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    return;
}



const gdm_lte_emulate_arp: ref;

axiom gdm_lte_emulate_arp == $sub.ref(0, 123896);

procedure gdm_lte_emulate_arp($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation gdm_lte_emulate_arp($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p23: ref;
  var $i24: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i8;
  var $p50: ref;
  var $p52: ref;
  var $i53: i8;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i16;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i82: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var vslice_dummy_var_136: ref;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $p2 := $alloc($mul.ref(14, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $p3 := $alloc($mul.ref(18, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $p4 := $alloc($mul.ref(60, $zext.i32.i64(1)));
    call {:si_unique_call 57} {:cexpr "gdm_lte_emulate_arp:arg:nic_type"} boogie_si_record_i32($i1);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p7 := netdev_priv($p6);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i16 := __fswab16($i15);
    call {:si_unique_call 60} {:cexpr "tmp___0"} boogie_si_record_i16($i16);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 33024);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 62} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p25, $p27, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p23, $i24 := $p2, 14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i24);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 8));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i24);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 8);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p35, $mul.ref($i37, 1));
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p4);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(8, 20));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p40);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p33);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 63} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p43, $p44, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 512);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p41, $mul.ref(8, 20)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i48);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 20)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p41, $mul.ref(8, 20)), $mul.ref(0, 1)), $mul.ref(1, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i53);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p41, $mul.ref(8, 20)), $mul.ref(0, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(2, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p39, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 64} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p58, $p60, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p41, $mul.ref(8, 20)), $mul.ref(6, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p39, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 65} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p62, $p64, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p41, $mul.ref(8, 20)), $mul.ref(10, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p39, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 66} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p66, $p68, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p41, $mul.ref(8, 20)), $mul.ref(16, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p39, $mul.ref(0, 20)), $mul.ref(6, 1));
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    cmdloc_dummy_var_19 := $M.0;
    call {:si_unique_call 67} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p70, $p72, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_20;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p23, $mul.ref(6, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.0;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 68} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p23, $p73, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p23, $mul.ref(6, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(218, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 69} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p74, $p76, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $p79 := dev_alloc_skb($i78);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} skb_reserve($p79, 0);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p83 := skb_put($p79, $i24);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i24);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 73} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p83, $p23, $i84, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} $p85 := skb_put($p79, 8);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p40);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 75} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p85, $p86, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p87 := skb_put($p79, 20);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p42);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 77} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p87, $p88, 20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p23);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p79, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, $i91);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p79, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $p94);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} skb_reset_mac_header($p79);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} vslice_dummy_var_136 := skb_pull($p79, 14);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} vslice_dummy_var_137 := gdm_lte_rx($p79, $p8, $i1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i82 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb4:
    assume $i81 == 1;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 61} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p19, $p21, 18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p23, $i24 := $p3, 18;
    goto $bb3;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 124928);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    return;
}



const gdm_lte_emulate_ndp: ref;

axiom gdm_lte_emulate_ndp == $sub.ref(0, 125960);

procedure gdm_lte_emulate_ndp($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, assertsPassed;



implementation gdm_lte_emulate_ndp($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i16;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i16;
  var $i44: i16;
  var $i45: i32;
  var $i46: i1;
  var $p35: ref;
  var $i36: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p108: ref;
  var $p110: ref;
  var $p112: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i16;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i64;
  var $i149: i1;
  var $p150: ref;
  var $i151: i64;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i16;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i33: i32;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var vslice_dummy_var_138: ref;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} $p2 := $alloc($mul.ref(14, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} $p3 := $alloc($mul.ref(18, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p7 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 88} {:cexpr "gdm_lte_emulate_ndp:arg:nic_type"} boogie_si_record_i32($i1);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p11 := netdev_priv($p10);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i20 := __fswab16($i19);
    call {:si_unique_call 91} {:cexpr "tmp___2"} boogie_si_record_i16($i20);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 33024);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p2);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 95} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p37, $p39, 14, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $i44 := __fswab16($i43);
    call {:si_unique_call 97} {:cexpr "tmp___1"} boogie_si_record_i16($i44);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 34525);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p35, $i36 := $p2, 14;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i36);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p50, $mul.ref($i51, 40));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 96);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i57 == 1);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p50, $mul.ref($i51, 40)), $mul.ref(6, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 58);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i36);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i65 := $add.i64($i64, 40);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p63, $mul.ref($i65, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 133);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i71 == 1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p67, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 135);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i75 == 1);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb19:
    assume $i75 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p76, 0);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p77, 0);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p167, 0);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p168, 0);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p169, 0);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p170, 0);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p171, 0);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p172, 0);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p173, 0);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p174, 0);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p175, 0);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p176, 0);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p177, 0);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p178, 0);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p179, 0);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p180, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p8);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i83 := memcmp($p81, $p82, 16);
    call {:si_unique_call 99} {:cexpr "tmp___4"} boogie_si_record_i32($i83);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $sub.i8(0, 120));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p86, 0);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, 0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 4)), $mul.ref(0, 4));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, 96);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i93 := $zext.i32.i64($i36);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i94 := $add.i64($i93, 48);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p92, $mul.ref($i94, 1));
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p96, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 100} cmdloc_dummy_var_44 := $memcpy.i8(cmdloc_dummy_var_42, cmdloc_dummy_var_43, $p98, $p100, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 2);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(0, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(1, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, 10);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(2, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 59);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(3, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $sub.i8(0, 81));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(4, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, 99);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(5, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, $sub.i8(0, 57));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p5);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p52);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 101} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p115, $p116, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 102} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p120, $p122, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p50, $mul.ref($i51, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 103} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p126, $p130, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p131, 8192);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p7);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p6);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    cmdloc_dummy_var_55 := $M.0;
    call {:si_unique_call 104} cmdloc_dummy_var_56 := $memcpy.i8(cmdloc_dummy_var_54, cmdloc_dummy_var_55, $p132, $p133, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_56;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p7);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($p134, $mul.ref(8, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p4);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.0;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 105} cmdloc_dummy_var_59 := $memcpy.i8(cmdloc_dummy_var_57, cmdloc_dummy_var_58, $p135, $p136, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p7);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i138 := icmp6_checksum($p5, $p137, 32);
    call {:si_unique_call 107} {:cexpr "tmp___5"} boogie_si_record_i32($i138);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i16($i138);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p140, $i139);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p35, $mul.ref(6, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.0;
    cmdloc_dummy_var_61 := $M.0;
    call {:si_unique_call 108} cmdloc_dummy_var_62 := $memcpy.i8(cmdloc_dummy_var_60, cmdloc_dummy_var_61, $p35, $p141, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_62;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p35, $mul.ref(6, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p12, $mul.ref(0, 232)), $mul.ref(218, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_63 := $M.0;
    cmdloc_dummy_var_64 := $M.0;
    call {:si_unique_call 109} cmdloc_dummy_var_65 := $memcpy.i8(cmdloc_dummy_var_63, cmdloc_dummy_var_64, $p142, $p144, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_65;
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p147 := dev_alloc_skb($i146);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i148 := $p2i.ref.i64($p147);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i149 := $eq.i64($i148, 0);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} skb_reserve($p147, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p150 := skb_put($p147, $i36);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i151 := $zext.i32.i64($i36);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_66 := $M.0;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 113} cmdloc_dummy_var_68 := $memcpy.i8(cmdloc_dummy_var_66, cmdloc_dummy_var_67, $p150, $p35, $i151, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p152 := skb_put($p147, 40);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p5);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.0;
    cmdloc_dummy_var_70 := $M.0;
    call {:si_unique_call 115} cmdloc_dummy_var_71 := $memcpy.i8(cmdloc_dummy_var_69, cmdloc_dummy_var_70, $p152, $p153, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_71;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p154 := skb_put($p147, 8);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p6);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_72 := $M.0;
    cmdloc_dummy_var_73 := $M.0;
    call {:si_unique_call 117} cmdloc_dummy_var_74 := $memcpy.i8(cmdloc_dummy_var_72, cmdloc_dummy_var_73, $p154, $p155, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_74;
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p156 := skb_put($p147, 24);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p4);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.0;
    cmdloc_dummy_var_76 := $M.0;
    call {:si_unique_call 119} cmdloc_dummy_var_77 := $memcpy.i8(cmdloc_dummy_var_75, cmdloc_dummy_var_76, $p156, $p157, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_77;
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p35);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i160 := $load.i16($M.0, $p159);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p147, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $i160);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p147, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p164, $p163);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} skb_reset_mac_header($p147);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_138 := skb_pull($p147, 14);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} vslice_dummy_var_139 := gdm_lte_rx($p147, $p12, $i1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb5;

  $bb30:
    assume $i149 == 1;
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 12);
    goto $bb5;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i84 == 1;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb5;

  $bb17:
    assume $i71 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb5;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb12;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb5;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 92} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p23, $p25, 18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i30 := __fswab16($i29);
    call {:si_unique_call 94} {:cexpr "tmp___0"} boogie_si_record_i16($i30);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 34525);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p35, $i36 := $p3, 18;
    goto $bb7;

  $bb3:
    assume $i32 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 1);
    goto $bb5;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 126992);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const sscanf: ref;

axiom sscanf == $sub.ref(0, 128024);

procedure sscanf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const tx_complete: ref;

axiom tx_complete == $sub.ref(0, 129056);

procedure tx_complete($p0: ref);
  free requires assertsPassed;



implementation tx_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i4 := netif_queue_stopped($p3);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 125} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} netif_wake_queue($p8);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_stop_queue: ref;

axiom netif_stop_queue == $sub.ref(0, 130088);

procedure netif_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} netif_tx_stop_queue($p1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    return;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 131120);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1016, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 504));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 132152);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} set_bit(0, $p1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 133184);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 132} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    return;
}



const netif_queue_stopped: ref;

axiom netif_queue_stopped == $sub.ref(0, 134216);

procedure netif_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $i2 := netif_tx_queue_stopped($p1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 135} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_wake_queue: ref;

axiom netif_wake_queue == $sub.ref(0, 135248);

procedure netif_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_wake_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} netif_tx_wake_queue($p1);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 136280);

procedure netif_tx_wake_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_wake_queue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 137312);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_tx_queue_stopped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 139} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 138344);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 139376);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const memcmp: ref;

axiom memcmp == $sub.ref(0, 140408);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const icmp6_checksum: ref;

axiom icmp6_checksum == $sub.ref(0, 141440);

procedure icmp6_checksum($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation icmp6_checksum($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i44: i32;
  var $i33: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $i114: i16;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $i129: i16;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $i144: i16;
  var $i145: i32;
  var $i34: i32;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 142} {:cexpr "icmp6_checksum:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 143} cmdloc_dummy_var_79 := $memset.i8(cmdloc_dummy_var_78, $p4, 0, 40, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 144} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p7, $p11, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 145} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p14, $p18, 16, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i21);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p3);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(39, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $i25);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 40)), $mul.ref(0, 2));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    call {:si_unique_call 146} {:cexpr "sum"} boogie_si_record_i32($i31);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p3);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 40)), $mul.ref(1, 2));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, $i31);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p3);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 40)), $mul.ref(2, 2));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, $i56);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p3);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 40)), $mul.ref(3, 2));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, $i61);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p3);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 40)), $mul.ref(4, 2));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i70, $i66);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p3);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 40)), $mul.ref(5, 2));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, $i71);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p3);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 40)), $mul.ref(6, 2));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, $i76);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p3);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 40)), $mul.ref(7, 2));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.0, $p83);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i84);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, $i81);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p3);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 40)), $mul.ref(8, 2));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i89 := $load.i16($M.0, $p88);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, $i86);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p3);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 40)), $mul.ref(9, 2));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, $i91);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p3);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 40)), $mul.ref(10, 2));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.0, $p98);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, $i96);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p3);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 40)), $mul.ref(11, 2));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.0, $p103);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, $i101);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p3);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 40)), $mul.ref(12, 2));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, $i106);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p3);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(13, 2));
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i114 := $load.i16($M.0, $p113);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i114);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, $i111);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p3);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 40)), $mul.ref(14, 2));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.0, $p118);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i120, $i116);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p3);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p122, $mul.ref(0, 40)), $mul.ref(15, 2));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.0, $p123);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i125, $i121);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p3);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 40)), $mul.ref(16, 2));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i129 := $load.i16($M.0, $p128);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i130 := $zext.i16.i32($i129);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, $i126);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p3);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 40)), $mul.ref(17, 2));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.0, $p133);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i136 := $add.i32($i135, $i131);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p3);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 40)), $mul.ref(18, 2));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i139 := $load.i16($M.0, $p138);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i139);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i140, $i136);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p3);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 40)), $mul.ref(19, 2));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i144 := $load.i16($M.0, $p143);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i145, $i141);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i2, 1);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i45 := $ashr.i32($i33, 16);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i33, 65535);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i45, $i46);
    call {:si_unique_call 149} {:cexpr "sum"} boogie_si_record_i32($i47);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i48 := $ashr.i32($i47, 16);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, $i47);
    call {:si_unique_call 150} {:cexpr "sum"} boogie_si_record_i32($i49);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i50 := $xor.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 65535);
    call {:si_unique_call 151} {:cexpr "sum"} boogie_si_record_i32($i51);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i35, $i36, $p37 := $i34, $i2, $p1;
    goto $bb8;

  $bb8:
    call $p38, $i39, $i40, $i41, $i42, $i43, $i35, $i36, $p37, $i44 := icmp6_checksum_loop_$bb8($p38, $i39, $i40, $i41, $i42, $i43, $i35, $i36, $p37, $i44);
    goto $bb8_last;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(1, 2));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p37);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, $i35);
    call {:si_unique_call 147} {:cexpr "sum"} boogie_si_record_i32($i41);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i36, $sub.i32(0, 2));
    call {:si_unique_call 148} {:cexpr "len"} boogie_si_record_i32($i42);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, 1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i44 := $i41;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i33 := $i44;
    goto $bb7;

  $bb10:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i35, $i36, $p37 := $i41, $i42, $p38;
    goto $bb10_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_782;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 142472);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const skb_reserve: ref;

axiom skb_reserve == $sub.ref(0, 143504);

procedure skb_reserve($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reserve($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "skb_reserve:arg:len"} boogie_si_record_i32($i1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 1));
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    return;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 144536);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p2 := external_alloc();
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_reset_mac_header: ref;

axiom skb_reset_mac_header == $sub.ref(0, 145568);

procedure skb_reset_mac_header($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_mac_header($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i16;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i16($i3);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i16($i8);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i5, $i10);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(198, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    return;
}



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 146600);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_pull($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "skb_pull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p2 := external_alloc();
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gdm_lte_rx: ref;

axiom gdm_lte_rx == $sub.ref(0, 147632);

procedure gdm_lte_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_lte_rx($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p10: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "gdm_lte_rx:arg:nic_type"} boogie_si_record_i32($i2);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i3 := netif_rx_ni($p0);
    call {:si_unique_call 161} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, 1);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p16, $i14);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 14);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i19, $i23);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, $i24);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i8);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netif_rx_ni: ref;

axiom netif_rx_ni == $sub.ref(0, 148664);

procedure netif_rx_ni($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation netif_rx_ni($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 163} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 149696);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 164} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 165} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 150728);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p2 := ldv___netdev_alloc_skb_36($p0, $i1, 32);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_36: ref;

axiom ldv___netdev_alloc_skb_36 == $sub.ref(0, 151760);

procedure ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "ldv___netdev_alloc_skb_36:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 169} {:cexpr "ldv___netdev_alloc_skb_36:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} ldv_check_alloc_flags($i2);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p3 := ldv_undef_ptr();
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 152792);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 153824);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 174} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 175} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 154856);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 155888);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const netif_start_queue: ref;

axiom netif_start_queue == $sub.ref(0, 156920);

procedure netif_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p1 := netdev_get_tx_queue($p0, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} netif_tx_start_queue($p1);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 157952);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(424, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} clear_bit(0, $p1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 158984);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 181} devirtbounce.1(0, $p1, $i0, $p1);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    return;
}



const gdm_usb_probe: ref;

axiom gdm_usb_probe == $sub.ref(0, 160016);

procedure gdm_usb_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.18, assertsPassed, $CurrAddr, $M.14;



implementation gdm_usb_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p10: ref;
  var $i11: i16;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i8;
  var $i46: i8;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i41: i32;
  var $p58: ref;
  var $i29: i32;
  var $p59: ref;
  var $i20: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p2 := interface_to_usbdev($p0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    call {:si_unique_call 183} {:cexpr "bInterfaceNumber"} boogie_si_record_i32($i8);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(8, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    call {:si_unique_call 184} {:cexpr "idVendor"} boogie_si_record_i16($i11);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    call {:si_unique_call 185} {:cexpr "idProduct"} boogie_si_record_i16($i14);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i11);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i14);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} vslice_dummy_var_140 := printk.ref.i32.i32(.str.41, $i15, $i16);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i8, 1);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p21 := kmalloc(72, 208);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p25 := kmalloc(896, 208);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p25);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, gdm_usb_hci_send);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, gdm_usb_sdu_send);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, gdm_usb_recv);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, gdm_usb_get_endian);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 896)), $mul.ref(0, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p2);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i37 := init_usb($p26);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 192} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p26, $mul.ref(0, 896)), $mul.ref(872, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $i45 := $and.i8($i44, $sub.i8(0, 9));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i46 := $or.i8($i45, 8);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i46);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} usb_enable_autosuspend($p2);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} pm_runtime_set_autosuspend_delay($p47, 5000);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i14);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 36864);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p26, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} gdm_set_endian($p51, 2);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i52 := request_mac_address($p26);
    call {:si_unique_call 200} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} start_rx_proc($p22);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_142 := usb_get_dev($p2);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p22);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} usb_set_intfdata($p0, $p57);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i53 == 1;
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(1472, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} dev_err.ref.ref($p55, .str.44);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} release_usb($p26);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i41 := $i52;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p26);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} kfree($p58);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i29 := $i41;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p22);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} kfree($p59);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i20 := $i29;
    goto $bb3;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p26, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} gdm_set_endian($p50, 3);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(1472, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} dev_err.ref.ref($p40, .str.43);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i41 := $i37;
    goto $bb14;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb10;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_141 := printk.ref(.str.42);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 19);
    goto $bb3;
}



const gdm_usb_disconnect: ref;

axiom gdm_usb_disconnect == $sub.ref(0, 161048);

procedure gdm_usb_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.16;



implementation gdm_usb_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p1 := interface_to_usbdev($p0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p2 := usb_get_intfdata($p0);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} unregister_lte_device($p3);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} release_usb($p6);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} kfree($p7);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} kfree($p8);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} usb_put_dev($p1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    return;
}



const gdm_usb_suspend: ref;

axiom gdm_usb_suspend == $sub.ref(0, 162080);

procedure gdm_usb_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.0, $M.3, $CurrAddr;



implementation gdm_usb_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p32: ref;
  var $p33: ref;
  var $p45: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p3, $i1);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $p4 := usb_get_intfdata($p0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 896)), $mul.ref(888, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 896)), $mul.ref(888, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 1);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} ldv_spin_lock();
    $p18 := $add.ref($add.ref($add.ref($add.ref($p8, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p20, $mul.ref($sub.ref(0, 32), 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 32), 96)), $mul.ref(32, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    $p29 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(16, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i28, $i30);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p45 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} spin_unlock_irqrestore($p45, $u0);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p32, $p33 := $p26, $p21;
    goto $bb8;

  $bb8:
    call $p34, $p35, $p36, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p32, $p33 := gdm_usb_suspend_loop_$bb8($p8, $i30, $p34, $p35, $p36, $p38, $p39, $p40, $p41, $p42, $i43, $i44, $p32, $p33);
    goto $bb8_last;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p34 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} spin_unlock_irqrestore($p34, $u0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p33, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} usb_kill_urb($p36);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} ldv_spin_lock();
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p32, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, $i30);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i44 == 1);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p32, $p33 := $p41, $p32;
    goto $bb10_dummy;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(1472, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} dev_err.ref.ref($p14, .str.58);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 1);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;
}



const gdm_usb_resume: ref;

axiom gdm_usb_resume == $sub.ref(0, 163112);

procedure gdm_usb_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation gdm_usb_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $i28: i1;
  var $i20: i32;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $i12: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(888, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(888, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} ldv_spin_lock();
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 3);
    call {:si_unique_call 224} {:cexpr "issue_count"} boogie_si_record_i32($i16);
    $p17 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(128, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} spin_unlock_irqrestore($p17, $u0);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i18 := $sge.i32($i16, 0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} ldv_spin_lock();
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p30 := $M.5;
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_144 := queue_work($p30, $p32);
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} spin_unlock_irqrestore($p34, $u0);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32(0, $i16);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb10;

  $bb10:
    call $p21, $p22, $p23, $p24, $p25, $i27, $i28, $i20, vslice_dummy_var_143 := gdm_usb_resume_loop_$bb10($p2, $p5, $i16, $p21, $p22, $p23, $p24, $p25, $i27, $i28, $i20, vslice_dummy_var_143);
    goto $bb10_last;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(880, 1));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} vslice_dummy_var_143 := gdm_usb_recv($p22, $p24, $p25, 1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 227} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, $i16);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb12:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb12_dummy;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(1472, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} dev_err.ref.ref($p11, .str.57);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1215;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 164144);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 165176);

procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 166208);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 232} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 167240);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.3;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} ldv_spin_unlock();
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} ldv_spin_unlock_irqrestore_111($p0, $i1);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    return;
}



const gdm_usb_recv: ref;

axiom gdm_usb_recv == $sub.ref(0, 168272);

procedure gdm_usb_recv($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $CurrAddr, assertsPassed;



implementation gdm_usb_recv($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i39: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i14: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 237} {:cexpr "gdm_usb_recv:arg:context"} boogie_si_record_i32($i3);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(144, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(0, 1));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p15 := get_rx_struct($p8, $p4);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(880, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p1);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p1);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p2);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p8);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i25 := __create_pipe($p7, 131);
    call {:si_unique_call 242} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i25, $sub.i32(0, 1073741696));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p15);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} usb_fill_bulk_urb($p27, $p7, $i28, $p30, 32768, gdm_usb_rcv_complete, $p31);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} ldv_spin_lock();
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(32, 1));
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(16, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} list_add_tail($p32, $p33);
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} spin_unlock_irqrestore($p34, $u0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i3, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i42 := ldv_usb_submit_urb_144($p41, 32);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 250} {:cexpr "ret"} boogie_si_record_i32($i42);
    assume {:verifier.code 0} true;
    $i39 := $i42;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i39, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb11:
    assume $i43 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} ldv_spin_lock();
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} list_del($p44);
    $p45 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} spin_unlock_irqrestore($p45, $u0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} vslice_dummy_var_147 := printk.ref.ref(.str.30, $p15);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} put_rx_struct($p8, $p15);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i38 := ldv_usb_submit_urb_143($p37, 208);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 248} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb10;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_146 := printk.ref(.str.29);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} vslice_dummy_var_145 := printk.ref(.str.28);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb3;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 169304);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i2 := ldv_queue_work_on_114(8192, $p0, $p1);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 257} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_queue_work_on_114: ref;

axiom ldv_queue_work_on_114 == $sub.ref(0, 170336);

procedure ldv_queue_work_on_114($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation ldv_queue_work_on_114($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} {:cexpr "ldv_queue_work_on_114:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i3 := queue_work_on($i0, $p1, $p2);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 260} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 261} {:cexpr "ldv_func_res"} boogie_si_record_i8($i6);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} activate_work_1($p2, 2);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 171368);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 263} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 264} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 265} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 172400);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i2 := $M.6;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.10;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.12;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.12 := $i1;
    call {:si_unique_call 270} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.11 := $p0;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.10 := $i1;
    call {:si_unique_call 269} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $M.9 := $p0;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $M.8 := $i1;
    call {:si_unique_call 268} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $M.7 := $p0;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $M.6 := $i1;
    call {:si_unique_call 267} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 173432);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 271} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 272} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 1} true;
    call {:si_unique_call 273} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 274} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 1} true;
    call {:si_unique_call 275} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 276} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 1} true;
    call {:si_unique_call 277} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 278} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 1} true;
    call {:si_unique_call 279} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 280} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const get_rx_struct: ref;

axiom get_rx_struct == $sub.ref(0, 174464);

procedure get_rx_struct($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.14;



implementation get_rx_struct($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} ldv_spin_lock();
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i3 := list_empty($p2);
    call {:si_unique_call 283} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} list_del($p12);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(48, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(48, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i18 := list_empty($p17);
    call {:si_unique_call 287} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.14 := $store.i32($M.14, $p1, $i20);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(128, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} spin_unlock_irqrestore($p21, $u0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p6 := $p11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(128, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} spin_unlock_irqrestore($p5, $u0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 175496);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const gdm_usb_rcv_complete: ref;

axiom gdm_usb_rcv_complete == $sub.ref(0, 176528);

procedure gdm_usb_rcv_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation gdm_usb_rcv_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var vslice_dummy_var_148: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 144), 896)), $mul.ref(0, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} remove_rx_submit_list($p3, $p5);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} put_rx_struct($p5, $p3);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} usb_mark_last_busy($p11);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 144), 896)), $mul.ref(888, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb9;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} dev_err.ref.ref.ref.i32($p34, .str.31, .str.32, $i36);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} ldv_spin_lock();
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} list_add_tail($p19, $p20);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p21 := $M.15;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p8, $mul.ref($sub.ref(0, 144), 896)), $mul.ref(640, 1)), $mul.ref(0, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_148 := queue_work($p21, $p23);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 272)), $mul.ref(56, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} spin_unlock_irqrestore($p25, $u0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 177560);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 299} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 178592);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} __list_add($p0, $p3, $p1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_143: ref;

axiom ldv_usb_submit_urb_143 == $sub.ref(0, 179624);

procedure ldv_usb_submit_urb_143($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_143($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "ldv_usb_submit_urb_143:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} ldv_check_alloc_flags($i1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} $p2 := ldv_undef_ptr();
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_144: ref;

axiom ldv_usb_submit_urb_144 == $sub.ref(0, 180656);

procedure ldv_usb_submit_urb_144($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_144($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "ldv_usb_submit_urb_144:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} ldv_check_alloc_flags($i1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $p2 := ldv_undef_ptr();
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 181688);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    return;
}



const put_rx_struct: ref;

axiom put_rx_struct == $sub.ref(0, 182720);

procedure put_rx_struct($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation put_rx_struct($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} ldv_spin_lock();
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(32, 1));
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} list_add_tail($p2, $p3);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(48, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(48, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(128, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} spin_unlock_irqrestore($p8, $u0);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 183752);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    return;
}



const remove_rx_submit_list: ref;

axiom remove_rx_submit_list == $sub.ref(0, 184784);

procedure remove_rx_submit_list($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation remove_rx_submit_list($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p17: ref;
  var $p18: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} ldv_spin_lock();
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 32), 96)), $mul.ref(32, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i13, $i15);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 272)), $mul.ref(200, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} spin_unlock_irqrestore($p31, $u0);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $p17, $p18 := $p11, $p6;
    goto $bb4;

  $bb4:
    call $i19, $i20, $i21, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $p17, $p18 := remove_rx_submit_list_loop_$bb4($p0, $i15, $i19, $i20, $i21, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $p17, $p18);
    goto $bb4_last;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p0);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p18);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i19, $i20);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, $i15);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $p17, $p18 := $p27, $p17;
    goto $bb10_dummy;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} list_del($p22);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1536;
}



const usb_mark_last_busy: ref;

axiom usb_mark_last_busy == $sub.ref(0, 185816);

procedure usb_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_mark_last_busy($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} pm_runtime_mark_last_busy($p1);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 186848);

procedure pm_runtime_mark_last_busy($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pm_runtime_mark_last_busy($p0: ref)
{
  var $i1: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(560, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 187880);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 188912);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 314} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_111: ref;

axiom ldv_spin_unlock_irqrestore_111 == $sub.ref(0, 189944);

procedure ldv_spin_unlock_irqrestore_111($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_111($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} {:cexpr "ldv_spin_unlock_irqrestore_111:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 190976);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 192008);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 193040);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 194072);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const unregister_lte_device: ref;

axiom unregister_lte_device == $sub.ref(0, 195104);

procedure unregister_lte_device($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation unregister_lte_device($p0: ref)
{
  var $i2: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i1 := 0;
    goto $bb1;

  $bb1:
    call $i2, $p4, $p5, $i6, $i7, $i8, $i9, $i1 := unregister_lte_device_loop_$bb1($p0, $i2, $p4, $p5, $i6, $i7, $i8, $i9, $i1);
    goto $bb1_last;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref($i2, 8));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_unregister_netdev_44($p5);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} ldv_free_netdev_45($p5);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i1, 1);
    call {:si_unique_call 318} {:cexpr "index"} boogie_si_record_i32($i8);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 3);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i1 := $i8;
    goto $bb7_dummy;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;
}



const release_usb: ref;

axiom release_usb == $sub.ref(0, 196136);

procedure release_usb($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation release_usb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $i21: i64;
  var $i22: i1;
  var $p14: ref;
  var $p15: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p36: ref;
  var $p37: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p59: ref;
  var $p60: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p85: ref;
  var $p86: ref;
  var $p98: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p111: ref;
  var $i112: i64;
  var $i113: i1;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p114: ref;
  var $p115: ref;
  var $p125: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $i134: i64;
  var $i135: i64;
  var $i136: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $p142: ref;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $i150: i64;
  var $i151: i1;
  var $p137: ref;
  var $p138: ref;
  var $p152: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_spin_lock();
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p6);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p2);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p24 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i32, $i34);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i55, $i57);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} spin_unlock_irqrestore($p69, $u0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} ldv_spin_lock();
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p73, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p73, $mul.ref($sub.ref(0, 32), 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p73, $mul.ref($sub.ref(0, 32), 96)), $mul.ref(32, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    $p82 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(16, 1));
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i81, $i83);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} spin_unlock_irqrestore($p98, $u0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} ldv_spin_lock();
    $p100 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p102, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.0, $p105);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p107, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p102, $mul.ref($sub.ref(0, 16), 96)), $mul.ref(16, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p111);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i110, $i112);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(128, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} spin_unlock_irqrestore($p125, $u0);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} ldv_spin_lock();
    $p127 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p129, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p129);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p1);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i134, $i135);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $p152 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} spin_unlock_irqrestore($p152, $u0);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    return;

  $bb41:
    assume $i136 == 1;
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p137, $p138 := $p128, $p132;
    goto $bb44;

  $bb44:
    call $p139, $p140, $i141, $p142, $i143, $i144, $p145, $p147, $p148, $i150, $i151, $p137, $p138 := release_usb_loop_$bb44($p0, $i135, $p139, $p140, $i141, $p142, $i143, $i144, $p145, $p147, $p148, $i150, $i151, $p137, $p138);
    goto $bb44_last;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p137, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.0, $p139);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p142);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i144 := $eq.i64($i141, $i143);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p138, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p138);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, $i135);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i151 == 1);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb49:
    assume $i151 == 1;
    assume {:verifier.code 0} true;
    $p137, $p138 := $p138, $p148;
    goto $bb49_dummy;

  $bb46:
    assume $i144 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p137, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} list_del($p145);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} free_rx_struct($p137);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb33:
    assume $i113 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p114, $p115 := $p103, $p108;
    goto $bb36;

  $bb36:
    call $p116, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $p114, $p115 := release_usb_loop_$bb36($i112, $p116, $p118, $p119, $p120, $p121, $p122, $i123, $i124, $p114, $p115);
    goto $bb36_last;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p114, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} list_del($p116);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} free_rx_struct($p114);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p115, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p115, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, $i112);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i124 == 1);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $p114, $p115 := $p115, $p121;
    goto $bb38_dummy;

  $bb25:
    assume $i84 == 1;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p85, $p86 := $p74, $p79;
    goto $bb28;

  $bb28:
    call $p87, $p88, $p89, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $p85, $p86 := release_usb_loop_$bb28($p0, $i83, $p87, $p88, $p89, $p91, $p92, $p93, $p94, $p95, $i96, $i97, $p85, $p86);
    goto $bb28_last;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} spin_unlock_irqrestore($p87, $u0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p85, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} usb_kill_urb($p89);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} ldv_spin_lock();
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p86, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p86, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, $i83);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i97 == 1);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb30:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    $p85, $p86 := $p86, $p94;
    goto $bb30_dummy;

  $bb17:
    assume $i58 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p59, $p60 := $p52, $p48;
    goto $bb20;

  $bb20:
    call $p61, $p63, $p64, $p66, $i67, $i68, $p59, $p60 := release_usb_loop_$bb20($i57, $p61, $p63, $p64, $p66, $i67, $i68, $p59, $p60);
    goto $bb20_last;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} list_del($p61);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} free_tx_sdu_struct($p60);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p59, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, $i57);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i68 == 1);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $p59, $p60 := $p64, $p59;
    goto $bb22_dummy;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p36, $p37 := $p25, $p29;
    goto $bb12;

  $bb12:
    call $p38, $p40, $p41, $p43, $i44, $i45, $p36, $p37 := release_usb_loop_$bb12($i34, $p38, $p40, $p41, $p43, $i44, $i45, $p36, $p37);
    goto $bb12_last;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p36, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} list_del($p38);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} free_tx_struct($p36);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p37, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $i34);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p36, $p37 := $p37, $p41;
    goto $bb14_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p14, $p15 := $p9, $p5;
    goto $bb4;

  $bb4:
    call $p16, $p18, $p19, $i21, $i22, $p14, $p15 := release_usb_loop_$bb4($i12, $p16, $p18, $p19, $i21, $i22, $p14, $p15);
    goto $bb4_last;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} list_del($p16);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} free_tx_sdu_struct($p15);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p14);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, $i12);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p19, $p14;
    goto $bb6_dummy;

  $bb49_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1779;

  $bb38_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1750;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1684;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1657;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1631;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 197168);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} free_($p0);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 198200);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 199232);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 343} $free($p0);
    return;
}



const free_tx_sdu_struct: ref;

axiom free_tx_sdu_struct == $sub.ref(0, 200264);

procedure free_tx_sdu_struct($p0: ref);
  free requires assertsPassed;



implementation free_tx_sdu_struct($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} kfree($p4);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} kfree($p5);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_tx_struct: ref;

axiom free_tx_struct == $sub.ref(0, 201296);

procedure free_tx_struct($p0: ref);
  free requires assertsPassed;



implementation free_tx_struct($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} usb_free_urb($p4);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} kfree($p6);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} kfree($p7);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_rx_struct: ref;

axiom free_rx_struct == $sub.ref(0, 202328);

procedure free_rx_struct($p0: ref);
  free requires assertsPassed;



implementation free_rx_struct($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} usb_free_urb($p4);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} kfree($p6);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} kfree($p7);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 203360);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_netdev_44: ref;

axiom ldv_unregister_netdev_44 == $sub.ref(0, 204392);

procedure ldv_unregister_netdev_44($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_unregister_netdev_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} unregister_netdev($p0);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 353} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_netdev_45: ref;

axiom ldv_free_netdev_45 == $sub.ref(0, 205424);

procedure ldv_free_netdev_45($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_free_netdev_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} free_netdev($p0);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 355} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 206456);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    return;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 207488);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 208520);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 357} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} ldv_check_alloc_flags($i1);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p2 := ldv_undef_ptr();
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const gdm_usb_hci_send: ref;

axiom gdm_usb_hci_send == $sub.ref(0, 209552);

procedure gdm_usb_hci_send($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation gdm_usb_hci_send($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $i12: i32;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "gdm_usb_hci_send:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(16, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(0, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p13 := alloc_tx_struct($i2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i2);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 364} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p18, $p1, $i19, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p3);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p4);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i2);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p6);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} ldv_spin_lock();
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(0, 1));
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} list_add_tail($p25, $p26);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p27 := $M.5;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_151 := queue_work($p27, $p29);
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} spin_unlock_irqrestore($p31, $u0);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} vslice_dummy_var_150 := printk.ref(.str.46);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} vslice_dummy_var_149 := printk.ref(.str.45);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb3;
}



const gdm_usb_sdu_send: ref;

axiom gdm_usb_sdu_send == $sub.ref(0, 210584);

procedure gdm_usb_sdu_send($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $p6: ref, $i7: i32, $i8: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.3, $M.0, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation gdm_usb_sdu_send($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $p6: ref, $i7: i32, $i8: i32) returns ($r: i32)
{
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $p28: ref;
  var $i29: i1;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i37: i16;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $i17: i32;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 370} {:cexpr "gdm_usb_sdu_send:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 371} {:cexpr "gdm_usb_sdu_send:arg:dftEpsId"} boogie_si_record_i32($i3);
    call {:si_unique_call 372} {:cexpr "gdm_usb_sdu_send:arg:epsId"} boogie_si_record_i32($i4);
    call {:si_unique_call 373} {:cexpr "gdm_usb_sdu_send:arg:dev_idx"} boogie_si_record_i32($i7);
    call {:si_unique_call 374} {:cexpr "gdm_usb_sdu_send:arg:nic_type"} boogie_si_record_i32($i8);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(16, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p9, 0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(0, 1));
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} ldv_spin_lock();
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $p18 := get_tx_sdu_struct($p11, $p9);
    $p19 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} spin_unlock_irqrestore($p19, $u0);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p18);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i27 := gdm_cpu_to_dev16($p26, 12800);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i8, 256);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i39, 65522);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    call {:si_unique_call 383} {:cexpr "send_len"} boogie_si_record_i16($i41);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, 12);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 384} {:cexpr "send_len"} boogie_si_record_i16($i44);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p1, $mul.ref(14, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i2, $sub.i32(0, 14));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.0;
    cmdloc_dummy_var_93 := $M.0;
    call {:si_unique_call 385} cmdloc_dummy_var_94 := $memcpy.i8(cmdloc_dummy_var_92, cmdloc_dummy_var_93, $p46, $p47, $i49, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_94;
    assume {:verifier.code 0} true;
    $i37 := $i44;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i37);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i53 := gdm_cpu_to_dev16($p50, $i52);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i53);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i56 := gdm_cpu_to_dev32($p55, $i3);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i59 := gdm_cpu_to_dev32($p58, $i4);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i62 := gdm_cpu_to_dev32($p61, $i8);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i37);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 4);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $p5);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $p6);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} ldv_spin_lock();
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    $p70 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} list_add_tail($p69, $p70);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p71 := $M.5;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1));
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vslice_dummy_var_154 := queue_work($p71, $p73);
    $p75 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} spin_unlock_irqrestore($p75, $u0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.17, $p9);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb11:
    assume $i77 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i17 := 3;
    goto $bb3;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i2);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 12);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    call {:si_unique_call 381} {:cexpr "send_len"} boogie_si_record_i16($i33);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p25, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i2);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.0;
    cmdloc_dummy_var_90 := $M.0;
    call {:si_unique_call 382} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p35, $p1, $i36, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_91;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i37 := $i33;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} vslice_dummy_var_153 := printk.ref(.str.48);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i17 := 2;
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} vslice_dummy_var_152 := printk.ref(.str.47);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb3;
}



const gdm_usb_get_endian: ref;

axiom gdm_usb_get_endian == $sub.ref(0, 211616);

procedure gdm_usb_get_endian($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation gdm_usb_get_endian($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const init_usb: ref;

axiom init_usb == $sub.ref(0, 212648);

procedure init_usb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, assertsPassed;



implementation init_usb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i46: i32;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i58: i32;
  var $p71: ref;
  var $p72: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $p83: ref;
  var $p86: ref;
  var $p88: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i64;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p107: ref;
  var $p110: ref;
  var $p113: ref;
  var $p115: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p123: ref;
  var $i124: i32;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var vslice_dummy_var_155: ref;
  var vslice_dummy_var_156: ref;
  var vslice_dummy_var_157: ref;
  var vslice_dummy_var_158: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(864, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(865, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(892, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(888, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} INIT_LIST_HEAD($p17);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} INIT_LIST_HEAD($p18);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} INIT_LIST_HEAD($p19);
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(16, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} INIT_LIST_HEAD($p20);
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} INIT_LIST_HEAD($p21);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} INIT_LIST_HEAD($p22);
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_155 := spinlock_check($p23);
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} __raw_spin_lock_init($p27, .str.49, $p1);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(128, 1));
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} vslice_dummy_var_156 := spinlock_check($p28);
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} __raw_spin_lock_init($p32, .str.50, $p2);
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} vslice_dummy_var_157 := spinlock_check($p33);
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} __raw_spin_lock_init($p37, .str.51, $p3);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_158 := spinlock_check($p38);
    $p41 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __raw_spin_lock_init($p42, .str.52, $p4);
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(880, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb1;

  $bb1:
    call $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $i46 := init_usb_loop_$bb1($p0, $p47, $i48, $i49, $p50, $p51, $p52, $i53, $i54, $p55, $i56, $i57, $i46);
    goto $bb1_last;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p47 := alloc_tx_sdu_struct();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p47, $mul.ref(0, 48)), $mul.ref(0, 1));
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} list_add($p50, $p51);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, 1);
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i46, 1);
    call {:si_unique_call 421} {:cexpr "i"} boogie_si_record_i32($i56);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i57 := $sle.i32($i56, 63);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb10;

  $bb10:
    call $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p67, $i68, $i69, $i58 := init_usb_loop_$bb10($p0, $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p67, $i68, $i69, $i58);
    goto $bb10_last;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p59 := alloc_rx_struct();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref(0, 96)), $mul.ref(16, 1));
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} list_add($p62, $p63);
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, 1);
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i58, 1);
    call {:si_unique_call 424} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i69 := $sle.i32($i68, 5);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} __init_work($p71, 0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, 137438953408);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p6);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.0;
    cmdloc_dummy_var_96 := $M.0;
    call {:si_unique_call 426} cmdloc_dummy_var_97 := $memcpy.i8(cmdloc_dummy_var_95, cmdloc_dummy_var_96, $p76, $p77, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_97;
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} lockdep_init_map($p80, .str.53, $p5, 0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} INIT_LIST_HEAD($p83);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, do_tx);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(80, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} init_timer_key($p88, 2097152, .str.54, $p7);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p91, delayed_work_timer_fn);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(416, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p96, $i93);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(0, 1));
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} __init_work($p98, 0);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p99, 137438953408);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p9);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.0;
    cmdloc_dummy_var_99 := $M.0;
    call {:si_unique_call 431} cmdloc_dummy_var_100 := $memcpy.i8(cmdloc_dummy_var_98, cmdloc_dummy_var_99, $p103, $p104, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_100;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} lockdep_init_map($p107, .str.55, $p8, 0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} INIT_LIST_HEAD($p110);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p113, do_rx);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(80, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} init_timer_key($p115, 2097152, .str.56, $p10);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, delayed_work_timer_fn);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1));
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(640, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p123, $i120);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i124 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $r := $i124;
    return;

  $bb15:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i58 := $i68;
    goto $bb15_dummy;

  $bb12:
    assume $i61 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} release_usb($p0);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i124 := $sub.i32(0, 12);
    goto $bb18;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i56;
    goto $bb7_dummy;

  $bb3:
    assume $i49 == 1;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2059;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2041;
}



const usb_enable_autosuspend: ref;

axiom usb_enable_autosuspend == $sub.ref(0, 213680);

procedure usb_enable_autosuspend($p0: ref);
  free requires assertsPassed;



implementation usb_enable_autosuspend($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    return;
}



const pm_runtime_set_autosuspend_delay: ref;

axiom pm_runtime_set_autosuspend_delay == $sub.ref(0, 214712);

procedure pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pm_runtime_set_autosuspend_delay($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} {:cexpr "pm_runtime_set_autosuspend_delay:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    return;
}



const gdm_set_endian: ref;

axiom gdm_set_endian == $sub.ref(0, 215744);

procedure gdm_set_endian($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_set_endian($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "gdm_set_endian:arg:dev_endian"} boogie_si_record_i8($i1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 3);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 2);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 3);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_mac_address: ref;

axiom request_mac_address == $sub.ref(0, 216776);

procedure request_mac_address($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.0, $CurrAddr;



implementation request_mac_address($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p3, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p4, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p21, 0);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p22, 0);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p23, 0);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p24, 0);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p25, 0);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p26, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p27, 0);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p28, 0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p29, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(11, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p30, 0);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p31, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(13, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p32, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p33, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(15, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p34, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(0, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $i9 := gdm_cpu_to_dev16($p8, 12290);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.18 := $store.i16($M.18, $p10, $i9);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i12 := gdm_cpu_to_dev16($p11, 1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $M.18 := $store.i16($M.18, $p13, $i12);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $M.18 := $store.i8($M.18, $p15, $sub.i8(0, 94));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i16 := __create_pipe($p7, 2);
    call {:si_unique_call 442} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, $sub.i32(0, 1073741824));
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i19 := usb_bulk_msg($p7, $i17, $p18, 5, $p2, 1000);
    call {:si_unique_call 444} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(892, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 1);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;
}



const start_rx_proc: ref;

axiom start_rx_proc == $sub.ref(0, 217808);

procedure start_rx_proc($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $CurrAddr, assertsPassed;



implementation start_rx_proc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    call {:si_unique_call 445} vslice_dummy_var_159 := devirtbounce.2($p2, $p4, rx_complete, $p5, 1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    call {:si_unique_call 446} vslice_dummy_var_160 := devirtbounce.2($p8, $p10, rx_complete, $p11, 1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    call {:si_unique_call 447} vslice_dummy_var_161 := devirtbounce.2($p14, $p16, rx_complete, $p17, 1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 218840);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p1 := external_alloc();
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 219872);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 220904);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    return;
}



const rx_complete: ref;

axiom rx_complete == $sub.ref(0, 221936);

procedure rx_complete($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation rx_complete($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "rx_complete:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 451} {:cexpr "rx_complete:arg:context"} boogie_si_record_i32($i3);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i5 := gdm_lte_receive_pkt($p4, $p1, $i2);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 453} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const gdm_lte_receive_pkt: ref;

axiom gdm_lte_receive_pkt == $sub.ref(0, 222968);

procedure gdm_lte_receive_pkt($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation gdm_lte_receive_pkt($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $i40: i32;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i47: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "gdm_lte_receive_pkt:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i2, 0);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 455} $p10 := devirtbounce.3($p7, $p9);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i15 := gdm_dev16_to_cpu($p10, $i14);
    call {:si_unique_call 457} {:cexpr "cmd_evt"} boogie_si_record_i16($i15);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref(0, 8));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i15);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 45569);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 45571);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 45571);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p68 := $p18;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} $i69 := gdm_lte_event_send($p68, $p1, $i2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 473} {:cexpr "ret"} boogie_si_record_i32($i69);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i47 := $i69;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i5 := $i47;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} gdm_lte_multi_sdu_pkt($p0, $p1, $i2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb24;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 45569);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb15;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 459} $p35 := devirtbounce.3($p32, $p34);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i38 := gdm_dev32_to_cpu($p35, $i37);
    call {:si_unique_call 461} {:cexpr "nic_type"} boogie_si_record_i32($i38);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i39 := find_dev_index($i38);
    call {:si_unique_call 463} {:cexpr "index"} boogie_si_record_i8($i39);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref($i41, 8));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} gdm_lte_netif_rx($p44, $p46, $i2, $i38);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb24;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i21, 45379);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i21, 45379);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb15;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p1);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    call {:si_unique_call 465} $p58 := devirtbounce.3($p55, $p57);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p53, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i61 := gdm_dev32_to_cpu($p58, $i60);
    call {:si_unique_call 467} {:cexpr "nic_type"} boogie_si_record_i32($i61);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i62 := find_dev_index($i61);
    call {:si_unique_call 469} {:cexpr "index"} boogie_si_record_i8($i62);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref($i64, 8));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} gdm_lte_pdn_table($p67, $p1, $i2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p68 := $p67;
    goto $bb25;

  $bb18:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i21, 45363);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb22:
    assume $i28 == 1;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p1);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $p52 := (if $i51 == 1 then .str.5 else .str.6);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} netdev_info.ref.ref.ref($p18, .str.4, $p52);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb24;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const gdm_dev16_to_cpu: ref;

axiom gdm_dev16_to_cpu == $sub.ref(0, 224000);

procedure gdm_dev16_to_cpu($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation gdm_dev16_to_cpu($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} {:cexpr "gdm_dev16_to_cpu:arg:x"} boogie_si_record_i16($i1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $i9 := __fswab16($i8);
    call {:si_unique_call 476} {:cexpr "tmp"} boogie_si_record_i16($i9);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;
}



const gdm_dev32_to_cpu: ref;

axiom gdm_dev32_to_cpu == $sub.ref(0, 225032);

procedure gdm_dev32_to_cpu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gdm_dev32_to_cpu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} {:cexpr "gdm_dev32_to_cpu:arg:x"} boogie_si_record_i32($i1);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i7 := __fswab32($i1);
    call {:si_unique_call 479} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;
}



const find_dev_index: ref;

axiom find_dev_index == $sub.ref(0, 226064);

procedure find_dev_index($i0: i32) returns ($r: i8);
  free requires assertsPassed;



implementation find_dev_index($i0: i32) returns ($r: i8)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} {:cexpr "find_dev_index:arg:nic_type"} boogie_si_record_i32($i0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i32.i8($i0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 15);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    call {:si_unique_call 481} {:cexpr "index"} boogie_si_record_i8($i4);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i32($i5, 4);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const gdm_lte_netif_rx: ref;

axiom gdm_lte_netif_rx == $sub.ref(0, 227096);

procedure gdm_lte_netif_rx($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation gdm_lte_netif_rx($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i16;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $p63: ref;
  var $p64: ref;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var vslice_dummy_var_162: ref;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p4 := $alloc($mul.ref(14, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p5 := $alloc($mul.ref(18, $zext.i32.i64(1)));
    call {:si_unique_call 484} {:cexpr "gdm_lte_netif_rx:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 485} {:cexpr "gdm_lte_netif_rx:arg:flagged_nic_type"} boogie_si_record_i32($i3);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, 65535);
    call {:si_unique_call 486} {:cexpr "nic_type"} boogie_si_record_i32($i6);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p7 := netdev_priv($p0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i3, 262144);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p21, $i22 := $p4, 14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(212, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} ether_addr_copy($p21, $p25);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p21, $mul.ref(6, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(218, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.0;
    cmdloc_dummy_var_102 := $M.0;
    call {:si_unique_call 490} cmdloc_dummy_var_103 := $memcpy.i8(cmdloc_dummy_var_101, cmdloc_dummy_var_102, $p26, $p28, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_103;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i33 := __fswab16($i32);
    call {:si_unique_call 492} {:cexpr "tmp___0"} boogie_si_record_i16($i33);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(14, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, $i33);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(12, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p35, 129);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i6, 256);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p1);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i40 := $sext.i8.i32($i39);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i41 := $ashr.i32($i40, 4);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    call {:si_unique_call 493} {:cexpr "ip_version"} boogie_si_record_i8($i42);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i43 := $sext.i8.i32($i42);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 4);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i42);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 6);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i42);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} netdev_err.ref.ref.i32($p0, .str.7, $i51);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i48 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, $sub.i16(0, 8826));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $sub.i16(0, 8826));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i2, $i22);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} $p53 := dev_alloc_skb($i52);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} skb_reserve($p53, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $p56 := skb_put($p53, $i22);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i22);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_104 := $M.0;
    cmdloc_dummy_var_105 := $M.0;
    call {:si_unique_call 498} cmdloc_dummy_var_106 := $memcpy.i8(cmdloc_dummy_var_104, cmdloc_dummy_var_105, $p56, $p21, $i57, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_106;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $p58 := skb_put($p53, $i2);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i2);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.0;
    cmdloc_dummy_var_108 := $M.0;
    call {:si_unique_call 500} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p58, $p1, $i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_109;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p21);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p53, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, $i62);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p53, $mul.ref(0, 232)), $mul.ref(32, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p0);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} skb_reset_mac_header($p53);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_162 := skb_pull($p53, 14);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_163 := gdm_lte_rx($p53, $p8, $i6);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, 8);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, 8);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 14)), $mul.ref(12, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 1544);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(16, 1));
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p38, 1544);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p21, $i22 := $p5, 18;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i3, 65536);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref(56, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 232)), $mul.ref(212, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ether_addr_copy($p15, $p13);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const gdm_lte_multi_sdu_pkt: ref;

axiom gdm_lte_multi_sdu_pkt == $sub.ref(0, 228128);

procedure gdm_lte_multi_sdu_pkt($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation gdm_lte_multi_sdu_pkt($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i16;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $i50: i16;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i16;
  var $i62: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i16;
  var $i67: i32;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i1;
  var $i28: i16;
  var $p29: ref;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} {:cexpr "gdm_lte_multi_sdu_pkt:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 505} $p10 := devirtbounce.3($p7, $p9);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i15 := gdm_dev16_to_cpu($p10, $i14);
    call {:si_unique_call 507} {:cexpr "hci_len"} boogie_si_record_i16($i15);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 508} $p20 := devirtbounce.3($p17, $p19);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i25 := gdm_dev16_to_cpu($p20, $i24);
    call {:si_unique_call 510} {:cexpr "num_packet"} boogie_si_record_i16($i25);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32(0, $i26);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i28, $p29 := 0, $p4;
    goto $bb4;

  $bb4:
    call $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i64, $i65, $i66, $i69, $i70, $i71, $i72, $i73, $p75, $p76, $p77, $p78, $i79, $i80, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i28, $p29, vslice_dummy_var_166 := gdm_lte_multi_sdu_pkt_loop_$bb4($p0, $i26, $p30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $i39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $p55, $p56, $i57, $i58, $i59, $i60, $i61, $i64, $i65, $i66, $i69, $i70, $i71, $i72, $i73, $p75, $p76, $p77, $p78, $i79, $i80, $i82, $i83, $i84, $i85, $i86, $p87, $i88, $i89, $i90, $i91, $i92, $i28, $p29, vslice_dummy_var_166);
    goto $bb4_last;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 511} $p35 := devirtbounce.3($p32, $p34);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i40 := gdm_dev16_to_cpu($p35, $i39);
    call {:si_unique_call 513} {:cexpr "cmd_evt"} boogie_si_record_i16($i40);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    call {:si_unique_call 514} $p45 := devirtbounce.3($p42, $p44);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i50 := gdm_dev16_to_cpu($p45, $i49);
    call {:si_unique_call 516} {:cexpr "hci_len"} boogie_si_record_i16($i50);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    call {:si_unique_call 517} $p55 := devirtbounce.3($p52, $p54);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i58 := gdm_dev32_to_cpu($p55, $i57);
    call {:si_unique_call 519} {:cexpr "nic_type"} boogie_si_record_i32($i58);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i40);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 45569);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i61 := $i40;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i50);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i65 := $ule.i32($i64, 11);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i66 := $i50;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i69 := find_dev_index($i58);
    call {:si_unique_call 523} {:cexpr "index"} boogie_si_record_i8($i69);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i71 := $ule.i32($i70, 3);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i71 == 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_166 := printk.ref.i32(.str.10, $i58);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i50);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 3);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i84 := $sext.i32.i64($i83);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 65532);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 4);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($p29, $mul.ref($i86, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i28);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    call {:si_unique_call 526} {:cexpr "i"} boogie_si_record_i16($i90);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, $i26);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i92 == 1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i28, $p29 := $i90, $p87;
    goto $bb16_dummy;

  $bb13:
    assume $i71 == 1;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i69);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref($i73, 8));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i50);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, $sub.i32(0, 12));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} gdm_lte_netif_rx($p76, $p78, $i80, $i58);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_165 := printk.ref.i32(.str.9, $i67);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_164 := printk.ref.i32(.str.8, $i62);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;
}



const netdev_info: ref;

axiom netdev_info == $sub.ref(0, 229160);

procedure netdev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation netdev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation netdev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    return;
}



procedure netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation netdev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    return;
}



const gdm_lte_pdn_table: ref;

axiom gdm_lte_pdn_table == $sub.ref(0, 230192);

procedure gdm_lte_pdn_table($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation gdm_lte_pdn_table($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p41: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} {:cexpr "gdm_lte_pdn_table:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p3 := netdev_priv($p0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.0;
    call {:si_unique_call 534} cmdloc_dummy_var_111 := $memset.i8(cmdloc_dummy_var_110, $p46, 0, 9, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_111;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} netdev_info.ref.ref($p0, .str.12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(200, 1)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i11);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 529} $p22 := devirtbounce.3($p17, $p21);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $i25 := gdm_dev32_to_cpu($p22, $i24);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(200, 1)), $mul.ref(4, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    call {:si_unique_call 531} $p36 := devirtbounce.3($p31, $p35);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i39 := gdm_dev32_to_cpu($p36, $i38);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i39);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(200, 1)), $mul.ref(8, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} netdev_info.ref.ref.i32($p0, .str.11, $i44);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gdm_lte_event_send: ref;

axiom gdm_lte_event_send == $sub.ref(0, 231224);

procedure gdm_lte_event_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation gdm_lte_event_send($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i16;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 537} {:cexpr "gdm_lte_event_send:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p4 := netdev_priv($p0);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(0, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i9 := sscanf.ref.ref.ref($p8, .str.13, $p3);
    call {:si_unique_call 540} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 541} $p20 := devirtbounce.3($p15, $p19);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i25 := gdm_dev16_to_cpu($p20, $i24);
    call {:si_unique_call 543} {:cexpr "tmp___1"} boogie_si_record_i16($i25);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p26 := $M.19;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.20, $p3);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i25);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, 4);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i30 := netlink_send($p26, $i27, 0, $p1, $i29);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 545} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i11 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const netlink_send: ref;

axiom netlink_send == $sub.ref(0, 232256);

procedure netlink_send($p0: ref, $i1: i32, $i2: i16, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation netlink_send($p0: ref, $i1: i32, $i2: i16, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i6: i32;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var vslice_dummy_var_167: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} {:cexpr "netlink_send:arg:group"} boogie_si_record_i32($i1);
    call {:si_unique_call 547} {:cexpr "netlink_send:arg:type"} boogie_si_record_i16($i2);
    call {:si_unique_call 548} {:cexpr "netlink_send:arg:len"} boogie_si_record_i32($i4);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i1, 30);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i1, 1);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i8 := netlink_has_listeners($p0, $i7);
    call {:si_unique_call 550} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i4, 19);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 4));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p12 := alloc_skb($i11, 32);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($u1, 1);
    call {:si_unique_call 552} {:cexpr "seq"} boogie_si_record_i32($i15);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i2);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p17 := nlmsg_put($p12, 0, $i15, $i16, $i4, 0);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(16, 1));
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i4);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_112 := $M.0;
    cmdloc_dummy_var_113 := $M.0;
    call {:si_unique_call 554} cmdloc_dummy_var_114 := $memcpy.i8(cmdloc_dummy_var_112, cmdloc_dummy_var_113, $p19, $p3, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_114;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p12, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i1, 1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i28 := netlink_broadcast($p0, $p12, 0, $i27, 32);
    call {:si_unique_call 556} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i28, $sub.i32(0, 3));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i1, 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i34 := netlink_has_listeners($p0, $i33);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i6 := $i28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 11);
    goto $bb3;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i2);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_167 := printk.ref.i32.i32.i32.i32(.str.3, $i1, $i31, $i4, $i28);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 3);
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const netlink_has_listeners: ref;

axiom netlink_has_listeners == $sub.ref(0, 233288);

procedure netlink_has_listeners($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netlink_has_listeners($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 560} {:cexpr "netlink_has_listeners:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 1} true;
    call {:si_unique_call 561} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 562} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const alloc_skb: ref;

axiom alloc_skb == $sub.ref(0, 234320);

procedure alloc_skb($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_skb($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} {:cexpr "alloc_skb:arg:size"} boogie_si_record_i32($i0);
    call {:si_unique_call 564} {:cexpr "alloc_skb:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_check_alloc_flags($i1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $p2 := ldv_undef_ptr();
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const nlmsg_put: ref;

axiom nlmsg_put == $sub.ref(0, 235352);

procedure nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} {:cexpr "nlmsg_put:arg:portid"} boogie_si_record_i32($i1);
    call {:si_unique_call 568} {:cexpr "nlmsg_put:arg:seq"} boogie_si_record_i32($i2);
    call {:si_unique_call 569} {:cexpr "nlmsg_put:arg:type"} boogie_si_record_i32($i3);
    call {:si_unique_call 570} {:cexpr "nlmsg_put:arg:payload"} boogie_si_record_i32($i4);
    call {:si_unique_call 571} {:cexpr "nlmsg_put:arg:flags"} boogie_si_record_i32($i5);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i6 := skb_tailroom($p0);
    call {:si_unique_call 573} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i7 := nlmsg_total_size($i4);
    call {:si_unique_call 575} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, $i7);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 577} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p14 := __nlmsg_put($p0, $i1, $i2, $i3, $i4, $i5);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p13 := $p14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb3;
}



const netlink_broadcast: ref;

axiom netlink_broadcast == $sub.ref(0, 236384);

procedure netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation netlink_broadcast($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 579} {:cexpr "netlink_broadcast:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 580} {:cexpr "netlink_broadcast:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 581} {:cexpr "netlink_broadcast:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 237416);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 585} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const nlmsg_total_size: ref;

axiom nlmsg_total_size == $sub.ref(0, 238448);

procedure nlmsg_total_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_total_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} {:cexpr "nlmsg_total_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i1 := nlmsg_msg_size($i0);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 3);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 4));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 239480);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 590} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __nlmsg_put: ref;

axiom __nlmsg_put == $sub.ref(0, 240512);

procedure __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __nlmsg_put($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "__nlmsg_put:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 592} {:cexpr "__nlmsg_put:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 593} {:cexpr "__nlmsg_put:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 594} {:cexpr "__nlmsg_put:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 595} {:cexpr "__nlmsg_put:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $p6 := external_alloc();
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const nlmsg_msg_size: ref;

axiom nlmsg_msg_size == $sub.ref(0, 241544);

procedure nlmsg_msg_size($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation nlmsg_msg_size($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} {:cexpr "nlmsg_msg_size:arg:payload"} boogie_si_record_i32($i0);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 16);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 242576);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ether_addr_copy: ref;

axiom ether_addr_copy == $sub.ref(0, 243608);

procedure ether_addr_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ether_addr_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 2));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(4, 2));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i7);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 244640);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i1 := __arch_swab32($i0);
    call {:si_unique_call 600} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 245672);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 602} $i1 := devirtbounce.4(0, $i0);
    call {:si_unique_call 603} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gdm_cpu_to_dev16: ref;

axiom gdm_cpu_to_dev16 == $sub.ref(0, 246704);

procedure gdm_cpu_to_dev16($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation gdm_cpu_to_dev16($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} {:cexpr "gdm_cpu_to_dev16:arg:x"} boogie_si_record_i16($i1);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i9 := __fswab16($i8);
    call {:si_unique_call 606} {:cexpr "tmp"} boogie_si_record_i16($i9);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;
}



const usb_bulk_msg: ref;

axiom usb_bulk_msg == $sub.ref(0, 247736);

procedure usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_bulk_msg($p0: ref, $i1: i32, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} {:cexpr "usb_bulk_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 608} {:cexpr "usb_bulk_msg:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 609} {:cexpr "usb_bulk_msg:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 1} true;
    call {:si_unique_call 610} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 248768);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 249800);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 250832);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    return;
}



const alloc_tx_sdu_struct: ref;

axiom alloc_tx_sdu_struct == $sub.ref(0, 251864);

procedure alloc_tx_sdu_struct() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_tx_sdu_struct() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p0 := kmalloc(48, 208);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p5 := kmalloc(2048, 208);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p4 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} kfree($p11);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 252896);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} __list_add($p0, $p1, $p3);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    return;
}



const alloc_rx_struct: ref;

axiom alloc_rx_struct == $sub.ref(0, 253928);

procedure alloc_rx_struct() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_rx_struct() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i4: i32;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} $p0 := kmalloc(96, 208);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $p5 := ldv_usb_alloc_urb_142(0, 208);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p5);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p7 := kmalloc(32768, 208);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p7);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i4, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p25 := $p0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $r := $p25;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p1);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $0.ref;
    goto $bb16;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} usb_free_urb($p21);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} kfree($p23);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} kfree($p24);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 254960);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 255992);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    return;
}



const do_tx: ref;

axiom do_tx == $sub.ref(0, 257024);

procedure do_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, assertsPassed, $M.14, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.16, $CurrAddr, $M.21;



implementation do_tx($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 416), 896));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(0, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(872, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i8 := usb_autopm_get_interface($p7);
    call {:si_unique_call 625} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(888, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 1);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} ldv_spin_lock();
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(864, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(864, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i22 := list_empty($p21);
    call {:si_unique_call 630} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i36 := list_empty($p35);
    call {:si_unique_call 634} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $p51, $i52 := $0.ref, 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p32, $i33, $i34 := $p51, $i52, 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i33, 0);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} spin_unlock_irqrestore($p56, $u0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p32, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i34;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i65 := send_tx_packet($p4, $p32, $i64);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 643} {:cexpr "tmp___2"} boogie_si_record_i32($i65);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_168 := printk.ref(.str.23);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p32, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p68, $0.ref);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p32, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} gdm_usb_send_complete($p70);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i60 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p32, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i63 := packet_aggregation($p2, $p62);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 641} {:cexpr "len"} boogie_si_record_i32($i63);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb28;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(864, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p54, 1);
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} spin_unlock_irqrestore($p55, $u0);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(865, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p44 := alloc_tx_struct(32768);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p44, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $0.ref);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p44, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p49, $p5);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p44, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p51, $i52 := $p44, 1;
    goto $bb22;

  $bb19:
    assume $i46 == 1;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} spin_unlock_irqrestore($p47, $u0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(864, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 1);
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} spin_unlock_irqrestore($p43, $u0);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb11:
    assume $i23 == 1;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} list_del($p28);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    call {:si_unique_call 632} {:cexpr "len"} boogie_si_record_i32($i30);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p32, $i33, $i34 := $p26, 1, $i30;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} spin_unlock_irqrestore($p19, $u0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 416), 896)), $mul.ref(872, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} usb_autopm_put_interface($p11);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 258056);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 259088);

procedure delayed_work_timer_fn($i0: i64);



const do_rx: ref;

axiom do_rx == $sub.ref(0, 260120);

procedure do_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.14, $CurrAddr, $M.16, assertsPassed, $M.21;



implementation do_rx($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i16;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 640), 896)), $mul.ref(144, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} ldv_spin_lock();
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 640), 896)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i5 := list_empty($p4);
    call {:si_unique_call 649} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $i63, $p65, $p66, $p67, $p68, $p69, $i71, $i72, vslice_dummy_var_169, vslice_dummy_var_170 := do_rx_loop_$bb4($p1, $p3, $p4, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47, $p48, $p49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $i63, $p65, $p66, $p67, $p68, $p69, $i71, $i72, vslice_dummy_var_169, vslice_dummy_var_170);
    goto $bb4_last;

  $bb7:
    $p9 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 640), 896)), $mul.ref(144, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} list_del($p12);
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 640), 896)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} spin_unlock_irqrestore($p13, $u0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $i28 := gdm_dev16_to_cpu($p23, $i27);
    call {:si_unique_call 654} {:cexpr "cmd_evt"} boogie_si_record_i16($i28);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 45059);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} put_rx_struct($p3, $p11);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p19);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_169 := gdm_usb_recv($p65, $p67, $p69, 1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_spin_lock();
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i71 := list_empty($p4);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i32($i71);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22_dummy;

  $bb5:
    assume $i72 == 1;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 640), 896)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} spin_unlock_irqrestore($p7, $u0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    call {:si_unique_call 664} $i62 := devirtbounce.5($p53, $p55, $p57, $i61, 0);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 665} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, $sub.i32(0, 11));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i63 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_170 := printk.ref(.str.26);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $i35 := set_mac_address($p32, $p34);
    call {:si_unique_call 656} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p11, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    call {:si_unique_call 657} $i47 := devirtbounce.5($p38, $p40, $p42, $i46, 0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 658} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const set_mac_address: ref;

axiom set_mac_address == $sub.ref(0, 261152);

procedure set_mac_address($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, $M.21;



implementation set_mac_address($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $p2 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 0);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 0);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 162);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 896)), $mul.ref(892, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p2);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.0;
    cmdloc_dummy_var_116 := $M.0;
    call {:si_unique_call 668} cmdloc_dummy_var_117 := $memcpy.i8(cmdloc_dummy_var_115, cmdloc_dummy_var_116, $p18, $p20, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_117;
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref(0, 896)), $mul.ref(872, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i28 := register_lte_device($p3, $p26, $p27);
    call {:si_unique_call 670} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 896)), $mul.ref(892, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 0);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb13;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_171 := printk.ref(.str.27);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    goto $bb12;
}



const register_lte_device: ref;

axiom register_lte_device == $sub.ref(0, 262184);

procedure register_lte_device($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.16, $CurrAddr, $M.21;



implementation register_lte_device($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i8;
  var $p36: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i4: i8;
  var $i13: i32;
  var $i51: i32;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} validate_mac_address($p2);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb1;

  $bb1:
    call $p5, $i6, $p8, $p9, $i10, $i11, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p36, $p38, $i39, $i40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $i50, $i4, cmdloc_dummy_var_118, cmdloc_dummy_var_119, vslice_dummy_var_172 := register_lte_device_loop_$bb1($p0, $p1, $p2, $p3, $p5, $i6, $p8, $p9, $i10, $i11, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p36, $p38, $i39, $i40, $i41, $i42, $i43, $p45, $i46, $i47, $i48, $i49, $i50, $i4, cmdloc_dummy_var_118, cmdloc_dummy_var_119, vslice_dummy_var_172);
    goto $bb1_last;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i4);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} vslice_dummy_var_172 := sprintf.ref.ref.i32($p5, .str.1, $i6);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p9 := alloc_netdev_mqs(232, $p8, 0, ether_setup, 1, 1);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, gdm_netdev_ops);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 4097));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 1500);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $p20 := netdev_priv($p9);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_118 := $M.0;
    call {:si_unique_call 679} cmdloc_dummy_var_119 := $memset.i8(cmdloc_dummy_var_118, $p22, 0, 232, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_119;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p9);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $p0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i4);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p9, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(218, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 232)), $mul.ref(212, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i4);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} form_mac_address($p28, $p30, $p32, $p2, $i34);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(0, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(320, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, wwan_type);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i39 := ldv_register_netdev_43($p9);
    call {:si_unique_call 682} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} netif_carrier_on($p9);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i4);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref($i43, 8));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p9);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i4);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 1);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    call {:si_unique_call 684} {:cexpr "index"} boogie_si_record_i8($i48);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i50 := $ule.i32($i49, 3);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb10:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i48;
    goto $bb10_dummy;

  $bb7:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i13 := $i41;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} unregister_lte_device($p0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i51 := $i13;
    goto $bb13;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} vslice_dummy_var_173 := printk.ref(.str.2);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb5;

  $bb10_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3127;
}



const validate_mac_address: ref;

axiom validate_mac_address == $sub.ref(0, 263216);

procedure validate_mac_address($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation validate_mac_address($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i1 := is_zero_ether_addr($p0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 686} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_174 := printk.ref(.str.14);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_120 := $M.0;
    cmdloc_dummy_var_121 := $M.0;
    call {:si_unique_call 688} cmdloc_dummy_var_122 := $memcpy.i8(cmdloc_dummy_var_120, cmdloc_dummy_var_121, $p0, gdm_lte_macaddr, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_122;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 264248);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const ether_setup: ref;

axiom ether_setup == $sub.ref(0, 265280);

procedure ether_setup($p0: ref);



const alloc_netdev_mqs: ref;

axiom alloc_netdev_mqs == $sub.ref(0, 266312);

procedure alloc_netdev_mqs($i0: i32, $p1: ref, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_netdev_mqs($i0: i32, $p1: ref, $i2: i8, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} {:cexpr "alloc_netdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 690} {:cexpr "alloc_netdev_mqs:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 691} {:cexpr "alloc_netdev_mqs:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 692} {:cexpr "alloc_netdev_mqs:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p6 := external_alloc();
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;
}



const form_mac_address: ref;

axiom form_mac_address == $sub.ref(0, 267344);

procedure form_mac_address($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation form_mac_address($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i8)
{
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} {:cexpr "form_mac_address:arg:index"} boogie_si_record_i8($i4);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p3);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} ether_addr_copy($p0, $p3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i4);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i9, $i10);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p0, $mul.ref(5, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} eth_random_addr($p1);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_123 := $M.0;
    cmdloc_dummy_var_124 := $M.0;
    call {:si_unique_call 698} cmdloc_dummy_var_125 := $memcpy.i8(cmdloc_dummy_var_123, cmdloc_dummy_var_124, $p1, $p0, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_125;
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} ether_addr_copy($p2, $p0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} ether_addr_copy($p0, gdm_lte_macaddr);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_register_netdev_43: ref;

axiom ldv_register_netdev_43 == $sub.ref(0, 268376);

procedure ldv_register_netdev_43($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.21, $M.0, $CurrAddr;



implementation ldv_register_netdev_43($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i1 := register_netdev($p0);
    call {:si_unique_call 701} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 702} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} ldv_net_device_ops_4();
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 269408);

procedure netif_carrier_on($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_on($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    return;
}



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 270440);

procedure register_netdev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_netdev($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 704} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 705} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_net_device_ops_4: ref;

axiom ldv_net_device_ops_4 == $sub.ref(0, 271472);

procedure ldv_net_device_ops_4();
  free requires assertsPassed;
  modifies $M.21, $M.0, $CurrAddr;



implementation ldv_net_device_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p0 := ldv_init_zalloc(3008);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $M.21 := $p0;
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 272504);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p1 := calloc(1, $i0);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 1} true;
    call {:si_unique_call 709} __VERIFIER_assume($i4);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 273536);

procedure eth_random_addr($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation eth_random_addr($p0: ref)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} get_random_bytes($p0, 6);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 254);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i4);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p0);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p0, $i8);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 274568);

procedure get_random_bytes($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation get_random_bytes($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} {:cexpr "get_random_bytes:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 275600);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 276632);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 277664);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    return;
}



const alloc_tx_struct: ref;

axiom alloc_tx_struct == $sub.ref(0, 278696);

procedure alloc_tx_struct($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation alloc_tx_struct($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i5: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} {:cexpr "alloc_tx_struct:arg:len"} boogie_si_record_i32($i0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $p1 := kmalloc(72, 32);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p6 := ldv_usb_alloc_urb_141(0, 32);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p6);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i0, 511);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p13 := kmalloc($i12, 32);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p13);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i5, 0);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p31 := $p1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $r := $p31;
    return;

  $bb14:
    assume $i23 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p31 := $0.ref;
    goto $bb19;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} usb_free_urb($p27);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} kfree($p29);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} kfree($p30);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i0, 1);
    call {:si_unique_call 717} {:cexpr "len"} boogie_si_record_i32($i10);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb7;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const packet_aggregation: ref;

axiom packet_aggregation == $sub.ref(0, 279728);

procedure packet_aggregation($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $M.16, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $CurrAddr, assertsPassed, $M.21;



implementation packet_aggregation($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i16;
  var $i13: i16;
  var $p14: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i16;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i7: i16;
  var $i8: i16;
  var $i62: i16;
  var $i63: i16;
  var $i15: i16;
  var $i16: i16;
  var $p64: ref;
  var $i65: i32;
  var $i66: i16;
  var $i67: i16;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i16;
  var $i72: i16;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i5 := gdm_cpu_to_dev16($p4, 12802);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p6, $i5);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i7, $i8 := 0, 0;
    goto $bb1;

  $bb1:
    call $p9, $i10, $i11, $i12, $i13, $p18, $p19, $p20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $p29, $p30, $p31, $p32, $i33, $p34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $i7, $i8, $i62, $i63, cmdloc_dummy_var_126, cmdloc_dummy_var_127, cmdloc_dummy_var_128 := packet_aggregation_loop_$bb1($p0, $p2, $p3, $p9, $i10, $i11, $i12, $i13, $p18, $p19, $p20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $p29, $p30, $p31, $p32, $i33, $p34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $i60, $i61, $i7, $i8, $i62, $i63, cmdloc_dummy_var_126, cmdloc_dummy_var_127, cmdloc_dummy_var_128);
    goto $bb1_last;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} ldv_spin_lock();
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i10 := list_empty($p9);
    call {:si_unique_call 725} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i12, $i13 := $i8, $i7;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p18 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i8);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, 30720);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i26, $i27 := $i8, $i7;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} list_del($p29);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} spin_unlock_irqrestore($p30, $u0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i64($i8);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_126 := $M.0;
    cmdloc_dummy_var_127 := $M.0;
    call {:si_unique_call 732} cmdloc_dummy_var_128 := $memcpy.i8(cmdloc_dummy_var_126, cmdloc_dummy_var_127, $p34, $p36, $i39, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_128;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, 3);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 65532);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i8);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i45, $i46);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    call {:si_unique_call 733} {:cexpr "send_len"} boogie_si_record_i16($i48);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i7);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    call {:si_unique_call 734} {:cexpr "num_packet"} boogie_si_record_i16($i51);
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i32($i53, 10);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_spin_lock();
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} put_tx_struct($p2, $p20);
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} spin_unlock_irqrestore($p59, $u0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i51);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i61 := $ule.i32($i60, 255);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i62, $i63 := $i48, $i51;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i62, $i63;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i15);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i67 := gdm_cpu_to_dev16($p64, $i66);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $i67);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i16);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i72 := gdm_cpu_to_dev16($p69, $i71);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $i72);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i15);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 8);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $r := $i75;
    return;

  $bb13:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8 := $i51, $i48;
    goto $bb13_dummy;

  $bb10:
    assume $i54 == 1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    call {:si_unique_call 735} devirtbounce.6($p56, $p58);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} spin_unlock_irqrestore($p28, $u0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i26, $i27;
    goto $bb5;

  $bb3:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} spin_unlock_irqrestore($p14, $u0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i15, $i16 := $i12, $i13;
    goto $bb5;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3345;
}



const send_tx_packet: ref;

axiom send_tx_packet == $sub.ref(0, 280760);

procedure send_tx_packet($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation send_tx_packet($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} {:cexpr "send_tx_packet:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 511);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i7 := __create_pipe($p0, 2);
    call {:si_unique_call 742} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i7, $sub.i32(0, 1073741824));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} usb_fill_bulk_urb($p9, $p0, $i10, $p12, $i6, gdm_usb_send_complete, $p13);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i16 := ldv_usb_submit_urb_145($p15, 32);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 745} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} usb_mark_last_busy($p0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} dev_err.ref.ref.i32($p18, .str.24, $i16);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i2, 1);
    call {:si_unique_call 740} {:cexpr "len"} boogie_si_record_i32($i5);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const gdm_usb_send_complete: ref;

axiom gdm_usb_send_complete == $sub.ref(0, 281792);

procedure gdm_usb_send_complete($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.14, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $M.16, $CurrAddr, assertsPassed, $M.21;



implementation gdm_usb_send_complete($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var vslice_dummy_var_175: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, $sub.i32(0, 104));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} free_tx_struct($p3);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} ldv_spin_lock();
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 16), 896)), $mul.ref(864, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p23 := $M.5;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref($sub.ref(0, 16), 896)), $mul.ref(416, 1)), $mul.ref(0, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_175 := queue_work($p23, $p25);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(56, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} spin_unlock_irqrestore($p27, $u0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 749} devirtbounce.6($p19, $p21);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} _dev_info.ref.ref($p13, .str.25);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 282824);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_145: ref;

axiom ldv_usb_submit_urb_145 == $sub.ref(0, 283856);

procedure ldv_usb_submit_urb_145($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_145($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "ldv_usb_submit_urb_145:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} ldv_check_alloc_flags($i1);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $p2 := ldv_undef_ptr();
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const put_tx_struct: ref;

axiom put_tx_struct == $sub.ref(0, 284888);

procedure put_tx_struct($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_tx_struct($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} list_add_tail($p2, $p3);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_141: ref;

axiom ldv_usb_alloc_urb_141 == $sub.ref(0, 285920);

procedure ldv_usb_alloc_urb_141($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_141($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} {:cexpr "ldv_usb_alloc_urb_141:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 759} {:cexpr "ldv_usb_alloc_urb_141:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} ldv_check_alloc_flags($i1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $p2 := ldv_undef_ptr();
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_142: ref;

axiom ldv_usb_alloc_urb_142 == $sub.ref(0, 286952);

procedure ldv_usb_alloc_urb_142($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_142($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "ldv_usb_alloc_urb_142:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 763} {:cexpr "ldv_usb_alloc_urb_142:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} ldv_check_alloc_flags($i1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $p2 := ldv_undef_ptr();
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const get_tx_sdu_struct: ref;

axiom get_tx_sdu_struct == $sub.ref(0, 287984);

procedure get_tx_sdu_struct($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.17;



implementation get_tx_sdu_struct($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i3 := list_empty($p2);
    call {:si_unique_call 767} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} list_del($p10);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i12, 1);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(48, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i16 := list_empty($p15);
    call {:si_unique_call 770} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p1, $i18);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p5 := $p8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const gdm_cpu_to_dev32: ref;

axiom gdm_cpu_to_dev32 == $sub.ref(0, 289016);

procedure gdm_cpu_to_dev32($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gdm_cpu_to_dev32($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} {:cexpr "gdm_cpu_to_dev32:arg:x"} boogie_si_record_i32($i1);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i7 := __fswab32($i1);
    call {:si_unique_call 773} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 290048);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 775} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_129 := $M.22;
    call {:si_unique_call 776} cmdloc_dummy_var_130 := $memset.i8(cmdloc_dummy_var_129, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.22 := cmdloc_dummy_var_130;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const gdm_lte_event_init: ref;

axiom gdm_lte_event_init == $sub.ref(0, 291080);

procedure gdm_lte_event_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr;



implementation gdm_lte_event_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $M.19;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} vslice_dummy_var_176 := printk.ref(.str);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i6 := $M.23;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.23 := $i7;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p2 := netlink_init(30, gdm_lte_event_rcv);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $M.19 := $p2;
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gdm_lte_event_rcv: ref;

axiom gdm_lte_event_rcv == $sub.ref(0, 292112);

procedure gdm_lte_event_rcv($p0: ref, $i1: i16, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation gdm_lte_event_rcv($p0: ref, $i1: i16, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_177: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} {:cexpr "gdm_lte_event_rcv:arg:type"} boogie_si_record_i16($i1);
    call {:si_unique_call 780} {:cexpr "gdm_lte_event_rcv:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $p4 := netdev_priv($p0);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 782} vslice_dummy_var_177 := devirtbounce.7($p9, $p13, $p2, $i3, $0.ref, $0.ref);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const netlink_init: ref;

axiom netlink_init == $sub.ref(0, 293144);

procedure netlink_init($i0: i32, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $CurrAddr;



implementation netlink_init($i0: i32, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    call {:si_unique_call 784} {:cexpr "netlink_init:arg:unit"} boogie_si_record_i32($i0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p3, 0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(4, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p4, 0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.26 := $store.ref($M.26, $p5, netlink_rcv);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.27 := $store.ref($M.27, $p6, $0.ref);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p7, $0.ref);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p8, $0.ref);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p9, $0.ref);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p10 := netlink_kernel_create(init_net, $i0, $p2);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.31 := $p1;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const netlink_rcv: ref;

axiom netlink_rcv == $sub.ref(0, 294176);

procedure netlink_rcv($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation netlink_rcv($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} mutex_lock_nested(netlink_mutex, 0);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} netlink_rcv_cb($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} mutex_unlock(netlink_mutex);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const netlink_kernel_create: ref;

axiom netlink_kernel_create == $sub.ref(0, 295208);

procedure netlink_kernel_create($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netlink_kernel_create($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "netlink_kernel_create:arg:unit"} boogie_si_record_i32($i1);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $p3 := __netlink_kernel_create($p0, $i1, __this_module, $p2);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __netlink_kernel_create: ref;

axiom __netlink_kernel_create == $sub.ref(0, 296240);

procedure __netlink_kernel_create($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __netlink_kernel_create($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} {:cexpr "__netlink_kernel_create:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p4 := external_alloc();
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 297272);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    return;
}



const netlink_rcv_cb: ref;

axiom netlink_rcv_cb == $sub.ref(0, 298304);

procedure netlink_rcv_cb($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.3, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation netlink_rcv_cb($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i32;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p2 := $M.31;
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i8 := $ule.i32($i7, 15);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i14, $i16);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i17 == 1);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, 32768);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p12);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(16, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_131 := $M.0;
    cmdloc_dummy_var_132 := $M.0;
    call {:si_unique_call 798} cmdloc_dummy_var_133 := $memcpy.i8(cmdloc_dummy_var_131, cmdloc_dummy_var_132, $p26, $p28, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_133;
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p12);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p29, $mul.ref(20, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32($i32, 4);
    call {:si_unique_call 799} {:cexpr "mlen"} boogie_si_record_i32($i33);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p1);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p35 := dev_get_by_index(init_net, $i34);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p1);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_181 := printk.ref.i32(.str.22, $i43);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p38 := $M.31;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    call {:si_unique_call 801} devirtbounce.8($p38, $p35, $i42, $p30, $i33);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} dev_put($p35);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_180 := printk.ref.i32.i32(.str.21, $i22, $i24);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb9;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_179 := printk.ref(.str.20);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} vslice_dummy_var_178 := printk.ref(.str.19);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 299336);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_by_index: ref;

axiom dev_get_by_index == $sub.ref(0, 300368);

procedure dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_by_index($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} {:cexpr "dev_get_by_index:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p2 := external_alloc();
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_put: ref;

axiom dev_put == $sub.ref(0, 301400);

procedure dev_put($p0: ref);
  free requires assertsPassed;



implementation dev_put($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} __bad_size_call_parameter();
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    call {:si_unique_call 817} devirtbounce.10(0, $p39, $sub.i32(0, 1), $p39);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 816} devirtbounce.9(0, $p37, $p37);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 815} devirtbounce.9(0, $p34, $p34);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i24 == 1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i27 == 1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    call {:si_unique_call 814} devirtbounce.10(0, $p31, $sub.i32(0, 1), $p31);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb35:
    assume $i27 == 1;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    call {:si_unique_call 813} devirtbounce.9(0, $p29, $p29);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i24 == 1;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    call {:si_unique_call 812} devirtbounce.9(0, $p26, $p26);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 811} devirtbounce.10(0, $p23, $sub.i32(0, 1), $p23);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 810} devirtbounce.9(0, $p21, $p21);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i16 == 1;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    call {:si_unique_call 809} devirtbounce.9(0, $p18, $p18);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($sub.i32(0, 1), 1);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i8 == 1);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($sub.i32(0, 1), $sub.i32(0, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i11 == 1);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 808} devirtbounce.10(0, $p15, $sub.i32(0, 1), $p15);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume $i11 == 1;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 807} devirtbounce.9(0, $p13, $p13);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i8 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2968)), $mul.ref(1272, 1));
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 806} devirtbounce.9(0, $p10, $p10);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb19;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 302432);

procedure __bad_size_call_parameter();



const gdm_lte_event_exit: ref;

axiom gdm_lte_event_exit == $sub.ref(0, 303464);

procedure gdm_lte_event_exit();
  free requires assertsPassed;
  modifies $M.23, $M.19;



implementation gdm_lte_event_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p0 := $M.19;
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.23 := $i4;
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i5 := $M.23;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p7 := $M.19;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} netlink_exit($p7);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $M.19 := $0.ref;
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const netlink_exit: ref;

axiom netlink_exit == $sub.ref(0, 304496);

procedure netlink_exit($p0: ref);
  free requires assertsPassed;



implementation netlink_exit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1288)), $mul.ref(1168, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} sock_release($p2);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    return;
}



const sock_release: ref;

axiom sock_release == $sub.ref(0, 305528);

procedure sock_release($p0: ref);
  free requires assertsPassed;



implementation sock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 306560);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.16, $M.32, $M.0, $M.33, $M.34, $M.35, $M.2, $M.17, $M.3, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation ldv_main_exported_4()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: ref;
  var vslice_dummy_var_188: ref;
  var vslice_dummy_var_189: ref;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $p0 := ldv_init_zalloc(232);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p2 := ldv_init_zalloc(24);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 823} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 824} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 825} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} ldv_stop();
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i60 := $M.16;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 2);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb56:
    assume $i61 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_190 := ldv_ndo_uninit_4();
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 851} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i63 := $M.34;
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i63, 1);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $M.34 := $i64;
    call {:si_unique_call 852} {:cexpr "usb_counter"} boogie_si_record_i32($i64);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i65 := $M.35;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i66 := $sub.i32($i65, 1);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $M.35 := $i66;
    call {:si_unique_call 853} {:cexpr "ref_cnt"} boogie_si_record_i32($i66);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i51 := $M.16;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 1);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb50:
    assume $i52 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i53 := ldv_ndo_init_4();
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $M.33 := $i53;
    call {:si_unique_call 846} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i53);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i54 := $M.33;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume $i55 == 1;
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 847} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i56 := $M.34;
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i56, 1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $M.34 := $i57;
    call {:si_unique_call 848} {:cexpr "usb_counter"} boogie_si_record_i32($i57);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i58 := $M.35;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $M.35 := $i59;
    call {:si_unique_call 849} {:cexpr "ref_cnt"} boogie_si_record_i32($i59);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i39 := $M.16;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i43 := $M.16;
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 3);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i47 := $M.16;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 2);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb47:
    assume $i48 == 1;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p49 := $M.21;
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_189 := gdm_lte_stats($p49);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 844} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i44 == 1;
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p45 := $M.21;
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_188 := gdm_lte_stats($p45);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $M.16 := 3;
    call {:si_unique_call 842} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i40 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p41 := $M.21;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} vslice_dummy_var_187 := gdm_lte_stats($p41);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 840} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i35 := $M.16;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb38:
    assume $i36 == 1;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p37 := $M.21;
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_186 := gdm_lte_tx($p1, $p37);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $M.16 := 3;
    call {:si_unique_call 838} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i11 == 1);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i29 := $M.16;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i30 == 1;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p31 := $M.21;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i32 := gdm_lte_open($p31);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.32 := $i32;
    call {:si_unique_call 835} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i32);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i33 := $M.32;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i34 == 1;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $M.16 := 3;
    call {:si_unique_call 836} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i17 := $M.16;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 1);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i21 := $M.16;
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 3);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.16;
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume $i26 == 1;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p27 := $M.21;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vslice_dummy_var_185 := gdm_lte_set_config($p27, $p3);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 833} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p23 := $M.21;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_184 := gdm_lte_set_config($p23, $p3);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $M.16 := 3;
    call {:si_unique_call 831} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i18 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p19 := $M.21;
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vslice_dummy_var_183 := gdm_lte_set_config($p19, $p3);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 829} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb13:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb17:
    assume $i12 == 1;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i13 := $M.16;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p15 := $M.21;
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_182 := gdm_lte_close($p15);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 827} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    goto $bb21;
}



const ldv_ndo_init_4: ref;

axiom ldv_ndo_init_4 == $sub.ref(0, 307592);

procedure ldv_ndo_init_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 1} true;
    call {:si_unique_call 855} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 856} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_4: ref;

axiom ldv_ndo_uninit_4 == $sub.ref(0, 308624);

procedure ldv_ndo_uninit_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 1} true;
    call {:si_unique_call 857} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 858} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 309656);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const flush_workqueue: ref;

axiom flush_workqueue == $sub.ref(0, 310688);

procedure flush_workqueue($p0: ref);
  free requires assertsPassed;



implementation flush_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    return;
}



const call_and_disable_all_1: ref;

axiom call_and_disable_all_1 == $sub.ref(0, 311720);

procedure call_and_disable_all_1($i0: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.6, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation call_and_disable_all_1($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} {:cexpr "call_and_disable_all_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, $i0);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $M.8;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, $i0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.10;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $M.12;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $i0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p12 := $M.13;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} call_and_disable_work_1($p12);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p9 := $M.11;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} call_and_disable_work_1($p9);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p6 := $M.9;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} call_and_disable_work_1($p6);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p3 := $M.7;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} call_and_disable_work_1($p3);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const call_and_disable_work_1: ref;

axiom call_and_disable_work_1 == $sub.ref(0, 312752);

procedure call_and_disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.6, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation call_and_disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i3 := $M.6;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i9 := $M.8;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 3);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i17 := $M.10;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 2);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i19 := $M.10;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 3);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i25 := $M.12;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i26 == 1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i27 := $M.12;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 3);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p0);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p30 := $M.13;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb34;

  $bb35:
    assume $i32 == 1;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} do_tx($p0);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 871} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb30;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p22 := $M.11;
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb25;

  $bb26:
    assume $i24 == 1;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} do_tx($p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 869} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p0);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p14 := $M.9;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i13, $i15);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb16;

  $bb17:
    assume $i16 == 1;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} do_tx($p0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 867} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb12;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p6 := $M.7;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i5, $i7);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} do_tx($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 865} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_usb_driver_3: ref;

axiom ldv_usb_driver_3 == $sub.ref(0, 313784);

procedure ldv_usb_driver_3();
  free requires assertsPassed;
  modifies $M.36, $M.0, $CurrAddr;



implementation ldv_usb_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    return;
}



const work_init_2: ref;

axiom work_init_2 == $sub.ref(0, 314816);

procedure work_init_2();
  free requires assertsPassed;
  modifies $M.37, $M.38, $M.39, $M.40;



implementation work_init_2()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 873} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 874} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 875} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 876} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 315848);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.6, $M.8, $M.10, $M.12;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $M.6 := 0;
    call {:si_unique_call 877} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 878} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.10 := 0;
    call {:si_unique_call 879} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 880} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 316880);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.6, $M.3, $M.0, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 1} true;
    call {:si_unique_call 881} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 882} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 883} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} ldv_stop();
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i21 := $M.12;
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i23 := $M.12;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.12 := 4;
    call {:si_unique_call 893} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p25 := $M.7;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} do_tx($p25);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 895} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i16 := $M.10;
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i18 := $M.10;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.10 := 4;
    call {:si_unique_call 890} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p20 := $M.7;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} do_tx($p20);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $M.10 := 1;
    call {:si_unique_call 892} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i13 := $M.8;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.8 := 4;
    call {:si_unique_call 887} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p15 := $M.7;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} do_tx($p15);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 889} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i6 := $M.6;
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i8 := $M.6;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.6 := 4;
    call {:si_unique_call 884} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p10 := $M.7;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} do_tx($p10);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.6 := 1;
    call {:si_unique_call 886} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const invoke_work_2: ref;

axiom invoke_work_2 == $sub.ref(0, 317912);

procedure invoke_work_2();
  free requires assertsPassed;
  modifies $M.37, $M.3, $M.0, $M.38, $M.39, $M.40, $M.14, $CurrAddr, $M.16, assertsPassed, $M.21;



implementation invoke_work_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 897} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 898} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 899} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} ldv_stop();
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i21 := $M.40;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i23 := $M.40;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.40 := 4;
    call {:si_unique_call 909} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(4);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p25 := $M.41;
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} do_rx($p25);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 911} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(1);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i16 := $M.39;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i18 := $M.39;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.39 := 4;
    call {:si_unique_call 906} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(4);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p20 := $M.41;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} do_rx($p20);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 908} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(1);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i11 := $M.38;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i13 := $M.38;
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.38 := 4;
    call {:si_unique_call 903} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(4);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p15 := $M.41;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} do_rx($p15);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 905} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(1);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i6 := $M.37;
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i8 := $M.37;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.37 := 4;
    call {:si_unique_call 900} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(4);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p10 := $M.41;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} do_rx($p10);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 902} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(1);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const main: ref;

axiom main == $sub.ref(0, 318944);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.16, $M.6, $M.8, $M.10, $M.12, $M.42, $M.35, $M.43, $M.44, $M.37, $M.38, $M.39, $M.40, $M.45, $M.32, $M.0, $M.33, $M.34, $M.3, $M.46, $M.47, $M.48, $M.4, $M.49, $M.21, $M.7, $M.9, $M.11, $M.13, $M.41, $M.36, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.15, $M.5, $M.31, $M.23, $M.19, $M.69, $M.70, $CurrAddr, $M.2, $M.17, $M.18, $M.14, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var vslice_dummy_var_191: ref;
  var vslice_dummy_var_192: i32;

  $bb0:
    call {:si_unique_call 913} $initialize();
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p1 := ldv_init_zalloc(32);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} ldv_initialize();
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} vslice_dummy_var_191 := ldv_memset($p3, 0, 4);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 919} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} work_init_1();
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 921} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 922} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 923} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 924} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} work_init_2();
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 926} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $p72, $p73, $i74, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, vslice_dummy_var_192 := main_loop_$bb1($p0, $p2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $p52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $p72, $p73, $i74, $i76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, vslice_dummy_var_192);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_stop();
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i82 := $M.45;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb106:
    assume $i83 == 1;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} invoke_work_2();
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i33 := $M.44;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb53:
    assume $i34 == 1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} $i35 := __VERIFIER_nondet_int();
    call {:si_unique_call 944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i35);
    call {:si_unique_call 945} {:cexpr "tmp___2"} boogie_si_record_i32($i35);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i35, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i35, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ldv_stop();
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb62:
    assume $i39 == 1;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i76 := $M.44;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 3);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb97:
    assume $i77 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p78 := $M.36;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i79 := gdm_usb_resume($p78);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.49 := $i79;
    call {:si_unique_call 962} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i79);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i80 := $M.49;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i81 == 1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i38 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i70 := $M.44;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 2);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb94:
    assume $i71 == 1;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p72 := $M.36;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.22, $p73);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} vslice_dummy_var_192 := gdm_usb_suspend($p72, $i74);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb58:
    assume $i37 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i56 := $M.44;
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 3);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i63 := $M.44;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 2);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb88:
    assume $i64 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i65 := $M.34;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 0);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb90;

  $bb91:
    assume $i66 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p67 := $M.36;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} gdm_usb_disconnect($p67);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i68 := $M.35;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i68, 1);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $M.35 := $i69;
    call {:si_unique_call 958} {:cexpr "ref_cnt"} boogie_si_record_i32($i69);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb82:
    assume $i57 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i58 := $M.34;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb84;

  $bb85:
    assume $i59 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p60 := $M.36;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} gdm_usb_disconnect($p60);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i61 := $M.35;
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, 1);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.35 := $i62;
    call {:si_unique_call 955} {:cexpr "ref_cnt"} boogie_si_record_i32($i62);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb56:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i40 == 1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i50 := $M.44;
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 3);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb76:
    assume $i51 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p52 := $M.36;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i53 := gdm_usb_resume($p52);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.48 := $i53;
    call {:si_unique_call 951} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i53);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i54 := $M.48;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i55 == 1;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb80;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i35, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb64;

  $bb67:
    assume $i41 == 1;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i42 := $M.44;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb69:
    assume $i43 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p44 := $M.36;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i45 := gdm_usb_probe($p44, $p2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.47 := $i45;
    call {:si_unique_call 947} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i45);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i46 := $M.47;
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb71:
    assume $i47 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 948} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $i48 := $M.35;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $M.35 := $i49;
    call {:si_unique_call 949} {:cexpr "ref_cnt"} boogie_si_record_i32($i49);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i16 := $M.43;
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 932} $i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 933} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i18);
    call {:si_unique_call 934} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_stop();
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb28:
    assume $i20 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i26 := $M.43;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb41:
    assume $i27 == 1;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i28 := gdm_usb_lte_init();
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.46 := $i28;
    call {:si_unique_call 939} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i28);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i29 := $M.46;
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i31 := $M.46;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i32 == 1;
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i30 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 940} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} ldv_check_final_state();
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb26:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb30;

  $bb31:
    assume $i21 == 1;
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i22 := $M.43;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb33:
    assume $i23 == 1;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i24 := $M.35;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb35;

  $bb36:
    assume $i25 == 1;
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} gdm_usb_lte_exit();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 936} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i14 := $M.42;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} invoke_work_1();
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i12 := $M.16;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_main_exported_4();
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb19_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    call {:si_unique_call 929} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 319976);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    return;
}



const gdm_usb_lte_exit: ref;

axiom gdm_usb_lte_exit == $sub.ref(0, 321008);

procedure gdm_usb_lte_exit();
  free requires assertsPassed;
  modifies $M.23, $M.19, $M.44, $M.3, $M.0, $M.6, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation gdm_usb_lte_exit()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} gdm_lte_event_exit();
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} ldv_usb_deregister_147(gdm_usb_lte_driver);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p0 := $M.5;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p5 := $M.15;
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p8 := $M.15;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} ldv_flush_workqueue_150($p8);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p9 := $M.15;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} ldv_destroy_workqueue_151($p9);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p3 := $M.5;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} ldv_flush_workqueue_148($p3);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $p4 := $M.5;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} ldv_destroy_workqueue_149($p4);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const gdm_usb_lte_init: ref;

axiom gdm_usb_lte_init == $sub.ref(0, 322040);

procedure gdm_usb_lte_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.23, $M.5, $M.15, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.44, $M.34, $M.36, $CurrAddr, $M.0;



implementation gdm_usb_lte_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i5: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i2 := gdm_lte_event_init();
    call {:si_unique_call 976} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p6 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.36, 8, 1, $p0, .str.35, .str.37);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.5 := $p6;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p7 := $M.5;
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p10 := __alloc_workqueue_key.ref.i32.i32.ref.ref.ref(.str.36, 8, 1, $p1, .str.38, .str.39);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $M.15 := $p10;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $p11 := $M.15;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i14 := ldv_usb_register_driver_146(gdm_usb_lte_driver, __this_module, .str.40);
    call {:si_unique_call 981} {:cexpr "tmp___2"} boogie_si_record_i32($i14);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i5 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vslice_dummy_var_193 := printk.ref(.str.34);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 323072);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 324104);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 983} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p5 := external_alloc();
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_usb_register_driver_146: ref;

axiom ldv_usb_register_driver_146 == $sub.ref(0, 325136);

procedure ldv_usb_register_driver_146($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.44, $M.34, $M.36, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_146($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 986} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 988} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} ldv_usb_driver_3();
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 326168);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 1} true;
    call {:si_unique_call 990} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 991} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_147: ref;

axiom ldv_usb_deregister_147 == $sub.ref(0, 327200);

procedure ldv_usb_deregister_147($p0: ref);
  free requires assertsPassed;
  modifies $M.44;



implementation ldv_usb_deregister_147($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} usb_deregister($p0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    return;
}



const ldv_flush_workqueue_148: ref;

axiom ldv_flush_workqueue_148 == $sub.ref(0, 328232);

procedure ldv_flush_workqueue_148($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.6, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation ldv_flush_workqueue_148($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} flush_workqueue($p0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} call_and_disable_all_1(2);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_149: ref;

axiom ldv_destroy_workqueue_149 == $sub.ref(0, 329264);

procedure ldv_destroy_workqueue_149($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.6, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation ldv_destroy_workqueue_149($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} destroy_workqueue($p0);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} call_and_disable_all_1(2);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_flush_workqueue_150: ref;

axiom ldv_flush_workqueue_150 == $sub.ref(0, 330296);

procedure ldv_flush_workqueue_150($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.6, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation ldv_flush_workqueue_150($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} flush_workqueue($p0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} call_and_disable_all_1(2);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const ldv_destroy_workqueue_151: ref;

axiom ldv_destroy_workqueue_151 == $sub.ref(0, 331328);

procedure ldv_destroy_workqueue_151($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.6, $M.8, $M.10, $M.12, assertsPassed, $M.14, $M.7, $M.9, $M.11, $M.13, $M.16, $CurrAddr, $M.21;



implementation ldv_destroy_workqueue_151($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} destroy_workqueue($p0);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} call_and_disable_all_1(2);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 332360);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 333392);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 334424);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1002} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 1} true;
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 335456);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 336488);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 337520);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 338552);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 339584);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 340616);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 341648);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 342680);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 343712);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 344744);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 345776);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 346808);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 347840);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1003} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1004} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1005} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} __VERIFIER_assume($i4);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 348872);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 349904);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 350936);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 351968);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 353000);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 354032);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 355064);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 356096);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 357128);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 358160);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 359192);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 360224);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 361256);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 362288);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 363320);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 364352);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 365384);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1007} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1008} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1009} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1010} __VERIFIER_assume($i10);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 366416);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1011} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1012} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 367448);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 368480);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1013} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1014} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 369512);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 370544);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 371576);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1015} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1016} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1017} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1018} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $p6 := malloc($i5);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_134 := $M.0;
    call {:si_unique_call 1020} cmdloc_dummy_var_135 := $memset.i8(cmdloc_dummy_var_134, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_135;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 372608);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 373640);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.21, $M.16, $M.32, $M.33, $M.34, $M.35, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.37, $M.41, $M.38, $M.39, $M.40, $M.36, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.3, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.15, $M.5, $M.0, $M.31, $M.23, $M.19, $M.69, $M.70;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1021} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.21 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 1022} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1023} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1024} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1025} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1026} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.6 := 0;
    call {:si_unique_call 1027} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.7 := $0.ref;
    $M.8 := 0;
    call {:si_unique_call 1028} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.9 := $0.ref;
    $M.10 := 0;
    call {:si_unique_call 1029} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.11 := $0.ref;
    $M.12 := 0;
    call {:si_unique_call 1030} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.37 := 0;
    call {:si_unique_call 1031} {:cexpr "ldv_work_2_0"} boogie_si_record_i32(0);
    $M.41 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 1032} {:cexpr "ldv_work_2_1"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1033} {:cexpr "ldv_work_2_2"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1034} {:cexpr "ldv_work_2_3"} boogie_si_record_i32(0);
    $M.36 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1036} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1037} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1038} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1039} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1040} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1041} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1042} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1043} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.54 := $store.i16($M.54, __mod_usb__id_table_device_table, 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.54 := $store.i16($M.54, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.66 := $store.i64($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_device_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.67 := $store.i16($M.67, id_table, 387);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(2, 1)), 4214);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(4, 1)), $sub.i16(0, 32768));
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(13, 1)), 2);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(14, 1)), 6);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(0, 1)), 387);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(2, 1)), 4214);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(4, 1)), $sub.i16(0, 28672));
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(13, 1)), 2);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(14, 1)), 6);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.67 := $store.i16($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(id_table, $mul.ref(0, 96)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.68 := $store.ref($M.68, gdm_usb_lte_driver, .str.33);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), gdm_usb_probe);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), gdm_usb_disconnect);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), gdm_usb_suspend);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), gdm_usb_resume);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), gdm_usb_resume);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), id_table);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i64($M.68, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.68 := $store.ref($M.68, $add.ref($add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.68 := $store.i32($M.68, $add.ref($add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref(gdm_usb_lte_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 2);
    $M.15 := $0.ref;
    $M.5 := $0.ref;
    $M.0 := $store.i32($M.0, netlink_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.17);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(netlink_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(netlink_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), netlink_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(netlink_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, wwan_type, .str.15);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wwan_type, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wwan_type, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wwan_type, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wwan_type, $mul.ref(0, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(wwan_type, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, gdm_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(16, 1)), gdm_lte_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(24, 1)), gdm_lte_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(32, 1)), gdm_lte_tx);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(88, 1)), gdm_lte_set_config);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(128, 1)), gdm_lte_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(472, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(480, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(488, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(496, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(504, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(512, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(gdm_netdev_ops, $mul.ref(0, 528)), $mul.ref(520, 1)), $0.ref);
    $M.0 := $store.i8($M.0, gdm_lte_macaddr, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_lte_macaddr, $mul.ref(0, 6)), $mul.ref(1, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_lte_macaddr, $mul.ref(0, 6)), $mul.ref(2, 1)), 59);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_lte_macaddr, $mul.ref(0, 6)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_lte_macaddr, $mul.ref(0, 6)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(gdm_lte_macaddr, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.31 := $0.ref;
    $M.23 := 0;
    $M.19 := $0.ref;
    $M.69 := $store.i8($M.69, .str.13, 108);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(1, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(2, 1)), 101);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(4, 1)), 100);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.13, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.70 := $store.i8($M.70, .str.1, 108);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(1, 1)), 116);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(2, 1)), 101);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(4, 1)), 37);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(6, 1)), 112);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(7, 1)), 100);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(8, 1)), 110);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.1, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 1044} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 374672);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: ref, arg6: ref, arg7: i32, arg8: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.3, $M.0, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: ref, arg6: ref, arg7: i32, arg8: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(gdm_usb_sdu_send, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1045} $i1 := gdm_usb_sdu_send(arg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    $r := $i1;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 375704);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 376736);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.14, $CurrAddr, assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(gdm_usb_recv, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1046} $i1 := gdm_usb_recv(arg, arg1, arg2, arg3);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    $r := $i1;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 377768);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(gdm_usb_get_endian, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(gdm_lte_stats, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1047} $p2 := gdm_lte_stats($p1);
    $r := $p2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 1048} $p3 := gdm_usb_get_endian(arg);
    $r := $p3;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 378800);

procedure devirtbounce.4(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 379832);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(rx_complete, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1049} $i1 := rx_complete(arg, arg1, arg2, arg3);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    $r := $i1;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 380864);

procedure devirtbounce.6(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.14, $M.16, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $CurrAddr, assertsPassed, $M.21;



implementation devirtbounce.6(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(netlink_rcv, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(gdm_usb_send_complete, $p0);
    assume {:branchcond $i14} true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(ether_setup, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(do_rx, $p0);
    assume {:branchcond $i12} true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(do_tx, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(gdm_usb_rcv_complete, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i10 == 1);
    $i9 := $eq.ref(gdm_usb_disconnect, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i9 == 1);
    $i8 := $eq.ref(tx_complete, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    call {:si_unique_call 1050} tx_complete(arg);
    return;

  $bb3:
    assume $i9 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1051} gdm_usb_disconnect($p1);
    return;

  $bb4:
    assume $i10 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1052} gdm_usb_rcv_complete($p2);
    return;

  $bb5:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1053} do_tx($p3);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1054} do_rx($p4);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1055} ether_setup($p5);
    return;

  $bb8:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1056} gdm_usb_send_complete($p6);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1057} netlink_rcv($p7);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 381896);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref, arg4: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(gdm_usb_hci_send, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1058} $i1 := gdm_usb_hci_send(arg, arg1, arg2, arg3, arg4);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    $r := $i1;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 382928);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i16, arg2: ref, arg3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i16, arg2: ref, arg3: i32)
{
  var $p0: ref;
  var $i1: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i1 := $eq.ref(gdm_lte_event_rcv, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1059} gdm_lte_event_rcv(arg, arg1, arg2, arg3);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 383960);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 384992);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.21, $M.16, $M.32, $M.33, $M.34, $M.35, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.37, $M.41, $M.38, $M.39, $M.40, $M.36, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.3, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.15, $M.5, $M.0, $M.31, $M.23, $M.19, $M.69, $M.70, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1060} __SMACK_static_init();
    call {:si_unique_call 1061} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.22, $M.16, $M.6, $M.8, $M.10, $M.12, $M.42, $M.35, $M.43, $M.44, $M.37, $M.38, $M.39, $M.40, $M.45, $M.32, $M.0, $M.33, $M.34, $M.3, $M.46, $M.47, $M.48, $M.4, $M.49, $M.21, $M.7, $M.9, $M.11, $M.13, $M.41, $M.36, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.15, $M.5, $M.31, $M.23, $M.19, $M.69, $M.70, $CurrAddr, $M.2, $M.17, $M.18, $M.14, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation icmp6_checksum_loop_$bb8(in_$p38: ref, in_$i39: i16, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i44: i32) returns (out_$p38: ref, out_$i39: i16, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i44: i32)
{

  entry:
    out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i35, out_$i36, out_$p37, out_$i44 := in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i35, in_$i36, in_$p37, in_$i44;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_782;

  $bb10:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$i36, out_$p37 := out_$i41, out_$i42, out_$p38;
    goto $bb10_dummy;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i41;
    assume true;
    goto $bb10;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, 1);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i36, $sub.i32(0, 2));
    call {:si_unique_call 148} {:cexpr "len"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_788;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i40, out_$i35);
    call {:si_unique_call 147} {:cexpr "sum"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i39);
    goto corral_source_split_786;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i16($M.0, out_$p37);
    goto corral_source_split_785;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p37, $mul.ref(1, 2));
    goto corral_source_split_784;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i35, out_$i36, out_$p37, out_$i44 := icmp6_checksum_loop_$bb8(out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i35, out_$i36, out_$p37, out_$i44);
    return;

  exit:
    return;
}



procedure icmp6_checksum_loop_$bb8(in_$p38: ref, in_$i39: i16, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i44: i32) returns (out_$p38: ref, out_$i39: i16, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i44: i32);



implementation gdm_usb_suspend_loop_$bb8(in_$p8: ref, in_$i30: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p32: ref, in_$p33: ref) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p32: ref, out_$p33: ref)
{

  entry:
    out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33 := in_$p34, in_$p35, in_$p36, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p32, in_$p33;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1163;

  $bb10:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p32, out_$p33 := out_$p41, out_$p32;
    goto $bb10_dummy;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, in_$i30);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_1176;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p32, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1175;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p40, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1174;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_1173;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_1172;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} ldv_spin_lock();
    goto corral_source_split_1170;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} usb_kill_urb(out_$p36);
    goto corral_source_split_1169;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_1168;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p33, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1167;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} spin_unlock_irqrestore(out_$p34, $u0);
    goto corral_source_split_1166;

  $bb9:
    out_$p34 := $add.ref($add.ref($add.ref(in_$p8, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1165;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33 := gdm_usb_suspend_loop_$bb8(in_$p8, in_$i30, out_$p34, out_$p35, out_$p36, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p32, out_$p33);
    return;

  exit:
    return;
}



procedure gdm_usb_suspend_loop_$bb8(in_$p8: ref, in_$i30: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p32: ref, in_$p33: ref) returns (out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p32: ref, out_$p33: ref);
  modifies $M.3;



implementation gdm_usb_resume_loop_$bb10(in_$p2: ref, in_$p5: ref, in_$i16: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$i20: i32, in_vslice_dummy_var_143: i32) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$i28: i1, out_$i20: i32, out_vslice_dummy_var_143: i32)
{

  entry:
    out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i20, out_vslice_dummy_var_143 := in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i27, in_$i28, in_$i20, in_vslice_dummy_var_143;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1215;

  $bb12:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb12_dummy;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i27, in_$i16);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 227} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_1223;

  SeqInstr_42:
    goto corral_source_split_1222;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} out_vslice_dummy_var_143 := gdm_usb_recv(out_$p22, out_$p24, out_$p25, 1);
    goto SeqInstr_41;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p5, $mul.ref(0, 896)), $mul.ref(880, 1));
    goto corral_source_split_1219;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_1218;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i20, out_vslice_dummy_var_143 := gdm_usb_resume_loop_$bb10(in_$p2, in_$p5, in_$i16, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i27, out_$i28, out_$i20, out_vslice_dummy_var_143);
    return;

  exit:
    return;
}



procedure gdm_usb_resume_loop_$bb10(in_$p2: ref, in_$p5: ref, in_$i16: i32, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$i28: i1, in_$i20: i32, in_vslice_dummy_var_143: i32) returns (out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$i28: i1, out_$i20: i32, out_vslice_dummy_var_143: i32);
  modifies $M.0, $M.3, $M.14, $CurrAddr, assertsPassed;



implementation remove_rx_submit_list_loop_$bb4(in_$p0: ref, in_$i15: i64, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p17: ref, in_$p18: ref) returns (out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p17: ref, out_$p18: ref)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18 := in_$i19, in_$i20, in_$i21, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p17, in_$p18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1536;

  $bb10:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$p18 := out_$p27, out_$p17;
    goto $bb10_dummy;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, in_$i15);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p17, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p26, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1552;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_1550;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1549;

  $bb7:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i19, out_$i20);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_1539;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18 := remove_rx_submit_list_loop_$bb4(in_$p0, in_$i15, out_$i19, out_$i20, out_$i21, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p17, out_$p18);
    return;

  exit:
    return;
}



procedure remove_rx_submit_list_loop_$bb4(in_$p0: ref, in_$i15: i64, in_$i19: i64, in_$i20: i64, in_$i21: i1, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p17: ref, in_$p18: ref) returns (out_$i19: i64, out_$i20: i64, out_$i21: i1, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p17: ref, out_$p18: ref);



implementation {:SIextraRecBound 4} unregister_lte_device_loop_$bb1(in_$p0: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i1: i32) returns (out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i1: i32)
{

  entry:
    out_$i2, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i1 := in_$i2, in_$p4, in_$p5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i1;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1600;

  $bb7:
    assume out_$i9 == 1;
    assume {:verifier.code 0} true;
    out_$i1 := out_$i8;
    goto $bb7_dummy;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    out_$i9 := $sle.i32(out_$i8, 3);
    goto corral_source_split_1611;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $add.i32(out_$i1, 1);
    call {:si_unique_call 318} {:cexpr "index"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_1610;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb3:
    assume out_$i7 == 1;
    goto corral_source_split_1608;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i64(out_$i6, 0);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.0, out_$p4);
    goto corral_source_split_1604;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref(out_$i2, 8));
    goto corral_source_split_1603;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i2 := $sext.i32.i64(out_$i1);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    goto $bb2;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} ldv_free_netdev_45(out_$p5);
    goto corral_source_split_1614;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} ldv_unregister_netdev_44(out_$p5);
    goto corral_source_split_1613;

  $bb4:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i2, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i1 := unregister_lte_device_loop_$bb1(in_$p0, out_$i2, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i1);
    return;

  exit:
    return;
}



procedure unregister_lte_device_loop_$bb1(in_$p0: ref, in_$i2: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$i8: i32, in_$i9: i1, in_$i1: i32) returns (out_$i2: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$i8: i32, out_$i9: i1, out_$i1: i32);
  modifies $M.16;



implementation release_usb_loop_$bb44(in_$p0: ref, in_$i135: i64, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$p145: ref, in_$p147: ref, in_$p148: ref, in_$i150: i64, in_$i151: i1, in_$p137: ref, in_$p138: ref) returns (out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$p145: ref, out_$p147: ref, out_$p148: ref, out_$i150: i64, out_$i151: i1, out_$p137: ref, out_$p138: ref)
{

  entry:
    out_$p139, out_$p140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p147, out_$p148, out_$i150, out_$i151, out_$p137, out_$p138 := in_$p139, in_$p140, in_$i141, in_$p142, in_$i143, in_$i144, in_$p145, in_$p147, in_$p148, in_$i150, in_$i151, in_$p137, in_$p138;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1779;

  $bb49:
    assume out_$i151 == 1;
    assume {:verifier.code 0} true;
    out_$p137, out_$p138 := out_$p138, out_$p148;
    goto $bb49_dummy;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i151 := $ne.i64(out_$i150, in_$i135);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$i150 := $p2i.ref.i64(out_$p138);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.0, out_$p147);
    goto corral_source_split_1794;

  $bb48:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($add.ref(out_$p138, $mul.ref(0, 96)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1793;

  $bb47:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} free_rx_struct(out_$p137);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} list_del(out_$p145);
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$p145 := $add.ref($add.ref(out_$p137, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1789;

  $bb46:
    assume out_$i144 == 1;
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i64(out_$i141, out_$i143);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i143 := $p2i.ref.i64(out_$p142);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i141 := $p2i.ref.i64(out_$p140);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.0, out_$p139);
    goto corral_source_split_1782;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p137, $mul.ref(0, 96)), $mul.ref(88, 1));
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p139, out_$p140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p147, out_$p148, out_$i150, out_$i151, out_$p137, out_$p138 := release_usb_loop_$bb44(in_$p0, in_$i135, out_$p139, out_$p140, out_$i141, out_$p142, out_$i143, out_$i144, out_$p145, out_$p147, out_$p148, out_$i150, out_$i151, out_$p137, out_$p138);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb44(in_$p0: ref, in_$i135: i64, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$p142: ref, in_$i143: i64, in_$i144: i1, in_$p145: ref, in_$p147: ref, in_$p148: ref, in_$i150: i64, in_$i151: i1, in_$p137: ref, in_$p138: ref) returns (out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$p142: ref, out_$i143: i64, out_$i144: i1, out_$p145: ref, out_$p147: ref, out_$p148: ref, out_$i150: i64, out_$i151: i1, out_$p137: ref, out_$p138: ref);



implementation release_usb_loop_$bb36(in_$i112: i64, in_$p116: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$p114: ref, in_$p115: ref) returns (out_$p116: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$p114: ref, out_$p115: ref)
{

  entry:
    out_$p116, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p114, out_$p115 := in_$p116, in_$p118, in_$p119, in_$p120, in_$p121, in_$p122, in_$i123, in_$i124, in_$p114, in_$p115;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1750;

  $bb38:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$p114, out_$p115 := out_$p115, out_$p121;
    goto $bb38_dummy;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i64(out_$i123, in_$i112);
    goto corral_source_split_1761;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    out_$i123 := $p2i.ref.i64(out_$p122);
    goto corral_source_split_1760;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p115, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(out_$p120, $mul.ref($sub.ref(0, 16), 96));
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    out_$p120 := $bitcast.ref.ref(out_$p119);
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$p119 := $load.ref($M.0, out_$p118);
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref($add.ref(out_$p115, $mul.ref(0, 96)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} free_rx_struct(out_$p114);
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} list_del(out_$p116);
    goto corral_source_split_1753;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p114, $mul.ref(0, 96)), $mul.ref(16, 1));
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb38_dummy:
    call {:si_unique_call 1} out_$p116, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p114, out_$p115 := release_usb_loop_$bb36(in_$i112, out_$p116, out_$p118, out_$p119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p114, out_$p115);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb36(in_$i112: i64, in_$p116: ref, in_$p118: ref, in_$p119: ref, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$p114: ref, in_$p115: ref) returns (out_$p116: ref, out_$p118: ref, out_$p119: ref, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$p114: ref, out_$p115: ref);



implementation release_usb_loop_$bb28(in_$p0: ref, in_$i83: i64, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p85: ref, in_$p86: ref) returns (out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p85: ref, out_$p86: ref)
{

  entry:
    out_$p87, out_$p88, out_$p89, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p85, out_$p86 := in_$p87, in_$p88, in_$p89, in_$p91, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$p85, in_$p86;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1715;

  $bb30:
    assume out_$i97 == 1;
    assume {:verifier.code 0} true;
    out_$p85, out_$p86 := out_$p86, out_$p94;
    goto $bb30_dummy;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$i97 := $ne.i64(out_$i96, in_$i83);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i96 := $p2i.ref.i64(out_$p95);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(out_$p86, $mul.ref(0, 96)), $mul.ref(32, 1));
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref(out_$p93, $mul.ref($sub.ref(0, 32), 96));
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p93 := $bitcast.ref.ref(out_$p92);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(out_$p86, $mul.ref(0, 96)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} ldv_spin_lock();
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} usb_kill_urb(out_$p89);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_1720;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p85, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} spin_unlock_irqrestore(out_$p87, $u0);
    goto corral_source_split_1718;

  $bb29:
    out_$p87 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(200, 1));
    goto corral_source_split_1717;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p87, out_$p88, out_$p89, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p85, out_$p86 := release_usb_loop_$bb28(in_$p0, in_$i83, out_$p87, out_$p88, out_$p89, out_$p91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$p85, out_$p86);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb28(in_$p0: ref, in_$i83: i64, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$p85: ref, in_$p86: ref) returns (out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$p85: ref, out_$p86: ref);
  modifies $M.3;



implementation release_usb_loop_$bb20(in_$i57: i64, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p59: ref, in_$p60: ref) returns (out_$p61: ref, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p59: ref, out_$p60: ref)
{

  entry:
    out_$p61, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$p59, out_$p60 := in_$p61, in_$p63, in_$p64, in_$p66, in_$i67, in_$i68, in_$p59, in_$p60;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1684;

  $bb22:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$p59, out_$p60 := out_$p64, out_$p59;
    goto $bb22_dummy;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i64(out_$i67, in_$i57);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(out_$p66);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p59, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref($add.ref(out_$p59, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} free_tx_sdu_struct(out_$p60);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} list_del(out_$p61);
    goto corral_source_split_1687;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p61, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$p59, out_$p60 := release_usb_loop_$bb20(in_$i57, out_$p61, out_$p63, out_$p64, out_$p66, out_$i67, out_$i68, out_$p59, out_$p60);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb20(in_$i57: i64, in_$p61: ref, in_$p63: ref, in_$p64: ref, in_$p66: ref, in_$i67: i64, in_$i68: i1, in_$p59: ref, in_$p60: ref) returns (out_$p61: ref, out_$p63: ref, out_$p64: ref, out_$p66: ref, out_$i67: i64, out_$i68: i1, out_$p59: ref, out_$p60: ref);



implementation release_usb_loop_$bb12(in_$i34: i64, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p36: ref, out_$p37: ref)
{

  entry:
    out_$p38, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p36, out_$p37 := in_$p38, in_$p40, in_$p41, in_$p43, in_$i44, in_$i45, in_$p36, in_$p37;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1657;

  $bb14:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p36, out_$p37 := out_$p37, out_$p41;
    goto $bb14_dummy;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, in_$i34);
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p37, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto corral_source_split_1664;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p37, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} free_tx_struct(out_$p36);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} list_del(out_$p38);
    goto corral_source_split_1660;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p36, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p38, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p36, out_$p37 := release_usb_loop_$bb12(in_$i34, out_$p38, out_$p40, out_$p41, out_$p43, out_$i44, out_$i45, out_$p36, out_$p37);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb12(in_$i34: i64, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p36: ref, in_$p37: ref) returns (out_$p38: ref, out_$p40: ref, out_$p41: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p36: ref, out_$p37: ref);



implementation release_usb_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$i21: i64, in_$i22: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$i21: i64, out_$i22: i1, out_$p14: ref, out_$p15: ref)
{

  entry:
    out_$p16, out_$p18, out_$p19, out_$i21, out_$i22, out_$p14, out_$p15 := in_$p16, in_$p18, in_$p19, in_$i21, in_$i22, in_$p14, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1631;

  $bb6:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p19, out_$p14;
    goto $bb6_dummy;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, in_$i12);
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1637;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1636;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} free_tx_sdu_struct(out_$p15);
    goto corral_source_split_1635;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} list_del(out_$p16);
    goto corral_source_split_1634;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p16, out_$p18, out_$p19, out_$i21, out_$i22, out_$p14, out_$p15 := release_usb_loop_$bb4(in_$i12, out_$p16, out_$p18, out_$p19, out_$i21, out_$i22, out_$p14, out_$p15);
    return;

  exit:
    return;
}



procedure release_usb_loop_$bb4(in_$i12: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$i21: i64, in_$i22: i1, in_$p14: ref, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$i21: i64, out_$i22: i1, out_$p14: ref, out_$p15: ref);



implementation init_usb_loop_$bb10(in_$p0: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i58: i32) returns (out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i58: i32)
{

  entry:
    out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i58 := in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i58;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2059;

  $bb15:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := out_$i68;
    goto $bb15_dummy;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    out_$i69 := $sle.i32(out_$i68, 5);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    out_$i68 := $add.i32(out_$i58, 1);
    call {:si_unique_call 424} {:cexpr "i"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p67, out_$i66);
    goto corral_source_split_2071;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i65, 1);
    out_$p67 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_2070;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_2069;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} list_add(out_$p62, out_$p63);
    out_$p64 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(48, 1));
    goto corral_source_split_2068;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p59, $mul.ref(0, 96)), $mul.ref(16, 1));
    out_$p63 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(144, 1)), $mul.ref(32, 1));
    goto corral_source_split_2067;

  $bb13:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i64(out_$i60, 0);
    goto corral_source_split_2063;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_2062;

  SeqInstr_66:
    goto corral_source_split_2061;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_$p59 := alloc_rx_struct();
    goto SeqInstr_65;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i58 := init_usb_loop_$bb10(in_$p0, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i58);
    return;

  exit:
    return;
}



procedure init_usb_loop_$bb10(in_$p0: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i58: i32) returns (out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i58: i32);
  modifies $M.0, assertsPassed;



implementation init_usb_loop_$bb1(in_$p0: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i46: i32) returns (out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i46: i32)
{

  entry:
    out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i46 := in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i56, in_$i57, in_$i46;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2041;

  $bb7:
    assume out_$i57 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i56;
    goto $bb7_dummy;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    out_$i57 := $sle.i32(out_$i56, 63);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i46, 1);
    call {:si_unique_call 421} {:cexpr "i"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, out_$i54);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i53, 1);
    out_$p55 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} list_add(out_$p50, out_$p51);
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_2052;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p47, $mul.ref(0, 48)), $mul.ref(0, 1));
    out_$p51 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_2051;

  $bb4:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i64(out_$i48, 0);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i48 := $p2i.ref.i64(out_$p47);
    goto corral_source_split_2044;

  SeqInstr_63:
    goto corral_source_split_2043;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} out_$p47 := alloc_tx_sdu_struct();
    goto SeqInstr_62;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i46 := init_usb_loop_$bb1(in_$p0, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i56, out_$i57, out_$i46);
    return;

  exit:
    return;
}



procedure init_usb_loop_$bb1(in_$p0: ref, in_$p47: ref, in_$i48: i64, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$i46: i32) returns (out_$p47: ref, out_$i48: i64, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$i46: i32);
  modifies $M.0, assertsPassed;



implementation gdm_lte_multi_sdu_pkt_loop_$bb4(in_$p0: ref, in_$i26: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i16, in_$i50: i16, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i16, in_$i64: i32, in_$i65: i1, in_$i66: i16, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i82: i32, in_$i83: i32, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i28: i16, in_$p29: ref, in_vslice_dummy_var_166: i32) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i16, out_$i50: i16, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i16, out_$i64: i32, out_$i65: i1, out_$i66: i16, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i82: i32, out_$i83: i32, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i28: i16, out_$p29: ref, out_vslice_dummy_var_166: i32)
{

  entry:
    out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$i65, out_$i66, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i28, out_$p29, out_vslice_dummy_var_166 := in_$p30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i64, in_$i65, in_$i66, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p75, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i28, in_$p29, in_vslice_dummy_var_166;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  $bb16:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$p29 := out_$i90, out_$p87;
    goto $bb16_dummy;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i91, in_$i26);
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i16.i32(out_$i90);
    goto corral_source_split_2542;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i32.i16(out_$i89);
    call {:si_unique_call 526} {:cexpr "i"} boogie_si_record_i16(out_$i90);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i88, 1);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i16.i32(out_$i28);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref(out_$p29, $mul.ref(out_$i86, 1));
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i64(out_$i85, 4);
    goto corral_source_split_2537;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i64(out_$i84, 65532);
    goto corral_source_split_2536;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    out_$i84 := $sext.i32.i64(out_$i83);
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, 3);
    goto corral_source_split_2534;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i50);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} out_vslice_dummy_var_166 := printk.ref.i32(.str.10, out_$i58);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_93:
    goto corral_source_split_2529;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} gdm_lte_netif_rx(out_$p76, out_$p78, out_$i80, out_$i58);
    goto SeqInstr_92;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    out_$i80 := $add.i32(out_$i79, $sub.i32(0, 12));
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i16.i32(out_$i50);
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(out_$p77);
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(16, 1));
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_2524;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref(out_$i73, 8));
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i8.i32(out_$i69);
    goto corral_source_split_2521;

  $bb13:
    assume out_$i71 == 1;
    goto corral_source_split_2520;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    out_$i71 := $ule.i32(out_$i70, 3);
    goto corral_source_split_2518;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    goto corral_source_split_2517;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} out_$i69 := find_dev_index(out_$i58);
    call {:si_unique_call 523} {:cexpr "index"} boogie_si_record_i8(out_$i69);
    goto corral_source_split_2516;

  $bb11:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i50;
    assume true;
    goto $bb11;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    out_$i65 := $ule.i32(out_$i64, 11);
    goto corral_source_split_2510;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i50);
    goto corral_source_split_2509;

  $bb7:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i40;
    assume true;
    goto $bb7;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i32(out_$i59, 45569);
    goto corral_source_split_2503;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i40);
    goto corral_source_split_2502;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} out_$i58 := gdm_dev32_to_cpu(out_$p55, out_$i57);
    call {:si_unique_call 519} {:cexpr "nic_type"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_2501;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_2500;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2499;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    call {:si_unique_call 517} out_$p55 := devirtbounce.3(out_$p52, out_$p54);
    goto corral_source_split_2498;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2497;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_2496;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2495;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_$i50 := gdm_dev16_to_cpu(out_$p45, out_$i49);
    call {:si_unique_call 516} {:cexpr "hci_len"} boogie_si_record_i16(out_$i50);
    goto corral_source_split_2494;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i32.i16(out_$i48);
    goto corral_source_split_2493;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32(out_$i47);
    goto corral_source_split_2492;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i16($M.0, out_$p46);
    goto corral_source_split_2491;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2490;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    call {:si_unique_call 514} out_$p45 := devirtbounce.3(out_$p42, out_$p44);
    goto corral_source_split_2489;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_2487;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2486;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} out_$i40 := gdm_dev16_to_cpu(out_$p35, out_$i39);
    call {:si_unique_call 513} {:cexpr "cmd_evt"} boogie_si_record_i16(out_$i40);
    goto corral_source_split_2485;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i38);
    goto corral_source_split_2484;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i37);
    goto corral_source_split_2483;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i16($M.0, out_$p36);
    goto corral_source_split_2482;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2481;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    call {:si_unique_call 511} out_$p35 := devirtbounce.3(out_$p32, out_$p34);
    goto corral_source_split_2480;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2477;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_2476;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume !(out_$i71 == 1);
    goto corral_source_split_2531;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$i65, out_$i66, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i28, out_$p29, out_vslice_dummy_var_166 := gdm_lte_multi_sdu_pkt_loop_$bb4(in_$p0, in_$i26, out_$p30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i64, out_$i65, out_$i66, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p75, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i28, out_$p29, out_vslice_dummy_var_166);
    return;

  exit:
    return;
}



procedure gdm_lte_multi_sdu_pkt_loop_$bb4(in_$p0: ref, in_$i26: i32, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i16, in_$i38: i32, in_$i39: i16, in_$i40: i16, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i16, in_$i48: i32, in_$i49: i16, in_$i50: i16, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i1, in_$i61: i16, in_$i64: i32, in_$i65: i1, in_$i66: i16, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i82: i32, in_$i83: i32, in_$i84: i64, in_$i85: i64, in_$i86: i64, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i16, in_$i91: i32, in_$i92: i1, in_$i28: i16, in_$p29: ref, in_vslice_dummy_var_166: i32) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i16, out_$i38: i32, out_$i39: i16, out_$i40: i16, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i16, out_$i48: i32, out_$i49: i16, out_$i50: i16, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i1, out_$i61: i16, out_$i64: i32, out_$i65: i1, out_$i66: i16, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i82: i32, out_$i83: i32, out_$i84: i64, out_$i85: i64, out_$i86: i64, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i16, out_$i91: i32, out_$i92: i1, out_$i28: i16, out_$p29: ref, out_vslice_dummy_var_166: i32);
  modifies $M.0, $CurrAddr, assertsPassed;



implementation do_rx_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i16, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i71: i32, in_$i72: i1, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i16, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i71: i32, out_$i72: i1, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i71, out_$i72, out_vslice_dummy_var_169, out_vslice_dummy_var_170 := in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i71, in_$i72, in_vslice_dummy_var_169, in_vslice_dummy_var_170;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb22_dummy;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_3047;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} out_$i71 := list_empty(in_$p4);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_3046;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} ldv_spin_lock();
    goto corral_source_split_3045;

  SeqInstr_135:
    goto corral_source_split_3044;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} out_vslice_dummy_var_169 := gdm_usb_recv(out_$p65, out_$p67, out_$p69, 1);
    goto SeqInstr_134;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_3039;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} put_rx_struct(in_$p3, out_$p11);
    goto corral_source_split_3038;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_132:
    call {:si_unique_call 658} {:cexpr "ret"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_3036;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    call {:si_unique_call 657} out_$i47 := devirtbounce.5(out_$p38, out_$p40, out_$p42, out_$i46, 0);
    goto SeqInstr_131;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_3033;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_3032;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_3030;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3029;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_3028;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3027;

  $bb11:
    assume out_$i36 == 1;
    goto corral_source_split_3026;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_3024;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} out_$i35 := set_mac_address(out_$p32, out_$p34);
    call {:si_unique_call 656} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3023;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_3022;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3021;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3020;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p22, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_3019;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_3018;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 45059);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i28);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} out_$i28 := gdm_dev16_to_cpu(out_$p23, out_$i27);
    call {:si_unique_call 654} {:cexpr "cmd_evt"} boogie_si_record_i16(out_$i28);
    goto corral_source_split_3016;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    goto corral_source_split_3015;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    goto corral_source_split_3014;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, out_$p24);
    goto corral_source_split_3013;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p22, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p19, $mul.ref(0, 896)), $mul.ref(8, 1));
    goto corral_source_split_3011;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_3010;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3008;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_3006;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3005;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_3004;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3003;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3002;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} spin_unlock_irqrestore(out_$p13, $u0);
    goto corral_source_split_3001;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} list_del(out_$p12);
    out_$p13 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 640), 896)), $mul.ref(144, 1)), $mul.ref(56, 1));
    goto corral_source_split_3000;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_2999;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_2998;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_2997;

  $bb7:
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 640), 896)), $mul.ref(144, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2996;

  $bb17:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} out_vslice_dummy_var_170 := printk.ref(.str.26);
    goto corral_source_split_3068;

  $bb18:
    assume out_$i63 == 1;
    goto corral_source_split_3067;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, $sub.i32(0, 11));
    goto corral_source_split_3065;

  SeqInstr_138:
    call {:si_unique_call 665} {:cexpr "ret"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3064;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    call {:si_unique_call 664} out_$i62 := devirtbounce.5(out_$p53, out_$p55, out_$p57, out_$i61, 0);
    goto SeqInstr_137;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3063;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(56, 1));
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(64, 1));
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(80, 1));
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3055;

  $bb16:
    assume out_$i51 == 1;
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_3050;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p11, $mul.ref(0, 96)), $mul.ref(72, 1));
    goto corral_source_split_3049;

  $bb10:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i71, out_$i72, out_vslice_dummy_var_169, out_vslice_dummy_var_170 := do_rx_loop_$bb4(in_$p1, in_$p3, in_$p4, out_$p9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i71, out_$i72, out_vslice_dummy_var_169, out_vslice_dummy_var_170);
    return;

  exit:
    return;
}



procedure do_rx_loop_$bb4(in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i16, in_$i28: i16, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i71: i32, in_$i72: i1, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i16, out_$i28: i16, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i71: i32, out_$i72: i1, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32);
  modifies $M.3, $M.0, $M.14, $CurrAddr, assertsPassed, $M.16, $M.21;



implementation register_lte_device_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i6: i32, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i8, in_$p36: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$i4: i8, in_cmdloc_dummy_var_118: [ref]i8, in_cmdloc_dummy_var_119: [ref]i8, in_vslice_dummy_var_172: i32) returns (out_$p5: ref, out_$i6: i32, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i8, out_$p36: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$i4: i8, out_cmdloc_dummy_var_118: [ref]i8, out_cmdloc_dummy_var_119: [ref]i8, out_vslice_dummy_var_172: i32)
{

  entry:
    out_$p5, out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i4, out_cmdloc_dummy_var_118, out_cmdloc_dummy_var_119, out_vslice_dummy_var_172 := in_$p5, in_$i6, in_$p8, in_$p9, in_$i10, in_$i11, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p36, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i4, in_cmdloc_dummy_var_118, in_cmdloc_dummy_var_119, in_vslice_dummy_var_172;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_3127;

  $bb10:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i48;
    goto $bb10_dummy;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$i50 := $ule.i32(out_$i49, 3);
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i8(out_$i47);
    call {:si_unique_call 684} {:cexpr "index"} boogie_si_record_i8(out_$i48);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i46, 1);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i8.i32(out_$i4);
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p45, out_$p9);
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref(out_$i43, 8));
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i42);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i8.i32(out_$i4);
    goto corral_source_split_3182;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} netif_carrier_on(out_$p9);
    goto corral_source_split_3181;

  $bb8:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i39;
    assume true;
    goto $bb8;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i32(out_$i39, 0);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} out_$i39 := ldv_register_netdev_43(out_$p9);
    call {:si_unique_call 682} {:cexpr "ret"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p38, wwan_type);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(320, 1));
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p36, in_$p1);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 2968)), $mul.ref(1368, 1)), $mul.ref(0, 1));
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} form_mac_address(out_$p28, out_$p30, out_$p32, in_$p2, out_$i34);
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i32.i8(out_$i33);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i4);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p21, $mul.ref(0, 232)), $mul.ref(212, 1));
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p21, $mul.ref(0, 232)), $mul.ref(218, 1));
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2968)), $mul.ref(880, 1));
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, out_$i25);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p21, $mul.ref(0, 232)), $mul.ref(224, 1));
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i4);
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p24, in_$p0);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(0, 232)), $mul.ref(8, 1));
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p23, out_$p9);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p21, $mul.ref(0, 232)), $mul.ref(0, 1));
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_118 := $M.0;
    call {:si_unique_call 679} out_cmdloc_dummy_var_119 := $memset.i8(out_cmdloc_dummy_var_118, out_$p22, 0, 232, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_119;
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} out_$p20 := netdev_priv(out_$p9);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p19, 1500);
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2968)), $mul.ref(560, 1));
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p18, out_$i17);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i32(out_$i16, $sub.i32(0, 4097));
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2968)), $mul.ref(544, 1));
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p14, gdm_netdev_ops);
    goto corral_source_split_3144;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p9, $mul.ref(0, 2968)), $mul.ref(512, 1));
    goto corral_source_split_3143;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i10, 0);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_$p9 := alloc_netdev_mqs(232, out_$p8, 0, ether_setup, 1, 1);
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} out_vslice_dummy_var_172 := sprintf.ref.ref.i32(out_$p5, .str.1, out_$i6);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i6 := $zext.i8.i32(out_$i4);
    goto corral_source_split_3130;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i4, out_cmdloc_dummy_var_118, out_cmdloc_dummy_var_119, out_vslice_dummy_var_172 := register_lte_device_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, out_$p5, out_$i6, out_$p8, out_$p9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p36, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i4, out_cmdloc_dummy_var_118, out_cmdloc_dummy_var_119, out_vslice_dummy_var_172);
    return;

  exit:
    return;
}



procedure register_lte_device_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i6: i32, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i8, in_$p36: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i32, in_$i43: i64, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$i4: i8, in_cmdloc_dummy_var_118: [ref]i8, in_cmdloc_dummy_var_119: [ref]i8, in_vslice_dummy_var_172: i32) returns (out_$p5: ref, out_$i6: i32, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i8, out_$p36: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i32, out_$i43: i64, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$i4: i8, out_cmdloc_dummy_var_118: [ref]i8, out_cmdloc_dummy_var_119: [ref]i8, out_vslice_dummy_var_172: i32);
  modifies $M.0, $M.16, $M.21, $CurrAddr;



implementation packet_aggregation_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i16, in_$i13: i16, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i16, in_$i27: i16, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i7: i16, in_$i8: i16, in_$i62: i16, in_$i63: i16, in_cmdloc_dummy_var_126: [ref]i8, in_cmdloc_dummy_var_127: [ref]i8, in_cmdloc_dummy_var_128: [ref]i8) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i16, out_$i13: i16, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i16, out_$i27: i16, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i7: i16, out_$i8: i16, out_$i62: i16, out_$i63: i16, out_cmdloc_dummy_var_126: [ref]i8, out_cmdloc_dummy_var_127: [ref]i8, out_cmdloc_dummy_var_128: [ref]i8)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i7, out_$i8, out_$i62, out_$i63, out_cmdloc_dummy_var_126, out_cmdloc_dummy_var_127, out_cmdloc_dummy_var_128 := in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$p34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$i60, in_$i61, in_$i7, in_$i8, in_$i62, in_$i63, in_cmdloc_dummy_var_126, in_cmdloc_dummy_var_127, in_cmdloc_dummy_var_128;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3345;

  $bb13:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8 := out_$i51, out_$i48;
    goto $bb13_dummy;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$i62, out_$i63 := out_$i48, out_$i51;
    assume true;
    goto $bb13;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    out_$i61 := $ule.i32(out_$i60, 255);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$i60 := $zext.i16.i32(out_$i51);
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} spin_unlock_irqrestore(out_$p59, $u0);
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} put_tx_struct(in_$p2, out_$p20);
    out_$p59 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3417;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} ldv_spin_lock();
    goto corral_source_split_3416;

  $bb11:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_150:
    goto corral_source_split_3414;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    call {:si_unique_call 735} devirtbounce.6(out_$p56, out_$p58);
    goto SeqInstr_149;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3411;

  $bb10:
    assume out_$i54 == 1;
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i54 := $ugt.i32(out_$i53, 10);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    call {:si_unique_call 734} {:cexpr "num_packet"} boogie_si_record_i16(out_$i51);
    out_$p52 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(48, 1));
    goto corral_source_split_3406;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, 1);
    goto corral_source_split_3405;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i7);
    goto corral_source_split_3404;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i16(out_$i47);
    call {:si_unique_call 733} {:cexpr "send_len"} boogie_si_record_i16(out_$i48);
    goto corral_source_split_3403;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i45, out_$i46);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i8);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, 65532);
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i43, 3);
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_3398;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i16(out_$i41);
    goto corral_source_split_3397;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p40);
    goto corral_source_split_3396;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_126 := $M.0;
    out_cmdloc_dummy_var_127 := $M.0;
    call {:si_unique_call 732} out_cmdloc_dummy_var_128 := $memcpy.i8(out_cmdloc_dummy_var_126, out_cmdloc_dummy_var_127, out_$p34, out_$p36, out_$i39, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_128;
    goto corral_source_split_3394;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i38);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 1));
    goto corral_source_split_3388;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i64(out_$i8);
    goto corral_source_split_3387;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p3, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_3385;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} spin_unlock_irqrestore(out_$p30, $u0);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} list_del(out_$p29);
    out_$p30 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(56, 1));
    goto corral_source_split_3383;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_3382;

  $bb8:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    out_$i26, out_$i27 := out_$i8, out_$i7;
    assume true;
    goto $bb8;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    out_$i25 := $ugt.i32(out_$i24, 30720);
    goto corral_source_split_3377;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i21, out_$i23);
    goto corral_source_split_3376;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_3375;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p20, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3374;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i8);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3371;

  $bb6:
    out_$p18 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3370;

  $bb4:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$i12, out_$i13 := out_$i8, out_$i7;
    assume true;
    goto $bb4;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} out_$i10 := list_empty(out_$p9);
    call {:si_unique_call 725} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_3348;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} ldv_spin_lock();
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 896)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i7, out_$i8, out_$i62, out_$i63, out_cmdloc_dummy_var_126, out_cmdloc_dummy_var_127, out_cmdloc_dummy_var_128 := packet_aggregation_loop_$bb1(in_$p0, in_$p2, in_$p3, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$i60, out_$i61, out_$i7, out_$i8, out_$i62, out_$i63, out_cmdloc_dummy_var_126, out_cmdloc_dummy_var_127, out_cmdloc_dummy_var_128);
    return;

  exit:
    return;
}



procedure packet_aggregation_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i12: i16, in_$i13: i16, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i26: i16, in_$i27: i16, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$p40: ref, in_$i41: i32, in_$i42: i16, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$p52: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i32, in_$i61: i1, in_$i7: i16, in_$i8: i16, in_$i62: i16, in_$i63: i16, in_cmdloc_dummy_var_126: [ref]i8, in_cmdloc_dummy_var_127: [ref]i8, in_cmdloc_dummy_var_128: [ref]i8) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i12: i16, out_$i13: i16, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i26: i16, out_$i27: i16, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$p40: ref, out_$i41: i32, out_$i42: i16, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$p52: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i32, out_$i61: i1, out_$i7: i16, out_$i8: i16, out_$i62: i16, out_$i63: i16, out_cmdloc_dummy_var_126: [ref]i8, out_cmdloc_dummy_var_127: [ref]i8, out_cmdloc_dummy_var_128: [ref]i8);
  modifies $M.3, $M.0, $M.14, $M.16, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, $CurrAddr, assertsPassed, $M.21;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_vslice_dummy_var_192: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_vslice_dummy_var_192: i32)
{

  entry:
    out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_vslice_dummy_var_192 := in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$p73, in_$i74, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_vslice_dummy_var_192;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 927} out_$i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 928} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i5);
    call {:si_unique_call 929} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i5);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb19_dummy;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_228:
    goto corral_source_split_4180;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} ldv_main_exported_4();
    goto SeqInstr_227;

  $bb16:
    assume out_$i13 == 1;
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$i12 := $M.16;
    goto corral_source_split_4176;

  $bb14:
    assume out_$i11 == 1;
    goto corral_source_split_4175;

  $bb12:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i5, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i5, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i5, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb21:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_231:
    goto corral_source_split_4183;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} invoke_work_1();
    goto SeqInstr_230;

  $bb20:
    assume out_$i15 == 1;
    goto corral_source_split_4182;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$i14 := $M.42;
    goto corral_source_split_4172;

  $bb13:
    assume !(out_$i10 == 1);
    goto corral_source_split_4171;

  $bb24:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb35;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb35;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_4197;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i24 := $M.35;
    goto corral_source_split_4196;

  $bb33:
    assume out_$i23 == 1;
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i22, 2);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i22 := $M.43;
    goto corral_source_split_4192;

  $bb31:
    assume out_$i21 == 1;
    goto corral_source_split_4191;

  $bb26:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_4185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 932} out_$i18 := __VERIFIER_nondet_int();
    call {:si_unique_call 933} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i18);
    call {:si_unique_call 934} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i18);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i17 == 1;
    goto corral_source_split_4185;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$i16 := $M.43;
    goto corral_source_split_4160;

  $bb5:
    assume out_$i7 == 1;
    goto corral_source_split_4159;

  $bb4:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i5, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb42:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 941} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4218;

  $bb46:
    assume out_$i32 == 1;
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 0);
    goto corral_source_split_4215;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i31 := $M.46;
    goto corral_source_split_4214;

  $bb44:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i29 := $M.46;
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $M.46 := out_$i28;
    call {:si_unique_call 939} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_$i28 := gdm_usb_lte_init();
    goto corral_source_split_4206;

  $bb41:
    assume out_$i27 == 1;
    goto corral_source_split_4205;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 1);
    goto corral_source_split_4189;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    out_$i26 := $M.43;
    goto corral_source_split_4188;

  $bb28:
    assume out_$i20 == 1;
    goto corral_source_split_4187;

  $bb27:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i20 := $eq.i32(out_$i18, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} ldv_stop();
    goto corral_source_split_4220;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i21 == 1);
    goto $bb30;

  $bb54:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb70:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb72:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $M.35 := out_$i49;
    call {:si_unique_call 949} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, 1);
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$i48 := $M.35;
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 948} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4252;

  $bb71:
    assume out_$i47 == 1;
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 0);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$i46 := $M.47;
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.47 := out_$i45;
    call {:si_unique_call 947} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_4247;

  SeqInstr_237:
    goto corral_source_split_4246;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} out_$i45 := gdm_usb_probe(out_$p44, in_$p2);
    goto SeqInstr_236;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    out_$p44 := $M.36;
    goto corral_source_split_4245;

  $bb69:
    assume out_$i43 == 1;
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 1);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$i42 := $M.44;
    goto corral_source_split_4241;

  $bb67:
    assume out_$i41 == 1;
    goto corral_source_split_4240;

  $bb65:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i35, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb56:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i35, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i35, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} out_$i35 := __VERIFIER_nondet_int();
    call {:si_unique_call 944} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i35);
    call {:si_unique_call 945} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i35);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume out_$i34 == 1;
    goto corral_source_split_4222;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i33, 0);
    goto corral_source_split_4165;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    out_$i33 := $M.44;
    goto corral_source_split_4164;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_4163;

  $bb6:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb77:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb79:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 952} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4265;

  $bb78:
    assume out_$i55 == 1;
    goto corral_source_split_4264;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_4262;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    out_$i54 := $M.48;
    goto corral_source_split_4261;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $M.48 := out_$i53;
    call {:si_unique_call 951} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_4260;

  SeqInstr_240:
    goto corral_source_split_4259;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} out_$i53 := gdm_usb_resume(out_$p52);
    goto SeqInstr_239;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$p52 := $M.36;
    goto corral_source_split_4258;

  $bb76:
    assume out_$i51 == 1;
    goto corral_source_split_4257;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 3);
    goto corral_source_split_4238;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    out_$i50 := $M.44;
    goto corral_source_split_4237;

  $bb66:
    assume !(out_$i40 == 1);
    goto corral_source_split_4236;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $M.35 := out_$i69;
    call {:si_unique_call 958} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_4292;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    out_$i69 := $sub.i32(out_$i68, 1);
    goto corral_source_split_4291;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    out_$i68 := $M.35;
    goto corral_source_split_4290;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4289;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} gdm_usb_disconnect(out_$p67);
    goto corral_source_split_4288;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    out_$p67 := $M.36;
    goto corral_source_split_4287;

  $bb91:
    assume out_$i66 == 1;
    goto corral_source_split_4286;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 0);
    goto corral_source_split_4284;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    out_$i65 := $M.34;
    goto corral_source_split_4283;

  $bb88:
    assume out_$i64 == 1;
    goto corral_source_split_4282;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 2);
    goto corral_source_split_4280;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i63 := $M.44;
    goto corral_source_split_4279;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.35 := out_$i62;
    call {:si_unique_call 955} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_4277;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i61, 1);
    goto corral_source_split_4276;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    out_$i61 := $M.35;
    goto corral_source_split_4275;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 954} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4274;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} gdm_usb_disconnect(out_$p60);
    goto corral_source_split_4273;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    out_$p60 := $M.36;
    goto corral_source_split_4272;

  $bb85:
    assume out_$i59 == 1;
    goto corral_source_split_4271;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 0);
    goto corral_source_split_4269;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    out_$i58 := $M.34;
    goto corral_source_split_4268;

  $bb82:
    assume out_$i57 == 1;
    goto corral_source_split_4267;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 3);
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$i56 := $M.44;
    goto corral_source_split_4225;

  $bb58:
    assume out_$i37 == 1;
    goto corral_source_split_4224;

  $bb57:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i35, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb83:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb84;

  $bb86:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb84;

  $bb89:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb90;

  $bb92:
    assume {:verifier.code 0} true;
    assume !(out_$i66 == 1);
    goto $bb90;

  $bb95:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 960} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4299;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} out_vslice_dummy_var_192 := gdm_usb_suspend(out_$p72, out_$i74);
    goto corral_source_split_4298;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.22, out_$p73);
    goto corral_source_split_4297;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4296;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    out_$p72 := $M.36;
    goto corral_source_split_4295;

  $bb94:
    assume out_$i71 == 1;
    goto corral_source_split_4294;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 2);
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$i70 := $M.44;
    goto corral_source_split_4229;

  $bb60:
    assume out_$i38 == 1;
    goto corral_source_split_4228;

  $bb59:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i35, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb98:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 963} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4309;

  $bb99:
    assume out_$i81 == 1;
    goto corral_source_split_4308;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i80 := $M.49;
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.49 := out_$i79;
    call {:si_unique_call 962} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_4304;

  SeqInstr_243:
    goto corral_source_split_4303;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} out_$i79 := gdm_usb_resume(out_$p78);
    goto SeqInstr_242;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$p78 := $M.36;
    goto corral_source_split_4302;

  $bb97:
    assume out_$i77 == 1;
    goto corral_source_split_4301;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 3);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$i76 := $M.44;
    goto corral_source_split_4233;

  $bb62:
    assume out_$i39 == 1;
    goto corral_source_split_4232;

  $bb61:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i35, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} ldv_stop();
    goto corral_source_split_4311;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb64;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb64;

  $bb107:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_246:
    goto corral_source_split_4314;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} invoke_work_2();
    goto SeqInstr_245;

  $bb106:
    assume out_$i83 == 1;
    goto corral_source_split_4313;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$i82 := $M.45;
    goto corral_source_split_4168;

  $bb9:
    assume out_$i9 == 1;
    goto corral_source_split_4167;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i5, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} ldv_stop();
    goto corral_source_split_4316;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i9 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb11;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_vslice_dummy_var_192 := main_loop_$bb1(in_$p0, in_$p2, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$p73, out_$i74, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_vslice_dummy_var_192);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p2: ref, in_$i5: i32, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i32, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$i79: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i1, in_vslice_dummy_var_192: i32) returns (out_$i5: i32, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i32, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$i79: i32, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i1, out_vslice_dummy_var_192: i32);
  modifies $M.16, $M.32, $M.0, $M.33, $M.34, $M.35, $M.2, $M.17, $M.3, $CurrAddr, $M.7, $M.6, $M.9, $M.8, $M.11, $M.10, $M.13, $M.12, assertsPassed, $M.14, $M.21, $M.43, $M.46, $M.19, $M.23, $M.5, $M.15, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.44, $M.36, $M.47, $M.18, $M.48, $M.4, $M.49, $M.37, $M.38, $M.39, $M.40;


