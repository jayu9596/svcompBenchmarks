var $M.0: [ref]i8;

var $M.1: i8;

var $M.2: i8;

var $M.3: [ref]ref;

var $M.32: i32;

var $M.33: ref;

var $M.35: [ref]i8;

var $M.36: [ref]i32;

var $M.37: [ref]i8;

var $M.38: [ref]i64;

var $M.39: [ref]i64;

var $M.40: [ref]i64;

var $M.41: [ref]i64;

var $M.42: [ref]i8;

var $M.43: [ref]i64;

var $M.44: [ref]i8;

var $M.45: [ref]i64;

var $M.46: [ref]i8;

var $M.47: [ref]i64;

var $M.48: [ref]i64;

var $M.49: [ref]i8;

var $M.50: [ref]i32;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]i32;

var $M.56: [ref]i32;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]i16;

var $M.61: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]i32;

var $M.65: [ref]ref;

var $M.66: [ref]i32;

var $M.68: [ref]ref;

var $M.74: ref;

var $M.75: ref;

var $M.76: ref;

var $M.77: ref;

var $M.78: ref;

var $M.79: ref;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $M.105: i32;

var $M.106: i32;

var $M.107: i32;

var $M.108: i32;

var $M.109: i32;

var $M.110: i32;

var $M.111: i32;

var $M.112: i32;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.116: i32;

var $M.117: i32;

var $M.118: i32;

var $M.119: [ref]i8;

var $M.120: [ref]ref;

var $M.121: [ref]ref;

var $M.122: [ref]ref;

var $M.123: [ref]ref;

var $M.124: [ref]i32;

var $M.125: [ref]ref;

var $M.126: [ref]i32;

var $M.127: [ref]ref;

var $M.128: [ref]i64;

var $M.129: [ref]i64;

var $M.175: [ref]i8;

var $M.176: [ref]i8;

var $M.177: [ref]ref;

var $M.178: [ref]ref;

var $M.179: [ref]ref;

var $M.180: [ref]ref;

var $M.181: [ref]ref;

var $M.182: [ref]ref;

var $M.183: [ref]ref;

var $M.184: [ref]ref;

var $M.185: [ref]ref;

var $M.186: [ref]ref;

var $M.187: [ref]ref;

var $M.188: [ref]ref;

var $M.189: [ref]ref;

var $M.190: [ref]ref;

var $M.191: [ref]i8;

var $M.192: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 371970);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_timer_state_1: ref;

axiom ldv_timer_state_1 == $sub.ref(0, 2056);

const model_emu10k1: ref;

axiom model_emu10k1 == $sub.ref(0, 3168);

const .str: ref;

axiom .str == $sub.ref(0, 4200);

const {:count 32} enable: ref;

axiom enable == $sub.ref(0, 5256);

const snd_dummy_pm: ref;

axiom snd_dummy_pm == $sub.ref(0, 6464);

const snd_dummy_driver: ref;

axiom snd_dummy_driver == $sub.ref(0, 7664);

const {:count 32} devices: ref;

axiom devices == $sub.ref(0, 8944);

const {:count 2} dummy_page: ref;

axiom dummy_page == $sub.ref(0, 9984);

const dummy_hrtimer_ops: ref;

axiom dummy_hrtimer_ops == $sub.ref(0, 11056);

const hrtimer: ref;

axiom hrtimer == $sub.ref(0, 12081);

const dummy_systimer_ops: ref;

axiom dummy_systimer_ops == $sub.ref(0, 13153);

const {:count 11} fields: ref;

axiom fields == $sub.ref(0, 14441);

const {:count 4} db_scale_dummy: ref;

axiom db_scale_dummy == $sub.ref(0, 15481);

const snd_dummy_controls: ref;

axiom snd_dummy_controls == $sub.ref(0, 17385);

const dummy_pcm_hardware: ref;

axiom dummy_pcm_hardware == $sub.ref(0, 18489);

const {:count 32} pcm_devs: ref;

axiom pcm_devs == $sub.ref(0, 19641);

const dummy_pcm_ops: ref;

axiom dummy_pcm_ops == $sub.ref(0, 20777);

const dummy_pcm_ops_no_buf: ref;

axiom dummy_pcm_ops_no_buf == $sub.ref(0, 21913);

const fake_buffer: ref;

axiom fake_buffer == $sub.ref(0, 22938);

const {:count 32} pcm_substreams: ref;

axiom pcm_substreams == $sub.ref(0, 24090);

const {:count 32} model: ref;

axiom model == $sub.ref(0, 25370);

const {:count 32} id: ref;

axiom id == $sub.ref(0, 26650);

const {:count 32} index: ref;

axiom index == $sub.ref(0, 27802);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 28830);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 29858);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 30886);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 31914);

const ldv_retval_13: ref;

axiom ldv_retval_13 == $sub.ref(0, 32942);

const ldv_retval_21: ref;

axiom ldv_retval_21 == $sub.ref(0, 33970);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 34998);

const ldv_retval_12: ref;

axiom ldv_retval_12 == $sub.ref(0, 36026);

const ldv_retval_17: ref;

axiom ldv_retval_17 == $sub.ref(0, 37054);

const ldv_retval_14: ref;

axiom ldv_retval_14 == $sub.ref(0, 38082);

const ldv_retval_19: ref;

axiom ldv_retval_19 == $sub.ref(0, 39110);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 40138);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 41166);

const ldv_retval_24: ref;

axiom ldv_retval_24 == $sub.ref(0, 42194);

const ldv_retval_16: ref;

axiom ldv_retval_16 == $sub.ref(0, 43222);

const ldv_retval_15: ref;

axiom ldv_retval_15 == $sub.ref(0, 44250);

const ldv_retval_22: ref;

axiom ldv_retval_22 == $sub.ref(0, 45278);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 46306);

const ldv_retval_11: ref;

axiom ldv_retval_11 == $sub.ref(0, 47334);

const ldv_retval_23: ref;

axiom ldv_retval_23 == $sub.ref(0, 48362);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 49390);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 50418);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 51446);

const ldv_retval_18: ref;

axiom ldv_retval_18 == $sub.ref(0, 52474);

const ldv_retval_20: ref;

axiom ldv_retval_20 == $sub.ref(0, 53502);

const snd_dummy_driver_group0: ref;

axiom snd_dummy_driver_group0 == $sub.ref(0, 54534);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 55562);

const ldv_timer_list_1: ref;

axiom ldv_timer_list_1 == $sub.ref(0, 56594);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 57622);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 58650);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 59678);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 60706);

const dummy_hrtimer_ops_group0: ref;

axiom dummy_hrtimer_ops_group0 == $sub.ref(0, 61738);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 62766);

const dummy_pcm_ops_no_buf_group0: ref;

axiom dummy_pcm_ops_no_buf_group0 == $sub.ref(0, 63798);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 64826);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 65854);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 66882);

const dummy_systimer_ops_group0: ref;

axiom dummy_systimer_ops_group0 == $sub.ref(0, 67914);

const snd_dummy_pm_group1: ref;

axiom snd_dummy_pm_group1 == $sub.ref(0, 68946);

const dummy_pcm_ops_group0: ref;

axiom dummy_pcm_ops_group0 == $sub.ref(0, 69978);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 71006);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 72034);

const {:count 7} dummy_models: ref;

axiom dummy_models == $sub.ref(0, 73114);

const model_ca0106: ref;

axiom model_ca0106 == $sub.ref(0, 74226);

const model_ac97: ref;

axiom model_ac97 == $sub.ref(0, 75338);

const model_uda1341: ref;

axiom model_uda1341 == $sub.ref(0, 76450);

const model_ice1712: ref;

axiom model_ice1712 == $sub.ref(0, 77562);

const model_rme9652: ref;

axiom model_rme9652 == $sub.ref(0, 78674);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 79706);

const {:count 8} .str.2: ref;

axiom .str.2 == $sub.ref(0, 80738);

const {:count 8} .str.3: ref;

axiom .str.3 == $sub.ref(0, 81770);

const {:count 5} .str.4: ref;

axiom .str.4 == $sub.ref(0, 82799);

const {:count 7} .str.5: ref;

axiom .str.5 == $sub.ref(0, 83830);

const {:count 14} .str.15: ref;

axiom .str.15 == $sub.ref(0, 84868);

const {:count 22} .str.16: ref;

axiom .str.16 == $sub.ref(0, 85914);

const {:count 13} .str.17: ref;

axiom .str.17 == $sub.ref(0, 86951);

const {:count 21} .str.18: ref;

axiom .str.18 == $sub.ref(0, 87996);

const {:count 12} .str.19: ref;

axiom .str.19 == $sub.ref(0, 89032);

const {:count 20} .str.20: ref;

axiom .str.20 == $sub.ref(0, 90076);

const {:count 11} .str.21: ref;

axiom .str.21 == $sub.ref(0, 91111);

const {:count 19} .str.22: ref;

axiom .str.22 == $sub.ref(0, 92154);

const {:count 10} .str.13: ref;

axiom .str.13 == $sub.ref(0, 93188);

const {:count 18} .str.14: ref;

axiom .str.14 == $sub.ref(0, 94230);

const {:count 17} .str.23: ref;

axiom .str.23 == $sub.ref(0, 95271);

const {:count 5} .str.25: ref;

axiom .str.25 == $sub.ref(0, 96300);

const {:count 10} .str.26: ref;

axiom .str.26 == $sub.ref(0, 97334);

const {:count 8} .str.29: ref;

axiom .str.29 == $sub.ref(0, 98366);

const {:count 6} .str.32: ref;

axiom .str.32 == $sub.ref(0, 99396);

const {:count 6} .str.30: ref;

axiom .str.30 == $sub.ref(0, 100426);

const {:count 4} .str.33: ref;

axiom .str.33 == $sub.ref(0, 101454);

const {:count 9} .str.34: ref;

axiom .str.34 == $sub.ref(0, 102487);

const {:count 3} .str.35: ref;

axiom .str.35 == $sub.ref(0, 103514);

const {:count 9} .str.36: ref;

axiom .str.36 == $sub.ref(0, 104547);

const {:count 13} .str.37: ref;

axiom .str.37 == $sub.ref(0, 105584);

const {:count 13} .str.38: ref;

axiom .str.38 == $sub.ref(0, 106621);

const {:count 17} .str.39: ref;

axiom .str.39 == $sub.ref(0, 107662);

const {:count 4} .str.40: ref;

axiom .str.40 == $sub.ref(0, 108690);

const {:count 17} .str.41: ref;

axiom .str.41 == $sub.ref(0, 109731);

const {:count 17} .str.42: ref;

axiom .str.42 == $sub.ref(0, 110772);

const {:count 12} .str.43: ref;

axiom .str.43 == $sub.ref(0, 111808);

const {:count 12} .str.44: ref;

axiom .str.44 == $sub.ref(0, 112844);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 22} .str.6: ref;

axiom .str.6 == $sub.ref(0, 113890);

const {:count 10} .str.49: ref;

axiom .str.49 == $sub.ref(0, 114924);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 42} .str.7: ref;

axiom .str.7 == $sub.ref(0, 115990);

const {:count 6} .str.8: ref;

axiom .str.8 == $sub.ref(0, 117020);

const {:count 9} .str.9: ref;

axiom .str.9 == $sub.ref(0, 118053);

const {:count 10} .str.27: ref;

axiom .str.27 == $sub.ref(0, 119087);

const {:count 4} .str.28: ref;

axiom .str.28 == $sub.ref(0, 120115);

const {:count 2} .str.31: ref;

axiom .str.31 == $sub.ref(0, 121141);

const {:count 12} .str.46: ref;

axiom .str.46 == $sub.ref(0, 122177);

const {:count 6} .str.47: ref;

axiom .str.47 == $sub.ref(0, 123207);

const {:count 4} .str.48: ref;

axiom .str.48 == $sub.ref(0, 124235);

const {:count 4} .str.45: ref;

axiom .str.45 == $sub.ref(0, 125263);

const {:count 29} .str.11: ref;

axiom .str.11 == $sub.ref(0, 126316);

const {:count 12} .str.12: ref;

axiom .str.12 == $sub.ref(0, 127352);

const {:count 10} .str.10: ref;

axiom .str.10 == $sub.ref(0, 128386);

const {:count 43} .str.50: ref;

axiom .str.50 == $sub.ref(0, 129453);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 130485);

const {:count 3} .str.1.84: ref;

axiom .str.1.84 == $sub.ref(0, 131512);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 132550);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 133578);

const emu10k1_playback_constraints: ref;

axiom emu10k1_playback_constraints == $sub.ref(0, 134610);

procedure emu10k1_playback_constraints($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation emu10k1_playback_constraints($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i1 := snd_pcm_hw_constraint_integer($p0, 15);
    call {:si_unique_call 1} {:cexpr "err"} boogie_si_record_i32($i1);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i4 := snd_pcm_hw_constraint_minmax($p0, 18, 256, $sub.i32(0, 1));
    call {:si_unique_call 3} {:cexpr "err"} boogie_si_record_i32($i4);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 135642);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const snd_pcm_hw_constraint_integer: ref;

axiom snd_pcm_hw_constraint_integer == $sub.ref(0, 136674);

procedure snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_hw_constraint_integer($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} {:cexpr "snd_pcm_hw_constraint_integer:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 6} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_pcm_hw_constraint_minmax: ref;

axiom snd_pcm_hw_constraint_minmax == $sub.ref(0, 137706);

procedure snd_pcm_hw_constraint_minmax($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_hw_constraint_minmax($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 7} {:cexpr "snd_pcm_hw_constraint_minmax:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 8} {:cexpr "snd_pcm_hw_constraint_minmax:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 9} {:cexpr "snd_pcm_hw_constraint_minmax:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 1} true;
    call {:si_unique_call 10} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 11} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dummy_pcm_open: ref;

axiom dummy_pcm_open == $sub.ref(0, 138738);

procedure dummy_pcm_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $M.33, $M.32, $M.44, $M.37, $M.43, $M.45, $M.46, $M.59, $M.60, $M.61, $CurrAddr, $M.36, $M.47, $M.48, $M.68, assertsPassed;



implementation dummy_pcm_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i68: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i18: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(16, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, dummy_systimer_ops);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    call {:si_unique_call 12} $i16 := devirtbounce($p15, $p0);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 13} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 1176)), $mul.ref(480, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p19);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p20);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 14} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p21, $p22, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(0, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 992)), $mul.ref(24, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(0, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 992)), $mul.ref(24, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 2);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p5);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i78 := $i16;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i68 := $i78;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i68, 0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    call {:si_unique_call 19} devirtbounce.2($p83, $p0);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i18 := $i68;
    goto $bb6;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    call {:si_unique_call 17} $i77 := devirtbounce.1($p74, $p76);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 18} {:cexpr "err"} boogie_si_record_i32($i77);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb25;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i67 := $i16;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb22;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    call {:si_unique_call 15} $i66 := devirtbounce.1($p63, $p65);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 16} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb21;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1176)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, $sub.i32(0, 4));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1176)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i50);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1176)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 257));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1176)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1176)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 512);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 1176)), $mul.ref(480, 1)), $mul.ref(0, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i38);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb6;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, dummy_hrtimer_ops);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dummy_pcm_close: ref;

axiom dummy_pcm_close == $sub.ref(0, 139770);

procedure dummy_pcm_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_pcm_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(16, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 20} devirtbounce.2($p7, $p0);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_pcm_lib_ioctl: ref;

axiom snd_pcm_lib_ioctl == $sub.ref(0, 140802);

procedure snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 21} {:cexpr "snd_pcm_lib_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 1} true;
    call {:si_unique_call 22} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 23} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dummy_pcm_hw_params: ref;

axiom dummy_pcm_hw_params == $sub.ref(0, 141834);

procedure dummy_pcm_hw_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dummy_pcm_hw_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $i16: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i2 := $M.2;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p12 := hw_param_interval_c($p1, 18);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i16 := snd_pcm_lib_malloc_pages($p0, $i15);
    call {:si_unique_call 27} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p4 := hw_param_interval_c($p1, 18);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(856, 1));
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i7);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const dummy_pcm_hw_free: ref;

axiom dummy_pcm_hw_free == $sub.ref(0, 142866);

procedure dummy_pcm_hw_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_pcm_hw_free($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i1;
  var $i4: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i1 := $M.2;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i4 := snd_pcm_lib_free_pages($p0);
    call {:si_unique_call 29} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i3 := $i4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;
}



const dummy_pcm_prepare: ref;

axiom dummy_pcm_prepare == $sub.ref(0, 143898);

procedure dummy_pcm_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $M.33, $M.32, $M.44, $M.37, $M.43, $M.45, $M.46, $M.59, $M.60, $M.61, $CurrAddr, $M.36, $M.47, $M.48, $M.68, assertsPassed;



implementation dummy_pcm_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(16, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 30} $i8 := devirtbounce($p7, $p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const dummy_pcm_trigger: ref;

axiom dummy_pcm_trigger == $sub.ref(0, 144930);

procedure dummy_pcm_trigger($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $M.33, $M.32, $M.44, $M.37, $M.43, $M.45, $M.46, $M.59, $M.60, $M.61, $CurrAddr, $M.36, $M.47, $M.48, $M.68, assertsPassed;



implementation dummy_pcm_trigger($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} {:cexpr "dummy_pcm_trigger:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(16, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 35} $i15 := devirtbounce($p14, $p0);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 36} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb17;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    call {:si_unique_call 33} $i21 := devirtbounce($p20, $p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 34} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb17;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb11:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb15:
    assume $i10 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const dummy_pcm_pointer: ref;

axiom dummy_pcm_pointer == $sub.ref(0, 145962);

procedure dummy_pcm_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.32, $M.0, $M.37, $M.38, $M.39, $M.40, $M.36, $CurrAddr, $M.41, $M.42;



implementation dummy_pcm_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(16, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 37} $i8 := devirtbounce.3($p7, $p0);
    call {:si_unique_call 38} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const dummy_pcm_copy: ref;

axiom dummy_pcm_copy == $sub.ref(0, 146994);

procedure dummy_pcm_copy($p0: ref, $i1: i32, $i2: i64, $p3: ref, $i4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_pcm_copy($p0: ref, $i1: i32, $i2: i64, $p3: ref, $i4: i64) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} {:cexpr "dummy_pcm_copy:arg:channel"} boogie_si_record_i32($i1);
    call {:si_unique_call 40} {:cexpr "dummy_pcm_copy:arg:pos"} boogie_si_record_i64($i2);
    call {:si_unique_call 41} {:cexpr "dummy_pcm_copy:arg:count"} boogie_si_record_i64($i4);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_pcm_silence: ref;

axiom dummy_pcm_silence == $sub.ref(0, 148026);

procedure dummy_pcm_silence($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_pcm_silence($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} {:cexpr "dummy_pcm_silence:arg:channel"} boogie_si_record_i32($i1);
    call {:si_unique_call 43} {:cexpr "dummy_pcm_silence:arg:pos"} boogie_si_record_i64($i2);
    call {:si_unique_call 44} {:cexpr "dummy_pcm_silence:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_pcm_page: ref;

axiom dummy_pcm_page == $sub.ref(0, 149058);

procedure dummy_pcm_page($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dummy_pcm_page($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} {:cexpr "dummy_pcm_page:arg:offset"} boogie_si_record_i64($i1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(60, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref($i4, 8));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.3, $p5);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i8 := __phys_addr($i7);
    call {:si_unique_call 47} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i64($i8, 12);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i9, 64));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 150090);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 48} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 49} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 50} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_pcm_lib_free_pages: ref;

axiom snd_pcm_lib_free_pages == $sub.ref(0, 151122);

procedure snd_pcm_lib_free_pages($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_free_pages($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 51} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 52} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hw_param_interval_c: ref;

axiom hw_param_interval_c == $sub.ref(0, 152154);

procedure hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} {:cexpr "hw_param_interval_c:arg:var"} boogie_si_record_i32($i1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(260, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 8));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 12));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const snd_pcm_lib_malloc_pages: ref;

axiom snd_pcm_lib_malloc_pages == $sub.ref(0, 153186);

procedure snd_pcm_lib_malloc_pages($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_malloc_pages($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 54} {:cexpr "snd_pcm_lib_malloc_pages:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 55} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 56} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 154218);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const snd_dummy_volume_info: ref;

axiom snd_dummy_volume_info == $sub.ref(0, 155250);

procedure snd_dummy_volume_info($p0: ref, $p1: ref) returns ($r: i32);



const snd_dummy_volume_get: ref;

axiom snd_dummy_volume_get == $sub.ref(0, 156282);

procedure snd_dummy_volume_get($p0: ref, $p1: ref) returns ($r: i32);



const snd_dummy_volume_put: ref;

axiom snd_dummy_volume_put == $sub.ref(0, 157314);

procedure snd_dummy_volume_put($p0: ref, $p1: ref) returns ($r: i32);



const snd_ctl_boolean_stereo_info: ref;

axiom snd_ctl_boolean_stereo_info == $sub.ref(0, 158346);

procedure snd_ctl_boolean_stereo_info($p0: ref, $p1: ref) returns ($r: i32);



const snd_dummy_capsrc_get: ref;

axiom snd_dummy_capsrc_get == $sub.ref(0, 159378);

procedure snd_dummy_capsrc_get($p0: ref, $p1: ref) returns ($r: i32);



const snd_dummy_capsrc_put: ref;

axiom snd_dummy_capsrc_put == $sub.ref(0, 160410);

procedure snd_dummy_capsrc_put($p0: ref, $p1: ref) returns ($r: i32);



const snd_dummy_iobox_info: ref;

axiom snd_dummy_iobox_info == $sub.ref(0, 161442);

procedure snd_dummy_iobox_info($p0: ref, $p1: ref) returns ($r: i32);



const snd_dummy_iobox_get: ref;

axiom snd_dummy_iobox_get == $sub.ref(0, 162474);

procedure snd_dummy_iobox_get($p0: ref, $p1: ref) returns ($r: i32);



const snd_dummy_iobox_put: ref;

axiom snd_dummy_iobox_put == $sub.ref(0, 163506);

procedure snd_dummy_iobox_put($p0: ref, $p1: ref) returns ($r: i32);



const snd_ctl_notify: ref;

axiom snd_ctl_notify == $sub.ref(0, 164538);

procedure snd_ctl_notify($p0: ref, $i1: i32, $p2: ref);



const snd_ctl_enum_info: ref;

axiom snd_ctl_enum_info == $sub.ref(0, 165570);

procedure snd_ctl_enum_info($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 166602);

procedure spin_lock_irq($p0: ref);



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 167634);

procedure spin_unlock_irq($p0: ref);



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 168666);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.32 := 0;
    call {:si_unique_call 57} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_7: ref;

axiom ldv_spin_unlock_irq_7 == $sub.ref(0, 169698);

procedure ldv_spin_unlock_irq_7($p0: ref);



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 170730);

procedure _raw_spin_unlock_irq($p0: ref);



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 171762);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.32;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 58} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_4: ref;

axiom ldv_spin_lock_irq_4 == $sub.ref(0, 172794);

procedure ldv_spin_lock_irq_4($p0: ref);



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 173826);

procedure _raw_spin_lock_irq($p0: ref);



const dummy_systimer_create: ref;

axiom dummy_systimer_create == $sub.ref(0, 174858);

procedure dummy_systimer_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.33, $CurrAddr, assertsPassed;



implementation dummy_systimer_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i13: i64;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i6: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p2 := kzalloc(240, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p2);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_49 := reg_timer_1($p11);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p3);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(72, 1)), $mul.ref(40, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i13);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(72, 1)), $mul.ref(32, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, dummy_systimer_callback);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_50 := spinlock_check($p18);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} __raw_spin_lock_init($p22, .str.6, $p1);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p0);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const dummy_systimer_free: ref;

axiom dummy_systimer_free == $sub.ref(0, 175890);

procedure dummy_systimer_free($p0: ref);
  free requires assertsPassed;



implementation dummy_systimer_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} kfree($p4);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    return;
}



const dummy_systimer_prepare: ref;

axiom dummy_systimer_prepare == $sub.ref(0, 176922);

procedure dummy_systimer_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dummy_systimer_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, 250);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(112, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i16);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 250);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(228, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_systimer_start: ref;

axiom dummy_systimer_start == $sub.ref(0, 177954);

procedure dummy_systimer_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.32;



implementation dummy_systimer_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} spin_lock($p6);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, jiffies);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p8, $i7);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} dummy_systimer_rearm($p5);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} spin_unlock($p9);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_systimer_stop: ref;

axiom dummy_systimer_stop == $sub.ref(0, 178986);

procedure dummy_systimer_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32;



implementation dummy_systimer_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} spin_lock($p6);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} vslice_dummy_var_51 := ldv_del_timer_19($p7);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} spin_unlock($p9);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_systimer_pointer: ref;

axiom dummy_systimer_pointer == $sub.ref(0, 180018);

procedure dummy_systimer_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.32, $M.0;



implementation dummy_systimer_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} spin_lock($p6);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} dummy_systimer_update($p5);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32($i8, 250);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    call {:si_unique_call 73} {:cexpr "pos"} boogie_si_record_i64($i10);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} spin_unlock($p11);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 181050);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.32;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} ldv_spin_lock();
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} ldv_spin_lock_1($p0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    return;
}



const dummy_systimer_update: ref;

axiom dummy_systimer_update == $sub.ref(0, 182082);

procedure dummy_systimer_update($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dummy_systimer_update($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $i1 := $load.i64($M.0, jiffies);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i1, $i3);
    call {:si_unique_call 77} {:cexpr "delta"} boogie_si_record_i64($i4);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $i4);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(200, 1));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i12, $i4);
    call {:si_unique_call 78} {:cexpr "delta"} boogie_si_record_i64($i13);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i13);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i15, $i16);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i23 := $uge.i32($i20, $i22);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i36 := $ule.i64($i35, $i13);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i13);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i51, $i52);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p37, $i38, $i39, $p40, $p41, $i42, $p43, $i44, $i45, $p46, $i47, $i48, $i49 := dummy_systimer_update_loop_$bb16($p0, $i13, $p33, $p37, $i38, $i39, $p40, $p41, $i42, $p43, $i44, $i45, $p46, $i47, $i48, $i49);
    goto $bb16_last;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(228, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(228, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i42, $i44);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p33);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i49 := $ule.i64($i48, $i13);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i49 == 1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb18_dummy;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $p24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32 := dummy_systimer_update_loop_$bb8($p0, $p19, $p21, $p24, $i25, $p26, $i27, $i28, $p29, $i30, $i31, $i32);
    goto $bb8_last;

  $bb9:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i25, $i27);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p19);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p21);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i32 := $uge.i32($i30, $i31);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 183114);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.32;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} ldv_spin_unlock();
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ldv_spin_unlock_5($p0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_5: ref;

axiom ldv_spin_unlock_5 == $sub.ref(0, 184146);

procedure ldv_spin_unlock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} _raw_spin_unlock($p2);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 185178);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_1: ref;

axiom ldv_spin_lock_1 == $sub.ref(0, 186210);

procedure ldv_spin_lock_1($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} _raw_spin_lock($p2);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 187242);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_19: ref;

axiom ldv_del_timer_19 == $sub.ref(0, 188274);

procedure ldv_del_timer_19($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_del_timer_19($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i1 := del_timer($p0);
    call {:si_unique_call 84} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} disable_suitable_timer_1($p0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 189306);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 190338);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p2 := $M.33;
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, $i3);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dummy_systimer_rearm: ref;

axiom dummy_systimer_rearm == $sub.ref(0, 191370);

procedure dummy_systimer_rearm($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dummy_systimer_rearm($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i2, $i4);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(224, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i32($i6, $i8);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, jiffies);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i10, $i11);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1)), $mul.ref(16, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i12);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 240)), $mul.ref(72, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} add_timer($p15);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    return;
}



const add_timer: ref;

axiom add_timer == $sub.ref(0, 192402);

procedure add_timer($p0: ref);
  free requires assertsPassed;



implementation add_timer($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 193434);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} free_($p0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 194466);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 91} $free($p0);
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 195498);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 93} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} ldv_check_alloc_flags($i1);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $r := $0.ref;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 196530);

procedure reg_timer_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33;



implementation reg_timer_1($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $M.33 := $p0;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(1);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_systimer_callback: ref;

axiom dummy_systimer_callback == $sub.ref(0, 197562);

procedure dummy_systimer_callback($i0: i64);
  free requires assertsPassed;
  modifies $M.32, $M.0;



implementation dummy_systimer_callback($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} {:cexpr "dummy_systimer_callback:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} ldv_spin_lock();
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} dummy_systimer_update($p1);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} dummy_systimer_rearm($p1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(228, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 100} {:cexpr "elapsed"} boogie_si_record_i32($i3);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(228, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(0, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} spin_unlock_irqrestore($p5, $u0);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i3, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 240)), $mul.ref(232, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} snd_pcm_period_elapsed($p8);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 198594);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 199626);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 200658);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.32;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} ldv_spin_unlock();
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} ldv_spin_unlock_irqrestore_8($p0, $i1);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_period_elapsed: ref;

axiom snd_pcm_period_elapsed == $sub.ref(0, 201690);

procedure snd_pcm_period_elapsed($p0: ref);
  free requires assertsPassed;



implementation snd_pcm_period_elapsed($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_8: ref;

axiom ldv_spin_unlock_irqrestore_8 == $sub.ref(0, 202722);

procedure ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_8($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "ldv_spin_unlock_irqrestore_8:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 203754);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 204786);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i1 := $M.32;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} ldv_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 205818);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const dummy_hrtimer_create: ref;

axiom dummy_hrtimer_create == $sub.ref(0, 206850);

procedure dummy_hrtimer_create($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation dummy_hrtimer_create($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $p1 := kzalloc(168, 208);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} hrtimer_init($p10, 1, 1);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, dummy_hrtimer_callback);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(160, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} atomic_set($p14, 0);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 168)), $mul.ref(120, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} tasklet_init($p15, dummy_hrtimer_pcm_elapsed, $i16);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const dummy_hrtimer_free: ref;

axiom dummy_hrtimer_free == $sub.ref(0, 207882);

procedure dummy_hrtimer_free($p0: ref);
  free requires assertsPassed;



implementation dummy_hrtimer_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} dummy_hrtimer_sync($p5);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} kfree($p6);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    return;
}



const dummy_hrtimer_prepare: ref;

axiom dummy_hrtimer_prepare == $sub.ref(0, 208914);

procedure dummy_hrtimer_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.44, $CurrAddr, $M.36;



implementation dummy_hrtimer_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} dummy_hrtimer_sync($p6);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(112, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 120} {:cexpr "period"} boogie_si_record_i32($i9);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 121} {:cexpr "rate"} boogie_si_record_i32($i11);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i12 := $udiv.i32($i9, $i11);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    call {:si_unique_call 122} {:cexpr "sec"} boogie_si_record_i64($i13);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i14 := $urem.i32($i9, $i11);
    call {:si_unique_call 123} {:cexpr "period"} boogie_si_record_i32($i14);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i16 := $mul.i64($i15, 1000000000);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i11);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i16, $i17);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i18, 1);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i20 := div_u64($i19, $i11);
    call {:si_unique_call 125} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(8, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i22 := ktime_set($i13, $i20);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i22);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p21);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 127} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p24, $p25, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_hrtimer_start: ref;

axiom dummy_hrtimer_start == $sub.ref(0, 209946);

procedure dummy_hrtimer_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.37, $M.43, $CurrAddr;



implementation dummy_hrtimer_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(0, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i9 := hrtimer_cb_get_time($p8);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, $i9);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p7);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 130} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p11, $p12, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} vslice_dummy_var_52 := hrtimer_start($p13, $i16, 1);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} atomic_set($p18, 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_hrtimer_stop: ref;

axiom dummy_hrtimer_stop == $sub.ref(0, 210978);

procedure dummy_hrtimer_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dummy_hrtimer_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} atomic_set($p6, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} vslice_dummy_var_53 := hrtimer_cancel($p7);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const dummy_hrtimer_pointer: ref;

axiom dummy_hrtimer_pointer == $sub.ref(0, 212010);

procedure dummy_hrtimer_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.37, $M.38, $M.39, $M.40, $M.36, $CurrAddr, $M.41, $M.42, $M.0;



implementation dummy_hrtimer_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i30: i32;
  var $i31: i64;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_54: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 704)), $mul.ref(408, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1176)), $mul.ref(464, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 168)), $mul.ref(24, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $i10 := hrtimer_cb_get_time($p9);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.35 := $store.i64($M.35, $p11, $i10);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.35;
    cmdloc_dummy_var_10 := $M.35;
    call {:si_unique_call 139} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.35 := cmdloc_dummy_var_11;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.35, $p15);
    $p17 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 168)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $i19 := ktime_us_delta($i16, $i18);
    call {:si_unique_call 141} {:cexpr "tmp___0"} boogie_si_record_i64($i19);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 1176)), $mul.ref(100, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i23 := $mul.i64($i22, $i19);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 999999);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} $i25 := div_u64($i24, 1000000);
    call {:si_unique_call 143} {:cexpr "delta"} boogie_si_record_i64($i25);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 1176)), $mul.ref(128, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_54 := div_u64_rem($i25, $i28, $p1);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.36, $p1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;
}



const hrtimer_cb_get_time: ref;

axiom hrtimer_cb_get_time == $sub.ref(0, 213042);

procedure hrtimer_cb_get_time($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.37, $CurrAddr;



implementation hrtimer_cb_get_time($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 148} $i8 := devirtbounce.4($p7);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $M.37 := $store.i64($M.37, $p9, $i8);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p3);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.37;
    cmdloc_dummy_var_13 := $M.37;
    call {:si_unique_call 149} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p10, $p11, 8, $zext.i32.i64(8), 0 == 1);
    $M.37 := cmdloc_dummy_var_14;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.37;
    cmdloc_dummy_var_16 := $M.37;
    call {:si_unique_call 150} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.37 := cmdloc_dummy_var_17;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.37, $p14);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const ktime_us_delta: ref;

axiom ktime_us_delta == $sub.ref(0, 214074);

procedure ktime_us_delta($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.38, $M.39, $M.40, $M.41, $M.42, $CurrAddr, $M.0;



implementation ktime_us_delta($i0: i64, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.38 := $store.i64($M.38, $p5, $i0);
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.39 := $store.i64($M.39, $p6, $i1);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.38, $p7);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.39, $p9);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64($i8, $i10);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $M.40 := $store.i64($M.40, $p12, $i11);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.40, $p13);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i15 := ktime_to_us($i14);
    call {:si_unique_call 155} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const div_u64: ref;

axiom div_u64 == $sub.ref(0, 215106);

procedure div_u64($i0: i64, $i1: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.36, $CurrAddr;



implementation div_u64($i0: i64, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 157} {:cexpr "div_u64:arg:dividend"} boogie_si_record_i64($i0);
    call {:si_unique_call 158} {:cexpr "div_u64:arg:divisor"} boogie_si_record_i32($i1);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i3 := div_u64_rem($i0, $i1, $p2);
    call {:si_unique_call 160} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const div_u64_rem: ref;

axiom div_u64_rem == $sub.ref(0, 216138);

procedure div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.36;



implementation div_u64_rem($i0: i64, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "div_u64_rem:arg:dividend"} boogie_si_record_i64($i0);
    call {:si_unique_call 162} {:cexpr "div_u64_rem:arg:divisor"} boogie_si_record_i32($i1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i4 := $urem.i64($i0, $i3);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $M.36 := $store.i32($M.36, $p2, $i5);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i64($i0, $i6);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ktime_to_us: ref;

axiom ktime_to_us == $sub.ref(0, 217170);

procedure ktime_to_us($i0: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.0, $CurrAddr;



implementation ktime_to_us($i0: i64) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p5, $i0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.41, $p6);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p8 := ns_to_timeval($i7);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i11 := $extractvalue($p8, 0);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p10, $i11);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i13 := $extractvalue($p8, 1);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p12, $i13);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.42;
    cmdloc_dummy_var_19 := $M.42;
    call {:si_unique_call 168} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p14, $p15, 16, $zext.i32.i64(8), 0 == 1);
    $M.42 := cmdloc_dummy_var_20;
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.42;
    cmdloc_dummy_var_22 := $M.42;
    call {:si_unique_call 169} cmdloc_dummy_var_23 := $memcpy.i8(cmdloc_dummy_var_21, cmdloc_dummy_var_22, $p16, $p17, 16, $zext.i32.i64(8), 0 == 1);
    $M.42 := cmdloc_dummy_var_23;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.42, $p18);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i20 := $mul.i64($i19, 1000000);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.42, $p21);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i20, $i22);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;
}



const ns_to_timeval: ref;

axiom ns_to_timeval == $sub.ref(0, 218202);

procedure ns_to_timeval($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ns_to_timeval($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 171} {:cexpr "ns_to_timeval:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p2 := external_alloc();
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 1} true;
    $i4 := $ne.ref($p3, $0.ref);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 1} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 1} true;
    call {:si_unique_call 173} __VERIFIER_assume($i5);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p3);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 174} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p6, $p7, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_757;

  corral_source_split_757:
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_759;

  corral_source_split_759:
    assume $extractvalue($p11, 1) == $extractvalue($u1, 1);
    assume $extractvalue($p11, 0) == $i10;
    goto corral_source_split_760;

  corral_source_split_760:
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_762;

  corral_source_split_762:
    assume $extractvalue($p14, 0) == $extractvalue($p11, 0);
    assume $extractvalue($p14, 1) == $i13;
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 219234);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 1} true;
    call {:si_unique_call 175} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 176} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 220266);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    return;
}



const hrtimer_cancel: ref;

axiom hrtimer_cancel == $sub.ref(0, 221298);

procedure hrtimer_cancel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation hrtimer_cancel($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 178} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 179} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const hrtimer_start: ref;

axiom hrtimer_start == $sub.ref(0, 222330);

procedure hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.43, $CurrAddr;



implementation hrtimer_start($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p4, $i1);
    call {:si_unique_call 181} {:cexpr "hrtimer_start:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 1} true;
    call {:si_unique_call 182} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dummy_hrtimer_sync: ref;

axiom dummy_hrtimer_sync == $sub.ref(0, 223362);

procedure dummy_hrtimer_sync($p0: ref);
  free requires assertsPassed;



implementation dummy_hrtimer_sync($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 168)), $mul.ref(120, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} tasklet_kill($p1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    return;
}



const ktime_set: ref;

axiom ktime_set == $sub.ref(0, 224394);

procedure ktime_set($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.44, $CurrAddr;



implementation ktime_set($i0: i64, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 188} {:cexpr "ktime_set:arg:secs"} boogie_si_record_i64($i0);
    call {:si_unique_call 189} {:cexpr "ktime_set:arg:nsecs"} boogie_si_record_i64($i1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i64($i0, 9223372035);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 191} {:cexpr "tmp"} boogie_si_record_i64($i8);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $mul.i64($i0, 1000000000);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i13, $i1);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p15, $i14);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.44;
    cmdloc_dummy_var_31 := $M.44;
    call {:si_unique_call 193} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p16, $p17, 8, $zext.i32.i64(8), 0 == 1);
    $M.44 := cmdloc_dummy_var_32;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.44, $p18);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p3);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p10, 9223372036854775807);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.44;
    cmdloc_dummy_var_28 := $M.44;
    call {:si_unique_call 192} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p11, $p12, 8, $zext.i32.i64(8), 0 == 1);
    $M.44 := cmdloc_dummy_var_29;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 225426);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 195} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const tasklet_kill: ref;

axiom tasklet_kill == $sub.ref(0, 226458);

procedure tasklet_kill($p0: ref);
  free requires assertsPassed;



implementation tasklet_kill($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    return;
}



const hrtimer_init: ref;

axiom hrtimer_init == $sub.ref(0, 227490);

procedure hrtimer_init($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation hrtimer_init($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "hrtimer_init:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 197} {:cexpr "hrtimer_init:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    return;
}



const dummy_hrtimer_callback: ref;

axiom dummy_hrtimer_callback == $sub.ref(0, 228522);

procedure dummy_hrtimer_callback($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $CurrAddr;



implementation dummy_hrtimer_callback($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p9: ref;
  var $i10: i64;
  var $i6: i32;
  var vslice_dummy_var_55: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 168)), $mul.ref(16, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i4 := atomic_read($p3);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 168)), $mul.ref(120, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} tasklet_schedule($p7);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 168)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} vslice_dummy_var_55 := hrtimer_forward_now($p0, $i10);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const dummy_hrtimer_pcm_elapsed: ref;

axiom dummy_hrtimer_pcm_elapsed == $sub.ref(0, 229554);

procedure dummy_hrtimer_pcm_elapsed($i0: i64);
  free requires assertsPassed;



implementation dummy_hrtimer_pcm_elapsed($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} {:cexpr "dummy_hrtimer_pcm_elapsed:arg:priv"} boogie_si_record_i64($i0);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i3 := atomic_read($p2);
    call {:si_unique_call 204} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(160, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} snd_pcm_period_elapsed($p6);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tasklet_init: ref;

axiom tasklet_init == $sub.ref(0, 230586);

procedure tasklet_init($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation tasklet_init($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} {:cexpr "tasklet_init:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 231618);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const tasklet_schedule: ref;

axiom tasklet_schedule == $sub.ref(0, 232650);

procedure tasklet_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tasklet_schedule($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i2 := test_and_set_bit(0, $p1);
    call {:si_unique_call 208} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} __tasklet_schedule($p0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const hrtimer_forward_now: ref;

axiom hrtimer_forward_now == $sub.ref(0, 233682);

procedure hrtimer_forward_now($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.45, $M.46, $M.47, $M.48, $CurrAddr;



implementation hrtimer_forward_now($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.45 := $store.i64($M.45, $p5, $i1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 213} $i10 := devirtbounce.4($p9);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $M.46 := $store.i64($M.46, $p11, $i10);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.46;
    cmdloc_dummy_var_34 := $M.46;
    call {:si_unique_call 214} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.46 := cmdloc_dummy_var_35;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.46, $p14);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.45, $p16);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i18 := hrtimer_forward($p0, $i15, $i17);
    call {:si_unique_call 216} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const hrtimer_forward: ref;

axiom hrtimer_forward == $sub.ref(0, 234714);

procedure hrtimer_forward($p0: ref, $i1: i64, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.47, $M.48, $CurrAddr;



implementation hrtimer_forward($p0: ref, $i1: i64, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.47 := $store.i64($M.47, $p5, $i1);
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.48 := $store.i64($M.48, $p6, $i2);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 1} true;
    call {:si_unique_call 219} $i7 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 220} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i7);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 235746);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 222} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 223} devirtbounce.5(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.49, $p2);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __tasklet_schedule: ref;

axiom __tasklet_schedule == $sub.ref(0, 236778);

procedure __tasklet_schedule($p0: ref);
  free requires assertsPassed;



implementation __tasklet_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    return;
}



const snd_dummy_probe: ref;

axiom snd_dummy_probe == $sub.ref(0, 237810);

procedure snd_dummy_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $M.59, $M.60, $M.61, $CurrAddr, $M.68;



implementation snd_dummy_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $p41: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p23: ref;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p42: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i72: i32;
  var $i73: i1;
  var $i52: i32;
  var $i74: i64;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $i100: i64;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i64;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $p174: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $p178: ref;
  var $i71: i32;
  var $p179: ref;
  var $i13: i32;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(8, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 225} {:cexpr "dev"} boogie_si_record_i32($i3);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i3);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref($i5, 4));
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.50, $p6);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i3);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref($i8, 8));
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.51, $p9);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i11 := snd_card_new($p4, $i7, $p10, __this_module, 288, $p1);
    call {:si_unique_call 227} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.52, $p1);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2528)), $mul.ref(368, 1));
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.52, $p1);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.53, dummy_models);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p42 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb19;

  $bb19:
    call $i53, $p54, $i55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $i70, $i72, $i73, $i52, $i74, $p75, $i76, $i77 := snd_dummy_probe_loop_$bb19($i3, $p17, $i53, $p54, $i55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $i63, $p64, $i65, $p66, $i67, $i68, $i69, $i70, $i72, $i73, $i52, $i74, $p75, $i76, $i77);
    goto $bb19_last;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i74 := $sext.i32.i64($i3);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref($i74, 4));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.56, $p75);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, $i52);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 235} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p79, dummy_pcm_hardware, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p42);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i159 := snd_card_dummy_new_mixer($p17);
    call {:si_unique_call 237} {:cexpr "err"} boogie_si_record_i32($i159);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i159, 0);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.52, $p1);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p161, $mul.ref(0, 2528)), $mul.ref(20, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p164 := strcpy($p163, .str.8);
    assume $isExternal($p164);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.52, $p1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 2528)), $mul.ref(36, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p168 := strcpy($p167, .str.8);
    assume $isExternal($p168);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.52, $p1);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 2528)), $mul.ref(68, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i3, 1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} vslice_dummy_var_58 := sprintf.ref.ref.i32($p171, .str.9, $i172);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} dummy_proc_init($p17);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.52, $p1);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i175 := snd_card_register($p174);
    call {:si_unique_call 243} {:cexpr "err"} boogie_si_record_i32($i175);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i71 := $i175;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.52, $p1);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_57 := snd_card_free($p179);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i13 := $i71;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb76:
    assume $i176 == 1;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.52, $p1);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} platform_set_drvdata($p0, $p178);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb73:
    assume $i160 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i71 := $i159;
    goto $bb29;

  $bb37:
    assume $i81 == 1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i90 := $load.i64($M.0, $p89);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i104 := $load.i64($M.0, $p103);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(76, 1));
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb69:
    assume $i154 == 1;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(32, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i156);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb66:
    assume $i147 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(76, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.0, $p148);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(28, 1));
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p151, $i149);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i140 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(24, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i142);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i133 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(68, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(20, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i135);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i126 == 1;
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(16, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i128);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i119 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(60, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p120);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(68, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p123, $i121);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i112 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(64, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i114);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i105 == 1;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(56, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p109, $i107);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i98 == 1;
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.0, $p99);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(48, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p102, $i100);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb42:
    assume $i91 == 1;
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(32, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(40, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p95, $i93);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i84 == 1;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p42, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i86 := $load.i64($M.0, $p85);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i86);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb34:
    assume $i77 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i3);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i53, 4));
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.55, $p54);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i56 := $sle.i32($i55, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i3);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i59, 4));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.55, $p60);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i62 := $sgt.i32($i61, 128);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i65 := $sext.i32.i64($i3);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i65, 4));
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.55, $p66);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i68 := snd_card_dummy_pcm($p17, $i52, $i67);
    call {:si_unique_call 232} {:cexpr "err"} boogie_si_record_i32($i68);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i70 := $i68;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i52, 1);
    call {:si_unique_call 234} {:cexpr "idx"} boogie_si_record_i32($i72);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i73 := $sle.i32($i72, 3);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb33;

  $bb31:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i52 := $i72;
    goto $bb31_dummy;

  $bb27:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i71 := $i70;
    goto $bb29;

  $bb24:
    assume $i62 == 1;
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i3);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i63, 4));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p64, 128);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i56 == 1;
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i3);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref($i57, 4));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p58, 1);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p23 := dummy_models;
    goto $bb8;

  $bb8:
    call $i24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p43, $p44, $i45, $i46, $p23, $i47, $p48, $p49, $i50, $i51 := snd_dummy_probe_loop_$bb8($i3, $i24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $p43, $p44, $i45, $i46, $p23, $i47, $p48, $p49, $i50, $i51);
    goto $bb8_last;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i3);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref($i47, 8));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.54, $p48);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i51 == 1);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume $i51 == 1;
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i3);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref($i24, 8));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.54, $p25);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.53, $p23);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i30 := strcmp($p26, $p29);
    call {:si_unique_call 229} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p32 := $p23;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p23, $mul.ref(1, 8));
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.53, $p43);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p23 := $p43;
    goto $bb14_dummy;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.53, $p32);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.52, $p1);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2528)), $mul.ref(0, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} vslice_dummy_var_56 := printk.ref.ref.i32(.str.7, $p35, $i38);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.53, $p32);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p42 := $p40;
    goto $bb12;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;
}



const snd_dummy_remove: ref;

axiom snd_dummy_remove == $sub.ref(0, 238842);

procedure snd_dummy_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_dummy_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_59 := snd_card_free($p2);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 239874);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snd_card_free: ref;

axiom snd_card_free == $sub.ref(0, 240906);

procedure snd_card_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 1} true;
    call {:si_unique_call 248} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 249} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 241938);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snd_card_new: ref;

axiom snd_card_new == $sub.ref(0, 242970);

procedure snd_card_new($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_new($p0: ref, $i1: i32, $p2: ref, $p3: ref, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 250} {:cexpr "snd_card_new:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 251} {:cexpr "snd_card_new:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 252} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 253} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 244002);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const printk: ref;

axiom printk == $sub.ref(0, 245034);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 255} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 1} true;
    call {:si_unique_call 256} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 257} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_card_dummy_pcm: ref;

axiom snd_card_dummy_pcm == $sub.ref(0, 246066);

procedure snd_card_dummy_pcm($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation snd_card_dummy_pcm($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i1;
  var $p27: ref;
  var $i8: i32;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 259} {:cexpr "snd_card_dummy_pcm:arg:device"} boogie_si_record_i32($i1);
    call {:si_unique_call 260} {:cexpr "snd_card_dummy_pcm:arg:substreams"} boogie_si_record_i32($i2);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i6 := snd_pcm_new($p5, .str.10, $i1, $i2, $i2, $p3);
    call {:si_unique_call 262} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.57, $p3);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(16, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i11 := $M.2;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p13 := dummy_pcm_ops;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.57, $p3);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} snd_pcm_set_ops($p14, 0, $p13);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.57, $p3);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} snd_pcm_set_ops($p15, 1, $p13);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.57, $p3);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 992)), $mul.ref(952, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.57, $p3);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 992)), $mul.ref(28, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 0);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.57, $p3);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 992)), $mul.ref(100, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p24 := strcpy($p23, .str.10);
    assume $isExternal($p24);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i25 := $M.2;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.57, $p3);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} vslice_dummy_var_60 := snd_pcm_lib_preallocate_pages_for_all($p27, 1, $i2p.i64.ref(208), 0, 65536);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb8:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p13 := dummy_pcm_ops_no_buf;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const snd_card_dummy_new_mixer: ref;

axiom snd_card_dummy_new_mixer == $sub.ref(0, 247098);

procedure snd_card_dummy_new_mixer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation snd_card_dummy_new_mixer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i13: i32;
  var $i21: i32;
  var vslice_dummy_var_61: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(104, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} vslice_dummy_var_61 := spinlock_check($p4);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} __raw_spin_lock_init($p8, .str.11, $p1);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2528)), $mul.ref(148, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p11 := strcpy($p10, .str.12);
    assume $isExternal($p11);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(256, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb1;

  $bb1:
    call $i14, $p15, $p16, $p17, $i18, $i19, $i20, $p23, $p24, $i25, $i26, $p27, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $i13 := snd_card_dummy_new_mixer_loop_$bb1($p0, $p3, $i14, $p15, $p16, $p17, $i18, $i19, $i20, $p23, $p24, $i25, $i26, $p27, $p29, $p30, $i31, $i32, $p33, $i34, $i35, $i13);
    goto $bb1_last;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    $p15 := $add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref($i14, 80));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p17 := snd_ctl_new1($p15, $p16);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i18 := snd_ctl_add($p3, $p17);
    call {:si_unique_call 273} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i25 := strcmp($p24, .str.13);
    call {:si_unique_call 275} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i31 := strcmp($p30, .str.14);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i13, 1);
    call {:si_unique_call 278} {:cexpr "idx"} boogie_si_record_i32($i34);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i35 := $ule.i32($i34, 10);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb13:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i34;
    goto $bb13_dummy;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(272, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p17);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p17);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb3:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb5;

  $bb13_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1221;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 248130);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 249162);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const dummy_proc_init: ref;

axiom dummy_proc_init == $sub.ref(0, 250194);

procedure dummy_proc_init($p0: ref);
  free requires assertsPassed;
  modifies $M.59, $M.60, $M.61, $M.68, $CurrAddr;



implementation dummy_proc_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i4 := snd_card_proc_new($p3, .str.27, $p1);
    call {:si_unique_call 281} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.58, $p1);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} snd_info_set_text_ops($p6, $p7, dummy_proc_read);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.58, $p1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $M.59 := $store.ref($M.59, $p11, dummy_proc_write);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.58, $p1);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.60, $p13);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 128);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.58, $p1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.60 := $store.i16($M.60, $p19, $i17);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.58, $p1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $M.61 := $store.ref($M.61, $p22, $p0);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_card_register: ref;

axiom snd_card_register == $sub.ref(0, 251226);

procedure snd_card_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 284} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 252258);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1472)), $mul.ref(16, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} dev_set_drvdata($p2, $p1);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 253290);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    return;
}



const snd_card_proc_new: ref;

axiom snd_card_proc_new == $sub.ref(0, 254322);

procedure snd_card_proc_new($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_card_proc_new($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 1} true;
    call {:si_unique_call 286} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 287} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dummy_proc_read: ref;

axiom dummy_proc_read == $sub.ref(0, 255354);

procedure dummy_proc_read($p0: ref, $p1: ref);



const snd_info_set_text_ops: ref;

axiom snd_info_set_text_ops == $sub.ref(0, 256386);

procedure snd_info_set_text_ops($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.61, $M.68;



implementation snd_info_set_text_ops($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.61 := $store.ref($M.61, $p3, $p1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(32, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.68 := $store.ref($M.68, $p6, $p2);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    return;
}



const dummy_proc_write: ref;

axiom dummy_proc_write == $sub.ref(0, 257418);

procedure dummy_proc_write($p0: ref, $p1: ref);



const snd_info_get_str: ref;

axiom snd_info_get_str == $sub.ref(0, 258450);

procedure snd_info_get_str($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 259482);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);



const snd_info_get_line: ref;

axiom snd_info_get_line == $sub.ref(0, 260514);

procedure snd_info_get_line($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const snd_iprintf: ref;

axiom snd_iprintf == $sub.ref(0, 261546);

procedure snd_iprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure snd_iprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure snd_iprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



procedure snd_iprintf.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);



const print_formats: ref;

axiom print_formats == $sub.ref(0, 262578);

procedure print_formats($p0: ref, $p1: ref);



const print_rates: ref;

axiom print_rates == $sub.ref(0, 263610);

procedure print_rates($p0: ref, $p1: ref);



const snd_pcm_format_name: ref;

axiom snd_pcm_format_name == $sub.ref(0, 264642);

procedure snd_pcm_format_name($i0: i32) returns ($r: ref);



const snd_ctl_new1: ref;

axiom snd_ctl_new1 == $sub.ref(0, 265674);

procedure snd_ctl_new1($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation snd_ctl_new1($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $p2 := external_alloc();
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const snd_ctl_add: ref;

axiom snd_ctl_add == $sub.ref(0, 266706);

procedure snd_ctl_add($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_ctl_add($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 289} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 290} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snd_pcm_new: ref;

axiom snd_pcm_new == $sub.ref(0, 267738);

procedure snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 291} {:cexpr "snd_pcm_new:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 292} {:cexpr "snd_pcm_new:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 293} {:cexpr "snd_pcm_new:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 1} true;
    call {:si_unique_call 294} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 295} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const snd_pcm_set_ops: ref;

axiom snd_pcm_set_ops == $sub.ref(0, 268770);

procedure snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "snd_pcm_set_ops:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_lib_preallocate_pages_for_all: ref;

axiom snd_pcm_lib_preallocate_pages_for_all == $sub.ref(0, 269802);

procedure snd_pcm_lib_preallocate_pages_for_all($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_preallocate_pages_for_all($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 297} {:cexpr "snd_pcm_lib_preallocate_pages_for_all:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 298} {:cexpr "snd_pcm_lib_preallocate_pages_for_all:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 299} {:cexpr "snd_pcm_lib_preallocate_pages_for_all:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 1} true;
    call {:si_unique_call 300} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 301} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const snd_dummy_suspend: ref;

axiom snd_dummy_suspend == $sub.ref(0, 270834);

procedure snd_dummy_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_dummy_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2528)), $mul.ref(368, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} snd_power_change_state($p2, 768);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 288)), $mul.ref(16, 1));
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} vslice_dummy_var_62 := snd_pcm_suspend_all($p7);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_dummy_resume: ref;

axiom snd_dummy_resume == $sub.ref(0, 271866);

procedure snd_dummy_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_dummy_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} snd_power_change_state($p2, 0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const snd_power_change_state: ref;

axiom snd_power_change_state == $sub.ref(0, 272898);

procedure snd_power_change_state($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation snd_power_change_state($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} {:cexpr "snd_power_change_state:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2528)), $mul.ref(2252, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2528)), $mul.ref(2424, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} __wake_up($p3, 3, 1, $0.ref);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 273930);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 310} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    return;
}



const snd_pcm_suspend_all: ref;

axiom snd_pcm_suspend_all == $sub.ref(0, 274962);

procedure snd_pcm_suspend_all($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_suspend_all($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 275994);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 313} $r := $malloc($i0);
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 277026);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 314} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 317} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $p4 := calloc(1, $i0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 1} true;
    call {:si_unique_call 319} __VERIFIER_assume($i7);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 278058);

procedure choose_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.32, $M.0;



implementation choose_timer_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 321} devirtbounce.6($p2, $i4);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(2);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_dummy_timer_ops_6: ref;

axiom ldv_initialize_dummy_timer_ops_6 == $sub.ref(0, 279090);

procedure ldv_initialize_dummy_timer_ops_6();
  free requires assertsPassed;
  modifies $M.74, $M.0, $CurrAddr;



implementation ldv_initialize_dummy_timer_ops_6()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} $p0 := ldv_zalloc(704);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $M.74 := $p0;
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_snd_pcm_ops_4: ref;

axiom ldv_initialize_snd_pcm_ops_4 == $sub.ref(0, 280122);

procedure ldv_initialize_snd_pcm_ops_4();
  free requires assertsPassed;
  modifies $M.75, $M.0, $CurrAddr;



implementation ldv_initialize_snd_pcm_ops_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p0 := ldv_zalloc(704);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.75 := $p0;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dev_pm_ops_3: ref;

axiom ldv_dev_pm_ops_3 == $sub.ref(0, 281154);

procedure ldv_dev_pm_ops_3();
  free requires assertsPassed;
  modifies $M.76, $M.0, $CurrAddr;



implementation ldv_dev_pm_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $p0 := ldv_zalloc(1416);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $M.76 := $p0;
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_snd_pcm_ops_5: ref;

axiom ldv_initialize_snd_pcm_ops_5 == $sub.ref(0, 282186);

procedure ldv_initialize_snd_pcm_ops_5();
  free requires assertsPassed;
  modifies $M.77, $M.0, $CurrAddr;



implementation ldv_initialize_snd_pcm_ops_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p0 := ldv_zalloc(704);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $M.77 := $p0;
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_platform_driver_2: ref;

axiom ldv_initialize_platform_driver_2 == $sub.ref(0, 283218);

procedure ldv_initialize_platform_driver_2();
  free requires assertsPassed;
  modifies $M.78, $M.0, $CurrAddr;



implementation ldv_initialize_platform_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p0 := ldv_zalloc(1464);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $M.78 := $p0;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_dummy_timer_ops_7: ref;

axiom ldv_initialize_dummy_timer_ops_7 == $sub.ref(0, 284250);

procedure ldv_initialize_dummy_timer_ops_7();
  free requires assertsPassed;
  modifies $M.79, $M.0, $CurrAddr;



implementation ldv_initialize_dummy_timer_ops_7()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p0 := ldv_zalloc(704);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $M.79 := $p0;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 285282);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.0, $M.35, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.55, $M.113, $M.114, $M.115, $M.116, $M.77, $M.79, $M.76, $M.75, $M.74, $M.117, $M.118, $M.119, $M.120, $M.3, $M.1, $M.63, $M.65, $M.66, $M.64, $M.175, $M.176, $M.56, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.2, $M.54, $M.51, $M.50, $M.78, $M.33, $M.32, $M.53, $M.191, $M.192, $CurrAddr, $M.37, $M.43, $M.44, $M.38, $M.39, $M.40, $M.36, $M.59, $M.60, $M.61, $M.41, $M.42, $M.68, $M.45, $M.46, assertsPassed, $M.47, $M.48, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $i207: i1;
  var $i208: i1;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $i237: i1;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i32;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i251: i32;
  var $i252: i32;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $i260: i32;
  var $i261: i1;
  var $p262: ref;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i1;
  var $i268: i1;
  var $i269: i1;
  var $i270: i1;
  var $i271: i1;
  var $i272: i1;
  var $i273: i1;
  var $i274: i1;
  var $i275: i1;
  var $i276: i1;
  var $i277: i1;
  var $i278: i32;
  var $i279: i1;
  var $p280: ref;
  var $i282: i32;
  var $i283: i1;
  var $p284: ref;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $i290: i32;
  var $i291: i1;
  var $p292: ref;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $i297: i64;
  var $i298: i64;
  var $i300: i32;
  var $i301: i1;
  var $p302: ref;
  var $i303: i64;
  var $i304: i64;
  var $i306: i32;
  var $i307: i1;
  var $p308: ref;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $i317: i32;
  var $i318: i32;
  var $i319: i1;
  var $i320: i32;
  var $i321: i32;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i325: i32;
  var $i326: i32;
  var $i327: i1;
  var $i328: i32;
  var $i329: i32;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $i333: i64;
  var $i334: i64;
  var $i336: i32;
  var $i337: i1;
  var $p338: ref;
  var $i339: i64;
  var $i340: i64;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i350: i32;
  var $i351: i1;
  var $p352: ref;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i358: i32;
  var $i359: i1;
  var $p360: ref;
  var $i362: i32;
  var $i363: i1;
  var $p364: ref;
  var $i366: i32;
  var $i367: i1;
  var $p368: ref;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i374: i32;
  var $i375: i1;
  var $i376: i32;
  var $i377: i1;
  var $i378: i1;
  var $i379: i1;
  var $i380: i32;
  var $i381: i1;
  var $i382: i32;
  var $i383: i1;
  var $i384: i32;
  var $i385: i1;
  var $i386: i32;
  var $i387: i32;
  var $i388: i1;
  var $i389: i32;
  var $i390: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i32;
  var $i394: i1;
  var $i395: i1;
  var $i396: i1;
  var $i397: i1;
  var $i398: i1;
  var $i399: i1;
  var $i400: i1;
  var $i401: i1;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $p405: ref;
  var $i407: i32;
  var $i408: i1;
  var $p409: ref;
  var $i411: i32;
  var $i412: i1;
  var $p413: ref;
  var $i415: i32;
  var $i416: i1;
  var $p417: ref;
  var $i419: i32;
  var $i420: i1;
  var $p421: ref;
  var $i423: i32;
  var $i424: i1;
  var $p425: ref;
  var $i427: i32;
  var $i428: i1;
  var $p429: ref;
  var $i431: i32;
  var $i432: i1;
  var $p433: ref;
  var $i435: i32;
  var $i436: i1;
  var $p437: ref;
  var $i439: i32;
  var $i440: i1;
  var $p441: ref;
  var $i443: i32;
  var $i444: i1;
  var $p445: ref;
  var $i447: i32;
  var $i448: i1;
  var $p449: ref;
  var $i451: i32;
  var $i452: i1;
  var $p453: ref;
  var $i454: i32;
  var $i455: i32;
  var $i456: i1;
  var $i457: i32;
  var $i458: i32;
  var $i459: i32;
  var $i460: i1;
  var $p461: ref;
  var $i462: i32;
  var $i463: i32;
  var $i464: i1;
  var $i465: i32;
  var $i466: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i64;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i64;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i64;
  var vslice_dummy_var_83: i64;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: ref;
  var vslice_dummy_var_89: ref;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i64;
  var vslice_dummy_var_103: i64;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    call {:si_unique_call 330} $initialize();
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $p4 := ldv_zalloc(1176);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} $i6 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 338} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i6);
    call {:si_unique_call 339} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    call {:si_unique_call 342} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 343} $i8 := __VERIFIER_nondet_uint();
    call {:si_unique_call 344} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i8);
    call {:si_unique_call 345} {:cexpr "tmp___2"} boogie_si_record_i32($i8);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $p9 := ldv_zalloc(1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 1} true;
    call {:si_unique_call 347} $i10 := __VERIFIER_nondet_int();
    call {:si_unique_call 348} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i10);
    call {:si_unique_call 349} {:cexpr "tmp___4"} boogie_si_record_i32($i10);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 350} $i11 := __VERIFIER_nondet_int();
    call {:si_unique_call 351} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i11);
    call {:si_unique_call 352} {:cexpr "tmp___5"} boogie_si_record_i32($i11);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $p12 := ldv_zalloc(1);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p13 := ldv_zalloc(608);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p15 := ldv_zalloc(608);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 356} $i17 := __VERIFIER_nondet_int();
    call {:si_unique_call 357} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i17);
    call {:si_unique_call 358} {:cexpr "tmp___9"} boogie_si_record_i32($i17);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 359} $i18 := __VERIFIER_nondet_uint();
    call {:si_unique_call 360} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i18);
    call {:si_unique_call 361} {:cexpr "tmp___10"} boogie_si_record_i32($i18);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p19 := ldv_zalloc(1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} ldv_initialize();
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.80;
    call {:si_unique_call 364} cmdloc_dummy_var_40 := $memset.i8(cmdloc_dummy_var_39, $p20, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.80 := cmdloc_dummy_var_40;
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.81;
    call {:si_unique_call 365} cmdloc_dummy_var_42 := $memset.i8(cmdloc_dummy_var_41, $p21, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.81 := cmdloc_dummy_var_42;
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p2);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.82;
    call {:si_unique_call 366} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p22, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.82 := cmdloc_dummy_var_44;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p3);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.83;
    call {:si_unique_call 367} cmdloc_dummy_var_46 := $memset.i8(cmdloc_dummy_var_45, $p23, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.83 := cmdloc_dummy_var_46;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.84 := 0;
    call {:si_unique_call 368} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.85 := 0;
    call {:si_unique_call 369} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $M.86 := 0;
    call {:si_unique_call 370} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 371} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.88 := 0;
    call {:si_unique_call 372} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.89 := 1;
    call {:si_unique_call 373} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.90 := 0;
    call {:si_unique_call 374} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 375} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 376} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 377} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $p59, $i61, $i62, $p63, $i64, $i65, $p66, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $p212, $i214, $i215, $p216, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $i229, $i230, $p231, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $p249, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $p280, $i282, $i283, $p284, $i286, $i287, $p288, $i290, $i291, $p292, $i294, $i295, $p296, $i297, $i298, $i300, $i301, $p302, $i303, $i304, $i306, $i307, $p308, $i310, $i311, $p312, $i314, $i315, $p316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $p324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $p332, $i333, $i334, $i336, $i337, $p338, $i339, $i340, $i342, $i343, $p344, $i346, $i347, $p348, $i350, $i351, $p352, $i354, $i355, $p356, $i358, $i359, $p360, $i362, $i363, $p364, $i366, $i367, $p368, $i370, $i371, $p372, $i374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $p405, $i407, $i408, $p409, $i411, $i412, $p413, $i415, $i416, $p417, $i419, $i420, $p421, $i423, $i424, $p425, $i427, $i428, $p429, $i431, $i432, $p433, $i435, $i436, $p437, $i439, $i440, $p441, $i443, $i444, $p445, $i447, $i448, $p449, $i451, $i452, $p453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $p461, $i462, $i463, $i464, $i465, $i466, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105 := main_loop_$bb1($p0, $p1, $p2, $p3, $p5, $i6, $i7, $i8, $p9, $i10, $i11, $p12, $p14, $p16, $i17, $i18, $p19, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $p47, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $p59, $i61, $i62, $p63, $i64, $i65, $p66, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i105, $p106, $i107, $i108, $i109, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $p118, $i119, $i120, $i121, $i122, $i123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, $i156, $i157, $i158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i209, $i210, $i211, $p212, $i214, $i215, $p216, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $i229, $i230, $p231, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $p249, $i251, $i252, $i253, $i254, $i255, $i256, $i257, $i258, $i260, $i261, $p262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $p280, $i282, $i283, $p284, $i286, $i287, $p288, $i290, $i291, $p292, $i294, $i295, $p296, $i297, $i298, $i300, $i301, $p302, $i303, $i304, $i306, $i307, $p308, $i310, $i311, $p312, $i314, $i315, $p316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $p324, $i325, $i326, $i327, $i328, $i329, $i330, $i331, $p332, $i333, $i334, $i336, $i337, $p338, $i339, $i340, $i342, $i343, $p344, $i346, $i347, $p348, $i350, $i351, $p352, $i354, $i355, $p356, $i358, $i359, $p360, $i362, $i363, $p364, $i366, $i367, $p368, $i370, $i371, $p372, $i374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $i384, $i385, $i386, $i387, $i388, $i389, $i390, $i391, $i392, $i393, $i394, $i395, $i396, $i397, $i398, $i399, $i400, $i401, $i402, $i403, $i404, $p405, $i407, $i408, $p409, $i411, $i412, $p413, $i415, $i416, $p417, $i419, $i420, $p421, $i423, $i424, $p425, $i427, $i428, $p429, $i431, $i432, $p433, $i435, $i436, $p437, $i439, $i440, $p441, $i443, $i444, $p445, $i447, $i448, $p449, $i451, $i452, $p453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $p461, $i462, $i463, $i464, $i465, $i466, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77, vslice_dummy_var_78, vslice_dummy_var_79, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i24, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i24, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i24, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i24, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_stop();
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb64_dummy;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i391 := $M.93;
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i392 := $ne.i32($i391, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb438:
    assume $i392 == 1;
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} $i393 := __VERIFIER_nondet_int();
    call {:si_unique_call 567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i393);
    call {:si_unique_call 568} {:cexpr "tmp___20"} boogie_si_record_i32($i393);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $i394 := $slt.i32($i393, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  $bb442:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    $i395 := $slt.i32($i393, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i395 == 1);
    assume {:verifier.code 0} true;
    $i396 := $slt.i32($i393, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i393, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    assume !($i397 == 1);
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} ldv_stop();
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb447:
    assume $i397 == 1;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i459 := $M.93;
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i460 := $eq.i32($i459, 1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb503:
    assume $i460 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p461 := $M.77;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i462 := dummy_pcm_open($p461);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.118 := $i462;
    call {:si_unique_call 598} {:cexpr "ldv_retval_23"} boogie_si_record_i32($i462);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i463 := $M.118;
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i463, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb505, $bb506;

  $bb506:
    assume !($i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb505:
    assume $i464 == 1;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 599} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i465 := $M.91;
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i466 := $add.i32($i465, 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.91 := $i466;
    call {:si_unique_call 600} {:cexpr "ref_cnt"} boogie_si_record_i32($i466);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    goto $bb507;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb445:
    assume $i396 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i451 := $M.93;
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i451, 2);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb497:
    assume $i452 == 1;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p453 := $M.77;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i454 := dummy_pcm_close($p453);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.117 := $i454;
    call {:si_unique_call 594} {:cexpr "ldv_retval_24"} boogie_si_record_i32($i454);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i455 := $M.117;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i456 := $eq.i32($i455, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb499:
    assume $i456 == 1;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 595} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i457 := $M.91;
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i458 := $sub.i32($i457, 1);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $M.91 := $i458;
    call {:si_unique_call 596} {:cexpr "ref_cnt"} boogie_si_record_i32($i458);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb443:
    assume $i395 == 1;
    assume {:verifier.code 0} true;
    $i398 := $slt.i32($i393, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  $bb451:
    assume !($i398 == 1);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i443 := $M.93;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i444 := $eq.i32($i443, 2);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    $i447 := $M.93;
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i447, 1);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb495:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb494:
    assume $i448 == 1;
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p449 := $M.77;
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} vslice_dummy_var_105 := dummy_pcm_trigger($p449, $i17);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 592} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb496;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb491:
    assume $i444 == 1;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p445 := $M.77;
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} vslice_dummy_var_104 := dummy_pcm_trigger($p445, $i17);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 590} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb493;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb450:
    assume $i398 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i435 := $M.93;
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i435, 2);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $i439 := $M.93;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i439, 1);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb488:
    assume $i440 == 1;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p441 := $M.77;
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} vslice_dummy_var_103 := dummy_pcm_pointer($p441);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 588} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb485:
    assume $i436 == 1;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p437 := $M.77;
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} vslice_dummy_var_102 := dummy_pcm_pointer($p437);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 586} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb441:
    assume $i394 == 1;
    assume {:verifier.code 0} true;
    $i399 := $slt.i32($i393, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    $i400 := $slt.i32($i393, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb454, $bb455;

  $bb455:
    assume !($i400 == 1);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i427 := $M.93;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 2);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $i431 := $M.93;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb482:
    assume $i432 == 1;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $p433 := $M.77;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} vslice_dummy_var_101 := dummy_pcm_hw_params($p433, $p16);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 584} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb479:
    assume $i428 == 1;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p429 := $M.77;
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_100 := dummy_pcm_hw_params($p429, $p16);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 582} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb454:
    assume $i400 == 1;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i419 := $M.93;
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i420 := $eq.i32($i419, 2);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $i423 := $M.93;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i424 := $eq.i32($i423, 1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb476:
    assume $i424 == 1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p425 := $M.77;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} vslice_dummy_var_99 := dummy_pcm_hw_free($p425);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 580} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb473:
    assume $i420 == 1;
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p421 := $M.77;
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_98 := dummy_pcm_hw_free($p421);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 578} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb452:
    assume $i399 == 1;
    assume {:verifier.code 0} true;
    $i401 := $slt.i32($i393, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i401 == 1);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i411 := $M.93;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 2);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $i415 := $M.93;
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i415, 1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb470:
    assume $i416 == 1;
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p417 := $M.77;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_97 := snd_pcm_lib_ioctl($p417, $i18, $p19);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 576} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb467:
    assume $i412 == 1;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p413 := $M.77;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_96 := snd_pcm_lib_ioctl($p413, $i18, $p19);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 574} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb456:
    assume $i401 == 1;
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i393, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    assume !($i402 == 1);
    goto $bb449;

  $bb458:
    assume $i402 == 1;
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i403 := $M.93;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 2);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $i407 := $M.93;
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i407, 1);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb463:
    assume $i408 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p409 := $M.77;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} vslice_dummy_var_95 := dummy_pcm_prepare($p409);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 572} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb465;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb460:
    assume $i404 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p405 := $M.77;
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_94 := dummy_pcm_prepare($p405);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 570} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb462;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i374 := $M.92;
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb408:
    assume $i375 == 1;
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} $i376 := __VERIFIER_nondet_int();
    call {:si_unique_call 545} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i376);
    call {:si_unique_call 546} {:cexpr "tmp___19"} boogie_si_record_i32($i376);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $i377 := $slt.i32($i376, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i376, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    assume !($i378 == 1);
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_stop();
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb413:
    assume $i378 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i384 := $M.92;
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 1);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb426:
    assume $i385 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i386 := alsa_card_dummy_init();
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.116 := $i386;
    call {:si_unique_call 551} {:cexpr "ldv_retval_22"} boogie_si_record_i32($i386);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i387 := $M.116;
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $i389 := $M.116;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i390 := $ne.i32($i389, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb431:
    assume $i390 == 1;
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 564} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} ldv_check_final_state();
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb428:
    assume $i388 == 1;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 552} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 553} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ldv_initialize_snd_pcm_ops_5();
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 555} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_initialize_dummy_timer_ops_7();
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 557} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_dev_pm_ops_3();
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 559} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ldv_initialize_snd_pcm_ops_4();
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 561} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_initialize_dummy_timer_ops_6();
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 563} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb411:
    assume $i377 == 1;
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i376, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    assume !($i379 == 1);
    goto $bb415;

  $bb416:
    assume $i379 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i380 := $M.92;
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 3);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    assume !($i381 == 1);
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb418:
    assume $i381 == 1;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i382 := $M.91;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i382, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb421, $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    assume !($i383 == 1);
    goto $bb420;

  $bb421:
    assume $i383 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} alsa_card_dummy_exit();
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $M.92 := 2;
    call {:si_unique_call 548} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i263 := $M.90;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb310:
    assume $i264 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 496} $i265 := __VERIFIER_nondet_int();
    call {:si_unique_call 497} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i265);
    call {:si_unique_call 498} {:cexpr "tmp___18"} boogie_si_record_i32($i265);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $i266 := $slt.i32($i265, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    $i267 := $slt.i32($i265, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i265, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i269 := $slt.i32($i265, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i265, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ldv_stop();
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb321:
    assume $i270 == 1;
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i366 := $M.90;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 2);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $i370 := $M.90;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i370, 1);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb402:
    assume $i371 == 1;
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p372 := $M.75;
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_93 := dummy_pcm_trigger($p372, $i10);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 542} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb404;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb399:
    assume $i367 == 1;
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $p368 := $M.75;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_92 := dummy_pcm_trigger($p368, $i10);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 540} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb401;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb319:
    assume $i269 == 1;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i358 := $M.90;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 2);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $i362 := $M.90;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 1);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb396:
    assume $i363 == 1;
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p364 := $M.75;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_91 := dummy_pcm_hw_params($p364, $p14);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 538} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb393:
    assume $i359 == 1;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p360 := $M.75;
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vslice_dummy_var_90 := dummy_pcm_hw_params($p360, $p14);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 536} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb317:
    assume $i268 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i350 := $M.90;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i351 := $eq.i32($i350, 2);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $i354 := $M.90;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 1);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb390:
    assume $i355 == 1;
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p356 := $M.75;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vslice_dummy_var_89 := dummy_pcm_page($p356, $i6);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 534} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb387:
    assume $i351 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p352 := $M.75;
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_88 := dummy_pcm_page($p352, $i6);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 532} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb315:
    assume $i267 == 1;
    assume {:verifier.code 0} true;
    $i271 := $slt.i32($i265, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    $i272 := $slt.i32($i265, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i272 == 1);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i342 := $M.90;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 2);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $i346 := $M.90;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i346, 1);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb384:
    assume $i347 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p348 := $M.75;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} vslice_dummy_var_87 := snd_pcm_lib_ioctl($p348, $i8, $p12);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 530} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb381:
    assume $i343 == 1;
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p344 := $M.75;
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_86 := snd_pcm_lib_ioctl($p344, $i8, $p12);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 528} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb326:
    assume $i272 == 1;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i330 := $M.90;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i330, 2);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $i336 := $M.90;
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 1);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb378:
    assume $i337 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p338 := $M.75;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i339 := $load.i64($M.81, $p1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i340 := $load.i64($M.83, $p3);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_85 := dummy_pcm_copy($p338, $i11, $i339, $p9, $i340);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 526} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb375:
    assume $i331 == 1;
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p332 := $M.75;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i333 := $load.i64($M.81, $p1);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i334 := $load.i64($M.83, $p3);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} vslice_dummy_var_84 := dummy_pcm_copy($p332, $i11, $i333, $p9, $i334);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 524} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb324:
    assume $i271 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i322 := $M.90;
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 1);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb369:
    assume $i323 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p324 := $M.75;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i325 := dummy_pcm_open($p324);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.115 := $i325;
    call {:si_unique_call 520} {:cexpr "ldv_retval_20"} boogie_si_record_i32($i325);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i326 := $M.115;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i326, 0);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb371:
    assume $i327 == 1;
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 521} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i328 := $M.91;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i329 := $add.i32($i328, 1);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.91 := $i329;
    call {:si_unique_call 522} {:cexpr "ref_cnt"} boogie_si_record_i32($i329);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb373;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb313:
    assume $i266 == 1;
    assume {:verifier.code 0} true;
    $i273 := $slt.i32($i265, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    $i274 := $slt.i32($i265, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    $i275 := $slt.i32($i265, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i275 == 1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i314 := $M.90;
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 2);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb363:
    assume $i315 == 1;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p316 := $M.75;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i317 := dummy_pcm_close($p316);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.114 := $i317;
    call {:si_unique_call 516} {:cexpr "ldv_retval_21"} boogie_si_record_i32($i317);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i318 := $M.114;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb365:
    assume $i319 == 1;
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 517} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i320 := $M.91;
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i321 := $sub.i32($i320, 1);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.91 := $i321;
    call {:si_unique_call 518} {:cexpr "ref_cnt"} boogie_si_record_i32($i321);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb332:
    assume $i275 == 1;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i306 := $M.90;
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i306, 2);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $i310 := $M.90;
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 1);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb360:
    assume $i311 == 1;
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p312 := $M.75;
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} vslice_dummy_var_83 := dummy_pcm_pointer($p312);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 514} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb357:
    assume $i307 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p308 := $M.75;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_82 := dummy_pcm_pointer($p308);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 512} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb330:
    assume $i274 == 1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i294 := $M.90;
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 2);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i300 := $M.90;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb354:
    assume $i301 == 1;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p302 := $M.75;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i303 := $load.i64($M.80, $p0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i304 := $load.i64($M.82, $p2);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_81 := dummy_pcm_silence($p302, $i7, $i303, $i304);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 510} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb351:
    assume $i295 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p296 := $M.75;
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i297 := $load.i64($M.80, $p0);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i298 := $load.i64($M.82, $p2);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_80 := dummy_pcm_silence($p296, $i7, $i297, $i298);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 508} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb328:
    assume $i273 == 1;
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i265, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i276 == 1);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i286 := $M.90;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 2);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $i290 := $M.90;
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 1);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb348:
    assume $i291 == 1;
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p292 := $M.75;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vslice_dummy_var_79 := dummy_pcm_hw_free($p292);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 506} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb345:
    assume $i287 == 1;
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p288 := $M.75;
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_78 := dummy_pcm_hw_free($p288);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 504} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb334:
    assume $i276 == 1;
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i265, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb323;

  $bb336:
    assume $i277 == 1;
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i278 := $M.90;
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i279 := $eq.i32($i278, 2);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $i282 := $M.90;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i282, 1);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb341:
    assume $i283 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p284 := $M.75;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_77 := dummy_pcm_prepare($p284);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 502} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb343;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb338:
    assume $i279 == 1;
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p280 := $M.75;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_76 := dummy_pcm_prepare($p280);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 500} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb340;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i260 := $M.89;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb307:
    assume $i261 == 1;
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p262 := $M.33;
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} choose_timer_1($p262);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i253 := $M.88;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb295:
    assume $i254 == 1;
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 489} $i255 := __VERIFIER_nondet_int();
    call {:si_unique_call 490} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i255);
    call {:si_unique_call 491} {:cexpr "tmp___17"} boogie_si_record_i32($i255);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} ldv_stop();
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb298:
    assume $i256 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i257 := $M.88;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 1);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb300:
    assume $i258 == 1;
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_75 := emu10k1_playback_constraints($p5);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 493} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb3:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i233 := $M.87;
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 0);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb272:
    assume $i234 == 1;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 478} $i235 := __VERIFIER_nondet_int();
    call {:si_unique_call 479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i235);
    call {:si_unique_call 480} {:cexpr "tmp___16"} boogie_si_record_i32($i235);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ldv_stop();
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb277:
    assume $i237 == 1;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i247 := $M.87;
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 2);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb289:
    assume $i248 == 1;
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p249 := $M.78;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_74 := snd_dummy_remove($p249);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 486} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i251 := $M.91;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i252 := $sub.i32($i251, 1);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.91 := $i252;
    call {:si_unique_call 487} {:cexpr "ref_cnt"} boogie_si_record_i32($i252);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb275:
    assume $i236 == 1;
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i235, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb279;

  $bb280:
    assume $i238 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i239 := $M.87;
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 1);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb282:
    assume $i240 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p241 := $M.78;
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $i242 := snd_dummy_probe($p241);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.113 := $i242;
    call {:si_unique_call 482} {:cexpr "ldv_retval_19"} boogie_si_record_i32($i242);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i243 := $M.113;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb284:
    assume $i244 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 483} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i245 := $M.91;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i245, 1);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.91 := $i246;
    call {:si_unique_call 484} {:cexpr "ref_cnt"} boogie_si_record_i32($i246);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i200 := $M.86;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb232:
    assume $i201 == 1;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} $i202 := __VERIFIER_nondet_int();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i202);
    call {:si_unique_call 464} {:cexpr "tmp___15"} boogie_si_record_i32($i202);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i203 := $slt.i32($i202, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i202, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i202, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i202, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} ldv_stop();
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb241:
    assume $i206 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i229 := $M.86;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb266:
    assume $i230 == 1;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p231 := $M.79;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_73 := dummy_systimer_create($p231);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 476} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb268;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb239:
    assume $i205 == 1;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i226 := $M.86;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb263:
    assume $i227 == 1;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p228 := $M.79;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} dummy_systimer_free($p228);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 474} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb237:
    assume $i204 == 1;
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i222 := $M.86;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 1);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb260:
    assume $i223 == 1;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p224 := $M.79;
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} vslice_dummy_var_72 := dummy_systimer_stop($p224);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 472} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb235:
    assume $i203 == 1;
    assume {:verifier.code 0} true;
    $i207 := $slt.i32($i202, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i202, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i208 == 1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i218 := $M.86;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb257:
    assume $i219 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p220 := $M.79;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_71 := dummy_systimer_pointer($p220);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 470} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb246:
    assume $i208 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i214 := $M.86;
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 1);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb254:
    assume $i215 == 1;
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p216 := $M.79;
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_70 := dummy_systimer_prepare($p216);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 468} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb244:
    assume $i207 == 1;
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i202, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb243;

  $bb248:
    assume $i209 == 1;
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i210 := $M.86;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 1);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb250:
    assume $i211 == 1;
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p212 := $M.79;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_69 := dummy_systimer_start($p212);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 466} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb16:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i68 := $M.85;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb65:
    assume $i69 == 1;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} $i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i70);
    call {:si_unique_call 399} {:cexpr "tmp___14"} boogie_si_record_i32($i70);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i70, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i70, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i70, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i70, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i70, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_stop();
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb78:
    assume $i76 == 1;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i195 := $M.85;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 15);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb226:
    assume $i196 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_68 := ldv_complete_3();
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 459} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i198 := $M.91;
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i199 := $sub.i32($i198, 1);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $M.91 := $i199;
    call {:si_unique_call 460} {:cexpr "ref_cnt"} boogie_si_record_i32($i199);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb76:
    assume $i75 == 1;
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i190 := $M.85;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 3);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb220:
    assume $i191 == 1;
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} $i192 := ldv_suspend_noirq_3();
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.112 := $i192;
    call {:si_unique_call 456} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i192);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i193 := $M.112;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb222:
    assume $i194 == 1;
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.85 := 7;
    call {:si_unique_call 457} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(7);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb74:
    assume $i74 == 1;
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i185 := $M.85;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 8);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb214:
    assume $i186 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i187 := ldv_restore_noirq_3();
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $M.111 := $i187;
    call {:si_unique_call 453} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i187);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i188 := $M.111;
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 0);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb216:
    assume $i189 == 1;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.85 := 13;
    call {:si_unique_call 454} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb72:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i70, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i77 == 1);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i180 := $M.85;
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 4);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb208:
    assume $i181 == 1;
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} $i182 := ldv_poweroff_late_3();
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.110 := $i182;
    call {:si_unique_call 450} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i182);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i183 := $M.110;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb210:
    assume $i184 == 1;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.85 := 9;
    call {:si_unique_call 451} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(9);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb81:
    assume $i77 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i175 := $M.85;
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 4);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb202:
    assume $i176 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i177 := ldv_poweroff_noirq_3();
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.109 := $i177;
    call {:si_unique_call 447} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i177);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i178 := $M.109;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb204:
    assume $i179 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.85 := 8;
    call {:si_unique_call 448} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(8);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb70:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i70, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i70, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i70, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i80 == 1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i170 := $M.85;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 10);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb196:
    assume $i171 == 1;
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i172 := ldv_thaw_noirq_3();
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.108 := $i172;
    call {:si_unique_call 444} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i172);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i173 := $M.108;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb198:
    assume $i174 == 1;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.85 := 14;
    call {:si_unique_call 445} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb87:
    assume $i80 == 1;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i165 := $M.85;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 5);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb190:
    assume $i166 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i167 := ldv_freeze_late_3();
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.107 := $i167;
    call {:si_unique_call 441} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i167);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i168 := $M.107;
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 0);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb192:
    assume $i169 == 1;
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.85 := 11;
    call {:si_unique_call 442} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(11);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb85:
    assume $i79 == 1;
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i158 := $M.85;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb184:
    assume $i159 == 1;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i160 := ldv_prepare_3();
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.106 := $i160;
    call {:si_unique_call 437} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i160);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i161 := $M.106;
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb186:
    assume $i162 == 1;
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 438} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i163 := $M.91;
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i164 := $add.i32($i163, 1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.91 := $i164;
    call {:si_unique_call 439} {:cexpr "ref_cnt"} boogie_si_record_i32($i164);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb83:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i70, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i81 == 1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i153 := $M.85;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 5);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb178:
    assume $i154 == 1;
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i155 := ldv_freeze_noirq_3();
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.105 := $i155;
    call {:si_unique_call 434} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i155);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i156 := $M.105;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb180:
    assume $i157 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $M.85 := 10;
    call {:si_unique_call 435} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(10);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb89:
    assume $i81 == 1;
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i148 := $M.85;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 7);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb172:
    assume $i149 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i150 := ldv_resume_noirq_3();
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.104 := $i150;
    call {:si_unique_call 431} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i150);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i151 := $M.104;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb174:
    assume $i152 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.85 := 12;
    call {:si_unique_call 432} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb68:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i70, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i70, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i70, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i70, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i85 == 1);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i143 := $M.85;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 11);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb166:
    assume $i144 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i145 := ldv_thaw_early_3();
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.103 := $i145;
    call {:si_unique_call 428} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i145);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i146 := $M.103;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 0);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb168:
    assume $i147 == 1;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $M.85 := 14;
    call {:si_unique_call 429} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb97:
    assume $i85 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i138 := $M.85;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 6);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb160:
    assume $i139 == 1;
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i140 := ldv_resume_early_3();
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.102 := $i140;
    call {:si_unique_call 425} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i140);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i141 := $M.102;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb162:
    assume $i142 == 1;
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.85 := 12;
    call {:si_unique_call 426} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb95:
    assume $i84 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i133 := $M.85;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 9);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb154:
    assume $i134 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i135 := ldv_restore_early_3();
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.101 := $i135;
    call {:si_unique_call 422} {:cexpr "ldv_retval_11"} boogie_si_record_i32($i135);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i136 := $M.101;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb156:
    assume $i137 == 1;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.85 := 13;
    call {:si_unique_call 423} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb93:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i70, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i86 == 1);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i128 := $M.85;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 3);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb148:
    assume $i129 == 1;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i130 := ldv_suspend_late_3();
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $M.100 := $i130;
    call {:si_unique_call 419} {:cexpr "ldv_retval_12"} boogie_si_record_i32($i130);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i131 := $M.100;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb150:
    assume $i132 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $M.85 := 6;
    call {:si_unique_call 420} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(6);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb99:
    assume $i86 == 1;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i122 := $M.85;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 12);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb142:
    assume $i123 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p124 := $M.76;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i125 := snd_dummy_resume($p124);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.99 := $i125;
    call {:si_unique_call 416} {:cexpr "ldv_retval_13"} boogie_si_record_i32($i125);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i126 := $M.99;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb144:
    assume $i127 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.85 := 15;
    call {:si_unique_call 417} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb91:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i70, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i70, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i70, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i89 == 1);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i116 := $M.85;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 2);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb136:
    assume $i117 == 1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p118 := $M.76;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i119 := snd_dummy_suspend($p118);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.98 := $i119;
    call {:si_unique_call 413} {:cexpr "ldv_retval_14"} boogie_si_record_i32($i119);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i120 := $M.98;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb138:
    assume $i121 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.85 := 5;
    call {:si_unique_call 414} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb105:
    assume $i89 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i110 := $M.85;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb130:
    assume $i111 == 1;
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p112 := $M.76;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i113 := snd_dummy_suspend($p112);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $M.97 := $i113;
    call {:si_unique_call 410} {:cexpr "ldv_retval_15"} boogie_si_record_i32($i113);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i114 := $M.97;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb132:
    assume $i115 == 1;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.85 := 4;
    call {:si_unique_call 411} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb103:
    assume $i88 == 1;
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i104 := $M.85;
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 13);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb124:
    assume $i105 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p106 := $M.76;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i107 := snd_dummy_resume($p106);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.96 := $i107;
    call {:si_unique_call 407} {:cexpr "ldv_retval_16"} boogie_si_record_i32($i107);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i108 := $M.96;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb126:
    assume $i109 == 1;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.85 := 15;
    call {:si_unique_call 408} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb101:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i90 == 1);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i98 := $M.85;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 2);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb118:
    assume $i99 == 1;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p100 := $M.76;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i101 := snd_dummy_suspend($p100);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.95 := $i101;
    call {:si_unique_call 404} {:cexpr "ldv_retval_17"} boogie_si_record_i32($i101);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i102 := $M.95;
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb120:
    assume $i103 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.85 := 3;
    call {:si_unique_call 405} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb107:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb80;

  $bb109:
    assume $i91 == 1;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i92 := $M.85;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 14);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb111:
    assume $i93 == 1;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p94 := $M.76;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i95 := snd_dummy_resume($p94);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.94 := $i95;
    call {:si_unique_call 401} {:cexpr "ldv_retval_18"} boogie_si_record_i32($i95);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i96 := $M.94;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb113:
    assume $i97 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.85 := 15;
    call {:si_unique_call 402} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb20:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb13;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i35 := $M.84;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb24:
    assume $i36 == 1;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 381} $i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i37);
    call {:si_unique_call 383} {:cexpr "tmp___13"} boogie_si_record_i32($i37);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} ldv_stop();
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb33:
    assume $i41 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i64 := $M.84;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb58:
    assume $i65 == 1;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p66 := $M.74;
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} vslice_dummy_var_67 := dummy_hrtimer_create($p66);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 395} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i61 := $M.84;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 1);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb55:
    assume $i62 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $p63 := $M.74;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} dummy_hrtimer_free($p63);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 393} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb29:
    assume $i39 == 1;
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i57 := $M.84;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb52:
    assume $i58 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p59 := $M.74;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_66 := dummy_hrtimer_stop($p59);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 391} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb27:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i53 := $M.84;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb49:
    assume $i54 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p55 := $M.74;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_65 := dummy_hrtimer_pointer($p55);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 389} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb38:
    assume $i43 == 1;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i49 := $M.84;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume $i50 == 1;
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p51 := $M.74;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_64 := dummy_hrtimer_prepare($p51);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 387} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb36:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb35;

  $bb40:
    assume $i44 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i45 := $M.84;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i46 == 1;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p47 := $M.74;
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} vslice_dummy_var_63 := dummy_hrtimer_start($p47);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 385} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb64_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 378} $i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i24);
    call {:si_unique_call 380} {:cexpr "tmp___12"} boogie_si_record_i32($i24);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 286314);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 287346);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 288378);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_suspend_late_3: ref;

axiom ldv_suspend_late_3 == $sub.ref(0, 289410);

procedure ldv_suspend_late_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_late_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 1} true;
    call {:si_unique_call 603} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 604} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_early_3: ref;

axiom ldv_restore_early_3 == $sub.ref(0, 290442);

procedure ldv_restore_early_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_early_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 1} true;
    call {:si_unique_call 605} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 606} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_early_3: ref;

axiom ldv_resume_early_3 == $sub.ref(0, 291474);

procedure ldv_resume_early_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_early_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 608} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_early_3: ref;

axiom ldv_thaw_early_3 == $sub.ref(0, 292506);

procedure ldv_thaw_early_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_early_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 609} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 610} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_noirq_3: ref;

axiom ldv_resume_noirq_3 == $sub.ref(0, 293538);

procedure ldv_resume_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 1} true;
    call {:si_unique_call 611} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 612} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_noirq_3: ref;

axiom ldv_freeze_noirq_3 == $sub.ref(0, 294570);

procedure ldv_freeze_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 613} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 614} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_prepare_3: ref;

axiom ldv_prepare_3 == $sub.ref(0, 295602);

procedure ldv_prepare_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_prepare_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 1} true;
    call {:si_unique_call 615} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 616} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_freeze_late_3: ref;

axiom ldv_freeze_late_3 == $sub.ref(0, 296634);

procedure ldv_freeze_late_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_freeze_late_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 1} true;
    call {:si_unique_call 617} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 618} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_thaw_noirq_3: ref;

axiom ldv_thaw_noirq_3 == $sub.ref(0, 297666);

procedure ldv_thaw_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_thaw_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 620} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_noirq_3: ref;

axiom ldv_poweroff_noirq_3 == $sub.ref(0, 298698);

procedure ldv_poweroff_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 622} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_poweroff_late_3: ref;

axiom ldv_poweroff_late_3 == $sub.ref(0, 299730);

procedure ldv_poweroff_late_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_poweroff_late_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 623} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 624} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_restore_noirq_3: ref;

axiom ldv_restore_noirq_3 == $sub.ref(0, 300762);

procedure ldv_restore_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_restore_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 1} true;
    call {:si_unique_call 625} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 626} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_noirq_3: ref;

axiom ldv_suspend_noirq_3 == $sub.ref(0, 301794);

procedure ldv_suspend_noirq_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_noirq_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 627} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 628} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_complete_3: ref;

axiom ldv_complete_3 == $sub.ref(0, 302826);

procedure ldv_complete_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_complete_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 629} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const alsa_card_dummy_exit: ref;

axiom alsa_card_dummy_exit == $sub.ref(0, 303858);

procedure alsa_card_dummy_exit();
  free requires assertsPassed;
  modifies $M.87, $M.3;



implementation alsa_card_dummy_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} snd_dummy_unregister_all();
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    return;
}



const alsa_card_dummy_init: ref;

axiom alsa_card_dummy_init == $sub.ref(0, 304890);

procedure alsa_card_dummy_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.120, $M.87, $M.78, $M.3, $M.0, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $CurrAddr;



implementation alsa_card_dummy_init() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i11: i32;
  var $i23: i32;
  var $i24: i1;
  var $i5: i32;
  var $i6: i32;
  var $i25: i32;
  var $i26: i1;
  var $i2: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i0 := ldv___platform_driver_register_21(snd_dummy_driver, __this_module);
    call {:si_unique_call 633} {:cexpr "err"} boogie_si_record_i32($i0);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i3 := alloc_fake_buffer();
    call {:si_unique_call 635} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5, $i6 := 0, 0;
    goto $bb8;

  $bb8:
    call $i7, $p8, $i9, $i10, $p12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $i22, $i11, $i23, $i24, $i5, $i6, $i25 := alsa_card_dummy_init_loop_$bb8($i7, $p8, $i9, $i10, $p12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i20, $p21, $i22, $i11, $i23, $i24, $i5, $i6, $i25);
    goto $bb8_last;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref($i7, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.119, $p8);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i11 := $i6;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i5, 1);
    call {:si_unique_call 637} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i24 := $sle.i32($i23, 31);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i25 := $i11;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vslice_dummy_var_106 := printk.ref(.str.50);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} snd_dummy_unregister_all();
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 19);
    goto $bb3;

  $bb20:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i5, $i6 := $i23, $i11;
    goto $bb20_dummy;

  $bb10:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $p12 := platform_device_register_simple(.str.49, $i5, $0.ref, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i14 := IS_ERR($p13);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p17 := platform_get_drvdata($p12);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i5);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref($i20, 8));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.120 := $store.ref($M.120, $p21, $p12);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i6, 1);
    call {:si_unique_call 643} {:cexpr "cards"} boogie_si_record_i32($i22);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i11 := $i22;
    goto $bb12;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} platform_device_unregister($p12);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i11 := $i6;
    goto $bb12;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i11 := $i6;
    goto $bb12;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} ldv_platform_driver_unregister_22(snd_dummy_driver);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i2 := $i0;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2364;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 305922);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    return;
}



const ldv___platform_driver_register_21: ref;

axiom ldv___platform_driver_register_21 == $sub.ref(0, 306954);

procedure ldv___platform_driver_register_21($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.87, $M.78, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_21($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 648} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} ldv_initialize_platform_driver_2();
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const alloc_fake_buffer: ref;

axiom alloc_fake_buffer == $sub.ref(0, 307986);

procedure alloc_fake_buffer() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3;



implementation alloc_fake_buffer() returns ($r: i32)
{
  var $i0: i8;
  var $i1: i1;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i3: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb5;

  $bb5:
    call $i4, $p5, $i6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $i3 := alloc_fake_buffer_loop_$bb5($i4, $p5, $i6, $p7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $i3);
    goto $bb5_last;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i4 := get_zeroed_page(208);
    call {:si_unique_call 651} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i3);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref($i6, 8));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, $p5);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i3);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref($i8, 8));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.3, $p9);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i3, 1);
    call {:si_unique_call 653} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb10:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i13;
    goto $bb10_dummy;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} free_fake_buffer();
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32(0, 12);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2418;
}



const ldv_platform_driver_unregister_22: ref;

axiom ldv_platform_driver_unregister_22 == $sub.ref(0, 309018);

procedure ldv_platform_driver_unregister_22($p0: ref);
  free requires assertsPassed;
  modifies $M.87;



implementation ldv_platform_driver_unregister_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} platform_driver_unregister($p0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 655} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_register_simple: ref;

axiom platform_device_register_simple == $sub.ref(0, 310050);

procedure platform_device_register_simple($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $CurrAddr;



implementation platform_device_register_simple($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} {:cexpr "platform_device_register_simple:arg:id___0"} boogie_si_record_i32($i1);
    call {:si_unique_call 657} {:cexpr "platform_device_register_simple:arg:num"} boogie_si_record_i32($i3);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $p4 := platform_device_register_resndata($0.ref, $p0, $i1, $p2, $i3, $0.ref, 0);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 311082);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 660} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const platform_device_unregister: ref;

axiom platform_device_unregister == $sub.ref(0, 312114);

procedure platform_device_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    return;
}



const snd_dummy_unregister_all: ref;

axiom snd_dummy_unregister_all == $sub.ref(0, 313146);

procedure snd_dummy_unregister_all();
  free requires assertsPassed;
  modifies $M.87, $M.3;



implementation snd_dummy_unregister_all()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.120, devices);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} platform_device_unregister($p0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(1, 8)));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} platform_device_unregister($p1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(2, 8)));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} platform_device_unregister($p2);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(3, 8)));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} platform_device_unregister($p3);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(4, 8)));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} platform_device_unregister($p4);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(5, 8)));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} platform_device_unregister($p5);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(6, 8)));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} platform_device_unregister($p6);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(7, 8)));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} platform_device_unregister($p7);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(8, 8)));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} platform_device_unregister($p8);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(9, 8)));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} platform_device_unregister($p9);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(10, 8)));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} platform_device_unregister($p10);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(11, 8)));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} platform_device_unregister($p11);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(12, 8)));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} platform_device_unregister($p12);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(13, 8)));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} platform_device_unregister($p13);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(14, 8)));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} platform_device_unregister($p14);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(15, 8)));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} platform_device_unregister($p15);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(16, 8)));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} platform_device_unregister($p16);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(17, 8)));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} platform_device_unregister($p17);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(18, 8)));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} platform_device_unregister($p18);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(19, 8)));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} platform_device_unregister($p19);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(20, 8)));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} platform_device_unregister($p20);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(21, 8)));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} platform_device_unregister($p21);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(22, 8)));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} platform_device_unregister($p22);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(23, 8)));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} platform_device_unregister($p23);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(24, 8)));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} platform_device_unregister($p24);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(25, 8)));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} platform_device_unregister($p25);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(26, 8)));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} platform_device_unregister($p26);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(27, 8)));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} platform_device_unregister($p27);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(28, 8)));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} platform_device_unregister($p28);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(29, 8)));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} platform_device_unregister($p29);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(30, 8)));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} platform_device_unregister($p30);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(31, 8)));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} platform_device_unregister($p31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} ldv_platform_driver_unregister_20(snd_dummy_driver);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} free_fake_buffer();
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_unregister_20: ref;

axiom ldv_platform_driver_unregister_20 == $sub.ref(0, 314178);

procedure ldv_platform_driver_unregister_20($p0: ref);
  free requires assertsPassed;
  modifies $M.87;



implementation ldv_platform_driver_unregister_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} platform_driver_unregister($p0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 696} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    return;
}



const free_fake_buffer: ref;

axiom free_fake_buffer == $sub.ref(0, 315210);

procedure free_fake_buffer();
  free requires assertsPassed;
  modifies $M.3;



implementation free_fake_buffer()
{
  var $i0: i8;
  var $i1: i1;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i0 := $M.2;
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb3:
    call $i3, $p4, $p5, $i6, $i7, $i8, $p9, $p10, $i11, $i12, $p13, $i14, $i15, $i2 := free_fake_buffer_loop_$bb3($i3, $p4, $p5, $i6, $i7, $i8, $p9, $p10, $i11, $i12, $p13, $i14, $i15, $i2);
    goto $bb3_last;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref($i3, 8));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.3, $p4);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i2, 1);
    call {:si_unique_call 698} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 1);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i14;
    goto $bb8_dummy;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i2);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref($i8, 8));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.3, $p9);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} free_pages($i11, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i2);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref($i12, 8));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p13, $0.ref);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 316242);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 700} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 317274);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    return;
}



const platform_device_register_resndata: ref;

axiom platform_device_register_resndata == $sub.ref(0, 318306);

procedure platform_device_register_resndata($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $i6: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $CurrAddr;



implementation platform_device_register_resndata($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $i6: i64) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p7 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    call {:si_unique_call 702} {:cexpr "platform_device_register_resndata:arg:id___0"} boogie_si_record_i32($i2);
    call {:si_unique_call 703} {:cexpr "platform_device_register_resndata:arg:num"} boogie_si_record_i32($i4);
    call {:si_unique_call 704} {:cexpr "platform_device_register_resndata:arg:size"} boogie_si_record_i64($i6);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $M.121 := $store.ref($M.121, $p8, $p0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $M.122 := $store.ref($M.122, $p10, $0.ref);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.123 := $store.ref($M.123, $p11, $p1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.124 := $store.i32($M.124, $p12, $i2);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $M.125 := $store.ref($M.125, $p13, $p3);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.126 := $store.i32($M.126, $p14, $i4);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $M.127 := $store.ref($M.127, $p15, $p5);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $M.128 := $store.i64($M.128, $p16, $i6);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.129 := $store.i64($M.129, $p17, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p18 := platform_device_register_full($p7);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;
}



const platform_device_register_full: ref;

axiom platform_device_register_full == $sub.ref(0, 319338);

procedure platform_device_register_full($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_device_register_full($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p1 := external_alloc();
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const get_zeroed_page: ref;

axiom get_zeroed_page == $sub.ref(0, 320370);

procedure get_zeroed_page($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation get_zeroed_page($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 707} {:cexpr "get_zeroed_page:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 1} true;
    call {:si_unique_call 708} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 709} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 321402);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 1} true;
    call {:si_unique_call 710} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 322434);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 712} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 1} true;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 323466);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 324498);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 325530);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 326562);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 327594);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 328626);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 329658);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 330690);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 331722);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 332754);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 333786);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 334818);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 335850);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 1} true;
    call {:si_unique_call 713} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 714} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 715} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 1} true;
    call {:si_unique_call 716} __VERIFIER_assume($i4);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 336882);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 337914);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 338946);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 339978);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 1} true;
    call {:si_unique_call 717} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 718} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 719} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 1} true;
    call {:si_unique_call 720} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 721} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 722} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 1} true;
    call {:si_unique_call 723} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 724} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 725} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 1} true;
    call {:si_unique_call 726} __VERIFIER_assume($i7);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 1} true;
    call {:si_unique_call 727} __VERIFIER_assume($i11);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 341010);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 342042);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 343074);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 344106);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 345138);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 346170);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 729} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 730} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 1} true;
    call {:si_unique_call 731} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 732} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 733} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 735} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 736} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 737} __VERIFIER_assume($i7);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 1} true;
    call {:si_unique_call 738} __VERIFIER_assume($i11);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 347202);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 348234);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 349266);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 350298);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 351330);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 352362);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 353394);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 354426);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 355458);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 740} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 741} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 356490);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 742} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 743} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 744} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 357522);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 745} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 746} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 358554);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 359586);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 747} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 748} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 360618);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 361650);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 362682);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 750} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 752} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p6 := malloc($i5);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    call {:si_unique_call 754} cmdloc_dummy_var_48 := $memset.i8(cmdloc_dummy_var_47, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_48;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 363714);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 364746);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.0, $M.119, $M.120, $M.3, $M.1, $M.63, $M.65, $M.66, $M.64, $M.175, $M.176, $M.56, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.2, $M.55, $M.54, $M.51, $M.50, $M.109, $M.108, $M.102, $M.103, $M.99, $M.114, $M.106, $M.100, $M.95, $M.98, $M.113, $M.105, $M.104, $M.117, $M.96, $M.97, $M.116, $M.111, $M.101, $M.118, $M.112, $M.107, $M.110, $M.94, $M.115, $M.78, $M.90, $M.33, $M.86, $M.89, $M.91, $M.87, $M.74, $M.85, $M.75, $M.93, $M.92, $M.84, $M.79, $M.76, $M.77, $M.88, $M.32, $M.53, $M.191, $M.192;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 755} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    call {:si_unique_call 756} {:cexpr "ldv_timer_state_1"} boogie_si_record_i32(0);
    $M.0 := $store.ref($M.0, model_emu10k1, .str);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(8, 1)), emu10k1_playback_constraints);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(32, 1)), 131072);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(76, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_emu10k1, $mul.ref(0, 88)), $mul.ref(80, 1)), 0);
    $M.119 := $store.i8($M.119, enable, 1);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(1, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(3, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(5, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(7, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(9, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(17, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(18, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(19, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(21, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(22, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(23, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(25, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(26, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(27, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(28, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(29, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(30, 1)), 0);
    $M.119 := $store.i8($M.119, $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.120 := $store.ref($M.120, devices, $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.120 := $store.ref($M.120, $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.3 := $store.ref($M.3, dummy_page, $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, dummy_hrtimer_ops, dummy_hrtimer_create);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_hrtimer_ops, $mul.ref(0, 48)), $mul.ref(8, 1)), dummy_hrtimer_free);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_hrtimer_ops, $mul.ref(0, 48)), $mul.ref(16, 1)), dummy_hrtimer_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_hrtimer_ops, $mul.ref(0, 48)), $mul.ref(24, 1)), dummy_hrtimer_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_hrtimer_ops, $mul.ref(0, 48)), $mul.ref(32, 1)), dummy_hrtimer_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_hrtimer_ops, $mul.ref(0, 48)), $mul.ref(40, 1)), dummy_hrtimer_pointer);
    $M.1 := 1;
    call {:si_unique_call 757} {:cexpr "hrtimer"} boogie_si_record_i8(1);
    $M.0 := $store.ref($M.0, dummy_systimer_ops, dummy_systimer_create);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_systimer_ops, $mul.ref(0, 48)), $mul.ref(8, 1)), dummy_systimer_free);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_systimer_ops, $mul.ref(0, 48)), $mul.ref(16, 1)), dummy_systimer_prepare);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_systimer_ops, $mul.ref(0, 48)), $mul.ref(24, 1)), dummy_systimer_start);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_systimer_ops, $mul.ref(0, 48)), $mul.ref(32, 1)), dummy_systimer_stop);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_systimer_ops, $mul.ref(0, 48)), $mul.ref(40, 1)), dummy_systimer_pointer);
    $M.63 := $store.ref($M.63, fields, .str.29);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(0, 24)), $mul.ref(8, 1)), .str.32);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(0, 24)), $mul.ref(16, 1)), 8);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(0, 24)), $mul.ref(20, 1)), 8);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(1, 24)), $mul.ref(0, 1)), .str.30);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(1, 24)), $mul.ref(8, 1)), .str.33);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(1, 24)), $mul.ref(16, 1)), 16);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(1, 24)), $mul.ref(20, 1)), 4);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(2, 24)), $mul.ref(0, 1)), .str.34);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(2, 24)), $mul.ref(8, 1)), .str.35);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(2, 24)), $mul.ref(16, 1)), 20);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(2, 24)), $mul.ref(20, 1)), 4);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(3, 24)), $mul.ref(0, 1)), .str.36);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(3, 24)), $mul.ref(8, 1)), .str.35);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(3, 24)), $mul.ref(16, 1)), 24);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(3, 24)), $mul.ref(20, 1)), 4);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(4, 24)), $mul.ref(0, 1)), .str.37);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(4, 24)), $mul.ref(8, 1)), .str.35);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(4, 24)), $mul.ref(16, 1)), 28);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(4, 24)), $mul.ref(20, 1)), 4);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(5, 24)), $mul.ref(0, 1)), .str.38);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(5, 24)), $mul.ref(8, 1)), .str.35);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(5, 24)), $mul.ref(16, 1)), 32);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(5, 24)), $mul.ref(20, 1)), 4);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(6, 24)), $mul.ref(0, 1)), .str.39);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(6, 24)), $mul.ref(8, 1)), .str.40);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(6, 24)), $mul.ref(16, 1)), 40);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(6, 24)), $mul.ref(20, 1)), 8);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(7, 24)), $mul.ref(0, 1)), .str.41);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(7, 24)), $mul.ref(8, 1)), .str.40);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(7, 24)), $mul.ref(16, 1)), 48);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(7, 24)), $mul.ref(20, 1)), 8);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(8, 24)), $mul.ref(0, 1)), .str.42);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(8, 24)), $mul.ref(8, 1)), .str.40);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(8, 24)), $mul.ref(16, 1)), 56);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(8, 24)), $mul.ref(20, 1)), 8);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(9, 24)), $mul.ref(0, 1)), .str.43);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(9, 24)), $mul.ref(8, 1)), .str.35);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(9, 24)), $mul.ref(16, 1)), 64);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(9, 24)), $mul.ref(20, 1)), 4);
    $M.63 := $store.ref($M.63, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(10, 24)), $mul.ref(0, 1)), .str.44);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(10, 24)), $mul.ref(8, 1)), .str.35);
    $M.66 := $store.i32($M.66, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(10, 24)), $mul.ref(16, 1)), 68);
    $M.64 := $store.i32($M.64, $add.ref($add.ref($add.ref(fields, $mul.ref(0, 264)), $mul.ref(10, 24)), $mul.ref(20, 1)), 4);
    $M.175 := $store.i32($M.175, db_scale_dummy, 1);
    $M.175 := $store.i32($M.175, $add.ref($add.ref(db_scale_dummy, $mul.ref(0, 16)), $mul.ref(1, 4)), 8);
    $M.175 := $store.i32($M.175, $add.ref($add.ref(db_scale_dummy, $mul.ref(0, 16)), $mul.ref(2, 4)), $sub.i32(0, 4500));
    $M.175 := $store.i32($M.175, $add.ref($add.ref(db_scale_dummy, $mul.ref(0, 16)), $mul.ref(3, 4)), 30);
    $M.176 := $store.i32($M.176, snd_dummy_controls, 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(16, 1)), .str.15);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(28, 1)), 19);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(40, 1)), snd_dummy_volume_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(48, 1)), snd_dummy_volume_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(56, 1)), snd_dummy_volume_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), db_scale_dummy);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(0, 1)), $mul.ref(72, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(16, 1)), .str.16);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(28, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(48, 1)), snd_dummy_capsrc_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(56, 1)), snd_dummy_capsrc_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(80, 1)), $mul.ref(72, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(16, 1)), .str.17);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(28, 1)), 19);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(40, 1)), snd_dummy_volume_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(48, 1)), snd_dummy_volume_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(56, 1)), snd_dummy_volume_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), db_scale_dummy);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(160, 1)), $mul.ref(72, 1)), 3);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(16, 1)), .str.18);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(28, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(48, 1)), snd_dummy_capsrc_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(56, 1)), snd_dummy_capsrc_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(240, 1)), $mul.ref(72, 1)), 3);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(16, 1)), .str.19);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(28, 1)), 19);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(40, 1)), snd_dummy_volume_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(48, 1)), snd_dummy_volume_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(56, 1)), snd_dummy_volume_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), db_scale_dummy);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(320, 1)), $mul.ref(72, 1)), 1);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(16, 1)), .str.20);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(28, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(48, 1)), snd_dummy_capsrc_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(56, 1)), snd_dummy_capsrc_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(400, 1)), $mul.ref(72, 1)), 1);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(16, 1)), .str.21);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(28, 1)), 19);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(40, 1)), snd_dummy_volume_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(48, 1)), snd_dummy_volume_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(56, 1)), snd_dummy_volume_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), db_scale_dummy);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(480, 1)), $mul.ref(72, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(16, 1)), .str.22);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(28, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(48, 1)), snd_dummy_capsrc_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(56, 1)), snd_dummy_capsrc_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(560, 1)), $mul.ref(72, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(16, 1)), .str.13);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(28, 1)), 19);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(40, 1)), snd_dummy_volume_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(48, 1)), snd_dummy_volume_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(56, 1)), snd_dummy_volume_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), db_scale_dummy);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(640, 1)), $mul.ref(72, 1)), 4);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(16, 1)), .str.14);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(28, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(48, 1)), snd_dummy_capsrc_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(56, 1)), snd_dummy_capsrc_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(720, 1)), $mul.ref(72, 1)), 4);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(0, 1)), 2);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(4, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(8, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(16, 1)), .str.23);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(24, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(28, 1)), 0);
    $M.176 := $store.i32($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(32, 1)), 0);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(40, 1)), snd_dummy_iobox_info);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(48, 1)), snd_dummy_iobox_get);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(56, 1)), snd_dummy_iobox_put);
    $M.176 := $store.ref($M.176, $add.ref($add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.176 := $store.i64($M.176, $add.ref($add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(800, 1)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, dummy_pcm_hardware, 262403);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(8, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(16, 1)), 1073742078);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(20, 1)), 5500);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(24, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(28, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(40, 1)), 65536);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(48, 1)), 64);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(56, 1)), 65536);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(64, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(68, 1)), 1024);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(dummy_pcm_hardware, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.56 := $store.i32($M.56, pcm_devs, 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(1, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(2, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(3, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(4, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(5, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(6, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(7, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(8, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(9, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(10, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(11, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(12, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(13, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(14, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(15, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(16, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(17, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(18, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(19, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(20, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(21, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(22, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(23, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(24, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(25, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(26, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(27, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(28, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(29, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(30, 4)), 1);
    $M.56 := $store.i32($M.56, $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(31, 4)), 1);
    $M.177 := $store.ref($M.177, dummy_pcm_ops, dummy_pcm_open);
    $M.178 := $store.ref($M.178, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), dummy_pcm_close);
    $M.179 := $store.ref($M.179, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), snd_pcm_lib_ioctl);
    $M.180 := $store.ref($M.180, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), dummy_pcm_hw_params);
    $M.181 := $store.ref($M.181, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), dummy_pcm_hw_free);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), dummy_pcm_prepare);
    $M.183 := $store.ref($M.183, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), dummy_pcm_trigger);
    $M.184 := $store.ref($M.184, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), dummy_pcm_pointer);
    $M.185 := $store.ref($M.185, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.186 := $store.ref($M.186, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.187 := $store.ref($M.187, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), $0.ref);
    $M.189 := $store.ref($M.189, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.190 := $store.ref($M.190, $add.ref($add.ref(dummy_pcm_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.177 := $store.ref($M.177, dummy_pcm_ops_no_buf, dummy_pcm_open);
    $M.178 := $store.ref($M.178, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(8, 1)), dummy_pcm_close);
    $M.179 := $store.ref($M.179, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(16, 1)), snd_pcm_lib_ioctl);
    $M.180 := $store.ref($M.180, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(24, 1)), dummy_pcm_hw_params);
    $M.181 := $store.ref($M.181, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(32, 1)), dummy_pcm_hw_free);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(40, 1)), dummy_pcm_prepare);
    $M.183 := $store.ref($M.183, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(48, 1)), dummy_pcm_trigger);
    $M.184 := $store.ref($M.184, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(56, 1)), dummy_pcm_pointer);
    $M.185 := $store.ref($M.185, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.186 := $store.ref($M.186, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(72, 1)), dummy_pcm_copy);
    $M.187 := $store.ref($M.187, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(80, 1)), dummy_pcm_silence);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(88, 1)), dummy_pcm_page);
    $M.189 := $store.ref($M.189, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.190 := $store.ref($M.190, $add.ref($add.ref(dummy_pcm_ops_no_buf, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.2 := 1;
    call {:si_unique_call 758} {:cexpr "fake_buffer"} boogie_si_record_i8(1);
    $M.55 := $store.i32($M.55, pcm_substreams, 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(1, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(2, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(3, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(4, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(5, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(6, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(7, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(8, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(9, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(10, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(11, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(12, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(13, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(14, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(15, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(16, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(17, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(18, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(19, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(20, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(21, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(22, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(23, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(24, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(25, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(26, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(27, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(28, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(29, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(30, 4)), 8);
    $M.55 := $store.i32($M.55, $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(31, 4)), 8);
    $M.54 := $store.ref($M.54, model, $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.54 := $store.ref($M.54, $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.51 := $store.ref($M.51, id, $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(1, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(2, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(3, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(4, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(5, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(6, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(7, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(8, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(9, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(10, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(11, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(12, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(13, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(14, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(15, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(16, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(17, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(18, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(19, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(20, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(21, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(22, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(23, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(24, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(25, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(26, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(27, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(28, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(29, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(30, 8)), $0.ref);
    $M.51 := $store.ref($M.51, $add.ref($add.ref(id, $mul.ref(0, 256)), $mul.ref(31, 8)), $0.ref);
    $M.50 := $store.i32($M.50, index, $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(1, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(2, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(3, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(4, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(5, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(6, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(7, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(8, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(9, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(10, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(11, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(12, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(13, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(14, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(15, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(16, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(17, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(18, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(19, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(20, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(21, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(22, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(23, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(24, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(25, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(26, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(27, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(28, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(29, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(30, 4)), $sub.i32(0, 1));
    $M.50 := $store.i32($M.50, $add.ref($add.ref(index, $mul.ref(0, 128)), $mul.ref(31, 4)), $sub.i32(0, 1));
    $M.109 := 0;
    call {:si_unique_call 759} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.108 := 0;
    call {:si_unique_call 760} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 761} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 762} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 763} {:cexpr "ldv_retval_13"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 764} {:cexpr "ldv_retval_21"} boogie_si_record_i32(0);
    $M.106 := 0;
    call {:si_unique_call 765} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 766} {:cexpr "ldv_retval_12"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 767} {:cexpr "ldv_retval_17"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 768} {:cexpr "ldv_retval_14"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 769} {:cexpr "ldv_retval_19"} boogie_si_record_i32(0);
    $M.105 := 0;
    call {:si_unique_call 770} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 771} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.117 := 0;
    call {:si_unique_call 772} {:cexpr "ldv_retval_24"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 773} {:cexpr "ldv_retval_16"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 774} {:cexpr "ldv_retval_15"} boogie_si_record_i32(0);
    $M.116 := 0;
    call {:si_unique_call 775} {:cexpr "ldv_retval_22"} boogie_si_record_i32(0);
    $M.111 := 0;
    call {:si_unique_call 776} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 777} {:cexpr "ldv_retval_11"} boogie_si_record_i32(0);
    $M.118 := 0;
    call {:si_unique_call 778} {:cexpr "ldv_retval_23"} boogie_si_record_i32(0);
    $M.112 := 0;
    call {:si_unique_call 779} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 780} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.110 := 0;
    call {:si_unique_call 781} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 782} {:cexpr "ldv_retval_18"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 783} {:cexpr "ldv_retval_20"} boogie_si_record_i32(0);
    $M.78 := $0.ref;
    $M.90 := 0;
    call {:si_unique_call 784} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.33 := $0.ref;
    $M.86 := 0;
    call {:si_unique_call 785} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 786} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 787} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 788} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.85 := 0;
    call {:si_unique_call 789} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.75 := $0.ref;
    $M.93 := 0;
    call {:si_unique_call 790} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 791} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.84 := 0;
    call {:si_unique_call 792} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.79 := $0.ref;
    $M.76 := $0.ref;
    $M.77 := $0.ref;
    $M.88 := 0;
    call {:si_unique_call 793} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 794} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.53 := $store.ref($M.53, dummy_models, model_emu10k1);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(dummy_models, $mul.ref(0, 56)), $mul.ref(1, 8)), model_rme9652);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(dummy_models, $mul.ref(0, 56)), $mul.ref(2, 8)), model_ice1712);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(dummy_models, $mul.ref(0, 56)), $mul.ref(3, 8)), model_uda1341);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(dummy_models, $mul.ref(0, 56)), $mul.ref(4, 8)), model_ac97);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(dummy_models, $mul.ref(0, 56)), $mul.ref(5, 8)), model_ca0106);
    $M.53 := $store.ref($M.53, $add.ref($add.ref(dummy_models, $mul.ref(0, 56)), $mul.ref(6, 8)), $0.ref);
    $M.0 := $store.ref($M.0, model_ca0106, .str.5);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(32, 1)), 523776);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(48, 1)), 65472);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(56, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(60, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(64, 1)), 5248);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(68, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(72, 1)), 192000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(76, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ca0106, $mul.ref(0, 88)), $mul.ref(80, 1)), 2);
    $M.0 := $store.ref($M.0, model_ac97, .str.4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(64, 1)), 128);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(68, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(72, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(76, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ac97, $mul.ref(0, 88)), $mul.ref(80, 1)), 2);
    $M.0 := $store.ref($M.0, model_uda1341, .str.3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(24, 1)), 4);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(32, 1)), 16380);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(56, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(60, 1)), 255);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(76, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_uda1341, $mul.ref(0, 88)), $mul.ref(80, 1)), 2);
    $M.0 := $store.ref($M.0, model_ice1712, .str.2);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(24, 1)), 1024);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(32, 1)), 262144);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(56, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(60, 1)), 1024);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(76, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_ice1712, $mul.ref(0, 88)), $mul.ref(80, 1)), 10);
    $M.0 := $store.ref($M.0, model_rme9652, .str.1);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(24, 1)), 1024);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(32, 1)), 1703936);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(56, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(60, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(68, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(76, 1)), 26);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_rme9652, $mul.ref(0, 88)), $mul.ref(80, 1)), 26);
    $M.175 := $store.i8($M.175, .str.15, 77);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(1, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(2, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(3, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(5, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(6, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(7, 1)), 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(8, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(9, 1)), 108);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(10, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(11, 1)), 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.15, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.175 := $store.i8($M.175, .str.16, 77);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(1, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(2, 1)), 115);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(3, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(4, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(5, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(6, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(7, 1)), 67);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(9, 1)), 112);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(11, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(12, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(13, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(14, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(15, 1)), 83);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(16, 1)), 119);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(17, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(18, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(20, 1)), 104);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.16, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.175 := $store.i8($M.175, .str.17, 83);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(1, 1)), 121);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(2, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(3, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(4, 1)), 104);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(5, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(6, 1)), 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(8, 1)), 108);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(9, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(10, 1)), 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.17, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.175 := $store.i8($M.175, .str.18, 83);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(1, 1)), 121);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(2, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(3, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(4, 1)), 104);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(5, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(6, 1)), 67);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(8, 1)), 112);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(10, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(13, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(14, 1)), 83);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(15, 1)), 119);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(16, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(17, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(19, 1)), 104);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.18, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.175 := $store.i8($M.175, .str.19, 76);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(2, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(3, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(4, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(5, 1)), 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(6, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(7, 1)), 108);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(8, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(9, 1)), 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.19, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.175 := $store.i8($M.175, .str.20, 76);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(1, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(2, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(3, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(4, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(5, 1)), 67);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(6, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(7, 1)), 112);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(8, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(9, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(10, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(12, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(13, 1)), 83);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(14, 1)), 119);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(15, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(18, 1)), 104);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.20, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.175 := $store.i8($M.175, .str.21, 77);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(1, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(2, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(3, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(4, 1)), 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(5, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(7, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(8, 1)), 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.21, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.175 := $store.i8($M.175, .str.22, 77);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(1, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(3, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(4, 1)), 67);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(6, 1)), 112);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(10, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(11, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(12, 1)), 83);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(13, 1)), 119);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(14, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(15, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(17, 1)), 104);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.22, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.175 := $store.i8($M.175, .str.13, 67);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(1, 1)), 68);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(2, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(3, 1)), 86);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(4, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(5, 1)), 108);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(6, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(7, 1)), 109);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(8, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.13, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.175 := $store.i8($M.175, .str.14, 67);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(1, 1)), 68);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(2, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(3, 1)), 67);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(4, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(5, 1)), 112);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(6, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(7, 1)), 117);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(9, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(10, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(11, 1)), 83);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(12, 1)), 119);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(16, 1)), 104);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.14, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.175 := $store.i8($M.175, .str.23, 69);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(1, 1)), 120);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(2, 1)), 116);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(3, 1)), 101);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(4, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(5, 1)), 110);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(6, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(7, 1)), 108);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(8, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(9, 1)), 73);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(10, 1)), 47);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(11, 1)), 79);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(12, 1)), 32);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(13, 1)), 66);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(.str.23, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.191 := $store.i8($M.191, .str.29, 102);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(3, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(4, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(5, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(6, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.29, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.191 := $store.i8($M.191, .str.30, 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.30, $mul.ref(0, 6)), $mul.ref(1, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.30, $mul.ref(0, 6)), $mul.ref(2, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.30, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.30, $mul.ref(0, 6)), $mul.ref(4, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.30, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.191 := $store.i8($M.191, .str.34, 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(1, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(2, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(3, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(6, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(7, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.34, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.191 := $store.i8($M.191, .str.36, 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(1, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(2, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(3, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(4, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(5, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(7, 1)), 120);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.36, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.191 := $store.i8($M.191, .str.37, 99);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(1, 1)), 104);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(2, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(3, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(4, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(6, 1)), 108);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(7, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(9, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(11, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.37, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.191 := $store.i8($M.191, .str.38, 99);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(1, 1)), 104);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(2, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(3, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(4, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(5, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(6, 1)), 108);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(7, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(8, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(9, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(10, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(11, 1)), 120);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.38, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.191 := $store.i8($M.191, .str.39, 98);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(1, 1)), 117);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(2, 1)), 102);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(3, 1)), 102);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(5, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(7, 1)), 98);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(8, 1)), 121);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(12, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(13, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(14, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.39, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.191 := $store.i8($M.191, .str.41, 112);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(2, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(4, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(5, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(7, 1)), 98);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(8, 1)), 121);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(12, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(13, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(14, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.41, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.191 := $store.i8($M.191, .str.42, 112);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(1, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(2, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(3, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(4, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(5, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(6, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(7, 1)), 98);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(8, 1)), 121);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(12, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(13, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(14, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(15, 1)), 120);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.42, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.191 := $store.i8($M.191, .str.43, 112);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(2, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(3, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(6, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(8, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(9, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(10, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.43, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.191 := $store.i8($M.191, .str.44, 112);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(2, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(3, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(6, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(8, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(9, 1)), 97);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(10, 1)), 120);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(.str.44, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.192 := $store.i8($M.192, .str.9, 68);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(1, 1)), 117);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(2, 1)), 109);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(3, 1)), 109);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(4, 1)), 121);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(5, 1)), 32);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(6, 1)), 37);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(7, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(.str.9, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    call {:si_unique_call 795} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 365778);

procedure devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $M.33, $M.32, $M.44, $M.37, $M.43, $M.45, $M.46, $M.59, $M.60, $M.61, $CurrAddr, $M.36, $M.47, $M.48, $M.68, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i42 := $eq.ref(snd_dummy_resume, $p0);
    assume true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i42 == 1);
    $i41 := $eq.ref(snd_dummy_suspend, $p0);
    assume true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i41 == 1);
    $i40 := $eq.ref(snd_dummy_remove, $p0);
    assume true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i40 == 1);
    $i39 := $eq.ref(snd_dummy_probe, $p0);
    assume true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i39 == 1);
    $i38 := $eq.ref(dummy_hrtimer_callback, $p0);
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i38 == 1);
    $i37 := $eq.ref(dummy_hrtimer_stop, $p0);
    assume {:branchcond $i37} true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i37 == 1);
    $i36 := $eq.ref(dummy_hrtimer_start, $p0);
    assume true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i36 == 1);
    $i35 := $eq.ref(dummy_hrtimer_prepare, $p0);
    assume true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i35 == 1);
    $i34 := $eq.ref(dummy_hrtimer_create, $p0);
    assume true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i34 == 1);
    $i33 := $eq.ref(dummy_systimer_stop, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i33 == 1);
    $i32 := $eq.ref(dummy_systimer_start, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i32 == 1);
    $i31 := $eq.ref(dummy_systimer_prepare, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i31 == 1);
    $i30 := $eq.ref(dummy_systimer_create, $p0);
    assume true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i30 == 1);
    $i29 := $eq.ref(dummy_pcm_prepare, $p0);
    assume true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i29 == 1);
    $i28 := $eq.ref(dummy_pcm_hw_free, $p0);
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i28 == 1);
    $i27 := $eq.ref(dummy_pcm_close, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i27 == 1);
    $i26 := $eq.ref(dummy_pcm_open, $p0);
    assume true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i26 == 1);
    $i25 := $eq.ref(emu10k1_playback_constraints, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume false;
    return;

  $bb2:
    assume $i25 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 796} $i2 := emu10k1_playback_constraints($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i26 == 1;
    call {:si_unique_call 797} $i3 := dummy_pcm_open(arg);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    $r := $i3;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    call {:si_unique_call 798} $i4 := dummy_pcm_close(arg);
    $r := $i4;
    return;

  $bb5:
    assume $i28 == 1;
    call {:si_unique_call 799} $i5 := dummy_pcm_hw_free(arg);
    $r := $i5;
    return;

  $bb6:
    assume $i29 == 1;
    call {:si_unique_call 800} $i6 := dummy_pcm_prepare(arg);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    $r := $i6;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    call {:si_unique_call 801} $i7 := dummy_systimer_create(arg);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    $r := $i7;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i31 == 1;
    call {:si_unique_call 802} $i8 := dummy_systimer_prepare(arg);
    $r := $i8;
    return;

  $bb9:
    assume $i32 == 1;
    call {:si_unique_call 803} $i9 := dummy_systimer_start(arg);
    $r := $i9;
    return;

  $bb10:
    assume $i33 == 1;
    call {:si_unique_call 804} $i10 := dummy_systimer_stop(arg);
    $r := $i10;
    return;

  $bb11:
    assume $i34 == 1;
    call {:si_unique_call 805} $i11 := dummy_hrtimer_create(arg);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    $r := $i11;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i35 == 1;
    call {:si_unique_call 806} $i12 := dummy_hrtimer_prepare(arg);
    $r := $i12;
    return;

  $bb13:
    assume $i36 == 1;
    call {:si_unique_call 807} $i13 := dummy_hrtimer_start(arg);
    $r := $i13;
    return;

  $bb14:
    assume $i37 == 1;
    call {:si_unique_call 808} $i14 := dummy_hrtimer_stop(arg);
    $r := $i14;
    return;

  $bb15:
    assume $i38 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 809} $i16 := dummy_hrtimer_callback($p15);
    $r := $i16;
    return;

  $bb16:
    assume $i39 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 810} $i18 := snd_dummy_probe($p17);
    $r := $i18;
    return;

  $bb17:
    assume $i40 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 811} $i20 := snd_dummy_remove($p19);
    $r := $i20;
    return;

  $bb18:
    assume $i41 == 1;
    $p21 := $bitcast.ref.ref(arg);
    call {:si_unique_call 812} $i22 := snd_dummy_suspend($p21);
    $r := $i22;
    return;

  $bb19:
    assume $i42 == 1;
    $p23 := $bitcast.ref.ref(arg);
    call {:si_unique_call 813} $i24 := snd_dummy_resume($p23);
    $r := $i24;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 366810);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.55, $M.33, $M.32, $M.44, $M.37, $M.43, $M.45, $M.46, $M.59, $M.60, $M.61, $CurrAddr, $M.36, $M.47, $M.48, $M.68, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i53 := $eq.ref(snd_dummy_resume, $p0);
    assume {:branchcond $i53} true;
    goto $bb19, $bb37;

  $bb37:
    assume !($i53 == 1);
    $i52 := $eq.ref(snd_dummy_suspend, $p0);
    assume {:branchcond $i52} true;
    goto $bb18, $bb36;

  $bb36:
    assume !($i52 == 1);
    $i51 := $eq.ref(snd_dummy_remove, $p0);
    assume true;
    goto $bb17, $bb35;

  $bb35:
    assume !($i51 == 1);
    $i50 := $eq.ref(snd_dummy_probe, $p0);
    assume true;
    goto $bb16, $bb34;

  $bb34:
    assume !($i50 == 1);
    $i49 := $eq.ref(dummy_hrtimer_callback, $p0);
    assume true;
    goto $bb15, $bb33;

  $bb33:
    assume !($i49 == 1);
    $i48 := $eq.ref(dummy_hrtimer_stop, $p0);
    assume {:branchcond $i48} true;
    goto $bb14, $bb32;

  $bb32:
    assume !($i48 == 1);
    $i47 := $eq.ref(dummy_hrtimer_start, $p0);
    assume {:branchcond $i47} true;
    goto $bb13, $bb31;

  $bb31:
    assume !($i47 == 1);
    $i46 := $eq.ref(dummy_hrtimer_prepare, $p0);
    assume true;
    goto $bb12, $bb30;

  $bb30:
    assume !($i46 == 1);
    $i45 := $eq.ref(dummy_hrtimer_create, $p0);
    assume {:branchcond $i45} true;
    goto $bb11, $bb29;

  $bb29:
    assume !($i45 == 1);
    $i44 := $eq.ref(dummy_systimer_stop, $p0);
    assume true;
    goto $bb10, $bb28;

  $bb28:
    assume !($i44 == 1);
    $i43 := $eq.ref(dummy_systimer_start, $p0);
    assume true;
    goto $bb9, $bb27;

  $bb27:
    assume !($i43 == 1);
    $i42 := $eq.ref(dummy_systimer_prepare, $p0);
    assume true;
    goto $bb8, $bb26;

  $bb26:
    assume !($i42 == 1);
    $i41 := $eq.ref(dummy_systimer_create, $p0);
    assume true;
    goto $bb7, $bb25;

  $bb25:
    assume !($i41 == 1);
    $i40 := $eq.ref(dummy_pcm_prepare, $p0);
    assume true;
    goto $bb6, $bb24;

  $bb24:
    assume !($i40 == 1);
    $i39 := $eq.ref(dummy_pcm_hw_free, $p0);
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i39 == 1);
    $i38 := $eq.ref(dummy_pcm_close, $p0);
    assume true;
    goto $bb4, $bb22;

  $bb22:
    assume !($i38 == 1);
    $i37 := $eq.ref(dummy_pcm_open, $p0);
    assume {:branchcond $i37} true;
    goto $bb3, $bb21;

  $bb21:
    assume !($i37 == 1);
    $i36 := $eq.ref(emu10k1_playback_constraints, $p0);
    assume true;
    goto $bb2, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume false;
    return;

  $bb2:
    assume $i36 == 1;
    call {:si_unique_call 814} $i1 := emu10k1_playback_constraints(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i37 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 815} $i3 := dummy_pcm_open($p2);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    $r := $i3;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i38 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 816} $i5 := dummy_pcm_close($p4);
    $r := $i5;
    return;

  $bb5:
    assume $i39 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 817} $i7 := dummy_pcm_hw_free($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i40 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 818} $i9 := dummy_pcm_prepare($p8);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    $r := $i9;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i41 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 819} $i11 := dummy_systimer_create($p10);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    $r := $i11;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i42 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 820} $i13 := dummy_systimer_prepare($p12);
    $r := $i13;
    return;

  $bb9:
    assume $i43 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 821} $i15 := dummy_systimer_start($p14);
    $r := $i15;
    return;

  $bb10:
    assume $i44 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 822} $i17 := dummy_systimer_stop($p16);
    $r := $i17;
    return;

  $bb11:
    assume $i45 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 823} $i19 := dummy_hrtimer_create($p18);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    $r := $i19;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i46 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 824} $i21 := dummy_hrtimer_prepare($p20);
    $r := $i21;
    return;

  $bb13:
    assume $i47 == 1;
    $p22 := $bitcast.ref.ref(arg);
    call {:si_unique_call 825} $i23 := dummy_hrtimer_start($p22);
    $r := $i23;
    return;

  $bb14:
    assume $i48 == 1;
    $p24 := $bitcast.ref.ref(arg);
    call {:si_unique_call 826} $i25 := dummy_hrtimer_stop($p24);
    $r := $i25;
    return;

  $bb15:
    assume $i49 == 1;
    $p26 := $bitcast.ref.ref(arg);
    call {:si_unique_call 827} $i27 := dummy_hrtimer_callback($p26);
    $r := $i27;
    return;

  $bb16:
    assume $i50 == 1;
    $p28 := $bitcast.ref.ref(arg);
    call {:si_unique_call 828} $i29 := snd_dummy_probe($p28);
    $r := $i29;
    return;

  $bb17:
    assume $i51 == 1;
    $p30 := $bitcast.ref.ref(arg);
    call {:si_unique_call 829} $i31 := snd_dummy_remove($p30);
    $r := $i31;
    return;

  $bb18:
    assume $i52 == 1;
    $p32 := $bitcast.ref.ref(arg);
    call {:si_unique_call 830} $i33 := snd_dummy_suspend($p32);
    $r := $i33;
    return;

  $bb19:
    assume $i53 == 1;
    $p34 := $bitcast.ref.ref(arg);
    call {:si_unique_call 831} $i35 := snd_dummy_resume($p34);
    $r := $i35;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 367842);

procedure devirtbounce.2(funcPtr: ref, arg: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(dummy_hrtimer_free, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(dummy_systimer_free, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 832} dummy_systimer_free(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 833} dummy_hrtimer_free(arg);
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 368874);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.32, $M.0, $M.37, $M.38, $M.39, $M.40, $M.36, $CurrAddr, $M.41, $M.42;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(dummy_hrtimer_pointer, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i6 == 1);
    $i5 := $eq.ref(dummy_systimer_pointer, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i5 == 1);
    $i4 := $eq.ref(dummy_pcm_pointer, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    call {:si_unique_call 834} $i1 := dummy_pcm_pointer(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 835} $i2 := dummy_systimer_pointer(arg);
    $r := $i2;
    return;

  $bb4:
    assume $i6 == 1;
    call {:si_unique_call 836} $i3 := dummy_hrtimer_pointer(arg);
    $r := $i3;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 369906);

procedure devirtbounce.4(funcPtr: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 370938);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 371970);

procedure devirtbounce.6(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.32, $M.0;



implementation devirtbounce.6(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(dummy_hrtimer_pcm_elapsed, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(dummy_systimer_callback, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 837} dummy_systimer_callback(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 838} dummy_hrtimer_pcm_elapsed(arg);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.0, $M.119, $M.120, $M.3, $M.1, $M.63, $M.65, $M.66, $M.64, $M.175, $M.176, $M.56, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.2, $M.55, $M.54, $M.51, $M.50, $M.109, $M.108, $M.102, $M.103, $M.99, $M.114, $M.106, $M.100, $M.95, $M.98, $M.113, $M.105, $M.104, $M.117, $M.96, $M.97, $M.116, $M.111, $M.101, $M.118, $M.112, $M.107, $M.110, $M.94, $M.115, $M.78, $M.90, $M.33, $M.86, $M.89, $M.91, $M.87, $M.74, $M.85, $M.75, $M.93, $M.92, $M.84, $M.79, $M.76, $M.77, $M.88, $M.32, $M.53, $M.191, $M.192, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 839} __SMACK_static_init();
    call {:si_unique_call 840} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93, $M.0, $M.35, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.55, $M.113, $M.114, $M.115, $M.116, $M.77, $M.79, $M.76, $M.75, $M.74, $M.117, $M.118, $M.119, $M.120, $M.3, $M.1, $M.63, $M.65, $M.66, $M.64, $M.175, $M.176, $M.56, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.2, $M.54, $M.51, $M.50, $M.78, $M.33, $M.32, $M.53, $M.191, $M.192, $CurrAddr, $M.37, $M.43, $M.44, $M.38, $M.39, $M.40, $M.36, $M.59, $M.60, $M.61, $M.41, $M.42, $M.68, $M.45, $M.46, $M.47, $M.48, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation dummy_systimer_update_loop_$bb16(in_$p0: ref, in_$i13: i64, in_$p33: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$i49: i1) returns (out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$i49: i1)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49 := in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$i48, in_$i49;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i49 == 1;
    goto $bb18_dummy;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i49 := $ule.i64(out_$i48, in_$i13);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i32.i64(out_$i47);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, in_$p33);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p46, out_$i45);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i42, out_$i44);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(220, 1));
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(212, 1));
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, out_$i39);
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(228, 1));
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i38, 1);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_417;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(228, 1));
    goto corral_source_split_416;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49 := dummy_systimer_update_loop_$bb16(in_$p0, in_$i13, in_$p33, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$i48, out_$i49);
    return;

  exit:
    return;
}



procedure dummy_systimer_update_loop_$bb16(in_$p0: ref, in_$i13: i64, in_$p33: ref, in_$p37: ref, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$p46: ref, in_$i47: i32, in_$i48: i64, in_$i49: i1) returns (out_$p37: ref, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$p46: ref, out_$i47: i32, out_$i48: i64, out_$i49: i1);
  modifies $M.0;



implementation dummy_systimer_update_loop_$bb8(in_$p0: ref, in_$p19: ref, in_$p21: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1) returns (out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1)
{

  entry:
    out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32 := in_$p24, in_$i25, in_$p26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i32 == 1;
    goto $bb10_dummy;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    out_$i32 := $uge.i32(out_$i30, out_$i31);
    goto corral_source_split_405;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p21);
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, in_$p19);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i25, out_$i27);
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(216, 1));
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_397;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 240)), $mul.ref(208, 1));
    goto corral_source_split_396;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32 := dummy_systimer_update_loop_$bb8(in_$p0, in_$p19, in_$p21, out_$p24, out_$i25, out_$p26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32);
    return;

  exit:
    return;
}



procedure dummy_systimer_update_loop_$bb8(in_$p0: ref, in_$p19: ref, in_$p21: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1) returns (out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1);
  modifies $M.0;



implementation snd_dummy_probe_loop_$bb19(in_$i3: i32, in_$p17: ref, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i72: i32, in_$i73: i1, in_$i52: i32, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1) returns (out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i72: i32, out_$i73: i1, out_$i52: i32, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1)
{

  entry:
    out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i52, out_$i74, out_$p75, out_$i76, out_$i77 := in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i72, in_$i73, in_$i52, in_$i74, in_$p75, in_$i76, in_$i77;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  $bb31:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i52 := out_$i72;
    goto $bb31_dummy;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    out_$i73 := $sle.i32(out_$i72, 3);
    goto corral_source_split_992;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i52, 1);
    call {:si_unique_call 234} {:cexpr "idx"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_991;

  $bb28:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i68;
    assume true;
    goto $bb28;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i68, 0);
    goto corral_source_split_983;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} out_$i68 := snd_card_dummy_pcm(in_$p17, out_$i52, out_$i67);
    call {:si_unique_call 232} {:cexpr "err"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_982;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.55, out_$p66);
    goto corral_source_split_981;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(out_$i65, 4));
    goto corral_source_split_980;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i65 := $sext.i32.i64(in_$i3);
    goto corral_source_split_979;

  $bb25:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, out_$p64, 128);
    goto corral_source_split_977;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(out_$i63, 4));
    goto corral_source_split_976;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    out_$i63 := $sext.i32.i64(in_$i3);
    goto corral_source_split_975;

  $bb24:
    assume out_$i62 == 1;
    goto corral_source_split_974;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i62 := $sgt.i32(out_$i61, 128);
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.55, out_$p60);
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(out_$i59, 4));
    goto corral_source_split_970;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(in_$i3);
    goto corral_source_split_969;

  $bb22:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, out_$p58, 1);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(out_$i57, 4));
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(in_$i3);
    goto corral_source_split_965;

  $bb21:
    assume out_$i56 == 1;
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$i56 := $sle.i32(out_$i55, 0);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i32($M.55, out_$p54);
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(pcm_substreams, $mul.ref(0, 128)), $mul.ref(out_$i53, 4));
    goto corral_source_split_960;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(in_$i3);
    goto corral_source_split_959;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34:
    assume out_$i77 == 1;
    goto corral_source_split_994;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i76, out_$i52);
    goto corral_source_split_957;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.56, out_$p75);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(pcm_devs, $mul.ref(0, 128)), $mul.ref(out_$i74, 4));
    goto corral_source_split_955;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    out_$i74 := $sext.i32.i64(in_$i3);
    goto corral_source_split_954;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i52, out_$i74, out_$p75, out_$i76, out_$i77 := snd_dummy_probe_loop_$bb19(in_$i3, in_$p17, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i72, out_$i73, out_$i52, out_$i74, out_$p75, out_$i76, out_$i77);
    return;

  exit:
    return;
}



procedure snd_dummy_probe_loop_$bb19(in_$i3: i32, in_$p17: ref, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$i56: i1, in_$i57: i64, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i64, in_$p64: ref, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i72: i32, in_$i73: i1, in_$i52: i32, in_$i74: i64, in_$p75: ref, in_$i76: i32, in_$i77: i1) returns (out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$i56: i1, out_$i57: i64, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i64, out_$p64: ref, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i72: i32, out_$i73: i1, out_$i52: i32, out_$i74: i64, out_$p75: ref, out_$i76: i32, out_$i77: i1);
  modifies $M.0, $CurrAddr, $M.55;



implementation snd_dummy_probe_loop_$bb8(in_$i3: i32, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p23: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1) returns (out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p23: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1)
{

  entry:
    out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p43, out_$p44, out_$i45, out_$i46, out_$p23, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51 := in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p43, in_$p44, in_$i45, in_$i46, in_$p23, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_912;

  $bb14:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p23 := out_$p43;
    goto $bb14_dummy;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_944;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.53, out_$p43);
    goto corral_source_split_943;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p23, $mul.ref(1, 8));
    goto corral_source_split_942;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p23;
    assume true;
    goto $bb11;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_926;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} out_$i30 := strcmp(out_$p26, out_$p29);
    call {:si_unique_call 229} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_925;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.53, out_$p23);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.54, out_$p25);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(out_$i24, 8));
    goto corral_source_split_920;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(in_$i3);
    goto corral_source_split_919;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume out_$i51 == 1;
    goto corral_source_split_949;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i50 := $p2i.ref.i64(out_$p49);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.54, out_$p48);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(model, $mul.ref(0, 256)), $mul.ref(out_$i47, 8));
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(in_$i3);
    goto corral_source_split_913;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p43, out_$p44, out_$i45, out_$i46, out_$p23, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51 := snd_dummy_probe_loop_$bb8(in_$i3, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p43, out_$p44, out_$i45, out_$i46, out_$p23, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51);
    return;

  exit:
    return;
}



procedure snd_dummy_probe_loop_$bb8(in_$i3: i32, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p23: ref, in_$i47: i64, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$i51: i1) returns (out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p23: ref, out_$i47: i64, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$i51: i1);



implementation snd_card_dummy_new_mixer_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i13: i32) returns (out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i13 := in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i13;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_1221;

  $bb13:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i34;
    goto $bb13_dummy;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$i35 := $ule.i32(out_$i34, 10);
    goto corral_source_split_1249;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i13, 1);
    call {:si_unique_call 278} {:cexpr "idx"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_1248;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p27, out_$p17);
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_1239;

  $bb7:
    assume out_$i26 == 1;
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} out_$i25 := strcmp(out_$p24, .str.13);
    call {:si_unique_call 275} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_1234;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1233;

  $bb4:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb4;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, 0);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} out_$i18 := snd_ctl_add(in_$p3, out_$p17);
    call {:si_unique_call 273} {:cexpr "err"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} out_$p17 := snd_ctl_new1(out_$p15, out_$p16);
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_1224;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i32.i64(out_$i13);
    out_$p15 := $add.ref($add.ref(snd_dummy_controls, $mul.ref(0, 880)), $mul.ref(out_$i14, 80));
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb11:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p33, out_$p17);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 288)), $mul.ref(272, 1));
    goto corral_source_split_1252;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_1251;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 0);
    goto corral_source_split_1246;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} out_$i31 := strcmp(out_$p30, .str.14);
    call {:si_unique_call 277} {:cexpr "tmp"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(out_$p29);
    goto corral_source_split_1244;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p17, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_1243;

  $bb8:
    assume !(out_$i26 == 1);
    goto corral_source_split_1242;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i13 := snd_card_dummy_new_mixer_loop_$bb1(in_$p0, in_$p3, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i13);
    return;

  exit:
    return;
}



procedure snd_card_dummy_new_mixer_loop_$bb1(in_$p0: ref, in_$p3: ref, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i13: i32) returns (out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i13: i32);
  modifies $M.0;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i251: i32, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i282: i32, in_$i283: i1, in_$p284: ref, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i290: i32, in_$i291: i1, in_$p292: ref, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$i297: i64, in_$i298: i64, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i303: i64, in_$i304: i64, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i318: i32, in_$i319: i1, in_$i320: i32, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i32, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i333: i64, in_$i334: i64, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i339: i64, in_$i340: i64, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$i358: i32, in_$i359: i1, in_$p360: ref, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i374: i32, in_$i375: i1, in_$i376: i32, in_$i377: i1, in_$i378: i1, in_$i379: i1, in_$i380: i32, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i32, in_$i388: i1, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i1, in_$i395: i1, in_$i396: i1, in_$i397: i1, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i1, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$p405: ref, in_$i407: i32, in_$i408: i1, in_$p409: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i415: i32, in_$i416: i1, in_$p417: ref, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i423: i32, in_$i424: i1, in_$p425: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$i435: i32, in_$i436: i1, in_$p437: ref, in_$i439: i32, in_$i440: i1, in_$p441: ref, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i454: i32, in_$i455: i32, in_$i456: i1, in_$i457: i32, in_$i458: i32, in_$i459: i32, in_$i460: i1, in_$p461: ref, in_$i462: i32, in_$i463: i32, in_$i464: i1, in_$i465: i32, in_$i466: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i64, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i64, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i64, in_vslice_dummy_var_83: i64, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: ref, in_vslice_dummy_var_89: ref, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i64, in_vslice_dummy_var_103: i64, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i251: i32, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i282: i32, out_$i283: i1, out_$p284: ref, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i290: i32, out_$i291: i1, out_$p292: ref, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$i297: i64, out_$i298: i64, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i303: i64, out_$i304: i64, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i318: i32, out_$i319: i1, out_$i320: i32, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i32, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i333: i64, out_$i334: i64, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i339: i64, out_$i340: i64, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$i358: i32, out_$i359: i1, out_$p360: ref, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i374: i32, out_$i375: i1, out_$i376: i32, out_$i377: i1, out_$i378: i1, out_$i379: i1, out_$i380: i32, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i32, out_$i388: i1, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i1, out_$i395: i1, out_$i396: i1, out_$i397: i1, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i1, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$p405: ref, out_$i407: i32, out_$i408: i1, out_$p409: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i415: i32, out_$i416: i1, out_$p417: ref, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i423: i32, out_$i424: i1, out_$p425: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$i435: i32, out_$i436: i1, out_$p437: ref, out_$i439: i32, out_$i440: i1, out_$p441: ref, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i454: i32, out_$i455: i32, out_$i456: i1, out_$i457: i32, out_$i458: i32, out_$i459: i32, out_$i460: i1, out_$p461: ref, out_$i462: i32, out_$i463: i32, out_$i464: i1, out_$i465: i32, out_$i466: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i64, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i64, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i64, out_vslice_dummy_var_83: i64, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: ref, out_vslice_dummy_var_89: ref, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i64, out_vslice_dummy_var_103: i64, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$p249, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$p280, out_$i282, out_$i283, out_$p284, out_$i286, out_$i287, out_$p288, out_$i290, out_$i291, out_$p292, out_$i294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$i306, out_$i307, out_$p308, out_$i310, out_$i311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$p332, out_$i333, out_$i334, out_$i336, out_$i337, out_$p338, out_$i339, out_$i340, out_$i342, out_$i343, out_$p344, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$i354, out_$i355, out_$p356, out_$i358, out_$i359, out_$p360, out_$i362, out_$i363, out_$p364, out_$i366, out_$i367, out_$p368, out_$i370, out_$i371, out_$p372, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$p405, out_$i407, out_$i408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i415, out_$i416, out_$p417, out_$i419, out_$i420, out_$p421, out_$i423, out_$i424, out_$p425, out_$i427, out_$i428, out_$p429, out_$i431, out_$i432, out_$p433, out_$i435, out_$i436, out_$p437, out_$i439, out_$i440, out_$p441, out_$i443, out_$i444, out_$p445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105 := in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i49, in_$i50, in_$p51, in_$i53, in_$i54, in_$p55, in_$i57, in_$i58, in_$p59, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$i154, in_$i155, in_$i156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$p212, in_$i214, in_$i215, in_$p216, in_$i218, in_$i219, in_$p220, in_$i222, in_$i223, in_$p224, in_$i226, in_$i227, in_$p228, in_$i229, in_$i230, in_$p231, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$p249, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i260, in_$i261, in_$p262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$p280, in_$i282, in_$i283, in_$p284, in_$i286, in_$i287, in_$p288, in_$i290, in_$i291, in_$p292, in_$i294, in_$i295, in_$p296, in_$i297, in_$i298, in_$i300, in_$i301, in_$p302, in_$i303, in_$i304, in_$i306, in_$i307, in_$p308, in_$i310, in_$i311, in_$p312, in_$i314, in_$i315, in_$p316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$p324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i330, in_$i331, in_$p332, in_$i333, in_$i334, in_$i336, in_$i337, in_$p338, in_$i339, in_$i340, in_$i342, in_$i343, in_$p344, in_$i346, in_$i347, in_$p348, in_$i350, in_$i351, in_$p352, in_$i354, in_$i355, in_$p356, in_$i358, in_$i359, in_$p360, in_$i362, in_$i363, in_$p364, in_$i366, in_$i367, in_$p368, in_$i370, in_$i371, in_$p372, in_$i374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i386, in_$i387, in_$i388, in_$i389, in_$i390, in_$i391, in_$i392, in_$i393, in_$i394, in_$i395, in_$i396, in_$i397, in_$i398, in_$i399, in_$i400, in_$i401, in_$i402, in_$i403, in_$i404, in_$p405, in_$i407, in_$i408, in_$p409, in_$i411, in_$i412, in_$p413, in_$i415, in_$i416, in_$p417, in_$i419, in_$i420, in_$p421, in_$i423, in_$i424, in_$p425, in_$i427, in_$i428, in_$p429, in_$i431, in_$i432, in_$p433, in_$i435, in_$i436, in_$p437, in_$i439, in_$i440, in_$p441, in_$i443, in_$i444, in_$p445, in_$i447, in_$i448, in_$p449, in_$i451, in_$i452, in_$p453, in_$i454, in_$i455, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$p461, in_$i462, in_$i463, in_$i464, in_$i465, in_$i466, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77, in_vslice_dummy_var_78, in_vslice_dummy_var_79, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 378} out_$i24 := __VERIFIER_nondet_int();
    call {:si_unique_call 379} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i24);
    call {:si_unique_call 380} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i24);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb64_dummy;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb511:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb25:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 385} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1505;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} out_vslice_dummy_var_63 := dummy_hrtimer_start(out_$p47);
    goto corral_source_split_1504;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    out_$p47 := $M.74;
    goto corral_source_split_1503;

  $bb42:
    assume out_$i46 == 1;
    goto corral_source_split_1502;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, 1);
    goto corral_source_split_1500;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    out_$i45 := $M.84;
    goto corral_source_split_1499;

  $bb40:
    assume out_$i44 == 1;
    goto corral_source_split_1498;

  $bb36:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i37, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb27:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i37, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_1476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 381} out_$i37 := __VERIFIER_nondet_int();
    call {:si_unique_call 382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i37);
    call {:si_unique_call 383} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i37);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i36 == 1;
    goto corral_source_split_1476;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_1474;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i35 := $M.84;
    goto corral_source_split_1473;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_1472;

  $bb20:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i24, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb16:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb3:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i24, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i24, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb47:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 387} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1510;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} out_vslice_dummy_var_64 := dummy_hrtimer_prepare(out_$p51);
    goto corral_source_split_1509;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    out_$p51 := $M.74;
    goto corral_source_split_1508;

  $bb46:
    assume out_$i50 == 1;
    goto corral_source_split_1507;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 1);
    goto corral_source_split_1492;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    out_$i49 := $M.84;
    goto corral_source_split_1491;

  $bb38:
    assume out_$i43 == 1;
    goto corral_source_split_1490;

  $bb37:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i37, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb50:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 389} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1515;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} out_vslice_dummy_var_65 := dummy_hrtimer_pointer(out_$p55);
    goto corral_source_split_1514;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    out_$p55 := $M.74;
    goto corral_source_split_1513;

  $bb49:
    assume out_$i54 == 1;
    goto corral_source_split_1512;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_1496;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    out_$i53 := $M.84;
    goto corral_source_split_1495;

  $bb39:
    assume !(out_$i43 == 1);
    goto corral_source_split_1494;

  $bb53:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 391} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1520;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_vslice_dummy_var_66 := dummy_hrtimer_stop(out_$p59);
    goto corral_source_split_1519;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    out_$p59 := $M.74;
    goto corral_source_split_1518;

  $bb52:
    assume out_$i58 == 1;
    goto corral_source_split_1517;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$i57 := $M.84;
    goto corral_source_split_1479;

  $bb29:
    assume out_$i39 == 1;
    goto corral_source_split_1478;

  $bb28:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i37, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb56:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 393} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1525;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} dummy_hrtimer_free(out_$p63);
    goto corral_source_split_1524;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    out_$p63 := $M.74;
    goto corral_source_split_1523;

  $bb55:
    assume out_$i62 == 1;
    goto corral_source_split_1522;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 1);
    goto corral_source_split_1484;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    out_$i61 := $M.84;
    goto corral_source_split_1483;

  $bb31:
    assume out_$i40 == 1;
    goto corral_source_split_1482;

  $bb30:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb59:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 395} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_1530;

  SeqInstr_36:
    goto corral_source_split_1529;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} out_vslice_dummy_var_67 := dummy_hrtimer_create(out_$p66);
    goto SeqInstr_35;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    out_$p66 := $M.74;
    goto corral_source_split_1528;

  $bb58:
    assume out_$i65 == 1;
    goto corral_source_split_1527;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 1);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$i64 := $M.84;
    goto corral_source_split_1487;

  $bb33:
    assume out_$i41 == 1;
    goto corral_source_split_1486;

  $bb32:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i37, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} ldv_stop();
    goto corral_source_split_1532;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb35;

  $bb41:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb35;

  $bb66:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb195:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb183:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb114:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.85 := 15;
    call {:si_unique_call 402} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_1624;

  $bb113:
    assume out_$i97 == 1;
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 0);
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$i96 := $M.94;
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.94 := out_$i95;
    call {:si_unique_call 401} {:cexpr "ldv_retval_18"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} out_$i95 := snd_dummy_resume(out_$p94);
    goto corral_source_split_1618;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    out_$p94 := $M.76;
    goto corral_source_split_1617;

  $bb111:
    assume out_$i93 == 1;
    goto corral_source_split_1616;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 14);
    goto corral_source_split_1614;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    out_$i92 := $M.85;
    goto corral_source_split_1613;

  $bb109:
    assume out_$i91 == 1;
    goto corral_source_split_1612;

  $bb107:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i70, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb101:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i70, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb91:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i70, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb68:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i70, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i70, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_1534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 397} out_$i70 := __VERIFIER_nondet_int();
    call {:si_unique_call 398} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i70);
    call {:si_unique_call 399} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i70);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb65:
    assume out_$i69 == 1;
    goto corral_source_split_1534;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$i68 := $M.85;
    goto corral_source_split_1469;

  $bb21:
    assume !(out_$i33 == 1);
    goto corral_source_split_1468;

  $bb119:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb121:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.85 := 3;
    call {:si_unique_call 405} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_1634;

  $bb120:
    assume out_$i103 == 1;
    goto corral_source_split_1633;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 0);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i102 := $M.95;
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.95 := out_$i101;
    call {:si_unique_call 404} {:cexpr "ldv_retval_17"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_$i101 := snd_dummy_suspend(out_$p100);
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    out_$p100 := $M.76;
    goto corral_source_split_1627;

  $bb118:
    assume out_$i99 == 1;
    goto corral_source_split_1626;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 2);
    goto corral_source_split_1610;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$i98 := $M.85;
    goto corral_source_split_1609;

  $bb108:
    assume !(out_$i90 == 1);
    goto corral_source_split_1608;

  $bb125:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb127:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.85 := 15;
    call {:si_unique_call 408} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_1644;

  $bb126:
    assume out_$i109 == 1;
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 0);
    goto corral_source_split_1641;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    out_$i108 := $M.96;
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.96 := out_$i107;
    call {:si_unique_call 407} {:cexpr "ldv_retval_16"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} out_$i107 := snd_dummy_resume(out_$p106);
    goto corral_source_split_1638;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    out_$p106 := $M.76;
    goto corral_source_split_1637;

  $bb124:
    assume out_$i105 == 1;
    goto corral_source_split_1636;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i104, 13);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$i104 := $M.85;
    goto corral_source_split_1597;

  $bb103:
    assume out_$i88 == 1;
    goto corral_source_split_1596;

  $bb102:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i70, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb131:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb133:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.85 := 4;
    call {:si_unique_call 411} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_1654;

  $bb132:
    assume out_$i115 == 1;
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$i114 := $M.97;
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $M.97 := out_$i113;
    call {:si_unique_call 410} {:cexpr "ldv_retval_15"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} out_$i113 := snd_dummy_suspend(out_$p112);
    goto corral_source_split_1648;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    out_$p112 := $M.76;
    goto corral_source_split_1647;

  $bb130:
    assume out_$i111 == 1;
    goto corral_source_split_1646;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 2);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$i110 := $M.85;
    goto corral_source_split_1601;

  $bb105:
    assume out_$i89 == 1;
    goto corral_source_split_1600;

  $bb104:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i70, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb137:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb139:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.85 := 5;
    call {:si_unique_call 414} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(5);
    goto corral_source_split_1664;

  $bb138:
    assume out_$i121 == 1;
    goto corral_source_split_1663;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    out_$i121 := $eq.i32(out_$i120, 0);
    goto corral_source_split_1661;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i120 := $M.98;
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.98 := out_$i119;
    call {:si_unique_call 413} {:cexpr "ldv_retval_14"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} out_$i119 := snd_dummy_suspend(out_$p118);
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$p118 := $M.76;
    goto corral_source_split_1657;

  $bb136:
    assume out_$i117 == 1;
    goto corral_source_split_1656;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 2);
    goto corral_source_split_1606;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    out_$i116 := $M.85;
    goto corral_source_split_1605;

  $bb106:
    assume !(out_$i89 == 1);
    goto corral_source_split_1604;

  $bb143:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb145:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.85 := 15;
    call {:si_unique_call 417} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(15);
    goto corral_source_split_1674;

  $bb144:
    assume out_$i127 == 1;
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i32(out_$i126, 0);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$i126 := $M.99;
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.99 := out_$i125;
    call {:si_unique_call 416} {:cexpr "ldv_retval_13"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} out_$i125 := snd_dummy_resume(out_$p124);
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    out_$p124 := $M.76;
    goto corral_source_split_1667;

  $bb142:
    assume out_$i123 == 1;
    goto corral_source_split_1666;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 12);
    goto corral_source_split_1590;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    out_$i122 := $M.85;
    goto corral_source_split_1589;

  $bb99:
    assume out_$i86 == 1;
    goto corral_source_split_1588;

  $bb93:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i70, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb92:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    out_$i83 := $slt.i32(out_$i70, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb149:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb151:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $M.85 := 6;
    call {:si_unique_call 420} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(6);
    goto corral_source_split_1683;

  $bb150:
    assume out_$i132 == 1;
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 0);
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$i131 := $M.100;
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $M.100 := out_$i130;
    call {:si_unique_call 419} {:cexpr "ldv_retval_12"} boogie_si_record_i32(out_$i130);
    goto corral_source_split_1678;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} out_$i130 := ldv_suspend_late_3();
    goto corral_source_split_1677;

  $bb148:
    assume out_$i129 == 1;
    goto corral_source_split_1676;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 3);
    goto corral_source_split_1594;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    out_$i128 := $M.85;
    goto corral_source_split_1593;

  $bb100:
    assume !(out_$i86 == 1);
    goto corral_source_split_1592;

  $bb155:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb157:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.85 := 13;
    call {:si_unique_call 423} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_1692;

  $bb156:
    assume out_$i137 == 1;
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 0);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i136 := $M.101;
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $M.101 := out_$i135;
    call {:si_unique_call 422} {:cexpr "ldv_retval_11"} boogie_si_record_i32(out_$i135);
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} out_$i135 := ldv_restore_early_3();
    goto corral_source_split_1686;

  $bb154:
    assume out_$i134 == 1;
    goto corral_source_split_1685;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 9);
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    out_$i133 := $M.85;
    goto corral_source_split_1577;

  $bb95:
    assume out_$i84 == 1;
    goto corral_source_split_1576;

  $bb94:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i70, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb161:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb163:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.85 := 12;
    call {:si_unique_call 426} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_1701;

  $bb162:
    assume out_$i142 == 1;
    goto corral_source_split_1700;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 0);
    goto corral_source_split_1698;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    out_$i141 := $M.102;
    goto corral_source_split_1697;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.102 := out_$i140;
    call {:si_unique_call 425} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_1696;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} out_$i140 := ldv_resume_early_3();
    goto corral_source_split_1695;

  $bb160:
    assume out_$i139 == 1;
    goto corral_source_split_1694;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 6);
    goto corral_source_split_1582;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$i138 := $M.85;
    goto corral_source_split_1581;

  $bb97:
    assume out_$i85 == 1;
    goto corral_source_split_1580;

  $bb96:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i85 := $slt.i32(out_$i70, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb167:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $M.85 := 14;
    call {:si_unique_call 429} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_1710;

  $bb168:
    assume out_$i147 == 1;
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 0);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$i146 := $M.103;
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.103 := out_$i145;
    call {:si_unique_call 428} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i145);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} out_$i145 := ldv_thaw_early_3();
    goto corral_source_split_1704;

  $bb166:
    assume out_$i144 == 1;
    goto corral_source_split_1703;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 11);
    goto corral_source_split_1586;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    out_$i143 := $M.85;
    goto corral_source_split_1585;

  $bb98:
    assume !(out_$i85 == 1);
    goto corral_source_split_1584;

  $bb173:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb175:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $M.85 := 12;
    call {:si_unique_call 432} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(12);
    goto corral_source_split_1719;

  $bb174:
    assume out_$i152 == 1;
    goto corral_source_split_1718;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 0);
    goto corral_source_split_1716;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    out_$i151 := $M.104;
    goto corral_source_split_1715;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $M.104 := out_$i150;
    call {:si_unique_call 431} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i150);
    goto corral_source_split_1714;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} out_$i150 := ldv_resume_noirq_3();
    goto corral_source_split_1713;

  $bb172:
    assume out_$i149 == 1;
    goto corral_source_split_1712;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 7);
    goto corral_source_split_1570;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i148 := $M.85;
    goto corral_source_split_1569;

  $bb89:
    assume out_$i81 == 1;
    goto corral_source_split_1568;

  $bb83:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i70, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb70:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := $slt.i32(out_$i70, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb69:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i70, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb179:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb181:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $M.85 := 10;
    call {:si_unique_call 435} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(10);
    goto corral_source_split_1728;

  $bb180:
    assume out_$i157 == 1;
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 0);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$i156 := $M.105;
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $M.105 := out_$i155;
    call {:si_unique_call 434} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} out_$i155 := ldv_freeze_noirq_3();
    goto corral_source_split_1722;

  $bb178:
    assume out_$i154 == 1;
    goto corral_source_split_1721;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb178, $bb179;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 5);
    goto corral_source_split_1574;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    out_$i153 := $M.85;
    goto corral_source_split_1573;

  $bb90:
    assume !(out_$i81 == 1);
    goto corral_source_split_1572;

  $bb185:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb187:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.91 := out_$i164;
    call {:si_unique_call 439} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i164);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i164 := $add.i32(out_$i163, 1);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$i163 := $M.91;
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $M.85 := 2;
    call {:si_unique_call 438} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_1737;

  $bb186:
    assume out_$i162 == 1;
    goto corral_source_split_1736;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 0);
    goto corral_source_split_1734;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    out_$i161 := $M.106;
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.106 := out_$i160;
    call {:si_unique_call 437} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} out_$i160 := ldv_prepare_3();
    goto corral_source_split_1731;

  $bb184:
    assume out_$i159 == 1;
    goto corral_source_split_1730;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 1);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i158 := $M.85;
    goto corral_source_split_1557;

  $bb85:
    assume out_$i79 == 1;
    goto corral_source_split_1556;

  $bb84:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i70, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb191:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb193:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.85 := 11;
    call {:si_unique_call 442} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(11);
    goto corral_source_split_1749;

  $bb192:
    assume out_$i169 == 1;
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 0);
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i168 := $M.107;
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $M.107 := out_$i167;
    call {:si_unique_call 441} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i167);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} out_$i167 := ldv_freeze_late_3();
    goto corral_source_split_1743;

  $bb190:
    assume out_$i166 == 1;
    goto corral_source_split_1742;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 5);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$i165 := $M.85;
    goto corral_source_split_1561;

  $bb87:
    assume out_$i80 == 1;
    goto corral_source_split_1560;

  $bb86:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    out_$i80 := $slt.i32(out_$i70, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb197:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb199:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.85 := 14;
    call {:si_unique_call 445} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(14);
    goto corral_source_split_1758;

  $bb198:
    assume out_$i174 == 1;
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$i173 := $M.108;
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.108 := out_$i172;
    call {:si_unique_call 444} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} out_$i172 := ldv_thaw_noirq_3();
    goto corral_source_split_1752;

  $bb196:
    assume out_$i171 == 1;
    goto corral_source_split_1751;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 10);
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    out_$i170 := $M.85;
    goto corral_source_split_1565;

  $bb88:
    assume !(out_$i80 == 1);
    goto corral_source_split_1564;

  $bb203:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb205:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $M.85 := 8;
    call {:si_unique_call 448} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(8);
    goto corral_source_split_1767;

  $bb204:
    assume out_$i179 == 1;
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 0);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i178 := $M.109;
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $M.109 := out_$i177;
    call {:si_unique_call 447} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_1762;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} out_$i177 := ldv_poweroff_noirq_3();
    goto corral_source_split_1761;

  $bb202:
    assume out_$i176 == 1;
    goto corral_source_split_1760;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 4);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$i175 := $M.85;
    goto corral_source_split_1549;

  $bb81:
    assume out_$i77 == 1;
    goto corral_source_split_1548;

  $bb72:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := $slt.i32(out_$i70, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb71:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i70, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb209:
    assume !(out_$i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb211:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.85 := 9;
    call {:si_unique_call 451} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(9);
    goto corral_source_split_1776;

  $bb210:
    assume out_$i184 == 1;
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    out_$i184 := $eq.i32(out_$i183, 0);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$i183 := $M.110;
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.110 := out_$i182;
    call {:si_unique_call 450} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i182);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} out_$i182 := ldv_poweroff_late_3();
    goto corral_source_split_1770;

  $bb208:
    assume out_$i181 == 1;
    goto corral_source_split_1769;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$i181 := $eq.i32(out_$i180, 4);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$i180 := $M.85;
    goto corral_source_split_1553;

  $bb82:
    assume !(out_$i77 == 1);
    goto corral_source_split_1552;

  $bb215:
    assume !(out_$i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb217:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.85 := 13;
    call {:si_unique_call 454} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(13);
    goto corral_source_split_1785;

  $bb216:
    assume out_$i189 == 1;
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 0);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$i188 := $M.111;
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $M.111 := out_$i187;
    call {:si_unique_call 453} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i187);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} out_$i187 := ldv_restore_noirq_3();
    goto corral_source_split_1779;

  $bb214:
    assume out_$i186 == 1;
    goto corral_source_split_1778;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i186 := $eq.i32(out_$i185, 8);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i185 := $M.85;
    goto corral_source_split_1537;

  $bb74:
    assume out_$i74 == 1;
    goto corral_source_split_1536;

  $bb73:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i70, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb221:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb223:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $M.85 := 7;
    call {:si_unique_call 457} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(7);
    goto corral_source_split_1794;

  $bb222:
    assume out_$i194 == 1;
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 0);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$i193 := $M.112;
    goto corral_source_split_1790;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $M.112 := out_$i192;
    call {:si_unique_call 456} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} out_$i192 := ldv_suspend_noirq_3();
    goto corral_source_split_1788;

  $bb220:
    assume out_$i191 == 1;
    goto corral_source_split_1787;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 3);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i190 := $M.85;
    goto corral_source_split_1541;

  $bb76:
    assume out_$i75 == 1;
    goto corral_source_split_1540;

  $bb75:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := $slt.i32(out_$i70, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb227:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    goto $bb228;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $M.91 := out_$i199;
    call {:si_unique_call 460} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$i199 := $sub.i32(out_$i198, 1);
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i198 := $M.91;
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 459} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} out_vslice_dummy_var_68 := ldv_complete_3();
    goto corral_source_split_1797;

  $bb226:
    assume out_$i196 == 1;
    goto corral_source_split_1796;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 15);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$i195 := $M.85;
    goto corral_source_split_1545;

  $bb78:
    assume out_$i76 == 1;
    goto corral_source_split_1544;

  $bb77:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i70, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_stop();
    goto corral_source_split_1803;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i76 == 1);
    goto $bb80;

  $bb110:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb80;

  $bb233:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb251:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb252;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 466} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} out_vslice_dummy_var_69 := dummy_systimer_start(out_$p212);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p212 := $M.79;
    goto corral_source_split_1832;

  $bb250:
    assume out_$i211 == 1;
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb250, $bb251;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 1);
    goto corral_source_split_1829;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    out_$i210 := $M.86;
    goto corral_source_split_1828;

  $bb248:
    assume out_$i209 == 1;
    goto corral_source_split_1827;

  $bb244:
    assume out_$i207 == 1;
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i202, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb235:
    assume out_$i203 == 1;
    assume {:verifier.code 0} true;
    out_$i207 := $slt.i32(out_$i202, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb244, $bb245;

  $bb234:
    assume {:verifier.code 0} true;
    out_$i203 := $slt.i32(out_$i202, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_1805:
    assume {:verifier.code 1} true;
    call {:si_unique_call 462} out_$i202 := __VERIFIER_nondet_int();
    call {:si_unique_call 463} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i202);
    call {:si_unique_call 464} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i202);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb232:
    assume out_$i201 == 1;
    goto corral_source_split_1805;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i201 := $ne.i32(out_$i200, 0);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    out_$i200 := $M.86;
    goto corral_source_split_1461;

  $bb18:
    assume out_$i32 == 1;
    goto corral_source_split_1460;

  $bb17:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb255:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 468} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} out_vslice_dummy_var_70 := dummy_systimer_prepare(out_$p216);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    out_$p216 := $M.79;
    goto corral_source_split_1837;

  $bb254:
    assume out_$i215 == 1;
    goto corral_source_split_1836;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 1);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$i214 := $M.86;
    goto corral_source_split_1820;

  $bb246:
    assume out_$i208 == 1;
    goto corral_source_split_1819;

  $bb245:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    out_$i208 := $slt.i32(out_$i202, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb258:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 470} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} out_vslice_dummy_var_71 := dummy_systimer_pointer(out_$p220);
    goto corral_source_split_1843;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    out_$p220 := $M.79;
    goto corral_source_split_1842;

  $bb257:
    assume out_$i219 == 1;
    goto corral_source_split_1841;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i218 := $M.86;
    goto corral_source_split_1824;

  $bb247:
    assume !(out_$i208 == 1);
    goto corral_source_split_1823;

  $bb261:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 472} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} out_vslice_dummy_var_72 := dummy_systimer_stop(out_$p224);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p224 := $M.79;
    goto corral_source_split_1847;

  $bb260:
    assume out_$i223 == 1;
    goto corral_source_split_1846;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 1);
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    out_$i222 := $M.86;
    goto corral_source_split_1808;

  $bb237:
    assume out_$i204 == 1;
    goto corral_source_split_1807;

  $bb236:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    out_$i204 := $slt.i32(out_$i202, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb264:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 474} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} dummy_systimer_free(out_$p228);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p228 := $M.79;
    goto corral_source_split_1852;

  $bb263:
    assume out_$i227 == 1;
    goto corral_source_split_1851;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i226 := $M.86;
    goto corral_source_split_1812;

  $bb239:
    assume out_$i205 == 1;
    goto corral_source_split_1811;

  $bb238:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    out_$i205 := $slt.i32(out_$i202, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb267:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 476} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_1859;

  SeqInstr_39:
    goto corral_source_split_1858;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} out_vslice_dummy_var_73 := dummy_systimer_create(out_$p231);
    goto SeqInstr_38;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p231 := $M.79;
    goto corral_source_split_1857;

  $bb266:
    assume out_$i230 == 1;
    goto corral_source_split_1856;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 1);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$i229 := $M.86;
    goto corral_source_split_1816;

  $bb241:
    assume out_$i206 == 1;
    goto corral_source_split_1815;

  $bb240:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i202, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} ldv_stop();
    goto corral_source_split_1861;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb242:
    assume {:verifier.code 0} true;
    assume !(out_$i206 == 1);
    goto $bb243;

  $bb249:
    assume {:verifier.code 0} true;
    assume !(out_$i209 == 1);
    goto $bb243;

  $bb273:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb288:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb283:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb285:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.91 := out_$i246;
    call {:si_unique_call 484} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i246);
    goto corral_source_split_1884;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    out_$i246 := $add.i32(out_$i245, 1);
    goto corral_source_split_1883;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    out_$i245 := $M.91;
    goto corral_source_split_1882;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.87 := 2;
    call {:si_unique_call 483} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_1881;

  $bb284:
    assume out_$i244 == 1;
    goto corral_source_split_1880;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 0);
    goto corral_source_split_1878;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$i243 := $M.113;
    goto corral_source_split_1877;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.113 := out_$i242;
    call {:si_unique_call 482} {:cexpr "ldv_retval_19"} boogie_si_record_i32(out_$i242);
    goto corral_source_split_1876;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} out_$i242 := snd_dummy_probe(out_$p241);
    goto corral_source_split_1875;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    out_$p241 := $M.78;
    goto corral_source_split_1874;

  $bb282:
    assume out_$i240 == 1;
    goto corral_source_split_1873;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb282, $bb283;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 1);
    goto corral_source_split_1871;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i239 := $M.87;
    goto corral_source_split_1870;

  $bb280:
    assume out_$i238 == 1;
    goto corral_source_split_1869;

  $bb275:
    assume out_$i236 == 1;
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i235, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280, $bb281;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i32(out_$i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_1863:
    assume {:verifier.code 1} true;
    call {:si_unique_call 478} out_$i235 := __VERIFIER_nondet_int();
    call {:si_unique_call 479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i235);
    call {:si_unique_call 480} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i235);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb272:
    assume out_$i234 == 1;
    goto corral_source_split_1863;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i234 := $ne.i32(out_$i233, 0);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$i233 := $M.87;
    goto corral_source_split_1465;

  $bb19:
    assume !(out_$i32 == 1);
    goto corral_source_split_1464;

  $bb290:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.91 := out_$i252;
    call {:si_unique_call 487} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i252);
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    out_$i252 := $sub.i32(out_$i251, 1);
    goto corral_source_split_1891;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i251 := $M.91;
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $M.87 := 1;
    call {:si_unique_call 486} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} out_vslice_dummy_var_74 := snd_dummy_remove(out_$p249);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$p249 := $M.78;
    goto corral_source_split_1887;

  $bb289:
    assume out_$i248 == 1;
    goto corral_source_split_1886;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 2);
    goto corral_source_split_1867;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i247 := $M.87;
    goto corral_source_split_1866;

  $bb277:
    assume out_$i237 == 1;
    goto corral_source_split_1865;

  $bb276:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i235, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb277, $bb278;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} ldv_stop();
    goto corral_source_split_1894;

  $bb279:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb278:
    assume {:verifier.code 0} true;
    assume !(out_$i237 == 1);
    goto $bb279;

  $bb281:
    assume {:verifier.code 0} true;
    assume !(out_$i238 == 1);
    goto $bb279;

  $bb296:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb301:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    goto $bb302;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 493} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} out_vslice_dummy_var_75 := emu10k1_playback_constraints(in_$p5);
    goto corral_source_split_1903;

  $bb300:
    assume out_$i258 == 1;
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb300, $bb301;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 1);
    goto corral_source_split_1900;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    out_$i257 := $M.88;
    goto corral_source_split_1899;

  $bb298:
    assume out_$i256 == 1;
    goto corral_source_split_1898;

  $bb297:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb298, $bb299;

  corral_source_split_1896:
    assume {:verifier.code 1} true;
    call {:si_unique_call 489} out_$i255 := __VERIFIER_nondet_int();
    call {:si_unique_call 490} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i255);
    call {:si_unique_call 491} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i255);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb295:
    assume out_$i254 == 1;
    goto corral_source_split_1896;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$i254 := $ne.i32(out_$i253, 0);
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i253 := $M.88;
    goto corral_source_split_1453;

  $bb14:
    assume out_$i30 == 1;
    goto corral_source_split_1452;

  $bb5:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i24, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i24, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} ldv_stop();
    goto corral_source_split_1906;

  $bb299:
    assume !(out_$i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb308:
    assume !(out_$i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    goto $bb309;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} choose_timer_1(out_$p262);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$p262 := $M.33;
    goto corral_source_split_1909;

  $bb307:
    assume out_$i261 == 1;
    goto corral_source_split_1908;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i261 := $ne.i32(out_$i260, 0);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i260 := $M.89;
    goto corral_source_split_1457;

  $bb15:
    assume !(out_$i30 == 1);
    goto corral_source_split_1456;

  $bb311:
    assume !(out_$i264 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb342:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 502} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_1969;

  SeqInstr_45:
    goto corral_source_split_1968;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_vslice_dummy_var_77 := dummy_pcm_prepare(out_$p284);
    goto SeqInstr_44;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    out_$p284 := $M.75;
    goto corral_source_split_1967;

  $bb341:
    assume out_$i283 == 1;
    goto corral_source_split_1966;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    out_$i283 := $eq.i32(out_$i282, 1);
    goto corral_source_split_1964;

  $bb340:
    assume {:verifier.code 0} true;
    out_$i282 := $M.90;
    goto corral_source_split_1963;

  $bb339:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 500} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_1961;

  SeqInstr_42:
    goto corral_source_split_1960;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} out_vslice_dummy_var_76 := dummy_pcm_prepare(out_$p280);
    goto SeqInstr_41;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$p280 := $M.75;
    goto corral_source_split_1959;

  $bb338:
    assume out_$i279 == 1;
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$i279 := $eq.i32(out_$i278, 2);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$i278 := $M.90;
    goto corral_source_split_1955;

  $bb336:
    assume out_$i277 == 1;
    goto corral_source_split_1954;

  $bb334:
    assume out_$i276 == 1;
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i265, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb328:
    assume out_$i273 == 1;
    assume {:verifier.code 0} true;
    out_$i276 := $slt.i32(out_$i265, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb313:
    assume out_$i266 == 1;
    assume {:verifier.code 0} true;
    out_$i273 := $slt.i32(out_$i265, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb312:
    assume {:verifier.code 0} true;
    out_$i266 := $slt.i32(out_$i265, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  corral_source_split_1912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 496} out_$i265 := __VERIFIER_nondet_int();
    call {:si_unique_call 497} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i265);
    call {:si_unique_call 498} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i265);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb310:
    assume out_$i264 == 1;
    goto corral_source_split_1912;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i264 := $ne.i32(out_$i263, 0);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i263 := $M.90;
    goto corral_source_split_1441;

  $bb7:
    assume out_$i27 == 1;
    goto corral_source_split_1440;

  $bb6:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i24, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb349:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    goto $bb350;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 506} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} out_vslice_dummy_var_79 := dummy_pcm_hw_free(out_$p292);
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$p292 := $M.75;
    goto corral_source_split_1980;

  $bb348:
    assume out_$i291 == 1;
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, 1);
    goto corral_source_split_1977;

  $bb347:
    assume {:verifier.code 0} true;
    out_$i290 := $M.90;
    goto corral_source_split_1976;

  $bb346:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto $bb347;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 504} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} out_vslice_dummy_var_78 := dummy_pcm_hw_free(out_$p288);
    goto corral_source_split_1973;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    out_$p288 := $M.75;
    goto corral_source_split_1972;

  $bb345:
    assume out_$i287 == 1;
    goto corral_source_split_1971;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb345, $bb346;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 2);
    goto corral_source_split_1952;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    out_$i286 := $M.90;
    goto corral_source_split_1951;

  $bb335:
    assume !(out_$i276 == 1);
    goto corral_source_split_1950;

  $bb355:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 510} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} out_vslice_dummy_var_81 := dummy_pcm_silence(out_$p302, in_$i7, out_$i303, out_$i304);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i64($M.82, in_$p2);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i64($M.80, in_$p0);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    out_$p302 := $M.75;
    goto corral_source_split_1995;

  $bb354:
    assume out_$i301 == 1;
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 1);
    goto corral_source_split_1992;

  $bb353:
    assume {:verifier.code 0} true;
    out_$i300 := $M.90;
    goto corral_source_split_1991;

  $bb352:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 508} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} out_vslice_dummy_var_80 := dummy_pcm_silence(out_$p296, in_$i7, out_$i297, out_$i298);
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i64($M.82, in_$p2);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i297 := $load.i64($M.80, in_$p0);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p296 := $M.75;
    goto corral_source_split_1985;

  $bb351:
    assume out_$i295 == 1;
    goto corral_source_split_1984;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 2);
    goto corral_source_split_1940;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    out_$i294 := $M.90;
    goto corral_source_split_1939;

  $bb330:
    assume out_$i274 == 1;
    goto corral_source_split_1938;

  $bb329:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    out_$i274 := $slt.i32(out_$i265, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb361:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 514} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} out_vslice_dummy_var_83 := dummy_pcm_pointer(out_$p312);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$p312 := $M.75;
    goto corral_source_split_2010;

  $bb360:
    assume out_$i311 == 1;
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 1);
    goto corral_source_split_2007;

  $bb359:
    assume {:verifier.code 0} true;
    out_$i310 := $M.90;
    goto corral_source_split_2006;

  $bb358:
    assume !(out_$i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto $bb359;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 512} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} out_vslice_dummy_var_82 := dummy_pcm_pointer(out_$p308);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p308 := $M.75;
    goto corral_source_split_2002;

  $bb357:
    assume out_$i307 == 1;
    goto corral_source_split_2001;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    out_$i307 := $eq.i32(out_$i306, 2);
    goto corral_source_split_1944;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    out_$i306 := $M.90;
    goto corral_source_split_1943;

  $bb332:
    assume out_$i275 == 1;
    goto corral_source_split_1942;

  $bb331:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    out_$i275 := $slt.i32(out_$i265, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb364:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb366:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto $bb367;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.91 := out_$i321;
    call {:si_unique_call 518} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i321);
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i321 := $sub.i32(out_$i320, 1);
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i320 := $M.91;
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 517} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2022;

  $bb365:
    assume out_$i319 == 1;
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb365, $bb366;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 0);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$i318 := $M.114;
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $M.114 := out_$i317;
    call {:si_unique_call 516} {:cexpr "ldv_retval_21"} boogie_si_record_i32(out_$i317);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} out_$i317 := dummy_pcm_close(out_$p316);
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$p316 := $M.75;
    goto corral_source_split_2015;

  $bb363:
    assume out_$i315 == 1;
    goto corral_source_split_2014;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 2);
    goto corral_source_split_1948;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    out_$i314 := $M.90;
    goto corral_source_split_1947;

  $bb333:
    assume !(out_$i275 == 1);
    goto corral_source_split_1946;

  $bb370:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb372:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb373;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.91 := out_$i329;
    call {:si_unique_call 522} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i329);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i329 := $add.i32(out_$i328, 1);
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i328 := $M.91;
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 521} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2035;

  $bb371:
    assume out_$i327 == 1;
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb371, $bb372;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i327 := $eq.i32(out_$i326, 0);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i326 := $M.115;
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.115 := out_$i325;
    call {:si_unique_call 520} {:cexpr "ldv_retval_20"} boogie_si_record_i32(out_$i325);
    goto corral_source_split_2030;

  SeqInstr_48:
    goto corral_source_split_2029;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} out_$i325 := dummy_pcm_open(out_$p324);
    goto SeqInstr_47;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    out_$p324 := $M.75;
    goto corral_source_split_2028;

  $bb369:
    assume out_$i323 == 1;
    goto corral_source_split_2027;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 1);
    goto corral_source_split_1928;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    out_$i322 := $M.90;
    goto corral_source_split_1927;

  $bb324:
    assume out_$i271 == 1;
    goto corral_source_split_1926;

  $bb315:
    assume out_$i267 == 1;
    assume {:verifier.code 0} true;
    out_$i271 := $slt.i32(out_$i265, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb314:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    out_$i267 := $slt.i32(out_$i265, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb315, $bb316;

  $bb379:
    assume !(out_$i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 526} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} out_vslice_dummy_var_85 := dummy_pcm_copy(out_$p338, in_$i11, out_$i339, in_$p9, out_$i340);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i340 := $load.i64($M.83, in_$p3);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$i339 := $load.i64($M.81, in_$p1);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p338 := $M.75;
    goto corral_source_split_2051;

  $bb378:
    assume out_$i337 == 1;
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 1);
    goto corral_source_split_2048;

  $bb377:
    assume {:verifier.code 0} true;
    out_$i336 := $M.90;
    goto corral_source_split_2047;

  $bb376:
    assume !(out_$i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb377;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 524} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2045;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} out_vslice_dummy_var_84 := dummy_pcm_copy(out_$p332, in_$i11, out_$i333, in_$p9, out_$i334);
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i334 := $load.i64($M.83, in_$p3);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$i333 := $load.i64($M.81, in_$p1);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p332 := $M.75;
    goto corral_source_split_2041;

  $bb375:
    assume out_$i331 == 1;
    goto corral_source_split_2040;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i331 := $eq.i32(out_$i330, 2);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i330 := $M.90;
    goto corral_source_split_1931;

  $bb326:
    assume out_$i272 == 1;
    goto corral_source_split_1930;

  $bb325:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    out_$i272 := $slt.i32(out_$i265, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb385:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 530} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2068;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} out_vslice_dummy_var_87 := snd_pcm_lib_ioctl(out_$p348, in_$i8, in_$p12);
    goto corral_source_split_2067;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$p348 := $M.75;
    goto corral_source_split_2066;

  $bb384:
    assume out_$i347 == 1;
    goto corral_source_split_2065;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$i347 := $eq.i32(out_$i346, 1);
    goto corral_source_split_2063;

  $bb383:
    assume {:verifier.code 0} true;
    out_$i346 := $M.90;
    goto corral_source_split_2062;

  $bb382:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb383;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 528} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2060;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} out_vslice_dummy_var_86 := snd_pcm_lib_ioctl(out_$p344, in_$i8, in_$p12);
    goto corral_source_split_2059;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    out_$p344 := $M.75;
    goto corral_source_split_2058;

  $bb381:
    assume out_$i343 == 1;
    goto corral_source_split_2057;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 2);
    goto corral_source_split_1936;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    out_$i342 := $M.90;
    goto corral_source_split_1935;

  $bb327:
    assume !(out_$i272 == 1);
    goto corral_source_split_1934;

  $bb391:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 534} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} out_vslice_dummy_var_89 := dummy_pcm_page(out_$p356, in_$i6);
    goto corral_source_split_2080;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    out_$p356 := $M.75;
    goto corral_source_split_2079;

  $bb390:
    assume out_$i355 == 1;
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$i355 := $eq.i32(out_$i354, 1);
    goto corral_source_split_2076;

  $bb389:
    assume {:verifier.code 0} true;
    out_$i354 := $M.90;
    goto corral_source_split_2075;

  $bb388:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 532} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} out_vslice_dummy_var_88 := dummy_pcm_page(out_$p352, in_$i6);
    goto corral_source_split_2072;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    out_$p352 := $M.75;
    goto corral_source_split_2071;

  $bb387:
    assume out_$i351 == 1;
    goto corral_source_split_2070;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    out_$i351 := $eq.i32(out_$i350, 2);
    goto corral_source_split_1916;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    out_$i350 := $M.90;
    goto corral_source_split_1915;

  $bb317:
    assume out_$i268 == 1;
    goto corral_source_split_1914;

  $bb316:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    out_$i268 := $slt.i32(out_$i265, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb397:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 538} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} out_vslice_dummy_var_91 := dummy_pcm_hw_params(out_$p364, in_$p14);
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$p364 := $M.75;
    goto corral_source_split_2092;

  $bb396:
    assume out_$i363 == 1;
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 1);
    goto corral_source_split_2089;

  $bb395:
    assume {:verifier.code 0} true;
    out_$i362 := $M.90;
    goto corral_source_split_2088;

  $bb394:
    assume !(out_$i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 536} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2086;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} out_vslice_dummy_var_90 := dummy_pcm_hw_params(out_$p360, in_$p14);
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    out_$p360 := $M.75;
    goto corral_source_split_2084;

  $bb393:
    assume out_$i359 == 1;
    goto corral_source_split_2083;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$i359 := $eq.i32(out_$i358, 2);
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i358 := $M.90;
    goto corral_source_split_1919;

  $bb319:
    assume out_$i269 == 1;
    goto corral_source_split_1918;

  $bb318:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    out_$i269 := $slt.i32(out_$i265, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb319, $bb320;

  $bb403:
    assume !(out_$i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 542} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2107;

  SeqInstr_54:
    goto corral_source_split_2106;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} out_vslice_dummy_var_93 := dummy_pcm_trigger(out_$p372, in_$i10);
    goto SeqInstr_53;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    out_$p372 := $M.75;
    goto corral_source_split_2105;

  $bb402:
    assume out_$i371 == 1;
    goto corral_source_split_2104;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    out_$i371 := $eq.i32(out_$i370, 1);
    goto corral_source_split_2102;

  $bb401:
    assume {:verifier.code 0} true;
    out_$i370 := $M.90;
    goto corral_source_split_2101;

  $bb400:
    assume !(out_$i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $M.90 := 2;
    call {:si_unique_call 540} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_2099;

  SeqInstr_51:
    goto corral_source_split_2098;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} out_vslice_dummy_var_92 := dummy_pcm_trigger(out_$p368, in_$i10);
    goto SeqInstr_50;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$p368 := $M.75;
    goto corral_source_split_2097;

  $bb399:
    assume out_$i367 == 1;
    goto corral_source_split_2096;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    out_$i367 := $eq.i32(out_$i366, 2);
    goto corral_source_split_1924;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    out_$i366 := $M.90;
    goto corral_source_split_1923;

  $bb321:
    assume out_$i270 == 1;
    goto corral_source_split_1922;

  $bb320:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i265, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb321, $bb322;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ldv_stop();
    goto corral_source_split_2109;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb322:
    assume {:verifier.code 0} true;
    assume !(out_$i270 == 1);
    goto $bb323;

  $bb337:
    assume {:verifier.code 0} true;
    assume !(out_$i277 == 1);
    goto $bb323;

  $bb409:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb420:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb419:
    assume {:verifier.code 0} true;
    assume !(out_$i381 == 1);
    goto $bb420;

  $bb422:
    assume {:verifier.code 0} true;
    assume !(out_$i383 == 1);
    goto $bb420;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb422;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$i383 := $eq.i32(out_$i382, 0);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$i382 := $M.91;
    goto corral_source_split_2122;

  $bb418:
    assume out_$i381 == 1;
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb418, $bb419;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i380, 3);
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i380 := $M.92;
    goto corral_source_split_2118;

  $bb416:
    assume out_$i379 == 1;
    goto corral_source_split_2117;

  $bb411:
    assume out_$i377 == 1;
    assume {:verifier.code 0} true;
    out_$i379 := $eq.i32(out_$i376, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb416, $bb417;

  $bb410:
    assume {:verifier.code 0} true;
    out_$i377 := $slt.i32(out_$i376, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_2111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 544} out_$i376 := __VERIFIER_nondet_int();
    call {:si_unique_call 545} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i376);
    call {:si_unique_call 546} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i376);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb408:
    assume out_$i375 == 1;
    goto corral_source_split_2111;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i375 := $ne.i32(out_$i374, 0);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$i374 := $M.92;
    goto corral_source_split_1445;

  $bb9:
    assume out_$i28 == 1;
    goto corral_source_split_1444;

  $bb8:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i24, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb427:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb432:
    assume !(out_$i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    out_$i390 := $ne.i32(out_$i389, 0);
    goto corral_source_split_2152;

  $bb430:
    assume {:verifier.code 0} true;
    out_$i389 := $M.116;
    goto corral_source_split_2151;

  $bb429:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    goto $bb430;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.88 := 1;
    call {:si_unique_call 563} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_2149;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_initialize_dummy_timer_ops_6();
    goto corral_source_split_2148;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.84 := 1;
    call {:si_unique_call 561} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_2147;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ldv_initialize_snd_pcm_ops_4();
    goto corral_source_split_2146;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $M.90 := 1;
    call {:si_unique_call 559} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_2145;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} ldv_dev_pm_ops_3();
    goto corral_source_split_2144;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.85 := 1;
    call {:si_unique_call 557} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_2143;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_initialize_dummy_timer_ops_7();
    goto corral_source_split_2142;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $M.86 := 1;
    call {:si_unique_call 555} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_2141;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} ldv_initialize_snd_pcm_ops_5();
    goto corral_source_split_2140;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 553} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2139;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.92 := 3;
    call {:si_unique_call 552} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_2138;

  $bb428:
    assume out_$i388 == 1;
    goto corral_source_split_2137;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb428, $bb429;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 0);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$i387 := $M.116;
    goto corral_source_split_2134;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $M.116 := out_$i386;
    call {:si_unique_call 551} {:cexpr "ldv_retval_22"} boogie_si_record_i32(out_$i386);
    goto corral_source_split_2133;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_$i386 := alsa_card_dummy_init();
    goto corral_source_split_2132;

  $bb426:
    assume out_$i385 == 1;
    goto corral_source_split_2131;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 1);
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$i384 := $M.92;
    goto corral_source_split_2114;

  $bb413:
    assume out_$i378 == 1;
    goto corral_source_split_2113;

  $bb412:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i376, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} ldv_stop();
    goto corral_source_split_2157;

  $bb415:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb414:
    assume {:verifier.code 0} true;
    assume !(out_$i378 == 1);
    goto $bb415;

  $bb417:
    assume {:verifier.code 0} true;
    assume !(out_$i379 == 1);
    goto $bb415;

  $bb439:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb510:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb508:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb484:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb464:
    assume !(out_$i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    goto $bb465;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 572} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2204;

  SeqInstr_60:
    goto corral_source_split_2203;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} out_vslice_dummy_var_95 := dummy_pcm_prepare(out_$p409);
    goto SeqInstr_59;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$p409 := $M.77;
    goto corral_source_split_2202;

  $bb463:
    assume out_$i408 == 1;
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb463, $bb464;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$i408 := $eq.i32(out_$i407, 1);
    goto corral_source_split_2199;

  $bb462:
    assume {:verifier.code 0} true;
    out_$i407 := $M.93;
    goto corral_source_split_2198;

  $bb461:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb462;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 570} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2196;

  SeqInstr_57:
    goto corral_source_split_2195;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} out_vslice_dummy_var_94 := dummy_pcm_prepare(out_$p405);
    goto SeqInstr_56;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    out_$p405 := $M.77;
    goto corral_source_split_2194;

  $bb460:
    assume out_$i404 == 1;
    goto corral_source_split_2193;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb460, $bb461;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 2);
    goto corral_source_split_2191;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i403 := $M.93;
    goto corral_source_split_2190;

  $bb458:
    assume out_$i402 == 1;
    goto corral_source_split_2189;

  $bb456:
    assume out_$i401 == 1;
    assume {:verifier.code 0} true;
    out_$i402 := $eq.i32(out_$i393, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb452:
    assume out_$i399 == 1;
    assume {:verifier.code 0} true;
    out_$i401 := $slt.i32(out_$i393, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb441:
    assume out_$i394 == 1;
    assume {:verifier.code 0} true;
    out_$i399 := $slt.i32(out_$i393, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  $bb440:
    assume {:verifier.code 0} true;
    out_$i394 := $slt.i32(out_$i393, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  corral_source_split_2159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} out_$i393 := __VERIFIER_nondet_int();
    call {:si_unique_call 567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i393);
    call {:si_unique_call 568} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i393);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb438:
    assume out_$i392 == 1;
    goto corral_source_split_2159;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$i392 := $ne.i32(out_$i391, 0);
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    out_$i391 := $M.93;
    goto corral_source_split_1449;

  $bb11:
    assume out_$i29 == 1;
    goto corral_source_split_1448;

  $bb10:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i24, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb471:
    assume !(out_$i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb472;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 576} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} out_vslice_dummy_var_97 := snd_pcm_lib_ioctl(out_$p417, in_$i18, in_$p19);
    goto corral_source_split_2216;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$p417 := $M.77;
    goto corral_source_split_2215;

  $bb470:
    assume out_$i416 == 1;
    goto corral_source_split_2214;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    out_$i416 := $eq.i32(out_$i415, 1);
    goto corral_source_split_2212;

  $bb469:
    assume {:verifier.code 0} true;
    out_$i415 := $M.93;
    goto corral_source_split_2211;

  $bb468:
    assume !(out_$i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb469;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 574} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2209;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} out_vslice_dummy_var_96 := snd_pcm_lib_ioctl(out_$p413, in_$i18, in_$p19);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    out_$p413 := $M.77;
    goto corral_source_split_2207;

  $bb467:
    assume out_$i412 == 1;
    goto corral_source_split_2206;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb467, $bb468;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 2);
    goto corral_source_split_2187;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    out_$i411 := $M.93;
    goto corral_source_split_2186;

  $bb457:
    assume !(out_$i401 == 1);
    goto corral_source_split_2185;

  $bb477:
    assume !(out_$i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb478;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 580} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} out_vslice_dummy_var_99 := dummy_pcm_hw_free(out_$p425);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$p425 := $M.77;
    goto corral_source_split_2228;

  $bb476:
    assume out_$i424 == 1;
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb476, $bb477;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$i424 := $eq.i32(out_$i423, 1);
    goto corral_source_split_2225;

  $bb475:
    assume {:verifier.code 0} true;
    out_$i423 := $M.93;
    goto corral_source_split_2224;

  $bb474:
    assume !(out_$i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 578} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} out_vslice_dummy_var_98 := dummy_pcm_hw_free(out_$p421);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p421 := $M.77;
    goto corral_source_split_2220;

  $bb473:
    assume out_$i420 == 1;
    goto corral_source_split_2219;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$i420 := $eq.i32(out_$i419, 2);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    out_$i419 := $M.93;
    goto corral_source_split_2178;

  $bb454:
    assume out_$i400 == 1;
    goto corral_source_split_2177;

  $bb453:
    assume !(out_$i399 == 1);
    assume {:verifier.code 0} true;
    out_$i400 := $slt.i32(out_$i393, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb454, $bb455;

  $bb483:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 584} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} out_vslice_dummy_var_101 := dummy_pcm_hw_params(out_$p433, in_$p16);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    out_$p433 := $M.77;
    goto corral_source_split_2241;

  $bb482:
    assume out_$i432 == 1;
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 1);
    goto corral_source_split_2238;

  $bb481:
    assume {:verifier.code 0} true;
    out_$i431 := $M.93;
    goto corral_source_split_2237;

  $bb480:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 582} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} out_vslice_dummy_var_100 := dummy_pcm_hw_params(out_$p429, in_$p16);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$p429 := $M.77;
    goto corral_source_split_2233;

  $bb479:
    assume out_$i428 == 1;
    goto corral_source_split_2232;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i32(out_$i427, 2);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i427 := $M.93;
    goto corral_source_split_2182;

  $bb455:
    assume !(out_$i400 == 1);
    goto corral_source_split_2181;

  $bb489:
    assume !(out_$i440 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 588} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} out_vslice_dummy_var_103 := dummy_pcm_pointer(out_$p441);
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$p441 := $M.77;
    goto corral_source_split_2254;

  $bb488:
    assume out_$i440 == 1;
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$i440 := $eq.i32(out_$i439, 1);
    goto corral_source_split_2251;

  $bb487:
    assume {:verifier.code 0} true;
    out_$i439 := $M.93;
    goto corral_source_split_2250;

  $bb486:
    assume !(out_$i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 586} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} out_vslice_dummy_var_102 := dummy_pcm_pointer(out_$p437);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$p437 := $M.77;
    goto corral_source_split_2246;

  $bb485:
    assume out_$i436 == 1;
    goto corral_source_split_2245;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    out_$i436 := $eq.i32(out_$i435, 2);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i435 := $M.93;
    goto corral_source_split_2170;

  $bb450:
    assume out_$i398 == 1;
    goto corral_source_split_2169;

  $bb443:
    assume out_$i395 == 1;
    assume {:verifier.code 0} true;
    out_$i398 := $slt.i32(out_$i393, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  $bb442:
    assume !(out_$i394 == 1);
    assume {:verifier.code 0} true;
    out_$i395 := $slt.i32(out_$i393, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb443, $bb444;

  $bb495:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    goto $bb496;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 592} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2269;

  SeqInstr_66:
    goto corral_source_split_2268;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} out_vslice_dummy_var_105 := dummy_pcm_trigger(out_$p449, in_$i17);
    goto SeqInstr_65;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p449 := $M.77;
    goto corral_source_split_2267;

  $bb494:
    assume out_$i448 == 1;
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    out_$i448 := $eq.i32(out_$i447, 1);
    goto corral_source_split_2264;

  $bb493:
    assume {:verifier.code 0} true;
    out_$i447 := $M.93;
    goto corral_source_split_2263;

  $bb492:
    assume !(out_$i444 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto $bb493;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 590} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2261;

  SeqInstr_63:
    goto corral_source_split_2260;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} out_vslice_dummy_var_104 := dummy_pcm_trigger(out_$p445, in_$i17);
    goto SeqInstr_62;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$p445 := $M.77;
    goto corral_source_split_2259;

  $bb491:
    assume out_$i444 == 1;
    goto corral_source_split_2258;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$i444 := $eq.i32(out_$i443, 2);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$i443 := $M.93;
    goto corral_source_split_2174;

  $bb451:
    assume !(out_$i398 == 1);
    goto corral_source_split_2173;

  $bb498:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb500:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    goto $bb501;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $M.91 := out_$i458;
    call {:si_unique_call 596} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i458);
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    out_$i458 := $sub.i32(out_$i457, 1);
    goto corral_source_split_2281;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i457 := $M.91;
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.93 := 1;
    call {:si_unique_call 595} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_2279;

  $bb499:
    assume out_$i456 == 1;
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb499, $bb500;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    out_$i456 := $eq.i32(out_$i455, 0);
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    out_$i455 := $M.117;
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.117 := out_$i454;
    call {:si_unique_call 594} {:cexpr "ldv_retval_24"} boogie_si_record_i32(out_$i454);
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} out_$i454 := dummy_pcm_close(out_$p453);
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    out_$p453 := $M.77;
    goto corral_source_split_2272;

  $bb497:
    assume out_$i452 == 1;
    goto corral_source_split_2271;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    out_$i452 := $eq.i32(out_$i451, 2);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$i451 := $M.93;
    goto corral_source_split_2162;

  $bb445:
    assume out_$i396 == 1;
    goto corral_source_split_2161;

  $bb444:
    assume !(out_$i395 == 1);
    assume {:verifier.code 0} true;
    out_$i396 := $slt.i32(out_$i393, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb445, $bb446;

  $bb504:
    assume !(out_$i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb506:
    assume !(out_$i464 == 1);
    assume {:verifier.code 0} true;
    goto $bb507;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    goto $bb507;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $M.91 := out_$i466;
    call {:si_unique_call 600} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i466);
    goto corral_source_split_2295;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    out_$i466 := $add.i32(out_$i465, 1);
    goto corral_source_split_2294;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    out_$i465 := $M.91;
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $M.93 := 2;
    call {:si_unique_call 599} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_2292;

  $bb505:
    assume out_$i464 == 1;
    goto corral_source_split_2291;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb505, $bb506;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    out_$i464 := $eq.i32(out_$i463, 0);
    goto corral_source_split_2289;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    out_$i463 := $M.118;
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.118 := out_$i462;
    call {:si_unique_call 598} {:cexpr "ldv_retval_23"} boogie_si_record_i32(out_$i462);
    goto corral_source_split_2287;

  SeqInstr_69:
    goto corral_source_split_2286;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} out_$i462 := dummy_pcm_open(out_$p461);
    goto SeqInstr_68;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$p461 := $M.77;
    goto corral_source_split_2285;

  $bb503:
    assume out_$i460 == 1;
    goto corral_source_split_2284;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i460 := $eq.i32(out_$i459, 1);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i459 := $M.93;
    goto corral_source_split_2166;

  $bb447:
    assume out_$i397 == 1;
    goto corral_source_split_2165;

  $bb446:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    out_$i397 := $eq.i32(out_$i393, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} ldv_stop();
    goto corral_source_split_2297;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb448:
    assume {:verifier.code 0} true;
    assume !(out_$i397 == 1);
    goto $bb449;

  $bb459:
    assume {:verifier.code 0} true;
    assume !(out_$i402 == 1);
    goto $bb449;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} ldv_stop();
    goto corral_source_split_2299;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb13;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb13;

  $bb64_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$p249, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$p280, out_$i282, out_$i283, out_$p284, out_$i286, out_$i287, out_$p288, out_$i290, out_$i291, out_$p292, out_$i294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$i306, out_$i307, out_$p308, out_$i310, out_$i311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$p332, out_$i333, out_$i334, out_$i336, out_$i337, out_$p338, out_$i339, out_$i340, out_$i342, out_$i343, out_$p344, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$i354, out_$i355, out_$p356, out_$i358, out_$i359, out_$p360, out_$i362, out_$i363, out_$p364, out_$i366, out_$i367, out_$p368, out_$i370, out_$i371, out_$p372, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$p405, out_$i407, out_$i408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i415, out_$i416, out_$p417, out_$i419, out_$i420, out_$p421, out_$i423, out_$i424, out_$p425, out_$i427, out_$i428, out_$p429, out_$i431, out_$i432, out_$p433, out_$i435, out_$i436, out_$p437, out_$i439, out_$i440, out_$p441, out_$i443, out_$i444, out_$p445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p14, in_$p16, in_$i17, in_$i18, in_$p19, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$i154, out_$i155, out_$i156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$p249, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i260, out_$i261, out_$p262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$p280, out_$i282, out_$i283, out_$p284, out_$i286, out_$i287, out_$p288, out_$i290, out_$i291, out_$p292, out_$i294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$i306, out_$i307, out_$p308, out_$i310, out_$i311, out_$p312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i330, out_$i331, out_$p332, out_$i333, out_$i334, out_$i336, out_$i337, out_$p338, out_$i339, out_$i340, out_$i342, out_$i343, out_$p344, out_$i346, out_$i347, out_$p348, out_$i350, out_$i351, out_$p352, out_$i354, out_$i355, out_$p356, out_$i358, out_$i359, out_$p360, out_$i362, out_$i363, out_$p364, out_$i366, out_$i367, out_$p368, out_$i370, out_$i371, out_$p372, out_$i374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$i387, out_$i388, out_$i389, out_$i390, out_$i391, out_$i392, out_$i393, out_$i394, out_$i395, out_$i396, out_$i397, out_$i398, out_$i399, out_$i400, out_$i401, out_$i402, out_$i403, out_$i404, out_$p405, out_$i407, out_$i408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i415, out_$i416, out_$p417, out_$i419, out_$i420, out_$p421, out_$i423, out_$i424, out_$p425, out_$i427, out_$i428, out_$p429, out_$i431, out_$i432, out_$p433, out_$i435, out_$i436, out_$p437, out_$i439, out_$i440, out_$p441, out_$i443, out_$i444, out_$p445, out_$i447, out_$i448, out_$p449, out_$i451, out_$i452, out_$p453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p461, out_$i462, out_$i463, out_$i464, out_$i465, out_$i466, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77, out_vslice_dummy_var_78, out_vslice_dummy_var_79, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p5: ref, in_$i6: i64, in_$i7: i32, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$i24: i32, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i1, in_$i44: i1, in_$i45: i32, in_$i46: i1, in_$p47: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$p66: ref, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i1, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i80: i1, in_$i81: i1, in_$i82: i1, in_$i83: i1, in_$i84: i1, in_$i85: i1, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i32, in_$i96: i32, in_$i97: i1, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i1, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i32, in_$i121: i1, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i1, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$i148: i32, in_$i149: i1, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i32, in_$i154: i1, in_$i155: i32, in_$i156: i32, in_$i157: i1, in_$i158: i32, in_$i159: i1, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$i164: i32, in_$i165: i32, in_$i166: i1, in_$i167: i32, in_$i168: i32, in_$i169: i1, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i1, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$i185: i32, in_$i186: i1, in_$i187: i32, in_$i188: i32, in_$i189: i1, in_$i190: i32, in_$i191: i1, in_$i192: i32, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i198: i32, in_$i199: i32, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i1, in_$i205: i1, in_$i206: i1, in_$i207: i1, in_$i208: i1, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$i235: i32, in_$i236: i1, in_$i237: i1, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i251: i32, in_$i252: i32, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$i257: i32, in_$i258: i1, in_$i260: i32, in_$i261: i1, in_$p262: ref, in_$i263: i32, in_$i264: i1, in_$i265: i32, in_$i266: i1, in_$i267: i1, in_$i268: i1, in_$i269: i1, in_$i270: i1, in_$i271: i1, in_$i272: i1, in_$i273: i1, in_$i274: i1, in_$i275: i1, in_$i276: i1, in_$i277: i1, in_$i278: i32, in_$i279: i1, in_$p280: ref, in_$i282: i32, in_$i283: i1, in_$p284: ref, in_$i286: i32, in_$i287: i1, in_$p288: ref, in_$i290: i32, in_$i291: i1, in_$p292: ref, in_$i294: i32, in_$i295: i1, in_$p296: ref, in_$i297: i64, in_$i298: i64, in_$i300: i32, in_$i301: i1, in_$p302: ref, in_$i303: i64, in_$i304: i64, in_$i306: i32, in_$i307: i1, in_$p308: ref, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i318: i32, in_$i319: i1, in_$i320: i32, in_$i321: i32, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i325: i32, in_$i326: i32, in_$i327: i1, in_$i328: i32, in_$i329: i32, in_$i330: i32, in_$i331: i1, in_$p332: ref, in_$i333: i64, in_$i334: i64, in_$i336: i32, in_$i337: i1, in_$p338: ref, in_$i339: i64, in_$i340: i64, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i350: i32, in_$i351: i1, in_$p352: ref, in_$i354: i32, in_$i355: i1, in_$p356: ref, in_$i358: i32, in_$i359: i1, in_$p360: ref, in_$i362: i32, in_$i363: i1, in_$p364: ref, in_$i366: i32, in_$i367: i1, in_$p368: ref, in_$i370: i32, in_$i371: i1, in_$p372: ref, in_$i374: i32, in_$i375: i1, in_$i376: i32, in_$i377: i1, in_$i378: i1, in_$i379: i1, in_$i380: i32, in_$i381: i1, in_$i382: i32, in_$i383: i1, in_$i384: i32, in_$i385: i1, in_$i386: i32, in_$i387: i32, in_$i388: i1, in_$i389: i32, in_$i390: i1, in_$i391: i32, in_$i392: i1, in_$i393: i32, in_$i394: i1, in_$i395: i1, in_$i396: i1, in_$i397: i1, in_$i398: i1, in_$i399: i1, in_$i400: i1, in_$i401: i1, in_$i402: i1, in_$i403: i32, in_$i404: i1, in_$p405: ref, in_$i407: i32, in_$i408: i1, in_$p409: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i415: i32, in_$i416: i1, in_$p417: ref, in_$i419: i32, in_$i420: i1, in_$p421: ref, in_$i423: i32, in_$i424: i1, in_$p425: ref, in_$i427: i32, in_$i428: i1, in_$p429: ref, in_$i431: i32, in_$i432: i1, in_$p433: ref, in_$i435: i32, in_$i436: i1, in_$p437: ref, in_$i439: i32, in_$i440: i1, in_$p441: ref, in_$i443: i32, in_$i444: i1, in_$p445: ref, in_$i447: i32, in_$i448: i1, in_$p449: ref, in_$i451: i32, in_$i452: i1, in_$p453: ref, in_$i454: i32, in_$i455: i32, in_$i456: i1, in_$i457: i32, in_$i458: i32, in_$i459: i32, in_$i460: i1, in_$p461: ref, in_$i462: i32, in_$i463: i32, in_$i464: i1, in_$i465: i32, in_$i466: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i64, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i64, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i32, in_vslice_dummy_var_78: i32, in_vslice_dummy_var_79: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i64, in_vslice_dummy_var_83: i64, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: ref, in_vslice_dummy_var_89: ref, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i64, in_vslice_dummy_var_103: i64, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32) returns (out_$i24: i32, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i1, out_$i44: i1, out_$i45: i32, out_$i46: i1, out_$p47: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$p66: ref, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i1, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i80: i1, out_$i81: i1, out_$i82: i1, out_$i83: i1, out_$i84: i1, out_$i85: i1, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i32, out_$i96: i32, out_$i97: i1, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i1, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i32, out_$i121: i1, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i1, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$i148: i32, out_$i149: i1, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i32, out_$i154: i1, out_$i155: i32, out_$i156: i32, out_$i157: i1, out_$i158: i32, out_$i159: i1, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$i164: i32, out_$i165: i32, out_$i166: i1, out_$i167: i32, out_$i168: i32, out_$i169: i1, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i1, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$i185: i32, out_$i186: i1, out_$i187: i32, out_$i188: i32, out_$i189: i1, out_$i190: i32, out_$i191: i1, out_$i192: i32, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i198: i32, out_$i199: i32, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i1, out_$i205: i1, out_$i206: i1, out_$i207: i1, out_$i208: i1, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$i235: i32, out_$i236: i1, out_$i237: i1, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i251: i32, out_$i252: i32, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$i257: i32, out_$i258: i1, out_$i260: i32, out_$i261: i1, out_$p262: ref, out_$i263: i32, out_$i264: i1, out_$i265: i32, out_$i266: i1, out_$i267: i1, out_$i268: i1, out_$i269: i1, out_$i270: i1, out_$i271: i1, out_$i272: i1, out_$i273: i1, out_$i274: i1, out_$i275: i1, out_$i276: i1, out_$i277: i1, out_$i278: i32, out_$i279: i1, out_$p280: ref, out_$i282: i32, out_$i283: i1, out_$p284: ref, out_$i286: i32, out_$i287: i1, out_$p288: ref, out_$i290: i32, out_$i291: i1, out_$p292: ref, out_$i294: i32, out_$i295: i1, out_$p296: ref, out_$i297: i64, out_$i298: i64, out_$i300: i32, out_$i301: i1, out_$p302: ref, out_$i303: i64, out_$i304: i64, out_$i306: i32, out_$i307: i1, out_$p308: ref, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i318: i32, out_$i319: i1, out_$i320: i32, out_$i321: i32, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i325: i32, out_$i326: i32, out_$i327: i1, out_$i328: i32, out_$i329: i32, out_$i330: i32, out_$i331: i1, out_$p332: ref, out_$i333: i64, out_$i334: i64, out_$i336: i32, out_$i337: i1, out_$p338: ref, out_$i339: i64, out_$i340: i64, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i350: i32, out_$i351: i1, out_$p352: ref, out_$i354: i32, out_$i355: i1, out_$p356: ref, out_$i358: i32, out_$i359: i1, out_$p360: ref, out_$i362: i32, out_$i363: i1, out_$p364: ref, out_$i366: i32, out_$i367: i1, out_$p368: ref, out_$i370: i32, out_$i371: i1, out_$p372: ref, out_$i374: i32, out_$i375: i1, out_$i376: i32, out_$i377: i1, out_$i378: i1, out_$i379: i1, out_$i380: i32, out_$i381: i1, out_$i382: i32, out_$i383: i1, out_$i384: i32, out_$i385: i1, out_$i386: i32, out_$i387: i32, out_$i388: i1, out_$i389: i32, out_$i390: i1, out_$i391: i32, out_$i392: i1, out_$i393: i32, out_$i394: i1, out_$i395: i1, out_$i396: i1, out_$i397: i1, out_$i398: i1, out_$i399: i1, out_$i400: i1, out_$i401: i1, out_$i402: i1, out_$i403: i32, out_$i404: i1, out_$p405: ref, out_$i407: i32, out_$i408: i1, out_$p409: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i415: i32, out_$i416: i1, out_$p417: ref, out_$i419: i32, out_$i420: i1, out_$p421: ref, out_$i423: i32, out_$i424: i1, out_$p425: ref, out_$i427: i32, out_$i428: i1, out_$p429: ref, out_$i431: i32, out_$i432: i1, out_$p433: ref, out_$i435: i32, out_$i436: i1, out_$p437: ref, out_$i439: i32, out_$i440: i1, out_$p441: ref, out_$i443: i32, out_$i444: i1, out_$p445: ref, out_$i447: i32, out_$i448: i1, out_$p449: ref, out_$i451: i32, out_$i452: i1, out_$p453: ref, out_$i454: i32, out_$i455: i32, out_$i456: i1, out_$i457: i32, out_$i458: i32, out_$i459: i32, out_$i460: i1, out_$p461: ref, out_$i462: i32, out_$i463: i32, out_$i464: i1, out_$i465: i32, out_$i466: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i64, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i64, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i32, out_vslice_dummy_var_78: i32, out_vslice_dummy_var_79: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i64, out_vslice_dummy_var_83: i64, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: ref, out_vslice_dummy_var_89: ref, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i64, out_vslice_dummy_var_103: i64, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32);
  modifies $M.84, $M.0, $M.37, $M.43, $CurrAddr, $M.44, $M.36, $M.35, $M.38, $M.39, $M.40, $M.41, $M.42, assertsPassed, $M.85, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.91, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.86, $M.32, $M.33, $M.87, $M.113, $M.55, $M.59, $M.60, $M.61, $M.68, $M.88, $M.90, $M.45, $M.46, $M.47, $M.48, $M.114, $M.115, $M.74, $M.75, $M.76, $M.79, $M.77, $M.93, $M.92, $M.116, $M.120, $M.78, $M.3, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.117, $M.118;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation {:SIextraRecBound 32} alsa_card_dummy_init_loop_$bb8(in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$i14: i1, in_$i15: i8, in_$i16: i1, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i11: i32, in_$i23: i32, in_$i24: i1, in_$i5: i32, in_$i6: i32, in_$i25: i32) returns (out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$i14: i1, out_$i15: i8, out_$i16: i1, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i11: i32, out_$i23: i32, out_$i24: i1, out_$i5: i32, out_$i6: i32, out_$i25: i32)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i11, out_$i23, out_$i24, out_$i5, out_$i6, out_$i25 := in_$i7, in_$p8, in_$i9, in_$i10, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i22, in_$i11, in_$i23, in_$i24, in_$i5, in_$i6, in_$i25;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2364;

  $bb20:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i5, out_$i6 := out_$i23, out_$i11;
    goto $bb20_dummy;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i11;
    assume true;
    goto $bb20;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    out_$i24 := $sle.i32(out_$i23, 31);
    goto corral_source_split_2375;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i5, 1);
    call {:si_unique_call 637} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_2374;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i6;
    goto $bb12;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i22;
    goto $bb12;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i6;
    goto $bb12;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i6;
    goto $bb12;

  $bb14:
    assume out_$i16 == 1;
    goto corral_source_split_2383;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i8.i1(out_$i15);
    goto corral_source_split_2381;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i1.i8(out_$i14);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i8(out_$i15);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} out_$i14 := IS_ERR(out_$p13);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_2378;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} out_$p12 := platform_device_register_simple(.str.49, out_$i5, $0.ref, 0);
    goto corral_source_split_2377;

  $bb10:
    assume out_$i10 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i8.i1(out_$i9);
    goto corral_source_split_2369;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i8($M.119, out_$p8);
    goto corral_source_split_2368;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(enable, $mul.ref(0, 32)), $mul.ref(out_$i7, 1));
    goto corral_source_split_2367;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2366;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} platform_device_unregister(out_$p12);
    goto corral_source_split_2390;

  $bb17:
    assume out_$i19 == 1;
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i64(out_$i18, 0);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_2386;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} out_$p17 := platform_get_drvdata(out_$p12);
    goto corral_source_split_2385;

  $bb15:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i6, 1);
    call {:si_unique_call 643} {:cexpr "cards"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $M.120 := $store.ref($M.120, out_$p21, out_$p12);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(devices, $mul.ref(0, 256)), $mul.ref(out_$i20, 8));
    goto corral_source_split_2393;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i5);
    goto corral_source_split_2392;

  $bb18:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume !(out_$i10 == 1);
    goto corral_source_split_2371;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i11, out_$i23, out_$i24, out_$i5, out_$i6, out_$i25 := alsa_card_dummy_init_loop_$bb8(out_$i7, out_$p8, out_$i9, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i22, out_$i11, out_$i23, out_$i24, out_$i5, out_$i6, out_$i25);
    return;

  exit:
    return;
}



procedure alsa_card_dummy_init_loop_$bb8(in_$i7: i64, in_$p8: ref, in_$i9: i8, in_$i10: i1, in_$p12: ref, in_$p13: ref, in_$i14: i1, in_$i15: i8, in_$i16: i1, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$i11: i32, in_$i23: i32, in_$i24: i1, in_$i5: i32, in_$i6: i32, in_$i25: i32) returns (out_$i7: i64, out_$p8: ref, out_$i9: i8, out_$i10: i1, out_$p12: ref, out_$p13: ref, out_$i14: i1, out_$i15: i8, out_$i16: i1, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$i11: i32, out_$i23: i32, out_$i24: i1, out_$i5: i32, out_$i6: i32, out_$i25: i32);
  modifies $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $CurrAddr, $M.120;



implementation alloc_fake_buffer_loop_$bb5(in_$i4: i64, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p5, out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i3 := in_$i4, in_$p5, in_$i6, in_$p7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i3;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2418;

  $bb10:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i13;
    goto $bb10_dummy;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i14 := $sle.i32(out_$i13, 1);
    goto corral_source_split_2435;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i3, 1);
    call {:si_unique_call 653} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2434;

  $bb8:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i64(out_$i11, 0);
    goto corral_source_split_2429;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_2428;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.3, out_$p9);
    goto corral_source_split_2427;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref(out_$i8, 8));
    goto corral_source_split_2426;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i3);
    goto corral_source_split_2425;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p7, out_$p5);
    goto corral_source_split_2424;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref(out_$i6, 8));
    goto corral_source_split_2423;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i3);
    goto corral_source_split_2422;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    out_$p5 := $i2p.i64.ref(out_$i4);
    goto corral_source_split_2421;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} out_$i4 := get_zeroed_page(208);
    call {:si_unique_call 651} {:cexpr "tmp"} boogie_si_record_i64(out_$i4);
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i3 := alloc_fake_buffer_loop_$bb5(out_$i4, out_$p5, out_$i6, out_$p7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i3);
    return;

  exit:
    return;
}



procedure alloc_fake_buffer_loop_$bb5(in_$i4: i64, in_$p5: ref, in_$i6: i64, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$i6: i64, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i3: i32);
  modifies $M.3;



implementation {:SIextraRecBound 2} free_fake_buffer_loop_$bb3(in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i2: i32) returns (out_$i3: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i2: i32)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i2 := in_$i3, in_$p4, in_$p5, in_$i6, in_$i7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$i15, in_$i2;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  $bb8:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i14;
    goto $bb8_dummy;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    out_$i15 := $sle.i32(out_$i14, 1);
    goto corral_source_split_2583;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i2, 1);
    call {:si_unique_call 698} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_2582;

  $bb6:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p13, $0.ref);
    goto corral_source_split_2580;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref(out_$i12, 8));
    goto corral_source_split_2579;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2578;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} free_pages(out_$i11, 0);
    goto corral_source_split_2577;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_2576;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.3, out_$p9);
    goto corral_source_split_2575;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref(out_$i8, 8));
    goto corral_source_split_2574;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2573;

  $bb5:
    assume out_$i7 == 1;
    goto corral_source_split_2572;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i6, 0);
    goto corral_source_split_2570;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_2569;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.3, out_$p4);
    goto corral_source_split_2568;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref(dummy_page, $mul.ref(0, 16)), $mul.ref(out_$i3, 8));
    goto corral_source_split_2567;

  $bb4:
    assume {:verifier.code 0} true;
    out_$i3 := $sext.i32.i64(out_$i2);
    goto corral_source_split_2566;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb8_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i2 := free_fake_buffer_loop_$bb3(out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$i15, out_$i2);
    return;

  exit:
    return;
}



procedure free_fake_buffer_loop_$bb3(in_$i3: i64, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i2: i32) returns (out_$i3: i64, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i2: i32);
  modifies $M.3;


