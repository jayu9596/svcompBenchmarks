var $M.0: i8;

var $M.1: [ref]i8;

var $M.3: [ref]i32;

var $M.4: [ref]i32;

var $M.5: i32;

var $M.6: i32;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]i24;

var $M.12: [ref]i8;

var $M.13: i32;

var $M.14: i32;

var $M.15: i8;

var $M.16: [ref]ref;

var $M.17: i32;

var $M.18: [ref]i64;

var $M.19: [ref]i32;

var $M.20: [ref]i32;

var $M.21: [ref]i32;

var $M.22: i32;

var $M.23: i32;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]ref;

var $M.27: [ref]ref;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: [ref]ref;

var $M.41: [ref]ref;

var $M.42: [ref]ref;

var $M.43: [ref]ref;

var $M.44: [ref]ref;

var $M.45: [ref]ref;

var $M.46: [ref]ref;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]ref;

var $M.52: [ref]ref;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]ref;

var $M.59: [ref]ref;

var $M.60: [ref]ref;

var $M.61: [ref]ref;

var $M.62: [ref]ref;

var $M.63: [ref]ref;

var $M.64: [ref]ref;

var $M.65: [ref]ref;

var $M.66: [ref]ref;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.70: [ref]ref;

var $M.71: [ref]ref;

var $M.72: [ref]ref;

var $M.73: [ref]ref;

var $M.74: [ref]ref;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: i32;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: i16;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.102: [ref]i32;

var $M.103: [ref]i32;

var $M.104: [ref]i32;

var $M.105: [ref]i32;

var $M.106: [ref]i32;

var $M.107: [ref]i32;

var $M.108: [ref]i64;

var $M.135: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 633229);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 1028);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 2056);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 3084);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 4112);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 5140);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 6168);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 7196);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 8224);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 9252);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 10280);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 11308);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 12336);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 13364);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 14390);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 15418);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 16446);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 17474);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 18502);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 19530);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 20558);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 21586);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 22614);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 23639);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 24664);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 25689);

const {:count 5} __mod_pci__pch_udc_pcidev_id_device_table: ref;

axiom __mod_pci__pch_udc_pcidev_id_device_table == $sub.ref(0, 26873);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 27913);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 28953);

const ldv_thread_13: ref;

axiom ldv_thread_13 == $sub.ref(0, 29993);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 31033);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 32073);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 33113);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 34153);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 35193);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 36233);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 37261);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 38289);

const ldv_linux_kernel_locking_spinlock_spin_udc_stall_spinlock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_udc_stall_spinlock == $sub.ref(0, 39317);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 40345);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 41373);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 42401);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_pch_udc_dev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_pch_udc_dev == $sub.ref(0, 43429);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 44457);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 45485);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 46513);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 47541);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 48566);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 49594);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 50622);

const pch_udc_ops: ref;

axiom pch_udc_ops == $sub.ref(0, 51726);

const vbus_gpio_port: ref;

axiom vbus_gpio_port == $sub.ref(0, 52754);

const pch_udc_ep_ops: ref;

axiom pch_udc_ep_ops == $sub.ref(0, 53858);

const {:count 6} ep0_string: ref;

axiom ep0_string == $sub.ref(0, 54888);

const udc_stall_spinlock: ref;

axiom udc_stall_spinlock == $sub.ref(0, 55984);

const speed_fs: ref;

axiom speed_fs == $sub.ref(0, 57009);

const {:count 5} pch_udc_pcidev_id: ref;

axiom pch_udc_pcidev_id == $sub.ref(0, 58193);

const pch_udc_driver: ref;

axiom pch_udc_driver == $sub.ref(0, 59529);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 60561);

const {:count 30} .str.92: ref;

axiom .str.92 == $sub.ref(0, 61615);

const {:count 15} .str.93: ref;

axiom .str.93 == $sub.ref(0, 62654);

const {:count 37} .str.94: ref;

axiom .str.94 == $sub.ref(0, 63715);

const {:count 16} .str.95: ref;

axiom .str.95 == $sub.ref(0, 64755);

const {:count 34} .str.90: ref;

axiom .str.90 == $sub.ref(0, 65813);

const {:count 15} .str.91: ref;

axiom .str.91 == $sub.ref(0, 66852);

const iomem_resource: ref;

axiom iomem_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 41} .str.16: ref;

axiom .str.16 == $sub.ref(0, 67917);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 46} .str.31: ref;

axiom .str.31 == $sub.ref(0, 68987);

const {:count 14} .str.32: ref;

axiom .str.32 == $sub.ref(0, 70025);

const {:count 40} .str.33: ref;

axiom .str.33 == $sub.ref(0, 71089);

const {:count 29} .str.34: ref;

axiom .str.34 == $sub.ref(0, 72142);

const {:count 46} .str.35: ref;

axiom .str.35 == $sub.ref(0, 73212);

const {:count 17} .str.36: ref;

axiom .str.36 == $sub.ref(0, 74253);

const {:count 26} .str.37: ref;

axiom .str.37 == $sub.ref(0, 75303);

const {:count 21} .str.38: ref;

axiom .str.38 == $sub.ref(0, 76348);

const {:count 14} .str.83: ref;

axiom .str.83 == $sub.ref(0, 77386);

const {:count 33} .str.84: ref;

axiom .str.84 == $sub.ref(0, 78443);

const {:count 15} .str.85: ref;

axiom .str.85 == $sub.ref(0, 79482);

const {:count 15} .str.86: ref;

axiom .str.86 == $sub.ref(0, 80521);

const {:count 34} .str.87: ref;

axiom .str.87 == $sub.ref(0, 81579);

const {:count 41} .str.88: ref;

axiom .str.88 == $sub.ref(0, 82644);

const {:count 40} .str.89: ref;

axiom .str.89 == $sub.ref(0, 83708);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 12} .str.4: ref;

axiom .str.4 == $sub.ref(0, 84744);

const {:count 33} .str.5: ref;

axiom .str.5 == $sub.ref(0, 85801);

const {:count 14} .str.6: ref;

axiom .str.6 == $sub.ref(0, 86839);

const {:count 44} .str.24: ref;

axiom .str.24 == $sub.ref(0, 87907);

const {:count 27} .str.25: ref;

axiom .str.25 == $sub.ref(0, 88958);

const {:count 22} .str.17: ref;

axiom .str.17 == $sub.ref(0, 90004);

const {:count 21} .str.18: ref;

axiom .str.18 == $sub.ref(0, 91049);

const {:count 3} .str.20: ref;

axiom .str.20 == $sub.ref(0, 92076);

const {:count 4} .str.21: ref;

axiom .str.21 == $sub.ref(0, 93104);

const {:count 34} .str.19: ref;

axiom .str.19 == $sub.ref(0, 94162);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 95202);

const {:count 22} .str.23: ref;

axiom .str.23 == $sub.ref(0, 96248);

const {:count 46} .str.22: ref;

axiom .str.22 == $sub.ref(0, 97318);

const {:count 16} .str.7: ref;

axiom .str.7 == $sub.ref(0, 98358);

const {:count 11} .str.8: ref;

axiom .str.8 == $sub.ref(0, 99393);

const {:count 10} .str.9: ref;

axiom .str.9 == $sub.ref(0, 100427);

const {:count 13} .str.10: ref;

axiom .str.10 == $sub.ref(0, 101464);

const {:count 5} .str.11: ref;

axiom .str.11 == $sub.ref(0, 102493);

const {:count 4} .str.12: ref;

axiom .str.12 == $sub.ref(0, 103521);

const {:count 6} .str.13: ref;

axiom .str.13 == $sub.ref(0, 104551);

const {:count 31} .str.2: ref;

axiom .str.2 == $sub.ref(0, 105606);

const {:count 13} .str.3: ref;

axiom .str.3 == $sub.ref(0, 106643);

const {:count 17} .str.15: ref;

axiom .str.15 == $sub.ref(0, 107684);

const {:count 39} .str.70: ref;

axiom .str.70 == $sub.ref(0, 108747);

const {:count 19} .str.71: ref;

axiom .str.71 == $sub.ref(0, 109790);

const {:count 9} .str.72: ref;

axiom .str.72 == $sub.ref(0, 110823);

const {:count 51} .str.73: ref;

axiom .str.73 == $sub.ref(0, 111898);

const {:count 32} .str.74: ref;

axiom .str.74 == $sub.ref(0, 112954);

const {:count 12} .str.75: ref;

axiom .str.75 == $sub.ref(0, 113990);

const {:count 32} .str.76: ref;

axiom .str.76 == $sub.ref(0, 115046);

const {:count 45} .str.77: ref;

axiom .str.77 == $sub.ref(0, 116115);

const {:count 24} .str.80: ref;

axiom .str.80 == $sub.ref(0, 117163);

const {:count 10} .str.81: ref;

axiom .str.81 == $sub.ref(0, 118197);

const {:count 24} .str.78: ref;

axiom .str.78 == $sub.ref(0, 119245);

const {:count 10} .str.79: ref;

axiom .str.79 == $sub.ref(0, 120279);

const {:count 7} .str.39: ref;

axiom .str.39 == $sub.ref(0, 121310);

const {:count 6} .str.40: ref;

axiom .str.40 == $sub.ref(0, 122340);

const {:count 7} .str.41: ref;

axiom .str.41 == $sub.ref(0, 123371);

const {:count 6} .str.42: ref;

axiom .str.42 == $sub.ref(0, 124401);

const {:count 7} .str.43: ref;

axiom .str.43 == $sub.ref(0, 125432);

const {:count 6} .str.44: ref;

axiom .str.44 == $sub.ref(0, 126462);

const {:count 7} .str.45: ref;

axiom .str.45 == $sub.ref(0, 127493);

const {:count 6} .str.46: ref;

axiom .str.46 == $sub.ref(0, 128523);

const {:count 7} .str.47: ref;

axiom .str.47 == $sub.ref(0, 129554);

const {:count 6} .str.48: ref;

axiom .str.48 == $sub.ref(0, 130584);

const {:count 7} .str.49: ref;

axiom .str.49 == $sub.ref(0, 131615);

const {:count 6} .str.50: ref;

axiom .str.50 == $sub.ref(0, 132645);

const {:count 7} .str.51: ref;

axiom .str.51 == $sub.ref(0, 133676);

const {:count 6} .str.52: ref;

axiom .str.52 == $sub.ref(0, 134706);

const {:count 7} .str.53: ref;

axiom .str.53 == $sub.ref(0, 135737);

const {:count 6} .str.54: ref;

axiom .str.54 == $sub.ref(0, 136767);

const {:count 7} .str.55: ref;

axiom .str.55 == $sub.ref(0, 137798);

const {:count 6} .str.56: ref;

axiom .str.56 == $sub.ref(0, 138828);

const {:count 7} .str.57: ref;

axiom .str.57 == $sub.ref(0, 139859);

const {:count 7} .str.58: ref;

axiom .str.58 == $sub.ref(0, 140890);

const {:count 8} .str.59: ref;

axiom .str.59 == $sub.ref(0, 141922);

const {:count 7} .str.60: ref;

axiom .str.60 == $sub.ref(0, 142953);

const {:count 8} .str.61: ref;

axiom .str.61 == $sub.ref(0, 143985);

const {:count 7} .str.62: ref;

axiom .str.62 == $sub.ref(0, 145016);

const {:count 8} .str.63: ref;

axiom .str.63 == $sub.ref(0, 146048);

const {:count 7} .str.64: ref;

axiom .str.64 == $sub.ref(0, 147079);

const {:count 8} .str.65: ref;

axiom .str.65 == $sub.ref(0, 148111);

const {:count 7} .str.66: ref;

axiom .str.66 == $sub.ref(0, 149142);

const {:count 8} .str.67: ref;

axiom .str.67 == $sub.ref(0, 150174);

const {:count 7} .str.68: ref;

axiom .str.68 == $sub.ref(0, 151205);

const {:count 8} .str.69: ref;

axiom .str.69 == $sub.ref(0, 152237);

const {:count 19} .str.30: ref;

axiom .str.30 == $sub.ref(0, 153280);

const {:count 45} .str.28: ref;

axiom .str.28 == $sub.ref(0, 154349);

const {:count 12} .str.29: ref;

axiom .str.29 == $sub.ref(0, 155385);

const {:count 33} .str.26: ref;

axiom .str.26 == $sub.ref(0, 156442);

const {:count 21} .str.27: ref;

axiom .str.27 == $sub.ref(0, 157487);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const .str: ref;

axiom .str == $sub.ref(0, 158512);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 159544);

const {:count 3} .str.1.189: ref;

axiom .str.1.189 == $sub.ref(0, 160571);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 161609);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 162637);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 163669);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 164701);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i0 := $M.0;
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_probe: ref;

axiom pch_udc_probe == $sub.ref(0, 165733);

procedure pch_udc_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.5, $M.16, assertsPassed, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.14;



implementation pch_udc_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i16;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i64;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i16;
  var $i79: i16;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i16;
  var $i106: i16;
  var $i107: i16;
  var $p109: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p120: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i74: i32;
  var $i8: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := kzalloc(6504, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i9 := pci_enable_device($p0);
    call {:si_unique_call 4} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i15 := $and.i16($i14, $sub.i16(0, 2));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i16 := $or.i16($i15, 1);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p13, $i16);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p4);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} pci_set_drvdata($p0, $p17);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2361);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.1, $p23);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i25, 56)), $mul.ref(0, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p28);
    call {:si_unique_call 8} {:cexpr "resource"} boogie_si_record_i64($i29);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i31);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i32, 56)), $mul.ref(0, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p35);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i37 == 1);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i40, 56)), $mul.ref(8, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.1, $p43);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i47, 56)), $mul.ref(0, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.1, $p50);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i44, $i51);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i69 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p70 := __request_region(iomem_resource, $i29, $i69, .str.1, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6312, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p75, $i29);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.1, $p76);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i78 := $and.i16($i77, $sub.i16(0, 17));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i79 := $or.i16($i78, 16);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p76, $i79);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p80 := ldv_ioremap_nocache_138($i29, $i69);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p81, $p80);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.1, $p87);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i91 := pch_udc_pcd_init($p4);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 16} {:cexpr "tmp___2"} boogie_si_record_i32($i91);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.1, $p93);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p4);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i96 := ldv_request_irq_139($i94, pch_udc_isr, 128, .str.1, $p95);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 18} {:cexpr "tmp___3"} boogie_si_record_i32($i96);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6332, 1));
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p103, $i102);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.1, $p104);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i106 := $and.i16($i105, $sub.i16(0, 9));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i107 := $or.i16($i106, 8);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p104, $i107);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} pci_set_master($p0);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_28 := pci_try_set_mwi($p0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_29 := spinlock_check($p109);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6192, 1)), $mul.ref(0, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} __raw_spin_lock_init($p113, .str.38, $p2);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p114, $p0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p116, pch_udc_ops);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i117 := init_dma_pools($p4);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 25} {:cexpr "retval"} boogie_si_record_i32($i117);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(128, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p120, .str.1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(116, 1));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p122, 3);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} pch_udc_set_disconnect($p4);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(0, 1));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i125 := usb_add_gadget_udc_release($p123, $p124, gadget_release);
    call {:si_unique_call 28} {:cexpr "retval"} boogie_si_record_i32($i125);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb36:
    assume $i126 == 1;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $i74 := $i125;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} pch_udc_remove($p0);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i8 := $i74;
    goto $bb3;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i118 == 1;
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i74 := $i117;
    goto $bb19;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i97 == 1;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.1, $p99);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} dev_err.ref.ref.ref.i32($p98, .str.37, .str.32, $i100);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 19);
    goto $bb19;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i92 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 19);
    goto $bb19;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i89 == 1;
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} dev_err.ref.ref.ref($p90, .str.36, .str.32);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 19);
    goto $bb19;

  $bb21:
    assume $i85 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vslice_dummy_var_27 := printk.ref.ref(.str.35, .str.32);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 12);
    goto $bb19;

  $bb17:
    assume $i72 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} dev_err.ref.ref.ref($p73, .str.34, .str.32);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 16);
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i55 := $zext.i32.i64($i54);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i55, 56)), $mul.ref(8, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.1, $p58);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i62, 56)), $mul.ref(0, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.1, $p65);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i67 := $sub.i64($i59, $i66);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i68 := $add.i64($i67, 1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i69 := $i68;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb12;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p4);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} kfree($p11);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} vslice_dummy_var_26 := printk.ref.ref(.str.33, .str.32);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} vslice_dummy_var_25 := printk.ref.ref(.str.31, .str.32);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const pch_udc_remove: ref;

axiom pch_udc_remove == $sub.ref(0, 166765);

procedure pch_udc_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation pch_udc_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i64;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i64;
  var $p99: ref;
  var $i100: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i64;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i64;
  var $p114: ref;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i64;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i64;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(0, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} usb_del_gadget_udc($p3);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6280, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6288, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.1, $p55);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6296, 1));
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} kfree($p64);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} pch_vbus_gpio_free($p2);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} pch_udc_exit($p2);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p2);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(6256, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.1, $p73);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p2);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(6256, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p2);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p126, $mul.ref(6256, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.1, $p127);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i129 := $zext.i8.i32($i128);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p2);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} kfree($p131);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i130 == 1;
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} pci_disable_device($p0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb25:
    assume $i83 == 1;
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6312, 1));
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.1, $p84);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.1, $p86);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i88, 56)), $mul.ref(0, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.1, $p91);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i93 == 1);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.1, $p94);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i96 := $zext.i32.i64($i95);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i96, 56)), $mul.ref(8, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i100 := $load.i64($M.1, $p99);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.1, $p101);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $i103 := $zext.i32.i64($i102);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i103, 56)), $mul.ref(0, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.1, $p106);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i100, $i107);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i108 == 1);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $i125 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} __release_region(iomem_resource, $i85, $i125);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.1, $p109);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i111 := $zext.i32.i64($i110);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i111, 56)), $mul.ref(8, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i115 := $load.i64($M.1, $p114);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6328, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p116);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i117);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1576, 1)), $mul.ref($i118, 56)), $mul.ref(0, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.1, $p121);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i123 := $sub.i64($i115, $i122);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 1);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i125 := $i124;
    goto $bb32;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb28;

  $bb22:
    assume $i76 == 1;
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} ldv_iounmap_137($p78);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(1572, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.1, $p70);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p2);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} ldv_free_irq_136($i71, $p72);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i57 == 1;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6288, 1));
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.1, $p61);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} dma_unmap_single_attrs($p60, $i62, 64, 2, $0.ref);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6280, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} dma_pool_destroy($p54);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6280, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.1, $p51);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} dma_pool_free($p43, $p48, $i52);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6280, 1));
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(64, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} dma_pool_free($p26, $p31, $i35);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} dma_pool_destroy($p14);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} dev_err.ref.ref.ref($p8, .str.90, .str.91);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_suspend: ref;

axiom pch_udc_suspend == $sub.ref(0, 167797);

procedure pch_udc_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.4, $CurrAddr;



implementation pch_udc_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i10: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p3, $i1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} pch_udc_disable_interrupts($p5, 127);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} pch_udc_disable_ep_interrupts($p5, $sub.i32(0, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} pci_disable_device($p0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} vslice_dummy_var_30 := pci_enable_wake($p0, 3, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i7 := pci_save_state($p0);
    call {:si_unique_call 52} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.3, $p11);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i13 := pci_choose_state($p0, $i12);
    call {:si_unique_call 55} {:cexpr "tmp___1"} boogie_si_record_i32($i13);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_31 := pci_set_power_state($p0, $i13);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} dev_err.ref.ref.ref($p9, .str.94, .str.95);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const pch_udc_resume: ref;

axiom pch_udc_resume == $sub.ref(0, 168829);

procedure pch_udc_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_resume($p0: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_32 := pci_set_power_state($p0, 0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} pci_restore_state($p0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $i2 := pci_enable_device($p0);
    call {:si_unique_call 60} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_33 := pci_enable_wake($p0, 3, 0);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} dev_err.ref.ref.ref($p4, .str.92, .str.93);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i5 := $i2;
    goto $bb3;
}



const pch_udc_shutdown: ref;

axiom pch_udc_shutdown == $sub.ref(0, 169861);

procedure pch_udc_shutdown($p0: ref);
  free requires assertsPassed;



implementation pch_udc_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} pch_udc_disable_interrupts($p2, 127);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} pch_udc_disable_ep_interrupts($p2, $sub.i32(0, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} pch_udc_set_disconnect($p2);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    return;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 170893);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_udc_disable_interrupts: ref;

axiom pch_udc_disable_interrupts == $sub.ref(0, 171925);

procedure pch_udc_disable_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_disable_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} {:cexpr "pch_udc_disable_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} pch_udc_bit_set($p0, 1040, $i2);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_disable_ep_interrupts: ref;

axiom pch_udc_disable_ep_interrupts == $sub.ref(0, 172957);

procedure pch_udc_disable_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_disable_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "pch_udc_disable_ep_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} pch_udc_bit_set($p0, 1048, $i2);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_set_disconnect: ref;

axiom pch_udc_set_disconnect == $sub.ref(0, 173989);

procedure pch_udc_set_disconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} pch_udc_bit_set($p0, 1028, 1024);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_bit_set: ref;

axiom pch_udc_bit_set == $sub.ref(0, 175021);

procedure pch_udc_bit_set($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_bit_set($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "pch_udc_bit_set:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 74} {:cexpr "pch_udc_bit_set:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i3 := pch_udc_readl($p0, $i1);
    call {:si_unique_call 76} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, $i2);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} pch_udc_writel($p0, $i5, $i1);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_readl: ref;

axiom pch_udc_readl == $sub.ref(0, 176053);

procedure pch_udc_readl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_readl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} {:cexpr "pch_udc_readl:arg:reg"} boogie_si_record_i64($i1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($i1, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $i5 := ioread32($p4);
    call {:si_unique_call 80} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const pch_udc_writel: ref;

axiom pch_udc_writel == $sub.ref(0, 177085);

procedure pch_udc_writel($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_writel($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "pch_udc_writel:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 82} {:cexpr "pch_udc_writel:arg:reg"} boogie_si_record_i64($i2);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($i2, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} iowrite32($i3, $p6);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    return;
}



const iowrite32: ref;

axiom iowrite32 == $sub.ref(0, 178117);

procedure iowrite32($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation iowrite32($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "iowrite32:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    return;
}



const ioread32: ref;

axiom ioread32 == $sub.ref(0, 179149);

procedure ioread32($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioread32($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 1} true;
    call {:si_unique_call 85} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 86} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 180181);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 181213);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 89} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 182245);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 183277);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 184309);

procedure dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_wake: ref;

axiom pci_enable_wake == $sub.ref(0, 185341);

procedure pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_wake($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i8;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} {:cexpr "pci_enable_wake:arg:state"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 93} {:cexpr "pci_enable_wake:arg:enable"} boogie_si_record_i1($i2);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i5 := __pci_enable_wake($p0, $i1, 0, $i4);
    call {:si_unique_call 95} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __pci_enable_wake: ref;

axiom __pci_enable_wake == $sub.ref(0, 186373);

procedure __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_enable_wake($p0: ref, $i1: i32, $i2: i1, $i3: i1) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 96} {:cexpr "__pci_enable_wake:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 97} {:cexpr "__pci_enable_wake:arg:arg2"} boogie_si_record_i1($i2);
    call {:si_unique_call 98} {:cexpr "__pci_enable_wake:arg:arg3"} boogie_si_record_i1($i3);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 1} true;
    call {:si_unique_call 99} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 100} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 187405);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    return;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 188437);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 101} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 102} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_choose_state: ref;

axiom pci_choose_state == $sub.ref(0, 189469);

procedure pci_choose_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $CurrAddr;



implementation pci_choose_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.4 := $store.i32($M.4, $p3, $i1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 104} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 105} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_del_gadget_udc: ref;

axiom usb_del_gadget_udc == $sub.ref(0, 190501);

procedure usb_del_gadget_udc($p0: ref);
  free requires assertsPassed;



implementation usb_del_gadget_udc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_destroy: ref;

axiom dma_pool_destroy == $sub.ref(0, 191533);

procedure dma_pool_destroy($p0: ref);
  free requires assertsPassed;



implementation dma_pool_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    return;
}



const dma_pool_free: ref;

axiom dma_pool_free == $sub.ref(0, 192565);

procedure dma_pool_free($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation dma_pool_free($p0: ref, $p1: ref, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "dma_pool_free:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 193597);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 108} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 109} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $p5 := get_dma_ops($p0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 112} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 114} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.1, $p12);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    call {:si_unique_call 116} devirtbounce.1($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 115} devirtbounce(0, .str.16, 36, 12);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 194629);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} free_($p0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    return;
}



const pch_vbus_gpio_free: ref;

axiom pch_vbus_gpio_free == $sub.ref(0, 195661);

procedure pch_vbus_gpio_free($p0: ref);
  free requires assertsPassed;



implementation pch_vbus_gpio_free($p0: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.1, $p14);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} gpio_free($i15);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} ldv_free_irq_103($i7, $p8);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_exit: ref;

axiom pch_udc_exit == $sub.ref(0, 196693);

procedure pch_udc_exit($p0: ref);
  free requires assertsPassed;



implementation pch_udc_exit($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} pch_udc_bit_set($p0, 1040, 127);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} pch_udc_bit_set($p0, 1048, 4294967295);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} pch_udc_set_disconnect($p0);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_136: ref;

axiom ldv_free_irq_136 == $sub.ref(0, 197725);

procedure ldv_free_irq_136($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_136($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} {:cexpr "ldv_free_irq_136:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} free_irq($i0, $p1);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    return;
}



const ldv_iounmap_137: ref;

axiom ldv_iounmap_137 == $sub.ref(0, 198757);

procedure ldv_iounmap_137($p0: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_iounmap_137($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} ldv_linux_arch_io_io_mem_unmap();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 199789);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 129} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_arch_io_io_mem_unmap: ref;

axiom ldv_linux_arch_io_io_mem_unmap == $sub.ref(0, 200821);

procedure ldv_linux_arch_io_io_mem_unmap();
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_linux_arch_io_io_mem_unmap()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i0 := $M.5;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} ldv_assert_linux_arch_io__less_initial_decrement($i2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $M.5 := $i4;
    call {:si_unique_call 131} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_arch_io__less_initial_decrement: ref;

axiom ldv_assert_linux_arch_io__less_initial_decrement == $sub.ref(0, 201853);

procedure ldv_assert_linux_arch_io__less_initial_decrement($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__less_initial_decrement($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "ldv_assert_linux_arch_io__less_initial_decrement:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 133} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 202885);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq: ref;

axiom ldv_free_irq == $sub.ref(0, 203917);

procedure ldv_free_irq($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_free_irq($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} {:cexpr "ldv_free_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 136} {:cexpr "ldv_free_irq:arg:ldv_8_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} ldv_dispatch_irq_deregister_8_1($i1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_irq_deregister_8_1: ref;

axiom ldv_dispatch_irq_deregister_8_1 == $sub.ref(0, 204949);

procedure ldv_dispatch_irq_deregister_8_1($i0: i32);
  free requires assertsPassed;



implementation ldv_dispatch_irq_deregister_8_1($i0: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} {:cexpr "ldv_dispatch_irq_deregister_8_1:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i1 := ldv_undef_int();
    call {:si_unique_call 140} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 205981);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 143} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_free_irq_103: ref;

axiom ldv_free_irq_103 == $sub.ref(0, 207013);

procedure ldv_free_irq_103($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_free_irq_103($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "ldv_free_irq_103:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} free_irq($i0, $p1);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} ldv_free_irq($0.ref, $i0, $p1);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    return;
}



const gpio_free: ref;

axiom gpio_free == $sub.ref(0, 208045);

procedure gpio_free($i0: i32);
  free requires assertsPassed;



implementation gpio_free($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} {:cexpr "gpio_free:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 209077);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 148} $free($p0);
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 210109);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 150} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, dma_ops);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 211141);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 2);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 212173);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 153} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 213205);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 155} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 156} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 157} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 214237);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.1, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 159} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 215269);

procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 164} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 216301);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} dev_set_drvdata($p2, $p1);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    return;
}



const __request_region: ref;

axiom __request_region == $sub.ref(0, 217333);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} {:cexpr "__request_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 169} {:cexpr "__request_region:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 170} {:cexpr "__request_region:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p5 := external_alloc();
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_ioremap_nocache_138: ref;

axiom ldv_ioremap_nocache_138 == $sub.ref(0, 218365);

procedure ldv_ioremap_nocache_138($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_ioremap_nocache_138($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} {:cexpr "ldv_ioremap_nocache_138:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    call {:si_unique_call 173} {:cexpr "ldv_ioremap_nocache_138:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p2 := ldv_linux_arch_io_io_mem_remap();
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pch_udc_pcd_init: ref;

axiom pch_udc_pcd_init == $sub.ref(0, 219397);

procedure pch_udc_pcd_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.1, $CurrAddr, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.14, assertsPassed, $M.5;



implementation pch_udc_pcd_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var vslice_dummy_var_34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} pch_udc_init($p0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} pch_udc_pcd_reinit($p0);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i1 := $M.6;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_34 := pch_vbus_gpio_init($p0, $i1);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const pch_udc_isr: ref;

axiom pch_udc_isr == $sub.ref(0, 220429);

procedure pch_udc_isr($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16, $M.0;



implementation pch_udc_isr($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i40: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i28: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 179} {:cexpr "pch_udc_isr:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i4 := pch_udc_read_device_interrupts($p3);
    call {:si_unique_call 181} {:cexpr "dev_intr"} boogie_si_record_i32($i4);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i5 := pch_udc_read_ep_interrupts($p3);
    call {:si_unique_call 183} {:cexpr "ep_intr"} boogie_si_record_i32($i5);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, $i5);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i4, 0);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i5, 0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i4, $i5);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} ldv_spin_lock_97($p33);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i4, 0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i5, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} ldv_spin_unlock_96($p48);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} pch_udc_read_all_epstatus($p3, $i5);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i5, 1);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i5, 65536);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i40 := 1;
    goto $bb31;

  $bb31:
    call $i41, $i42, $i43, $i44, $i45, $i40 := pch_udc_isr_loop_$bb31($p3, $i5, $i41, $i42, $i43, $i44, $i45, $i40);
    goto $bb31_last;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32(1, $i40);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i5, $i41);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i40, 1);
    call {:si_unique_call 200} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i44, 3);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i5, 131072);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i5, 262144);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i5, 524288);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb51:
    assume $i52 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} pch_udc_svc_data_out($p3, 3);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    goto $bb53;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i50 == 1;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} pch_udc_svc_data_out($p3, 2);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    goto $bb49;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i47 == 1;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} pch_udc_svc_data_out($p3, 1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i40 := $i44;
    goto $bb36_dummy;

  $bb33:
    assume $i43 == 1;
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} pch_udc_svc_data_in($p3, $i40);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} pch_udc_postsvc_epinters($p3, $i40);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i39 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} pch_udc_svc_control_out($p3);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} pch_udc_svc_control_in($p3);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} pch_udc_postsvc_epinters($p3, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} pch_udc_dev_isr($p3, $i4);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb8;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} pch_udc_write_ep_interrupts($p3, $i5);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} pch_udc_write_device_interrupts($p3, $i4);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i7 := pch_udc_readl($p3, 1024);
    call {:si_unique_call 185} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, $i7);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p9, .str.1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p10, .str.4);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p11, .str.5);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p12, .str.6);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.11, $p14);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 2799);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p14, $i17);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p18, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.12, $p19);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 187} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} pch_udc_writel($p3, 1, 1276);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb8;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} __dynamic_dev_dbg.ref.ref.ref($p2, $p27, .str.6);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb36_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_695;
}



const ldv_request_irq_139: ref;

axiom ldv_request_irq_139 == $sub.ref(0, 221461);

procedure ldv_request_irq_139($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16;



implementation ldv_request_irq_139($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} {:cexpr "ldv_request_irq_139:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 206} {:cexpr "ldv_request_irq_139:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 208} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i6 := ldv_request_irq($i5, $i0, $p1, $i2, $p3, $p4);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 210} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 222493);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    return;
}



const pci_try_set_mwi: ref;

axiom pci_try_set_mwi == $sub.ref(0, 223525);

procedure pci_try_set_mwi($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_try_set_mwi($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 211} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 212} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 224557);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 225589);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    return;
}



const init_dma_pools: ref;

axiom init_dma_pools == $sub.ref(0, 226621);

procedure init_dma_pools($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation init_dma_pools($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p55: ref;
  var $p58: ref;
  var $p61: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p4 := dma_pool_create(.str.83, $p3, 16, 0, 0);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p4);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $p17 := dma_pool_create(.str.86, $p16, 16, 0, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6280, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $p17);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6280, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6280, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(64, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p31 := ldv_dma_pool_alloc_134($p27, 208, $p30);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, $p31);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p46 := ldv_dma_pool_alloc_135($p42, 208, $p45);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p55, $p46);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p58, $0.ref);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p61, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p64, $0.ref);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p67, 0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p68 := kzalloc(64, 208);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6296, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p69, $p68);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6296, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.1, $p70);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.1, $p74);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6296, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.1, $p77);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i79 := dma_map_single_attrs($p76, $p78, 64, 2, $0.ref);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6288, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p80, $i79);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb14:
    assume $i73 == 1;
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i49 == 1;
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.1, $p50);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} dev_err.ref.ref.ref($p52, .str.89, .str.85);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} dev_err.ref.ref.ref($p37, .str.88, .str.85);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} dev_err.ref.ref.ref($p25, .str.87, .str.85);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} dev_err.ref.ref.ref($p12, .str.84, .str.85);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;
}



const gadget_release: ref;

axiom gadget_release == $sub.ref(0, 227653);

procedure gadget_release($p0: ref);
  free requires assertsPassed;



implementation gadget_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p1 := dev_get_drvdata($p0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} kfree($p3);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    return;
}



const usb_add_gadget_udc_release: ref;

axiom usb_add_gadget_udc_release == $sub.ref(0, 228685);

procedure usb_add_gadget_udc_release($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_gadget_udc_release($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 1} true;
    call {:si_unique_call 225} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 226} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dma_pool_create: ref;

axiom dma_pool_create == $sub.ref(0, 229717);

procedure dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dma_pool_create($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i64) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} {:cexpr "dma_pool_create:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 228} {:cexpr "dma_pool_create:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 229} {:cexpr "dma_pool_create:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p5 := external_alloc();
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_dma_pool_alloc_134: ref;

axiom ldv_dma_pool_alloc_134 == $sub.ref(0, 230749);

procedure ldv_dma_pool_alloc_134($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_134($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "ldv_dma_pool_alloc_134:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} ldv_check_alloc_flags($i1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_135: ref;

axiom ldv_dma_pool_alloc_135 == $sub.ref(0, 231781);

procedure ldv_dma_pool_alloc_135($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_135($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "ldv_dma_pool_alloc_135:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} ldv_check_alloc_flags($i1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 232813);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 238} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $p5 := get_dma_ops($p0);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 242} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 244} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i14 := __phys_addr($i13);
    call {:si_unique_call 247} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 248} $i21 := devirtbounce.2($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 249} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i23 := __phys_addr($i22);
    call {:si_unique_call 251} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 245} devirtbounce(0, .str.16, 19, 12);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 233845);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 234877);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 254} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 1} true;
    call {:si_unique_call 255} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 256} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 235909);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 258} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 259} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 260} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 261} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 236941);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 237973);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i0 := ldv_undef_int();
    call {:si_unique_call 266} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p2 := external_allocated_data();
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} ldv_assume($i5);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i6 := ldv_is_err($p2);
    call {:si_unique_call 270} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} ldv_assume($i8);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 239005);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p0 := external_alloc();
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 240037);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 241069);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 242101);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 274} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 275} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 243133);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 278} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 244165);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i1 := $M.13;
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 245197);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 1} true;
    call {:si_unique_call 283} __VERIFIER_error();
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 246229);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 1} true;
    call {:si_unique_call 285} __VERIFIER_error();
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 247261);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 287} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 289} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_request_irq: ref;

axiom ldv_request_irq == $sub.ref(0, 248293);

procedure ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16;



implementation ldv_request_irq($i0: i32, $i1: i32, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} {:cexpr "ldv_request_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 291} {:cexpr "ldv_request_irq:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 292} {:cexpr "ldv_request_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i6 := ldv_undef_int();
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i0, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} ldv_assume($i11);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i0, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} ldv_assume($i9);
    call {:si_unique_call 296} {:cexpr "ldv_request_irq:arg:ldv_10_line_line"} boogie_si_record_i32($i1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ldv_dispatch_irq_register_10_2($i1, $p2, $0.ref, $p5);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_irq_register_10_2: ref;

axiom ldv_dispatch_irq_register_10_2 == $sub.ref(0, 249325);

procedure ldv_dispatch_irq_register_10_2($i0: i32, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16;



implementation ldv_dispatch_irq_register_10_2($i0: i32, $p1: ref, $p2: ref, $p3: ref)
{
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} {:cexpr "ldv_dispatch_irq_register_10_2:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i4 := ldv_undef_int();
    call {:si_unique_call 301} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $p13 := ldv_xmalloc(40);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p15, $i0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, $p1);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, $p2);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, $p3);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p14);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} ldv_interrupt_interrupt_instance_1($p19);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p6 := ldv_xmalloc(40);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p8, $i0);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p9, $p1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, $p2);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p11, $p3);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} ldv_interrupt_interrupt_instance_0($p12);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 250357);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p1 := malloc($i0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} ldv_assume($i4);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i5 := ldv_is_err($p1);
    call {:si_unique_call 310} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_assume($i7);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_interrupt_interrupt_instance_0: ref;

axiom ldv_interrupt_interrupt_instance_0 == $sub.ref(0, 251389);

procedure ldv_interrupt_interrupt_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16;



implementation ldv_interrupt_interrupt_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $u0, $u1, $u2, $u2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ldv_switch_to_interrupt_context();
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i17 := ldv_interrupt_instance_handler_0_5($p15, $i13, $p14);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    call {:si_unique_call 316} {:cexpr "ldv_0_ret_val_default"} boogie_si_record_i32($i17);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} ldv_switch_to_process_context();
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i18 := ldv_undef_int();
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i17, 2);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} ldv_assume($i25);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 2);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} ldv_assume($i21);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} ldv_interrupt_instance_thread_0_3($p16, $i13, $p14);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 312} {:cexpr "ldv_0_line_line"} boogie_si_record_i32($i5);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} ldv_free($p12);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $i5, $p11, $p7, $p9;
    goto $bb3;
}



const ldv_interrupt_interrupt_instance_1: ref;

axiom ldv_interrupt_interrupt_instance_1 == $sub.ref(0, 252421);

procedure ldv_interrupt_interrupt_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16;



implementation ldv_interrupt_interrupt_instance_1($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $u0, $u1, $u2, $u2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} ldv_switch_to_interrupt_context();
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i17 := ldv_interrupt_instance_handler_1_5($p15, $i13, $p14);
    call {:si_unique_call 327} {:cexpr "ldv_1_ret_val_default"} boogie_si_record_i32($i17);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} ldv_switch_to_process_context();
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i18 := ldv_undef_int();
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i17, 2);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} ldv_assume($i25);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i17, 2);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} ldv_assume($i21);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p16);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} ldv_interrupt_instance_thread_1_3($p16, $i13, $p14);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 323} {:cexpr "ldv_1_line_line"} boogie_si_record_i32($i5);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} ldv_free($p12);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i13, $p14, $p15, $p16 := $i5, $p11, $p7, $p9;
    goto $bb3;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 253453);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} free_($p0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    return;
}



const ldv_switch_to_interrupt_context: ref;

axiom ldv_switch_to_interrupt_context == $sub.ref(0, 254485);

procedure ldv_switch_to_interrupt_context();
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_switch_to_interrupt_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $M.0 := 1;
    call {:si_unique_call 335} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(1);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_handler_1_5: ref;

axiom ldv_interrupt_instance_handler_1_5 == $sub.ref(0, 255517);

procedure ldv_interrupt_instance_handler_1_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_interrupt_instance_handler_1_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "ldv_interrupt_instance_handler_1_5:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i3 := pch_vbus_gpio_irq($i1, $p2);
    call {:si_unique_call 338} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_switch_to_process_context: ref;

axiom ldv_switch_to_process_context == $sub.ref(0, 256549);

procedure ldv_switch_to_process_context();
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_switch_to_process_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $M.0 := 0;
    call {:si_unique_call 339} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    return;
}



const ldv_interrupt_instance_thread_1_3: ref;

axiom ldv_interrupt_instance_thread_1_3 == $sub.ref(0, 257581);

procedure ldv_interrupt_instance_thread_1_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16, $M.0;



implementation ldv_interrupt_instance_thread_1_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} {:cexpr "ldv_interrupt_instance_thread_1_3:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 341} vslice_dummy_var_35 := devirtbounce.3($p0, $i1, $p2);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const pch_vbus_gpio_irq: ref;

axiom pch_vbus_gpio_irq == $sub.ref(0, 258613);

procedure pch_vbus_gpio_irq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_vbus_gpio_irq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p18: ref;
  var $i11: i32;
  var vslice_dummy_var_36: i1;
  var vslice_dummy_var_37: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} {:cexpr "pch_vbus_gpio_irq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i12 := pch_vbus_gpio_get_value($p2);
    call {:si_unique_call 344} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(8, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} vslice_dummy_var_37 := schedule_work($p18);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(88, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_36 := schedule_work($p15);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const pch_vbus_gpio_get_value: ref;

axiom pch_vbus_gpio_get_value == $sub.ref(0, 259645);

procedure pch_vbus_gpio_get_value($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_vbus_gpio_get_value($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.1, $p2);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i8 := gpio_get_value($i7);
    call {:si_unique_call 348} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 349} {:cexpr "vbus"} boogie_si_record_i32($i10);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 260677);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.1, system_wq);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i2 := queue_work($p1, $p0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 351} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 261709);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 353} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 262741);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 354} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 355} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 356} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const gpio_get_value: ref;

axiom gpio_get_value == $sub.ref(0, 263773);

procedure gpio_get_value($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_get_value($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} {:cexpr "gpio_get_value:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i1 := __gpio_get_value($i0);
    call {:si_unique_call 359} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __gpio_get_value: ref;

axiom __gpio_get_value == $sub.ref(0, 264805);

procedure __gpio_get_value($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __gpio_get_value($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} {:cexpr "__gpio_get_value:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p1 := gpio_to_desc($i0);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i2 := gpiod_get_raw_value($p1);
    call {:si_unique_call 363} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpio_to_desc: ref;

axiom gpio_to_desc == $sub.ref(0, 265837);

procedure gpio_to_desc($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation gpio_to_desc($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} {:cexpr "gpio_to_desc:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p1 := external_alloc();
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const gpiod_get_raw_value: ref;

axiom gpiod_get_raw_value == $sub.ref(0, 266869);

procedure gpiod_get_raw_value($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_get_raw_value($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 366} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 367} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_interrupt_instance_handler_0_5: ref;

axiom ldv_interrupt_instance_handler_0_5 == $sub.ref(0, 267901);

procedure ldv_interrupt_instance_handler_0_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16, $M.0;



implementation ldv_interrupt_instance_handler_0_5($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} {:cexpr "ldv_interrupt_instance_handler_0_5:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i3 := pch_udc_isr($i1, $p2);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 370} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_interrupt_instance_thread_0_3: ref;

axiom ldv_interrupt_instance_thread_0_3 == $sub.ref(0, 268933);

procedure ldv_interrupt_instance_thread_0_3($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16, $M.0;



implementation ldv_interrupt_instance_thread_0_3($p0: ref, $i1: i32, $p2: ref)
{
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} {:cexpr "ldv_interrupt_instance_thread_0_3:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 372} vslice_dummy_var_38 := devirtbounce.3($p0, $i1, $p2);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 269965);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 373} $r := $malloc($i0);
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 270997);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 374} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 375} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 376} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 377} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_read_device_interrupts: ref;

axiom pch_udc_read_device_interrupts == $sub.ref(0, 272029);

procedure pch_udc_read_device_interrupts($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_device_interrupts($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i1 := pch_udc_readl($p0, 1036);
    call {:si_unique_call 379} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_ep_interrupts: ref;

axiom pch_udc_read_ep_interrupts == $sub.ref(0, 273061);

procedure pch_udc_read_ep_interrupts($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_interrupts($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $i1 := pch_udc_readl($p0, 1044);
    call {:si_unique_call 381} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 274093);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_write_device_interrupts: ref;

axiom pch_udc_write_device_interrupts == $sub.ref(0, 275125);

procedure pch_udc_write_device_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_write_device_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} {:cexpr "pch_udc_write_device_interrupts:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} pch_udc_writel($p0, $i2, 1036);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_write_ep_interrupts: ref;

axiom pch_udc_write_ep_interrupts == $sub.ref(0, 276157);

procedure pch_udc_write_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_write_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} {:cexpr "pch_udc_write_ep_interrupts:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} pch_udc_writel($p0, $i2, 1044);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_97: ref;

axiom ldv_spin_lock_97 == $sub.ref(0, 277189);

procedure ldv_spin_lock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_spin_lock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev();
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} spin_lock($p0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;
}



const pch_udc_dev_isr: ref;

axiom pch_udc_dev_isr == $sub.ref(0, 278221);

procedure pch_udc_dev_isr($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $M.14, $CurrAddr, $M.5, assertsPassed, $M.16, $M.0;



implementation pch_udc_dev_isr($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i1;
  var $i102: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i24;
  var $i117: i24;
  var $i118: i24;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i24;
  var $i138: i24;
  var $i139: i24;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i64;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i24;
  var $i159: i24;
  var $i160: i24;
  var $p161: ref;
  var $p162: ref;
  var $i163: i8;
  var $i164: i64;
  var $i165: i64;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i24;
  var $i180: i24;
  var $i181: i24;
  var $p182: ref;
  var $p183: ref;
  var $i184: i8;
  var $i185: i64;
  var $i186: i64;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var vslice_dummy_var_39: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 394} {:cexpr "pch_udc_dev_isr:arg:dev_intr"} boogie_si_record_i32($i1);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 8);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i1, 64);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i1, 2);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i1, 1);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i1, 16);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i1, 32);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i150 := $and.i32($i1, 4);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i1, 128);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, 0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    return;

  $bb63:
    assume $i172 == 1;
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p173, .str.1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p174, .str.7);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p175, .str.5);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p176, .str.13);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i179 := $load.i24($M.11, $p178);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i180 := $and.i24($i179, $sub.i24(0, 262144));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i181 := $or.i24($i180, 2779);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p178, $i181);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p182, 0);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.12, $p183);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i64($i184);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i186 := $and.i64($i185, 1);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i187 := ldv__builtin_expect($i186, 0);
    call {:si_unique_call 425} {:cexpr "tmp___4"} boogie_si_record_i64($i187);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb65:
    assume $i188 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.1, $p189);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p190, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __dynamic_dev_dbg.ref.ref.ref($p7, $p191, .str.13);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb57:
    assume $i151 == 1;
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p152, .str.1);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p153, .str.7);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p154, .str.5);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p155, .str.12);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i158 := $load.i24($M.11, $p157);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i159 := $and.i24($i158, $sub.i24(0, 262144));
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i160 := $or.i24($i159, 2776);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p157, $i160);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p161, 0);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.12, $p162);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i64($i163);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i165 := $and.i64($i164, 1);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i166 := ldv__builtin_expect($i165, 0);
    call {:si_unique_call 422} {:cexpr "tmp___3"} boogie_si_record_i64($i166);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i167 := $ne.i64($i166, 0);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i167 == 1;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.1, $p168);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p169, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} __dynamic_dev_dbg.ref.ref.ref($p6, $p170, .str.12);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb51:
    assume $i130 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p131, .str.1);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p132, .str.7);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p133, .str.5);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p134, .str.11);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i137 := $load.i24($M.11, $p136);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i138 := $and.i24($i137, $sub.i24(0, 262144));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i139 := $or.i24($i138, 2773);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p136, $i139);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p140, 0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.12, $p141);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i143 := $zext.i8.i64($i142);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i144 := $and.i64($i143, 1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 419} {:cexpr "tmp___2"} boogie_si_record_i64($i145);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i146 == 1;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.1, $p147);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __dynamic_dev_dbg.ref.ref.ref($p5, $p149, .str.11);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i73 := pch_vbus_gpio_get_value($p0);
    call {:si_unique_call 409} {:cexpr "vbus"} boogie_si_record_i32($i73);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p0);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(6256, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.1, $p75);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p97, $mul.ref(6256, 1));
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.1, $p98);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p110, .str.1);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p111, .str.7);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p112, .str.5);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p113, .str.10);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i116 := $load.i24($M.11, $p115);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i117 := $and.i24($i116, $sub.i24(0, 262144));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i118 := $or.i24($i117, 2769);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p115, $i118);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p119, 0);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.12, $p120);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i64($i121);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i123 := $and.i64($i122, 1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i124 := ldv__builtin_expect($i123, 0);
    call {:si_unique_call 415} {:cexpr "tmp___1"} boogie_si_record_i64($i124);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume $i125 == 1;
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.1, $p126);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} __dynamic_dev_dbg.ref.ref.ref($p4, $p128, .str.10);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume $i101 == 1;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i73, 1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb41;

  $bb42:
    assume $i102 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.1, $p104);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb41;

  $bb44:
    assume $i106 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(8, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_39 := schedule_work($p108);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb27:
    assume $i78 == 1;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i73, 1);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb29;

  $bb30:
    assume $i79 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} pch_udc_reconnect($p0);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.1, $p86);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i88 := $p2i.ref.i64($p87);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb34;

  $bb35:
    assume $i89 == 1;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} ldv_spin_unlock_96($p90);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.1, $p91);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.1, $p93);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1));
    call {:si_unique_call 411} devirtbounce.4($p94, $p95);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} ldv_spin_lock_97($p96);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i59 == 1;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.1, $p60);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb23;

  $bb24:
    assume $i65 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} ldv_spin_unlock_96($p66);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.1, $p67);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 192)), $mul.ref(48, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1));
    call {:si_unique_call 406} devirtbounce.4($p70, $p71);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} ldv_spin_lock_97($p72);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i53 == 1;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} pch_udc_svc_cfg_interrupt($p0);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i51 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} pch_udc_svc_intf_interrupt($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} pch_udc_svc_enum_interrupt($p0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p31, .str.1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p32, .str.7);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p33, .str.5);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p34, .str.9);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.11, $p36);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 2738);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p36, $i39);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p40, 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.12, $p41);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i64($i45);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i46 == 1;
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __dynamic_dev_dbg.ref.ref.ref($p3, $p49, .str.9);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} pch_udc_svc_ur_interrupt($p0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p10, .str.1);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p11, .str.7);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p12, .str.5);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p13, .str.8);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.11, $p15);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 2733);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p15, $i18);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p19, 0);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.12, $p20);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 397} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} __dynamic_dev_dbg.ref.ref.ref($p2, $p28, .str.8);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_127:
    assume !assertsPassed;
    return;
}



const pch_udc_read_all_epstatus: ref;

axiom pch_udc_read_all_epstatus == $sub.ref(0, 279253);

procedure pch_udc_read_all_epstatus($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_read_all_epstatus($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i64;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} {:cexpr "pch_udc_read_all_epstatus:arg:ep_intr"} boogie_si_record_i32($i1);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i1, 65536);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i1, 2);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i1, 131072);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i1, 4);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i1, 262144);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i1, 8);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i1, 524288);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i79 == 1;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(7, 144));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i83 := pch_udc_read_ep_status($p82);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i83);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p81, $mul.ref(7, 144)), $mul.ref(136, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p85, $i84);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p81, $mul.ref(7, 144)), $mul.ref(136, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.1, $p86);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i87);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} pch_udc_clear_ep_status($p82, $i88);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i68 == 1;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p70, $mul.ref(6, 144));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} $i72 := pch_udc_read_ep_status($p71);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i72);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p70, $mul.ref(6, 144)), $mul.ref(136, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p74, $i73);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p70, $mul.ref(6, 144)), $mul.ref(136, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.1, $p75);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} pch_udc_clear_ep_status($p71, $i77);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i57 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p59, $mul.ref(5, 144));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i61 := pch_udc_read_ep_status($p60);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p59, $mul.ref(5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p63, $i62);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p59, $mul.ref(5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.1, $p64);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} pch_udc_clear_ep_status($p60, $i66);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(4, 144));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i50 := pch_udc_read_ep_status($p49);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p48, $mul.ref(4, 144)), $mul.ref(136, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p52, $i51);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p48, $mul.ref(4, 144)), $mul.ref(136, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.1, $p53);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} pch_udc_clear_ep_status($p49, $i55);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(3, 144));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $i39 := pch_udc_read_ep_status($p38);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p37, $mul.ref(3, 144)), $mul.ref(136, 1));
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p41, $i40);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p37, $mul.ref(3, 144)), $mul.ref(136, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.1, $p42);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i64.i32($i43);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} pch_udc_clear_ep_status($p38, $i44);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(2, 144));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i28 := pch_udc_read_ep_status($p27);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(2, 144)), $mul.ref(136, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p30, $i29);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(2, 144)), $mul.ref(136, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} pch_udc_clear_ep_status($p27, $i33);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(1, 144));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} $i17 := pch_udc_read_ep_status($p16);
    call {:si_unique_call 432} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p19, $i18);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} pch_udc_clear_ep_status($p16, $i22);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i3 == 1;
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} $i6 := pch_udc_read_ep_status($p5);
    call {:si_unique_call 429} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p8, $i7);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.1, $p9);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} pch_udc_clear_ep_status($p5, $i11);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_svc_control_in: ref;

axiom pch_udc_svc_control_in == $sub.ref(0, 280285);

procedure pch_udc_svc_control_in($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_svc_control_in($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(1, 144));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    call {:si_unique_call 446} {:cexpr "epsts"} boogie_si_record_i32($i8);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p9, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i8, 184551104);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i8, 128);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i8, 512);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i8, 1024);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i8, 16778304);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 64);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} pch_udc_start_next_txrequest($p2);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(6256, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb14:
    assume $i22 == 1;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} pch_udc_complete_transfer($p2);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 1073741823);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, $i27);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} pch_udc_ep_clear_nak($p5);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} pch_udc_ep_set_rrdy($p5);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_postsvc_epinters: ref;

axiom pch_udc_postsvc_epinters == $sub.ref(0, 281317);

procedure pch_udc_postsvc_epinters($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_postsvc_epinters($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} {:cexpr "pch_udc_postsvc_epinters:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 2);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 144));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(112, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i8 := list_empty($p7);
    call {:si_unique_call 455} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(96, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, 31);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p6);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(128, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 0 else 16);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i15, $i21);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32(1, $i22);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} pch_udc_enable_ep_interrupts($p11, $i23);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} pch_udc_ep_clear_nak($p6);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_svc_control_out: ref;

axiom pch_udc_svc_control_out == $sub.ref(0, 282349);

procedure pch_udc_svc_control_out($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $CurrAddr, $M.5, $M.16, assertsPassed, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12;



implementation pch_udc_svc_control_out($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i16;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i16;
  var $i62: i16;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i8;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $i113: i16;
  var $i114: i16;
  var $p115: ref;
  var $i116: i16;
  var $i117: i16;
  var $i118: i16;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $i130: i64;
  var $p131: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref(1, 144));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.1, $p4);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    call {:si_unique_call 458} {:cexpr "stat"} boogie_si_record_i32($i6);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p7, 0);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i6, 48);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 4);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i6, 48);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i120 := $lshr.i32($i119, 4);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 1);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} pch_udc_ep_set_rrdy($p3);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i121 == 1;
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p0);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref(6256, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.1, $p123);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb24;

  $bb25:
    assume $i126 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} pch_udc_ep_set_ddptr($p3, 0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(112, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i128 := list_empty($p127);
    call {:si_unique_call 478} {:cexpr "tmp"} boogie_si_record_i32($i128);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i129 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i130 := $zext.i32.i64($i6);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(136, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p131, $i130);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} pch_udc_svc_data_out($p0, 0);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i13 := $and.i16($i12, $sub.i16(0, 3));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i13);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.1, $p16);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i18 := $and.i8($i17, $sub.i8(0, 65));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p16, $i18);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 65));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $i23);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p24);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p27);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.1;
    cmdloc_dummy_var_1 := $M.1;
    call {:si_unique_call 459} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p28, $p29, 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_2;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} pch_udc_init_setup_buff($p31);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i8($i37, 5);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} pch_udc_ep_fifo_flush($p33, $i40);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(0, 1));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i45 == 1);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(0, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p53, $p51);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} ldv_spin_unlock_96($p54);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p0);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(3148, 2));
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.1, $p56);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 65313);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1));
    call {:si_unique_call 464} $i69 := devirtbounce.5($p66, $p67, $p68);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 465} {:cexpr "setup_supported"} boogie_si_record_i32($i69);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} ldv_spin_lock_97($p70);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(0, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i74 := $sext.i8.i32($i73);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 0);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i87 := $ule.i32($i69, 63);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i87 == 1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i69, 0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i95 == 1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i116 := $load.i16($M.1, $p115);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i117 := $and.i16($i116, $sub.i16(0, 513));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i118 := $or.i16($i117, 512);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p115, $i118);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i95 == 1;
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} pch_udc_ep_set_stall($p97);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.1, $p98);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.1, $p100);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i102 := $and.i8($i101, 31);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p3);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(128, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.1, $p105);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i109 := (if $i108 == 1 then 0 else 16);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i103, $i109);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i111 := $shl.i32(1, $i110);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} pch_udc_enable_ep_interrupts($p99, $i111);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.1, $p112);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i114 := $and.i16($i113, $sub.i16(0, 3));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p112, $i114);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i87 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} pch_udc_ep_clear_nak($p89);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.1, $p91);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i93 := $sext.i8.i32($i92);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $i94 := $sge.i32($i93, 0);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i94 == 1;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} pch_udc_set_dma($p0, 1);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} pch_udc_ep_clear_nak($p3);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i75 == 1;
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.1, $p78);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 1073741823);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.1, $p81);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p83, $i80);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p2, $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i85 := $load.i64($M.1, $p84);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i64.i32($i85);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} pch_udc_ep_set_ddptr($p3, $i86);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i59 == 1;
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.1, $p60);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i62 := $and.i16($i61, $sub.i16(0, 5));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p60, $i62);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i45 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, $p48);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_udc_svc_data_in: ref;

axiom pch_udc_svc_data_in == $sub.ref(0, 283381);

procedure pch_udc_svc_data_in($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_svc_data_in($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i8;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} {:cexpr "pch_udc_svc_data_in:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 2);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 144));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.1, $p7);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 482} {:cexpr "epsts"} boogie_si_record_i32($i9);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(136, 1));
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p10, 0);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, 251659968);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i9, 128);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i9, 512);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i9, 67108864);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i9, 33554432);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i9, 1024);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i9, 83887168);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 64);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} pch_udc_start_next_txrequest($p6);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i55 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} pch_udc_complete_transfer($p6);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p0);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p35, $mul.ref(6256, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i39 == 1);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} pch_udc_ep_set_stall($p6);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(96, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.1, $p42);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i44 := $and.i8($i43, 31);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p6);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref(128, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i51 := (if $i50 == 1 then 0 else 16);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i45, $i51);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32(1, $i52);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} pch_udc_enable_ep_interrupts($p41, $i53);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i39 == 1;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} pch_udc_ep_clear_stall($p6);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} pch_udc_ep_set_stall($p6);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(96, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref($i5, 144)), $mul.ref(128, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 31);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p6);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(128, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i30 := (if $i29 == 1 then 0 else 16);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i24, $i30);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i32 := $shl.i32(1, $i31);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} pch_udc_enable_ep_interrupts($p20, $i32);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_svc_data_out: ref;

axiom pch_udc_svc_data_out == $sub.ref(0, 284413);

procedure pch_udc_svc_data_out($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_svc_data_out($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i8;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i8;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} {:cexpr "pch_udc_svc_data_out:arg:ep_num"} boogie_si_record_i32($i1);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i1, 2);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p3, $mul.ref($i6, 144));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(136, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 491} {:cexpr "epsts"} boogie_si_record_i32($i10);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(136, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p11, 0);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i10, 128);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i10, 512);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i10, 67108864);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i10, 33554432);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i10, 48);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i72, 4);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(112, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i97 := list_empty($p96);
    call {:si_unique_call 504} {:cexpr "tmp___0"} boogie_si_record_i32($i97);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i98 == 1;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} pch_udc_set_dma($p0, 1);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(6256, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i81 == 1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} pch_udc_complete_receiver($p7);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i81 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} pch_udc_ep_set_stall($p7);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.1, $p82);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(128, 1));
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i86 := $and.i8($i85, 31);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p7);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(128, 1));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.1, $p89);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i32($i90);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i93 := (if $i92 == 1 then 0 else 16);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i87, $i93);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i95 := $shl.i32(1, $i94);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} pch_udc_enable_ep_interrupts($p83, $i95);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p0);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(6256, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i57 == 1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} pch_udc_ep_set_stall($p7);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.1, $p58);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(128, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.1, $p60);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i62 := $and.i8($i61, 31);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p7);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p64, $mul.ref(128, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i69 := (if $i68 == 1 then 0 else 16);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i63, $i69);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i71 := $shl.i32(1, $i70);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} pch_udc_enable_ep_interrupts($p59, $i71);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i57 == 1;
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} pch_udc_ep_clear_stall($p7);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} pch_udc_ep_set_stall($p7);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(96, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(128, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.1, $p39);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i41 := $and.i8($i40, 31);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p7);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(128, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i48 := (if $i47 == 1 then 0 else 16);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i42, $i48);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i50 := $shl.i32(1, $i49);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} pch_udc_enable_ep_interrupts($p38, $i50);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(112, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i15 := list_empty($p14);
    call {:si_unique_call 493} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref($i6, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 1073741824));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, $sub.i32(0, 2147483648));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p21);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($p28, $mul.ref(128, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.1, $p29);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} pch_udc_start_rxrequest($p7, $p21);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const ldv_spin_unlock_96: ref;

axiom ldv_spin_unlock_96 == $sub.ref(0, 285445);

procedure ldv_spin_unlock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_spin_unlock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_pch_udc_dev();
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} spin_unlock($p0);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_pch_udc_dev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_pch_udc_dev == $sub.ref(0, 286477);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_pch_udc_dev();
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_pch_udc_dev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i0 := $M.14;
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i3 := $M.14;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} ldv_assume($i5);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 510} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_pch_udc_dev"} boogie_si_record_i32(1);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 287509);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} _raw_spin_unlock($p2);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 288541);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 289573);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 513} __VERIFIER_error();
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 290605);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_start_rxrequest: ref;

axiom pch_udc_start_rxrequest == $sub.ref(0, 291637);

procedure pch_udc_start_rxrequest($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_start_rxrequest($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i8;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} pch_udc_clear_dma($p3, 1);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1073741823);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, $i8);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 134217728);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i13 == 1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p14 := $p5;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $i26, $i27 := pch_udc_start_rxrequest_loop_$bb4($p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $i26, $i27);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p18 := phys_to_virt($i17);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.1, $p20);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1073741823);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i22);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 134217728);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p14 := $p18;
    goto $bb8_dummy;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.1, $p28);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} pch_udc_ep_set_ddptr($p0, $i30);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.1, $p31);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i33 := $and.i8($i32, $sub.i8(0, 2));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i34 := $or.i8($i33, 1);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p31, $i34);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.1, $p35);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.1, $p37);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 31);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32(65536, $i40);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} pch_udc_enable_ep_interrupts($p36, $i41);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} pch_udc_set_dma($p43, 1);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} pch_udc_ep_set_rrdy($p0);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb8_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const pch_udc_ep_set_stall: ref;

axiom pch_udc_ep_set_stall == $sub.ref(0, 292669);

procedure pch_udc_ep_set_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_stall($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(128, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} pch_udc_ep_bit_set($p0, 0, 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} pch_udc_ep_bit_set($p0, 0, 2);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} pch_udc_ep_bit_set($p0, 0, 1);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_enable_ep_interrupts: ref;

axiom pch_udc_enable_ep_interrupts == $sub.ref(0, 293701);

procedure pch_udc_enable_ep_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_enable_ep_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} {:cexpr "pch_udc_enable_ep_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} pch_udc_bit_clr($p0, 1048, $i2);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_clear_stall: ref;

axiom pch_udc_ep_clear_stall == $sub.ref(0, 294733);

procedure pch_udc_ep_clear_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_stall($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} pch_udc_ep_bit_clr($p0, 0, 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} pch_udc_ep_bit_set($p0, 0, 256);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_complete_receiver: ref;

axiom pch_udc_complete_receiver == $sub.ref(0, 295765);

procedure pch_udc_complete_receiver($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_complete_receiver($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p21: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $p28: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i8;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i4 := list_empty($p3);
    call {:si_unique_call 529} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} pch_udc_clear_dma($p12, 1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} pch_udc_ep_set_ddptr($p0, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, $sub.i32(0, 1073741824));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, $sub.i32(0, 2147483648));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    assume {:verifier.code 0} true;
    $p21 := $p23;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 805306368);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p28 := $p21;
    goto $bb11;

  $bb11:
    call $p28, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $p48, $i52, $p53, $p54, $i55, $i56, $p60, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68 := pch_udc_complete_receiver_loop_$bb11($p9, $p28, $p40, $i41, $i42, $i43, $p44, $i45, $i46, $i47, $p48, $i52, $p53, $p54, $i55, $i56, $p60, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68);
    goto $bb11_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.1, $p40);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, $sub.i32(0, 1073741824));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, $sub.i32(0, 2147483648));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p28);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i52, $i55);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.1, $p60);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i62 := $zext.i32.i64($i61);
    call {:si_unique_call 535} {:cexpr "addr"} boogie_si_record_i64($i62);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p63 := phys_to_virt($i62);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.1, $p65);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 805306368);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $p28 := $p63;
    goto $bb24_dummy;

  $bb12:
    assume $i68 == 1;
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.1, $p34);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 805306368);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.1, $p37);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} dev_err.ref.ref.i32.i32($p31, .str.24, $i36, $i39);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i56 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} dev_err.ref.ref($p59, .str.25);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.1, $p44);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 134217728);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p48 := $p28;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb16:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.1, $p49);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 65535);
    call {:si_unique_call 533} {:cexpr "count"} boogie_si_record_i32($i51);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i51, 0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i74 := $i51;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.1, $p75);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.1, $p77);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, 134217728);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.1, $p80);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p82, $i79);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.1, $p83);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, $sub.i32(0, 1073741824));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p86, $i85);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(128, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i89 := $and.i8($i88, $sub.i8(0, 2));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p87, $i89);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p91, $i74);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} complete_req($p0, $p10, 0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i93 := list_empty($p92);
    call {:si_unique_call 539} {:cexpr "tmp___1"} boogie_si_record_i32($i93);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb31:
    assume $i94 == 1;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} pch_udc_start_rxrequest($p0, $p99);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i69 == 1;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.1, $p71);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 65536);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb27;

  $bb28:
    assume $i73 == 1;
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i74 := 65536;
    goto $bb30;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb9;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.1, $p19);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb7;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const pch_udc_set_dma: ref;

axiom pch_udc_set_dma == $sub.ref(0, 296797);

procedure pch_udc_set_dma($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_set_dma($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} {:cexpr "pch_udc_set_dma:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} pch_udc_bit_set($p0, 1028, 8);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} pch_udc_bit_set($p0, 1028, 4);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_clear_dma: ref;

axiom pch_udc_clear_dma == $sub.ref(0, 297829);

procedure pch_udc_clear_dma($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_clear_dma($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} {:cexpr "pch_udc_clear_dma:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} pch_udc_bit_clr($p0, 1028, 8);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} pch_udc_bit_clr($p0, 1028, 4);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_set_ddptr: ref;

axiom pch_udc_ep_set_ddptr == $sub.ref(0, 298861);

procedure pch_udc_ep_set_ddptr($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_ddptr($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "pch_udc_ep_set_ddptr:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} pch_udc_ep_writel($p0, $i2, 20);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    return;
}



const phys_to_virt: ref;

axiom phys_to_virt == $sub.ref(0, 299893);

procedure phys_to_virt($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation phys_to_virt($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} {:cexpr "phys_to_virt:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, $sub.i64(0, 131941395333120));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const complete_req: ref;

axiom complete_req == $sub.ref(0, 300925);

procedure complete_req($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation complete_req($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i64;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i8;
  var $p90: ref;
  var $i91: i8;
  var $i92: i8;
  var $i93: i8;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i8;
  var $p104: ref;
  var $i105: i8;
  var $i106: i8;
  var $i107: i8;
  var $i108: i8;
  var $i109: i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} {:cexpr "complete_req:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i8($i4, 6);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    call {:si_unique_call 551} {:cexpr "halted"} boogie_si_record_i32($i7);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} list_del_init($p8);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.1, $p10);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $sub.i32(0, 115));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(128, 1));
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.1, $p90);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i92 := $and.i8($i91, $sub.i8(0, 65));
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i93 := $or.i8($i92, 64);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p90, $i93);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} ldv_spin_unlock_96($p94);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p0);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(128, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.1, $p96);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} usb_gadget_giveback_request($p100, $p101);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_spin_lock_97($p102);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i7);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.1, $p104);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i106 := $and.i8($i103, 1);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i107 := $shl.i8($i106, 6);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i108 := $and.i8($i105, $sub.i8(0, 65));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i109 := $or.i8($i108, $i107);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p104, $i109);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i99 == 1;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} pch_udc_ep_clear_rrdy($p0);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.1, $p22);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, $sub.i64(0, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(128, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i56 == 1);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.1, $p66);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.1, $p69);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.1, $p72);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i74 := $zext.i32.i64($i73);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} dma_unmap_single_attrs($p68, $i70, $i74, 2, $0.ref);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.1, $p78);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.1, $p81);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i83 := $zext.i32.i64($i82);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.1;
    cmdloc_dummy_var_4 := $M.1;
    call {:si_unique_call 557} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p77, $p79, $i83, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} kfree($p85);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p86, $sub.i64(0, 1));
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.1, $p87);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i89 := $and.i8($i88, $sub.i8(0, 3));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p87, $i89);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i56 == 1;
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i61 := $load.i64($M.1, $p60);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.1, $p63);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i64);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} dma_unmap_single_attrs($p59, $i61, $i65, 1, $0.ref);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(128, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.1, $p26);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.1, $p44);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.1, $p47);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} dma_unmap_single_attrs($p42, $i45, $i49, 2, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p51, $sub.i64(0, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.1, $p37);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} dma_unmap_single_attrs($p32, $i35, $i39, 1, $0.ref);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p14, $i2);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 301957);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} __list_del_entry($p0);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} INIT_LIST_HEAD($p0);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 302989);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const pch_udc_ep_clear_rrdy: ref;

axiom pch_udc_ep_clear_rrdy == $sub.ref(0, 304021);

procedure pch_udc_ep_clear_rrdy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_rrdy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} pch_udc_ep_bit_clr($p0, 0, 512);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    return;
}



const usb_gadget_giveback_request: ref;

axiom usb_gadget_giveback_request == $sub.ref(0, 305053);

procedure usb_gadget_giveback_request($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_gadget_giveback_request($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_bit_clr: ref;

axiom pch_udc_ep_bit_clr == $sub.ref(0, 306085);

procedure pch_udc_ep_bit_clr($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_bit_clr($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} {:cexpr "pch_udc_ep_bit_clr:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 567} {:cexpr "pch_udc_ep_bit_clr:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i3 := pch_udc_ep_readl($p0, $i1);
    call {:si_unique_call 569} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i5 := $xor.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i4, $i5);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} pch_udc_ep_writel($p0, $i6, $i1);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_readl: ref;

axiom pch_udc_ep_readl == $sub.ref(0, 307117);

procedure pch_udc_ep_readl($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_ep_readl($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} {:cexpr "pch_udc_ep_readl:arg:reg"} boogie_si_record_i64($i1);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.1, $p6);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, $i1);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 1));
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $i10 := ioread32($p9);
    call {:si_unique_call 573} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const pch_udc_ep_writel: ref;

axiom pch_udc_ep_writel == $sub.ref(0, 308149);

procedure pch_udc_ep_writel($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_writel($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} {:cexpr "pch_udc_ep_writel:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 575} {:cexpr "pch_udc_ep_writel:arg:reg"} boogie_si_record_i64($i2);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 6512)), $mul.ref(6320, 1));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.1, $p8);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $i2);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p7, $mul.ref($i10, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} iowrite32($i3, $p11);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 309181);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 310213);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1, $p0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p0);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_bit_clr: ref;

axiom pch_udc_bit_clr == $sub.ref(0, 311245);

procedure pch_udc_bit_clr($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_bit_clr($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "pch_udc_bit_clr:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 578} {:cexpr "pch_udc_bit_clr:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i3 := pch_udc_readl($p0, $i1);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i5 := $xor.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i4, $i5);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} pch_udc_writel($p0, $i6, $i1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_bit_set: ref;

axiom pch_udc_ep_bit_set == $sub.ref(0, 312277);

procedure pch_udc_ep_bit_set($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation pch_udc_ep_bit_set($p0: ref, $i1: i64, $i2: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} {:cexpr "pch_udc_ep_bit_set:arg:reg"} boogie_si_record_i64($i1);
    call {:si_unique_call 583} {:cexpr "pch_udc_ep_bit_set:arg:bitmask"} boogie_si_record_i64($i2);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i3 := pch_udc_ep_readl($p0, $i1);
    call {:si_unique_call 585} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i5 := $or.i64($i4, $i2);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} pch_udc_ep_writel($p0, $i5, $i1);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_clear_nak: ref;

axiom pch_udc_ep_clear_nak == $sub.ref(0, 313309);

procedure pch_udc_ep_clear_nak($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_clear_nak($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i15: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i19: i32;
  var $i14: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i32: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i36: i32;
  var $i31: i32;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i3 := pch_udc_ep_readl($p0, 0);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 64);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(128, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.1, $p7);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i28 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 597} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 64);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i31 := 10000;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i40 := $i31;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb33:
    assume $i41 == 1;
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, 31);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(128, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p54 := (if $i53 == 1 then .str.20 else .str.21);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} dev_err.ref.ref.ref.i32.ref($p44, .str.19, .str.18, $i48, $p54);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume $i30 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i32 := 10000;
    goto $bb25;

  $bb25:
    call $i33, $i34, $i35, $i32, $i37, $i38, $i39, $i36 := pch_udc_ep_clear_nak_loop_$bb25($p0, $i33, $i34, $i35, $i32, $i37, $i38, $i39, $i36);
    goto $bb25_last;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i32, 1);
    call {:si_unique_call 598} {:cexpr "loopcnt"} boogie_si_record_i32($i37);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i39 := $i37;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb31;

  $bb29:
    assume $i38 == 1;
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} pch_udc_ep_bit_set($p0, 0, 256);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __const_udelay(21475);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i33 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 602} {:cexpr "tmp___1"} boogie_si_record_i32($i33);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 64);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i36 := $i37;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i31 := $i36;
    goto $bb24;

  $bb27:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i32 := $i37;
    goto $bb27_dummy;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i11 := pch_udc_read_ep_status($p0);
    call {:si_unique_call 590} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 256);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i14 := 10000;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i23 := $i14;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i24 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} dev_err.ref.ref.ref($p27, .str.17, .str.18);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i15 := 10000;
    goto $bb10;

  $bb10:
    call $i16, $i17, $i18, $i15, $i20, $i21, $i22, $i19 := pch_udc_ep_clear_nak_loop_$bb10($p0, $i16, $i17, $i18, $i15, $i20, $i21, $i22, $i19);
    goto $bb10_last;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i15, 1);
    call {:si_unique_call 591} {:cexpr "loopcnt"} boogie_si_record_i32($i20);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb16;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __const_udelay(21475);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $i16 := pch_udc_read_ep_status($p0);
    call {:si_unique_call 594} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 256);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i19 := $i20;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i14 := $i19;
    goto $bb9;

  $bb12:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i20;
    goto $bb12_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2665;

  $bb12_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;
}



const pch_udc_ep_set_rrdy: ref;

axiom pch_udc_ep_set_rrdy == $sub.ref(0, 314341);

procedure pch_udc_ep_set_rrdy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_rrdy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} pch_udc_ep_bit_set($p0, 0, 512);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 315373);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_read_ep_status: ref;

axiom pch_udc_read_ep_status == $sub.ref(0, 316405);

procedure pch_udc_read_ep_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_status($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i1 := pch_udc_ep_readl($p0, 4);
    call {:si_unique_call 607} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_ep_control: ref;

axiom pch_udc_read_ep_control == $sub.ref(0, 317437);

procedure pch_udc_read_ep_control($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_ep_control($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i1 := pch_udc_ep_readl($p0, 0);
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_complete_transfer: ref;

axiom pch_udc_complete_transfer == $sub.ref(0, 318469);

procedure pch_udc_complete_transfer($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_complete_transfer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i8;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i8;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.1, $p1);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i4 := list_empty($p3);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.1, $p13);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, $sub.i32(0, 1073741824));
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, $sub.i32(0, 2147483648));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.1, $p19);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 805306368);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.1, $p35);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(0, 1)), $mul.ref(84, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p38, $i36);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.1, $p39);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p41, $sub.i32(0, 939524096));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, $sub.i32(0, 939524096));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} complete_req($p0, $p10, 0);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(128, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, $sub.i8(0, 2));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p45, $i47);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i49 := list_empty($p48);
    call {:si_unique_call 615} {:cexpr "tmp___0"} boogie_si_record_i32($i49);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i50 == 1);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.1, $p65);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.1, $p67);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i69 := $and.i8($i68, 31);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(128, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i76 := (if $i75 == 1 then 0 else 16);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i70, $i76);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i78 := $shl.i32(1, $i77);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} pch_udc_disable_ep_interrupts($p66, $i78);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i50 == 1;
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} pch_udc_wait_ep_stall($p0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.1, $p53);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i55 := $and.i8($i54, 31);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(128, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.1, $p58);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i62 := (if $i61 == 1 then 0 else 16);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i56, $i62);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32(1, $i63);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} pch_udc_enable_ep_interrupts($p52, $i64);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.1, $p23);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.1, $p26);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.1, $p28);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 805306368);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.1, $p31);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} dev_err.ref.ref.i32.i32($p25, .str.22, $i30, $i33);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_start_next_txrequest: ref;

axiom pch_udc_start_next_txrequest == $sub.ref(0, 319501);

procedure pch_udc_start_next_txrequest($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_start_next_txrequest($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i64;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i8;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i1 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 621} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 8);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i5 := list_empty($p4);
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(128, 1));
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} pch_udc_wait_ep_stall($p0);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(128, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.1, $p21);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, $sub.i8(0, 2));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i24 := $or.i8($i23, 1);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, $i24);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} pch_udc_ep_set_ddptr($p0, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(96, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1073741823);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p30, $i29);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.1, $p31);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 134217728);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p35 := $p26;
    goto $bb17;

  $bb17:
    call $p35, $p36, $i37, $i38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $i48 := pch_udc_start_next_txrequest_loop_$bb17($p35, $p36, $i37, $i38, $p39, $p40, $p41, $i42, $i43, $p44, $p45, $i46, $i47, $i48);
    goto $bb17_last;

  $bb20:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.1, $p36);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} $p39 := phys_to_virt($i38);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.1, $p41);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 1073741823);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p44, $i43);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.1, $p45);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 134217728);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb21;

  $bb21:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $p35 := $p39;
    goto $bb21_dummy;

  $bb18:
    assume $i48 == 1;
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(88, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.1, $p49);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i64.i32($i50);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} pch_udc_ep_set_ddptr($p0, $i51);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.1, $p52);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} pch_udc_set_dma($p53, 2);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} pch_udc_ep_set_pd($p0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.1, $p54);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.1, $p56);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i58 := $and.i8($i57, 31);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p0);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(128, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i65 := (if $i64 == 1 then 0 else 16);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i59, $i65);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32(1, $i66);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} pch_udc_enable_ep_interrupts($p55, $i67);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} pch_udc_ep_clear_nak($p0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb15;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;
}



const pch_udc_wait_ep_stall: ref;

axiom pch_udc_wait_ep_stall == $sub.ref(0, 320533);

procedure pch_udc_wait_ep_stall($p0: ref);
  free requires assertsPassed;



implementation pch_udc_wait_ep_stall($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i9: i32;
  var $i4: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i1 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i4 := 10000;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} dev_err.ref.ref.ref($p19, .str.14, .str.23);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i5 := 10000;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9 := pch_udc_wait_ep_stall_loop_$bb4($p0, $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9);
    goto $bb4_last;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, 1);
    call {:si_unique_call 634} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __const_udelay(21475);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i6 := pch_udc_read_ep_control($p0);
    call {:si_unique_call 637} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;
}



const pch_udc_ep_set_pd: ref;

axiom pch_udc_ep_set_pd == $sub.ref(0, 321565);

procedure pch_udc_ep_set_pd($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_pd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} pch_udc_ep_bit_set($p0, 0, 8);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_init_setup_buff: ref;

axiom pch_udc_init_setup_buff == $sub.ref(0, 322597);

procedure pch_udc_init_setup_buff($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_init_setup_buff($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($u0, 1);
    call {:si_unique_call 640} {:cexpr "pky_marker"} boogie_si_record_i32($i3);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p4, $i3);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.1;
    call {:si_unique_call 641} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p6, $sub.i8(0, 1), 8, $zext.i32.i64(4), 0 == 1);
    $M.1 := cmdloc_dummy_var_7;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_fifo_flush: ref;

axiom pch_udc_ep_fifo_flush == $sub.ref(0, 323629);

procedure pch_udc_ep_fifo_flush($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_fifo_flush($p0: ref, $i1: i32)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} {:cexpr "pch_udc_ep_fifo_flush:arg:dir"} boogie_si_record_i32($i1);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} pch_udc_ep_bit_set($p0, 0, 2);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 324661);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const pch_udc_clear_ep_status: ref;

axiom pch_udc_clear_ep_status == $sub.ref(0, 325693);

procedure pch_udc_clear_ep_status($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_clear_ep_status($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} {:cexpr "pch_udc_clear_ep_status:arg:stat"} boogie_si_record_i32($i1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_svc_ur_interrupt: ref;

axiom pch_udc_svc_ur_interrupt == $sub.ref(0, 326725);

procedure pch_udc_svc_ur_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_svc_ur_interrupt($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i16;
  var $p8: ref;
  var $i9: i16;
  var $i10: i16;
  var $p11: ref;
  var $i12: i16;
  var $i13: i16;
  var $p14: ref;
  var $i15: i16;
  var $i16: i16;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $i55: i8;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i8;
  var $i63: i8;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i8;
  var $i79: i8;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i8;
  var $i87: i8;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} pch_udc_clear_dma($p0, 2);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} pch_udc_clear_dma($p0, 1);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} pch_udc_disable_ep_interrupts($p0, $sub.i32(0, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} pch_udc_write_ep_interrupts($p0, $sub.i32(0, 1));
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} pch_udc_clear_ep_status($p2, 520095472);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} pch_udc_clear_ep_control($p2);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} pch_udc_ep_set_ddptr($p2, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.1, $p3);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} pch_udc_write_csr($p4, 0, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(1, 144));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} pch_udc_clear_ep_status($p91, 520095472);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} pch_udc_clear_ep_control($p91);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} pch_udc_ep_set_ddptr($p91, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p90, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.1, $p92);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} pch_udc_write_csr($p93, 0, 1);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p95, $mul.ref(2, 144));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} pch_udc_clear_ep_status($p96, 520095472);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} pch_udc_clear_ep_control($p96);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} pch_udc_ep_set_ddptr($p96, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p95, $mul.ref(2, 144)), $mul.ref(96, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.1, $p97);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} pch_udc_write_csr($p98, 0, 2);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(3, 144));
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} pch_udc_clear_ep_status($p101, 520095472);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} pch_udc_clear_ep_control($p101);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} pch_udc_ep_set_ddptr($p101, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p100, $mul.ref(3, 144)), $mul.ref(96, 1));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.1, $p102);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} pch_udc_write_csr($p103, 0, 3);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(4, 144));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} pch_udc_clear_ep_status($p106, 520095472);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} pch_udc_clear_ep_control($p106);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} pch_udc_ep_set_ddptr($p106, 0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p105, $mul.ref(4, 144)), $mul.ref(96, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.1, $p107);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} pch_udc_write_csr($p108, 0, 4);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(5, 144));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} pch_udc_clear_ep_status($p111, 520095472);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} pch_udc_clear_ep_control($p111);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} pch_udc_ep_set_ddptr($p111, 0);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p110, $mul.ref(5, 144)), $mul.ref(96, 1));
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.1, $p112);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} pch_udc_write_csr($p113, 0, 5);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(6, 144));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} pch_udc_clear_ep_status($p116, 520095472);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} pch_udc_clear_ep_control($p116);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} pch_udc_ep_set_ddptr($p116, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p115, $mul.ref(6, 144)), $mul.ref(96, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.1, $p117);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} pch_udc_write_csr($p118, 0, 6);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p119);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(7, 144));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} pch_udc_clear_ep_status($p121, 520095472);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} pch_udc_clear_ep_control($p121);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} pch_udc_ep_set_ddptr($p121, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p120, $mul.ref(7, 144)), $mul.ref(96, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.1, $p122);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} pch_udc_write_csr($p123, 0, 7);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(8, 144));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} pch_udc_clear_ep_status($p126, 520095472);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} pch_udc_clear_ep_control($p126);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} pch_udc_ep_set_ddptr($p126, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p125, $mul.ref(8, 144)), $mul.ref(96, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.1, $p127);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} pch_udc_write_csr($p128, 0, 8);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(9, 144));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} pch_udc_clear_ep_status($p131, 520095472);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} pch_udc_clear_ep_control($p131);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} pch_udc_ep_set_ddptr($p131, 0);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p130, $mul.ref(9, 144)), $mul.ref(96, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.1, $p132);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} pch_udc_write_csr($p133, 0, 9);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p135, $mul.ref(10, 144));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} pch_udc_clear_ep_status($p136, 520095472);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} pch_udc_clear_ep_control($p136);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} pch_udc_ep_set_ddptr($p136, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p135, $mul.ref(10, 144)), $mul.ref(96, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.1, $p137);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} pch_udc_write_csr($p138, 0, 10);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p140, $mul.ref(11, 144));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} pch_udc_clear_ep_status($p141, 520095472);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} pch_udc_clear_ep_control($p141);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} pch_udc_ep_set_ddptr($p141, 0);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p140, $mul.ref(11, 144)), $mul.ref(96, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.1, $p142);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} pch_udc_write_csr($p143, 0, 11);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p145, $mul.ref(12, 144));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} pch_udc_clear_ep_status($p146, 520095472);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} pch_udc_clear_ep_control($p146);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} pch_udc_ep_set_ddptr($p146, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p145, $mul.ref(12, 144)), $mul.ref(96, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.1, $p147);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} pch_udc_write_csr($p148, 0, 12);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p150, $mul.ref(13, 144));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} pch_udc_clear_ep_status($p151, 520095472);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} pch_udc_clear_ep_control($p151);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} pch_udc_ep_set_ddptr($p151, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p150, $mul.ref(13, 144)), $mul.ref(96, 1));
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.1, $p152);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} pch_udc_write_csr($p153, 0, 13);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p155, $mul.ref(14, 144));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} pch_udc_clear_ep_status($p156, 520095472);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} pch_udc_clear_ep_control($p156);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} pch_udc_ep_set_ddptr($p156, 0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p155, $mul.ref(14, 144)), $mul.ref(96, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.1, $p157);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} pch_udc_write_csr($p158, 0, 14);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p160, $mul.ref(15, 144));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} pch_udc_clear_ep_status($p161, 520095472);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} pch_udc_clear_ep_control($p161);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} pch_udc_ep_set_ddptr($p161, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p160, $mul.ref(15, 144)), $mul.ref(96, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.1, $p162);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} pch_udc_write_csr($p163, 0, 15);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($p165, $mul.ref(16, 144));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} pch_udc_clear_ep_status($p166, 520095472);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} pch_udc_clear_ep_control($p166);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} pch_udc_ep_set_ddptr($p166, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p165, $mul.ref(16, 144)), $mul.ref(96, 1));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.1, $p167);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} pch_udc_write_csr($p168, 0, 16);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($p170, $mul.ref(17, 144));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} pch_udc_clear_ep_status($p171, 520095472);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} pch_udc_clear_ep_control($p171);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} pch_udc_ep_set_ddptr($p171, 0);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p170, $mul.ref(17, 144)), $mul.ref(96, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.1, $p172);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} pch_udc_write_csr($p173, 0, 17);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p174);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p175, $mul.ref(18, 144));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} pch_udc_clear_ep_status($p176, 520095472);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} pch_udc_clear_ep_control($p176);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} pch_udc_ep_set_ddptr($p176, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p175, $mul.ref(18, 144)), $mul.ref(96, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.1, $p177);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} pch_udc_write_csr($p178, 0, 18);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p179);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p180, $mul.ref(19, 144));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} pch_udc_clear_ep_status($p181, 520095472);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} pch_udc_clear_ep_control($p181);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} pch_udc_ep_set_ddptr($p181, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p180, $mul.ref(19, 144)), $mul.ref(96, 1));
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.1, $p182);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} pch_udc_write_csr($p183, 0, 19);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p185 := $bitcast.ref.ref($p184);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p185, $mul.ref(20, 144));
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} pch_udc_clear_ep_status($p186, 520095472);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} pch_udc_clear_ep_control($p186);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} pch_udc_ep_set_ddptr($p186, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p185, $mul.ref(20, 144)), $mul.ref(96, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.1, $p187);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} pch_udc_write_csr($p188, 0, 20);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p189);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref(21, 144));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} pch_udc_clear_ep_status($p191, 520095472);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} pch_udc_clear_ep_control($p191);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} pch_udc_ep_set_ddptr($p191, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p190, $mul.ref(21, 144)), $mul.ref(96, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.1, $p192);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} pch_udc_write_csr($p193, 0, 21);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($p195, $mul.ref(22, 144));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} pch_udc_clear_ep_status($p196, 520095472);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} pch_udc_clear_ep_control($p196);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} pch_udc_ep_set_ddptr($p196, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p195, $mul.ref(22, 144)), $mul.ref(96, 1));
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.1, $p197);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} pch_udc_write_csr($p198, 0, 22);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($p200, $mul.ref(23, 144));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} pch_udc_clear_ep_status($p201, 520095472);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} pch_udc_clear_ep_control($p201);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} pch_udc_ep_set_ddptr($p201, 0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p200, $mul.ref(23, 144)), $mul.ref(96, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.1, $p202);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} pch_udc_write_csr($p203, 0, 23);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p205, $mul.ref(24, 144));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} pch_udc_clear_ep_status($p206, 520095472);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} pch_udc_clear_ep_control($p206);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} pch_udc_ep_set_ddptr($p206, 0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p205, $mul.ref(24, 144)), $mul.ref(96, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.1, $p207);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} pch_udc_write_csr($p208, 0, 24);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p210, $mul.ref(25, 144));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} pch_udc_clear_ep_status($p211, 520095472);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} pch_udc_clear_ep_control($p211);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} pch_udc_ep_set_ddptr($p211, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p210, $mul.ref(25, 144)), $mul.ref(96, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.1, $p212);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} pch_udc_write_csr($p213, 0, 25);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($p215, $mul.ref(26, 144));
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} pch_udc_clear_ep_status($p216, 520095472);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} pch_udc_clear_ep_control($p216);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} pch_udc_ep_set_ddptr($p216, 0);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p215, $mul.ref(26, 144)), $mul.ref(96, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.1, $p217);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} pch_udc_write_csr($p218, 0, 26);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p220, $mul.ref(27, 144));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} pch_udc_clear_ep_status($p221, 520095472);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} pch_udc_clear_ep_control($p221);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} pch_udc_ep_set_ddptr($p221, 0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p220, $mul.ref(27, 144)), $mul.ref(96, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.1, $p222);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} pch_udc_write_csr($p223, 0, 27);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p225, $mul.ref(28, 144));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} pch_udc_clear_ep_status($p226, 520095472);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} pch_udc_clear_ep_control($p226);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} pch_udc_ep_set_ddptr($p226, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p225, $mul.ref(28, 144)), $mul.ref(96, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.1, $p227);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} pch_udc_write_csr($p228, 0, 28);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p230 := $bitcast.ref.ref($p229);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($p230, $mul.ref(29, 144));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} pch_udc_clear_ep_status($p231, 520095472);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} pch_udc_clear_ep_control($p231);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} pch_udc_ep_set_ddptr($p231, 0);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p230, $mul.ref(29, 144)), $mul.ref(96, 1));
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.1, $p232);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} pch_udc_write_csr($p233, 0, 29);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p235, $mul.ref(30, 144));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} pch_udc_clear_ep_status($p236, 520095472);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} pch_udc_clear_ep_control($p236);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} pch_udc_ep_set_ddptr($p236, 0);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p235, $mul.ref(30, 144)), $mul.ref(96, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.1, $p237);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} pch_udc_write_csr($p238, 0, 30);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p239);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($p240, $mul.ref(31, 144));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} pch_udc_clear_ep_status($p241, 520095472);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} pch_udc_clear_ep_control($p241);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} pch_udc_ep_set_ddptr($p241, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p240, $mul.ref(31, 144)), $mul.ref(96, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.1, $p242);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} pch_udc_write_csr($p243, 0, 31);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.1, $p5);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i7 := $and.i16($i6, $sub.i16(0, 3));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i7);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.1, $p8);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i10 := $and.i16($i9, $sub.i16(0, 5));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p8, $i10);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.1, $p11);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i13 := $and.i16($i12, $sub.i16(0, 513));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i13);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i16 := $and.i16($i15, $sub.i16(0, 257));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p14, $i16);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} pch_udc_ep_set_nak($p18);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.1, $p19);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i8($i20, 5);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i22 := $and.i8($i21, 1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} pch_udc_ep_fifo_flush($p18, $i23);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} empty_req_queue($p18);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(1, 144));
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} pch_udc_ep_set_nak($p35);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p34, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.1, $p36);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i38 := $lshr.i8($i37, 5);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, 1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} pch_udc_ep_fifo_flush($p35, $i40);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} empty_req_queue($p35);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(2, 144));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} pch_udc_ep_set_nak($p43);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p42, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i46 := $lshr.i8($i45, 5);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, 1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} pch_udc_ep_fifo_flush($p43, $i48);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} empty_req_queue($p43);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(3, 144));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} pch_udc_ep_set_nak($p51);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p50, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i54 := $lshr.i8($i53, 5);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i55 := $and.i8($i54, 1);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} pch_udc_ep_fifo_flush($p51, $i56);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} empty_req_queue($p51);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(4, 144));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} pch_udc_ep_set_nak($p59);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.1, $p60);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i62 := $lshr.i8($i61, 5);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i62, 1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} pch_udc_ep_fifo_flush($p59, $i64);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} empty_req_queue($p59);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(5, 144));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} pch_udc_ep_set_nak($p67);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p66, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.1, $p68);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i8($i69, 5);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, 1);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} pch_udc_ep_fifo_flush($p67, $i72);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} empty_req_queue($p67);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(6, 144));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} pch_udc_ep_set_nak($p75);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p74, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.1, $p76);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i78 := $lshr.i8($i77, 5);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i79 := $and.i8($i78, 1);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} pch_udc_ep_fifo_flush($p75, $i80);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} empty_req_queue($p75);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p82, $mul.ref(7, 144));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} pch_udc_ep_set_nak($p83);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p82, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.1, $p84);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i86 := $lshr.i8($i85, 5);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i87 := $and.i8($i86, 1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} pch_udc_ep_fifo_flush($p83, $i88);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} empty_req_queue($p83);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.1, $p24);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} ldv_spin_unlock_96($p28);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} usb_gadget_udc_reset($p29, $p31);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} ldv_spin_lock_97($p32);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const pch_udc_svc_enum_interrupt: ref;

axiom pch_udc_svc_enum_interrupt == $sub.ref(0, 327757);

procedure pch_udc_svc_enum_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_svc_enum_interrupt($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 805} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 24576);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 13);
    call {:si_unique_call 806} {:cexpr "dev_speed"} boogie_si_record_i32($i3);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 2);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call {:si_unique_call 807} devirtbounce(0, .str.5, 2627, 12);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, $i7);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} pch_udc_activate_control_ep($p0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} pch_udc_enable_ep_interrupts($p0, 65537);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} pch_udc_set_dma($p0, 2);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} pch_udc_set_dma($p0, 1);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(1, 144));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} pch_udc_ep_set_rrdy($p12);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} pch_udc_enable_interrupts($p0, 95);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb14;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb14;
}



const pch_udc_svc_intf_interrupt: ref;

axiom pch_udc_svc_intf_interrupt == $sub.ref(0, 328789);

procedure pch_udc_svc_intf_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed, $CurrAddr, $M.5, $M.16, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12;



implementation pch_udc_svc_intf_interrupt($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i16;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i16;
  var $i15: i16;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $i24: i16;
  var $p26: ref;
  var $p28: ref;
  var $i29: i16;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i8;
  var $p55: ref;
  var $i56: i16;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i8;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i8;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i8;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i8;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 815} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 240);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 4);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(2, 1));
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p6, $i4);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i1, 3840);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i7, 8);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(4, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i9);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i14 := $and.i16($i13, $sub.i16(0, 257));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i15 := $or.i16($i14, 256);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i15);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.1;
    call {:si_unique_call 816} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p17, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_9;
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(1, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p19, 11);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(0, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p21, 1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(4, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.1, $p23);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(2, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p26, $i24);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(2, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.1, $p28);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(4, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p31, $i29);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i32 := pch_udc_read_csr($p0, 1);
    call {:si_unique_call 818} {:cexpr "reg"} boogie_si_record_i32($i32);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 30721));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(2, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.1, $p35);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i38 := $shl.i32($i37, 11);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i33, $i38);
    call {:si_unique_call 819} {:cexpr "reg"} boogie_si_record_i32($i39);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, $sub.i32(0, 491521));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(4, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.1, $p42);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i45 := $shl.i32($i44, 15);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i40, $i45);
    call {:si_unique_call 820} {:cexpr "reg"} boogie_si_record_i32($i46);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i46);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} pch_udc_write_csr($p0, $i47, 1);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} pch_udc_ep_clear_stall($p49);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.1, $p52);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i54 := $and.i8($i53, $sub.i8(0, 65));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p52, $i54);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p68, $mul.ref(1, 144));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} pch_udc_ep_clear_stall($p69);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i73, $sub.i8(0, 65));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p72, $i74);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(2, 144));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} pch_udc_ep_clear_stall($p77);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.1, $p80);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i82 := $and.i8($i81, $sub.i8(0, 65));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p80, $i82);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(3, 144));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} pch_udc_ep_clear_stall($p85);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.1, $p88);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i89, $sub.i8(0, 65));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p88, $i90);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(4, 144));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} pch_udc_ep_clear_stall($p93);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.1, $p96);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i98 := $and.i8($i97, $sub.i8(0, 65));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p96, $i98);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(5, 144));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} pch_udc_ep_clear_stall($p101);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.1, $p104);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i106 := $and.i8($i105, $sub.i8(0, 65));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p104, $i106);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p108, $mul.ref(6, 144));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} pch_udc_ep_clear_stall($p109);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.1, $p112);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i114 := $and.i8($i113, $sub.i8(0, 65));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p112, $i114);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p116, $mul.ref(7, 144));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} pch_udc_ep_clear_stall($p117);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.1, $p120);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i122 := $and.i8($i121, $sub.i8(0, 65));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p120, $i122);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.1, $p55);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i57 := $and.i16($i56, $sub.i16(0, 3));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p55, $i57);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} ldv_spin_unlock_96($p58);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1));
    call {:si_unique_call 825} $i65 := devirtbounce.5($p62, $p63, $p64);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    call {:si_unique_call 826} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_spin_lock_97($p66);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const pch_udc_svc_cfg_interrupt: ref;

axiom pch_udc_svc_cfg_interrupt == $sub.ref(0, 329821);

procedure pch_udc_svc_cfg_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed, $CurrAddr, $M.5, $M.16, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12;



implementation pch_udc_svc_cfg_interrupt($p0: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i16;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $i18: i16;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i8;
  var $p37: ref;
  var $i38: i16;
  var $i39: i16;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i8;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i8;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i8;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $i103: i8;
  var $i104: i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i1 := pch_udc_read_device_status($p0);
    call {:si_unique_call 835} {:cexpr "dev_stat"} boogie_si_record_i32($i1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.1, $p2);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i4 := $and.i16($i3, $sub.i16(0, 257));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i5 := $or.i16($i4, 256);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p2, $i5);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 15);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i16($i8);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(0, 1));
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p11, $i9);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1));
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.1;
    call {:si_unique_call 836} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p13, 0, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_11;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(1, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p15, 9);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(0, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.1, $p17);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1)), $mul.ref(2, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p20, $i18);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i21 := pch_udc_read_csr($p0, 1);
    call {:si_unique_call 838} {:cexpr "reg"} boogie_si_record_i32($i21);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, $sub.i32(0, 1921));
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6336, 1)), $mul.ref(0, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i27 := $shl.i32($i26, 7);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i22, $i27);
    call {:si_unique_call 839} {:cexpr "reg"} boogie_si_record_i32($i28);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i28);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} pch_udc_write_csr($p0, $i29, 1);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} pch_udc_ep_clear_stall($p31);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.1, $p34);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i35, $sub.i8(0, 65));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p34, $i36);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p50, $mul.ref(1, 144));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} pch_udc_ep_clear_stall($p51);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.1, $p54);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i56 := $and.i8($i55, $sub.i8(0, 65));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p54, $i56);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(2, 144));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} pch_udc_ep_clear_stall($p59);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.1, $p62);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i64 := $and.i8($i63, $sub.i8(0, 65));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p62, $i64);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p66, $mul.ref(3, 144));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} pch_udc_ep_clear_stall($p67);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.1, $p70);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i72 := $and.i8($i71, $sub.i8(0, 65));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p70, $i72);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref(4, 144));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} pch_udc_ep_clear_stall($p75);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.1, $p78);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i80 := $and.i8($i79, $sub.i8(0, 65));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p78, $i80);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p82, $mul.ref(5, 144));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} pch_udc_ep_clear_stall($p83);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.1, $p86);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i88 := $and.i8($i87, $sub.i8(0, 65));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p86, $i88);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(6, 144));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} pch_udc_ep_clear_stall($p91);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.1, $p94);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i96 := $and.i8($i95, $sub.i8(0, 65));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p94, $i96);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p98, $mul.ref(7, 144));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} pch_udc_ep_clear_stall($p99);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.1, $p102);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i104 := $and.i8($i103, $sub.i8(0, 65));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p102, $i104);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.1, $p37);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i39 := $and.i16($i38, $sub.i16(0, 3));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p37, $i39);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ldv_spin_unlock_96($p40);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 192)), $mul.ref(32, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6304, 1));
    call {:si_unique_call 844} $i47 := devirtbounce.5($p44, $p45, $p46);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    call {:si_unique_call 845} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} ldv_spin_lock_97($p48);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const pch_udc_reconnect: ref;

axiom pch_udc_reconnect == $sub.ref(0, 330853);

procedure pch_udc_reconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_reconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} pch_udc_init($p0);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} pch_udc_bit_clr($p0, 1040, 72);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} pch_udc_bit_clr($p0, 1028, 1024);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} __const_udelay(4295000);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_init: ref;

axiom pch_udc_init == $sub.ref(0, 331885);

procedure pch_udc_init($p0: ref);
  free requires assertsPassed;



implementation pch_udc_init($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i4: i8;
  var $i5: i1;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} pch_udc_writel($p0, 1, 1276);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} pch_udc_writel($p0, 3, 1276);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb5, $bb6;

  $bb6:
    assume !(1 == 1);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} pch_udc_writel($p0, 1, 1276);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} pch_udc_writel($p0, 0, 1276);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb11, $bb12;

  $bb12:
    assume !(1 == 1);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} pch_udc_bit_set($p0, 1040, 127);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} pch_udc_bit_set($p0, 1036, 127);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} pch_udc_bit_set($p0, 1048, 4294967295);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} pch_udc_bit_set($p0, 1044, 4294967295);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i4 := $M.15;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i5 == 1);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} pch_udc_bit_set($p0, 1024, 131080);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} pch_udc_bit_set($p0, 1028, 521077632);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i5 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} pch_udc_bit_set($p0, 1024, 131081);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume 1 == 1;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} __const_udelay(4295000);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume 1 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} __const_udelay(4295000);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} vslice_dummy_var_40 := printk.ref.ref(.str.2, .str.3);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_read_device_status: ref;

axiom pch_udc_read_device_status == $sub.ref(0, 332917);

procedure pch_udc_read_device_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_device_status($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i1 := pch_udc_readl($p0, 1032);
    call {:si_unique_call 877} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pch_udc_read_csr: ref;

axiom pch_udc_read_csr == $sub.ref(0, 333949);

procedure pch_udc_read_csr($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_read_csr($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $i6: i32;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} {:cexpr "pch_udc_read_csr:arg:ep"} boogie_si_record_i32($i1);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 320);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 4);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    call {:si_unique_call 879} {:cexpr "reg"} boogie_si_record_i64($i4);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} pch_udc_csr_busy($p0);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_41 := pch_udc_readl($p0, $i4);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} pch_udc_csr_busy($p0);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i6 := pch_udc_readl($p0, $i4);
    call {:si_unique_call 884} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const pch_udc_write_csr: ref;

axiom pch_udc_write_csr == $sub.ref(0, 334981);

procedure pch_udc_write_csr($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;



implementation pch_udc_write_csr($p0: ref, $i1: i64, $i2: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "pch_udc_write_csr:arg:val"} boogie_si_record_i64($i1);
    call {:si_unique_call 886} {:cexpr "pch_udc_write_csr:arg:ep"} boogie_si_record_i32($i2);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 320);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i3, 4);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    call {:si_unique_call 887} {:cexpr "reg"} boogie_si_record_i64($i5);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} pch_udc_csr_busy($p0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} pch_udc_writel($p0, $i1, $i5);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} pch_udc_csr_busy($p0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_csr_busy: ref;

axiom pch_udc_csr_busy == $sub.ref(0, 336013);

procedure pch_udc_csr_busy($p0: ref);
  free requires assertsPassed;



implementation pch_udc_csr_busy($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i5: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i9: i32;
  var $i4: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i1 := pch_udc_readl($p0, 1264);
    call {:si_unique_call 892} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 1);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i4 := 200;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} dev_err.ref.ref.ref($p17, .str.14, .str.15);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i5 := 200;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9 := pch_udc_csr_busy_loop_$bb4($p0, $i6, $i7, $i8, $i5, $i10, $i11, $i12, $i9);
    goto $bb4_last;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i5, 1);
    call {:si_unique_call 893} {:cexpr "count"} boogie_si_record_i32($i10);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb10;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} cpu_relax();
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i6 := pch_udc_readl($p0, 1264);
    call {:si_unique_call 896} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3772;
}



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 337045);

procedure cpu_relax();
  free requires assertsPassed;



implementation cpu_relax()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} rep_nop();
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    return;
}



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 338077);

procedure rep_nop();
  free requires assertsPassed;



implementation rep_nop()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} devirtbounce.6(0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_activate_control_ep: ref;

axiom pch_udc_activate_control_ep == $sub.ref(0, 339109);

procedure pch_udc_activate_control_ep($p0: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_activate_control_ep($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i32;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} pch_udc_clear_ep_control($p2);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i8($i4, 5);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} pch_udc_ep_fifo_flush($p2, $i7);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i8($i9, 5);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i11 := $and.i8($i10, 1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} pch_udc_ep_set_bufsz($p2, 16, $i12);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} pch_udc_ep_set_maxpkt($p2, 64);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, $0.ref);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, $0.ref);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p15, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p16, 0);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p18, $mul.ref(1, 144));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} pch_udc_clear_ep_control($p19);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.1, $p20);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i8($i21, 5);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} pch_udc_ep_fifo_flush($p19, $i24);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i8($i26, 5);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i27, 1);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} pch_udc_ep_set_bufsz($p19, 16, $i29);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} pch_udc_ep_set_maxpkt($p19, 64);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.1, $p30);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64(33554432);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} pch_udc_write_csr($p31, $i32, 1);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(80, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} pch_udc_init_setup_buff($p34);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(64, 1));
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.1, $p35);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i64.i32($i36);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} pch_udc_ep_set_subptr($p19, $i37);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.1, $p38);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i64.i32($i39);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} pch_udc_ep_set_ddptr($p19, $i40);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p43, 134217728);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6288, 1));
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.1, $p44);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.1, $p47);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p49, $i46);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(72, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.1, $p50);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p18, $mul.ref(1, 144)), $mul.ref(88, 1));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p55, $i52);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} pch_udc_ep_clear_nak($p19);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_enable_interrupts: ref;

axiom pch_udc_enable_interrupts == $sub.ref(0, 340141);

procedure pch_udc_enable_interrupts($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_enable_interrupts($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} {:cexpr "pch_udc_enable_interrupts:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} pch_udc_bit_clr($p0, 1040, $i2);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_ep_control: ref;

axiom pch_udc_clear_ep_control == $sub.ref(0, 341173);

procedure pch_udc_clear_ep_control($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_ep_control($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_bufsz: ref;

axiom pch_udc_ep_set_bufsz == $sub.ref(0, 342205);

procedure pch_udc_ep_set_bufsz($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_bufsz($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} {:cexpr "pch_udc_ep_set_bufsz:arg:buf_size"} boogie_si_record_i32($i1);
    call {:si_unique_call 916} {:cexpr "pch_udc_ep_set_bufsz:arg:ep_in"} boogie_si_record_i32($i2);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i9 := pch_udc_ep_readl($p0, 12);
    call {:si_unique_call 922} {:cexpr "data"} boogie_si_record_i32($i9);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i10 := $shl.i32($i1, 16);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i9, 65535);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i10, $i11);
    call {:si_unique_call 923} {:cexpr "data"} boogie_si_record_i32($i12);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} pch_udc_ep_writel($p0, $i13, 12);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i4 := pch_udc_ep_readl($p0, 8);
    call {:si_unique_call 918} {:cexpr "data"} boogie_si_record_i32($i4);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 65536));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 65535);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i5, $i6);
    call {:si_unique_call 919} {:cexpr "data"} boogie_si_record_i32($i7);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} pch_udc_ep_writel($p0, $i8, 8);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_ep_set_maxpkt: ref;

axiom pch_udc_ep_set_maxpkt == $sub.ref(0, 343237);

procedure pch_udc_ep_set_maxpkt($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_maxpkt($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "pch_udc_ep_set_maxpkt:arg:pkt_size"} boogie_si_record_i32($i1);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i2 := pch_udc_ep_readl($p0, 12);
    call {:si_unique_call 927} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, $sub.i32(0, 65536));
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 65535);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i3, $i4);
    call {:si_unique_call 928} {:cexpr "data"} boogie_si_record_i32($i5);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i5);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} pch_udc_ep_writel($p0, $i6, 12);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_subptr: ref;

axiom pch_udc_ep_set_subptr == $sub.ref(0, 344269);

procedure pch_udc_ep_set_subptr($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation pch_udc_ep_set_subptr($p0: ref, $i1: i32)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} {:cexpr "pch_udc_ep_set_subptr:arg:addr"} boogie_si_record_i32($i1);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} pch_udc_ep_writel($p0, $i2, 16);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_ep_set_nak: ref;

axiom pch_udc_ep_set_nak == $sub.ref(0, 345301);

procedure pch_udc_ep_set_nak($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_set_nak($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} pch_udc_ep_bit_set($p0, 0, 128);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    return;
}



const empty_req_queue: ref;

axiom empty_req_queue == $sub.ref(0, 346333);

procedure empty_req_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation empty_req_queue($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i8;
  var $i4: i8;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.1, $p1);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i3 := $and.i8($i2, $sub.i8(0, 65));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i4 := $or.i8($i3, 64);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1, $i4);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i6 := list_empty($p5);
    call {:si_unique_call 934} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $i13, $i14 := empty_req_queue_loop_$bb4($p0, $p5, $p9, $p10, $p11, $p12, $i13, $i14);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.1, $p9);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} complete_req($p0, $p12, $sub.i32(0, 108));
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i13 := list_empty($p5);
    call {:si_unique_call 937} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb6_dummy;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usb_gadget_udc_reset: ref;

axiom usb_gadget_udc_reset == $sub.ref(0, 347365);

procedure usb_gadget_udc_reset($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_gadget_udc_reset($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev == $sub.ref(0, 348397);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev();
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i0 := $M.14;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i3 := $M.14;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} ldv_assume($i5);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.14 := 2;
    call {:si_unique_call 940} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_pch_udc_dev"} boogie_si_record_i32(2);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 349429);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} _raw_spin_lock($p2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 350461);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 351493);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 1} true;
    call {:si_unique_call 943} __VERIFIER_error();
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_pcd_reinit: ref;

axiom pch_udc_pcd_reinit == $sub.ref(0, 352525);

procedure pch_udc_pcd_reinit($p0: ref);
  free requires assertsPassed;
  modifies $M.16, $M.1, $CurrAddr;



implementation pch_udc_pcd_reinit($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i8;
  var $i46: i8;
  var $p47: ref;
  var $i48: i8;
  var $i49: i8;
  var $p50: ref;
  var $i51: i8;
  var $i52: i8;
  var $i53: i8;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $p88: ref;
  var $p91: ref;
  var $p95: ref;
  var $p99: ref;
  var $p102: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i8;
  var $i116: i8;
  var $p117: ref;
  var $i118: i8;
  var $i119: i8;
  var $p120: ref;
  var $i121: i8;
  var $i122: i8;
  var $p123: ref;
  var $p124: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i8;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i64;
  var $p148: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i8;
  var $i161: i8;
  var $i162: i8;
  var $p163: ref;
  var $i164: i8;
  var $i165: i8;
  var $i166: i8;
  var $p167: ref;
  var $i168: i8;
  var $i169: i8;
  var $i170: i8;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i8;
  var $i184: i8;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i64;
  var $p189: ref;
  var $p190: ref;
  var $i191: i8;
  var $i192: i8;
  var $i193: i32;
  var $i194: i32;
  var $i195: i64;
  var $p196: ref;
  var $p197: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i8;
  var $i209: i8;
  var $i210: i8;
  var $p211: ref;
  var $i212: i8;
  var $i213: i8;
  var $i214: i8;
  var $p215: ref;
  var $i216: i8;
  var $i217: i8;
  var $p218: ref;
  var $p219: ref;
  var $p221: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i8;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $i230: i8;
  var $i231: i8;
  var $i232: i32;
  var $i233: i32;
  var $i234: i32;
  var $i235: i64;
  var $p236: ref;
  var $p237: ref;
  var $i238: i8;
  var $i239: i8;
  var $i240: i32;
  var $i241: i32;
  var $i242: i64;
  var $p243: ref;
  var $p244: ref;
  var $p246: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i8;
  var $i256: i8;
  var $i257: i8;
  var $p258: ref;
  var $i259: i8;
  var $i260: i8;
  var $i261: i8;
  var $p262: ref;
  var $i263: i8;
  var $i264: i8;
  var $i265: i8;
  var $p266: ref;
  var $p267: ref;
  var $p269: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i8;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i278: i8;
  var $i279: i8;
  var $i280: i32;
  var $i281: i32;
  var $i282: i32;
  var $i283: i64;
  var $p284: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i8;
  var $i288: i32;
  var $i289: i32;
  var $i290: i64;
  var $p291: ref;
  var $p292: ref;
  var $p294: ref;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i8;
  var $i304: i8;
  var $i305: i8;
  var $p306: ref;
  var $i307: i8;
  var $i308: i8;
  var $i309: i8;
  var $p310: ref;
  var $i311: i8;
  var $i312: i8;
  var $p313: ref;
  var $p314: ref;
  var $p316: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i325: i8;
  var $i326: i8;
  var $i327: i32;
  var $i328: i32;
  var $i329: i32;
  var $i330: i64;
  var $p331: ref;
  var $p332: ref;
  var $i333: i8;
  var $i334: i8;
  var $i335: i32;
  var $i336: i32;
  var $i337: i64;
  var $p338: ref;
  var $p339: ref;
  var $p341: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $i350: i8;
  var $i351: i8;
  var $i352: i8;
  var $p353: ref;
  var $i354: i8;
  var $i355: i8;
  var $i356: i8;
  var $p357: ref;
  var $i358: i8;
  var $i359: i8;
  var $i360: i8;
  var $p361: ref;
  var $p362: ref;
  var $p364: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $i369: i8;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i373: i8;
  var $i374: i8;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i64;
  var $p379: ref;
  var $p380: ref;
  var $i381: i8;
  var $i382: i8;
  var $i383: i32;
  var $i384: i32;
  var $i385: i64;
  var $p386: ref;
  var $p387: ref;
  var $p389: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $p394: ref;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i8;
  var $i399: i8;
  var $i400: i8;
  var $p401: ref;
  var $i402: i8;
  var $i403: i8;
  var $i404: i8;
  var $p405: ref;
  var $i406: i8;
  var $i407: i8;
  var $p408: ref;
  var $p409: ref;
  var $p411: ref;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $i416: i8;
  var $i417: i32;
  var $i418: i1;
  var $p419: ref;
  var $i420: i8;
  var $i421: i8;
  var $i422: i32;
  var $i423: i32;
  var $i424: i32;
  var $i425: i64;
  var $p426: ref;
  var $p427: ref;
  var $i428: i8;
  var $i429: i8;
  var $i430: i32;
  var $i431: i32;
  var $i432: i64;
  var $p433: ref;
  var $p434: ref;
  var $p436: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i8;
  var $i446: i8;
  var $i447: i8;
  var $p448: ref;
  var $i449: i8;
  var $i450: i8;
  var $i451: i8;
  var $p452: ref;
  var $i453: i8;
  var $i454: i8;
  var $i455: i8;
  var $p456: ref;
  var $p457: ref;
  var $p459: ref;
  var $p461: ref;
  var $p462: ref;
  var $p463: ref;
  var $i464: i8;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $i468: i8;
  var $i469: i8;
  var $i470: i32;
  var $i471: i32;
  var $i472: i32;
  var $i473: i64;
  var $p474: ref;
  var $p475: ref;
  var $i476: i8;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i64;
  var $p481: ref;
  var $p482: ref;
  var $p484: ref;
  var $p486: ref;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $i493: i8;
  var $i494: i8;
  var $i495: i8;
  var $p496: ref;
  var $i497: i8;
  var $i498: i8;
  var $i499: i8;
  var $p500: ref;
  var $i501: i8;
  var $i502: i8;
  var $p503: ref;
  var $p504: ref;
  var $p506: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $i511: i8;
  var $i512: i32;
  var $i513: i1;
  var $p514: ref;
  var $i515: i8;
  var $i516: i8;
  var $i517: i32;
  var $i518: i32;
  var $i519: i32;
  var $i520: i64;
  var $p521: ref;
  var $p522: ref;
  var $i523: i8;
  var $i524: i8;
  var $i525: i32;
  var $i526: i32;
  var $i527: i64;
  var $p528: ref;
  var $p529: ref;
  var $p531: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $i540: i8;
  var $i541: i8;
  var $i542: i8;
  var $p543: ref;
  var $i544: i8;
  var $i545: i8;
  var $i546: i8;
  var $p547: ref;
  var $i548: i8;
  var $i549: i8;
  var $i550: i8;
  var $p551: ref;
  var $p552: ref;
  var $p554: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $i559: i8;
  var $i560: i32;
  var $i561: i1;
  var $p562: ref;
  var $i563: i8;
  var $i564: i8;
  var $i565: i32;
  var $i566: i32;
  var $i567: i32;
  var $i568: i64;
  var $p569: ref;
  var $p570: ref;
  var $i571: i8;
  var $i572: i8;
  var $i573: i32;
  var $i574: i32;
  var $i575: i64;
  var $p576: ref;
  var $p577: ref;
  var $p579: ref;
  var $p581: ref;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $i588: i8;
  var $i589: i8;
  var $i590: i8;
  var $p591: ref;
  var $i592: i8;
  var $i593: i8;
  var $i594: i8;
  var $p595: ref;
  var $i596: i8;
  var $i597: i8;
  var $p598: ref;
  var $p599: ref;
  var $p601: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $i606: i8;
  var $i607: i32;
  var $i608: i1;
  var $p609: ref;
  var $i610: i8;
  var $i611: i8;
  var $i612: i32;
  var $i613: i32;
  var $i614: i32;
  var $i615: i64;
  var $p616: ref;
  var $p617: ref;
  var $i618: i8;
  var $i619: i8;
  var $i620: i32;
  var $i621: i32;
  var $i622: i64;
  var $p623: ref;
  var $p624: ref;
  var $p626: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $i635: i8;
  var $i636: i8;
  var $i637: i8;
  var $p638: ref;
  var $i639: i8;
  var $i640: i8;
  var $i641: i8;
  var $p642: ref;
  var $i643: i8;
  var $i644: i8;
  var $i645: i8;
  var $p646: ref;
  var $p647: ref;
  var $p649: ref;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $i654: i8;
  var $i655: i32;
  var $i656: i1;
  var $p657: ref;
  var $i658: i8;
  var $i659: i8;
  var $i660: i32;
  var $i661: i32;
  var $i662: i32;
  var $i663: i64;
  var $p664: ref;
  var $p665: ref;
  var $i666: i8;
  var $i667: i8;
  var $i668: i32;
  var $i669: i32;
  var $i670: i64;
  var $p671: ref;
  var $p672: ref;
  var $p674: ref;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $p681: ref;
  var $p682: ref;
  var $i683: i8;
  var $i684: i8;
  var $i685: i8;
  var $p686: ref;
  var $i687: i8;
  var $i688: i8;
  var $i689: i8;
  var $p690: ref;
  var $i691: i8;
  var $i692: i8;
  var $p693: ref;
  var $p694: ref;
  var $p696: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $i701: i8;
  var $i702: i32;
  var $i703: i1;
  var $p704: ref;
  var $i705: i8;
  var $i706: i8;
  var $i707: i32;
  var $i708: i32;
  var $i709: i32;
  var $i710: i64;
  var $p711: ref;
  var $p712: ref;
  var $i713: i8;
  var $i714: i8;
  var $i715: i32;
  var $i716: i32;
  var $i717: i64;
  var $p718: ref;
  var $p719: ref;
  var $p721: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $i730: i8;
  var $i731: i8;
  var $i732: i8;
  var $p733: ref;
  var $i734: i8;
  var $i735: i8;
  var $i736: i8;
  var $p737: ref;
  var $i738: i8;
  var $i739: i8;
  var $i740: i8;
  var $p741: ref;
  var $p742: ref;
  var $p744: ref;
  var $p746: ref;
  var $p747: ref;
  var $p748: ref;
  var $i749: i8;
  var $i750: i32;
  var $i751: i1;
  var $p752: ref;
  var $i753: i8;
  var $i754: i8;
  var $i755: i32;
  var $i756: i32;
  var $i757: i32;
  var $i758: i64;
  var $p759: ref;
  var $p760: ref;
  var $i761: i8;
  var $i762: i8;
  var $i763: i32;
  var $i764: i32;
  var $i765: i64;
  var $p766: ref;
  var $p767: ref;
  var $p769: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $p775: ref;
  var $p776: ref;
  var $p777: ref;
  var $i778: i8;
  var $i779: i8;
  var $i780: i8;
  var $p781: ref;
  var $i782: i8;
  var $i783: i8;
  var $i784: i8;
  var $p785: ref;
  var $i786: i8;
  var $i787: i8;
  var $p788: ref;
  var $p789: ref;
  var $p791: ref;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $i796: i8;
  var $i797: i32;
  var $i798: i1;
  var $p799: ref;
  var $i800: i8;
  var $i801: i8;
  var $i802: i32;
  var $i803: i32;
  var $i804: i32;
  var $i805: i64;
  var $p806: ref;
  var $p807: ref;
  var $i808: i8;
  var $i809: i8;
  var $i810: i32;
  var $i811: i32;
  var $i812: i64;
  var $p813: ref;
  var $p814: ref;
  var $p816: ref;
  var $p818: ref;
  var $p819: ref;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $p824: ref;
  var $i825: i8;
  var $i826: i8;
  var $i827: i8;
  var $p828: ref;
  var $i829: i8;
  var $i830: i8;
  var $i831: i8;
  var $p832: ref;
  var $i833: i8;
  var $i834: i8;
  var $i835: i8;
  var $p836: ref;
  var $p837: ref;
  var $p839: ref;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $i844: i8;
  var $i845: i32;
  var $i846: i1;
  var $p847: ref;
  var $i848: i8;
  var $i849: i8;
  var $i850: i32;
  var $i851: i32;
  var $i852: i32;
  var $i853: i64;
  var $p854: ref;
  var $p855: ref;
  var $i856: i8;
  var $i857: i8;
  var $i858: i32;
  var $i859: i32;
  var $i860: i64;
  var $p861: ref;
  var $p862: ref;
  var $p864: ref;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $i873: i8;
  var $i874: i8;
  var $i875: i8;
  var $p876: ref;
  var $i877: i8;
  var $i878: i8;
  var $i879: i8;
  var $p880: ref;
  var $i881: i8;
  var $i882: i8;
  var $p883: ref;
  var $p884: ref;
  var $p886: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $i891: i8;
  var $i892: i32;
  var $i893: i1;
  var $p894: ref;
  var $i895: i8;
  var $i896: i8;
  var $i897: i32;
  var $i898: i32;
  var $i899: i32;
  var $i900: i64;
  var $p901: ref;
  var $p902: ref;
  var $i903: i8;
  var $i904: i8;
  var $i905: i32;
  var $i906: i32;
  var $i907: i64;
  var $p908: ref;
  var $p909: ref;
  var $p911: ref;
  var $p913: ref;
  var $p914: ref;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $p918: ref;
  var $p919: ref;
  var $i920: i8;
  var $i921: i8;
  var $i922: i8;
  var $p923: ref;
  var $i924: i8;
  var $i925: i8;
  var $i926: i8;
  var $p927: ref;
  var $i928: i8;
  var $i929: i8;
  var $i930: i8;
  var $p931: ref;
  var $p932: ref;
  var $p934: ref;
  var $p936: ref;
  var $p937: ref;
  var $p938: ref;
  var $i939: i8;
  var $i940: i32;
  var $i941: i1;
  var $p942: ref;
  var $i943: i8;
  var $i944: i8;
  var $i945: i32;
  var $i946: i32;
  var $i947: i32;
  var $i948: i64;
  var $p949: ref;
  var $p950: ref;
  var $i951: i8;
  var $i952: i8;
  var $i953: i32;
  var $i954: i32;
  var $i955: i64;
  var $p956: ref;
  var $p957: ref;
  var $p959: ref;
  var $p961: ref;
  var $p962: ref;
  var $p963: ref;
  var $p964: ref;
  var $p965: ref;
  var $p966: ref;
  var $p967: ref;
  var $i968: i8;
  var $i969: i8;
  var $i970: i8;
  var $p971: ref;
  var $i972: i8;
  var $i973: i8;
  var $i974: i8;
  var $p975: ref;
  var $i976: i8;
  var $i977: i8;
  var $p978: ref;
  var $p979: ref;
  var $p981: ref;
  var $p983: ref;
  var $p984: ref;
  var $p985: ref;
  var $i986: i8;
  var $i987: i32;
  var $i988: i1;
  var $p989: ref;
  var $i990: i8;
  var $i991: i8;
  var $i992: i32;
  var $i993: i32;
  var $i994: i32;
  var $i995: i64;
  var $p996: ref;
  var $p997: ref;
  var $i998: i8;
  var $i999: i8;
  var $i1000: i32;
  var $i1001: i32;
  var $i1002: i64;
  var $p1003: ref;
  var $p1004: ref;
  var $p1006: ref;
  var $p1008: ref;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $i1015: i8;
  var $i1016: i8;
  var $i1017: i8;
  var $p1018: ref;
  var $i1019: i8;
  var $i1020: i8;
  var $i1021: i8;
  var $p1022: ref;
  var $i1023: i8;
  var $i1024: i8;
  var $i1025: i8;
  var $p1026: ref;
  var $p1027: ref;
  var $p1029: ref;
  var $p1031: ref;
  var $p1032: ref;
  var $p1033: ref;
  var $i1034: i8;
  var $i1035: i32;
  var $i1036: i1;
  var $p1037: ref;
  var $i1038: i8;
  var $i1039: i8;
  var $i1040: i32;
  var $i1041: i32;
  var $i1042: i32;
  var $i1043: i64;
  var $p1044: ref;
  var $p1045: ref;
  var $i1046: i8;
  var $i1047: i8;
  var $i1048: i32;
  var $i1049: i32;
  var $i1050: i64;
  var $p1051: ref;
  var $p1052: ref;
  var $p1054: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $p1058: ref;
  var $p1059: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $i1063: i8;
  var $i1064: i8;
  var $i1065: i8;
  var $p1066: ref;
  var $i1067: i8;
  var $i1068: i8;
  var $i1069: i8;
  var $p1070: ref;
  var $i1071: i8;
  var $i1072: i8;
  var $p1073: ref;
  var $p1074: ref;
  var $p1076: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $i1081: i8;
  var $i1082: i32;
  var $i1083: i1;
  var $p1084: ref;
  var $i1085: i8;
  var $i1086: i8;
  var $i1087: i32;
  var $i1088: i32;
  var $i1089: i32;
  var $i1090: i64;
  var $p1091: ref;
  var $p1092: ref;
  var $i1093: i8;
  var $i1094: i8;
  var $i1095: i32;
  var $i1096: i32;
  var $i1097: i64;
  var $p1098: ref;
  var $p1099: ref;
  var $p1101: ref;
  var $p1103: ref;
  var $p1104: ref;
  var $p1105: ref;
  var $p1106: ref;
  var $p1107: ref;
  var $p1108: ref;
  var $p1109: ref;
  var $i1110: i8;
  var $i1111: i8;
  var $i1112: i8;
  var $p1113: ref;
  var $i1114: i8;
  var $i1115: i8;
  var $i1116: i8;
  var $p1117: ref;
  var $i1118: i8;
  var $i1119: i8;
  var $i1120: i8;
  var $p1121: ref;
  var $p1122: ref;
  var $p1124: ref;
  var $p1126: ref;
  var $p1127: ref;
  var $p1128: ref;
  var $i1129: i8;
  var $i1130: i32;
  var $i1131: i1;
  var $p1132: ref;
  var $i1133: i8;
  var $i1134: i8;
  var $i1135: i32;
  var $i1136: i32;
  var $i1137: i32;
  var $i1138: i64;
  var $p1139: ref;
  var $p1140: ref;
  var $i1141: i8;
  var $i1142: i8;
  var $i1143: i32;
  var $i1144: i32;
  var $i1145: i64;
  var $p1146: ref;
  var $p1147: ref;
  var $p1149: ref;
  var $p1151: ref;
  var $p1152: ref;
  var $p1153: ref;
  var $p1154: ref;
  var $p1155: ref;
  var $p1156: ref;
  var $p1157: ref;
  var $i1158: i8;
  var $i1159: i8;
  var $i1160: i8;
  var $p1161: ref;
  var $i1162: i8;
  var $i1163: i8;
  var $i1164: i8;
  var $p1165: ref;
  var $i1166: i8;
  var $i1167: i8;
  var $p1168: ref;
  var $p1169: ref;
  var $p1171: ref;
  var $p1173: ref;
  var $p1174: ref;
  var $p1175: ref;
  var $i1176: i8;
  var $i1177: i32;
  var $i1178: i1;
  var $p1179: ref;
  var $i1180: i8;
  var $i1181: i8;
  var $i1182: i32;
  var $i1183: i32;
  var $i1184: i32;
  var $i1185: i64;
  var $p1186: ref;
  var $p1187: ref;
  var $i1188: i8;
  var $i1189: i8;
  var $i1190: i32;
  var $i1191: i32;
  var $i1192: i64;
  var $p1193: ref;
  var $p1194: ref;
  var $p1196: ref;
  var $p1198: ref;
  var $p1199: ref;
  var $p1200: ref;
  var $p1201: ref;
  var $p1202: ref;
  var $p1203: ref;
  var $p1204: ref;
  var $i1205: i8;
  var $i1206: i8;
  var $i1207: i8;
  var $p1208: ref;
  var $i1209: i8;
  var $i1210: i8;
  var $i1211: i8;
  var $p1212: ref;
  var $i1213: i8;
  var $i1214: i8;
  var $i1215: i8;
  var $p1216: ref;
  var $p1217: ref;
  var $p1219: ref;
  var $p1221: ref;
  var $p1222: ref;
  var $p1223: ref;
  var $i1224: i8;
  var $i1225: i32;
  var $i1226: i1;
  var $p1227: ref;
  var $i1228: i8;
  var $i1229: i8;
  var $i1230: i32;
  var $i1231: i32;
  var $i1232: i32;
  var $i1233: i64;
  var $p1234: ref;
  var $p1235: ref;
  var $i1236: i8;
  var $i1237: i8;
  var $i1238: i32;
  var $i1239: i32;
  var $i1240: i64;
  var $p1241: ref;
  var $p1242: ref;
  var $p1244: ref;
  var $p1246: ref;
  var $p1247: ref;
  var $p1248: ref;
  var $p1249: ref;
  var $p1250: ref;
  var $p1251: ref;
  var $p1252: ref;
  var $i1253: i8;
  var $i1254: i8;
  var $i1255: i8;
  var $p1256: ref;
  var $i1257: i8;
  var $i1258: i8;
  var $i1259: i8;
  var $p1260: ref;
  var $i1261: i8;
  var $i1262: i8;
  var $p1263: ref;
  var $p1264: ref;
  var $p1266: ref;
  var $p1268: ref;
  var $p1269: ref;
  var $p1270: ref;
  var $i1271: i8;
  var $i1272: i32;
  var $i1273: i1;
  var $p1274: ref;
  var $i1275: i8;
  var $i1276: i8;
  var $i1277: i32;
  var $i1278: i32;
  var $i1279: i32;
  var $i1280: i64;
  var $p1281: ref;
  var $p1282: ref;
  var $i1283: i8;
  var $i1284: i8;
  var $i1285: i32;
  var $i1286: i32;
  var $i1287: i64;
  var $p1288: ref;
  var $p1289: ref;
  var $p1291: ref;
  var $p1293: ref;
  var $p1294: ref;
  var $p1295: ref;
  var $p1296: ref;
  var $p1297: ref;
  var $p1298: ref;
  var $p1299: ref;
  var $i1300: i8;
  var $i1301: i8;
  var $i1302: i8;
  var $p1303: ref;
  var $i1304: i8;
  var $i1305: i8;
  var $i1306: i8;
  var $p1307: ref;
  var $i1308: i8;
  var $i1309: i8;
  var $i1310: i8;
  var $p1311: ref;
  var $p1312: ref;
  var $p1314: ref;
  var $p1316: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $i1319: i8;
  var $i1320: i32;
  var $i1321: i1;
  var $p1322: ref;
  var $i1323: i8;
  var $i1324: i8;
  var $i1325: i32;
  var $i1326: i32;
  var $i1327: i32;
  var $i1328: i64;
  var $p1329: ref;
  var $p1330: ref;
  var $i1331: i8;
  var $i1332: i8;
  var $i1333: i32;
  var $i1334: i32;
  var $i1335: i64;
  var $p1336: ref;
  var $p1337: ref;
  var $p1339: ref;
  var $p1341: ref;
  var $p1342: ref;
  var $p1343: ref;
  var $p1344: ref;
  var $p1345: ref;
  var $p1346: ref;
  var $p1347: ref;
  var $i1348: i8;
  var $i1349: i8;
  var $i1350: i8;
  var $p1351: ref;
  var $i1352: i8;
  var $i1353: i8;
  var $i1354: i8;
  var $p1355: ref;
  var $i1356: i8;
  var $i1357: i8;
  var $p1358: ref;
  var $p1359: ref;
  var $p1361: ref;
  var $p1363: ref;
  var $p1364: ref;
  var $p1365: ref;
  var $i1366: i8;
  var $i1367: i32;
  var $i1368: i1;
  var $p1369: ref;
  var $i1370: i8;
  var $i1371: i8;
  var $i1372: i32;
  var $i1373: i32;
  var $i1374: i32;
  var $i1375: i64;
  var $p1376: ref;
  var $p1377: ref;
  var $i1378: i8;
  var $i1379: i8;
  var $i1380: i32;
  var $i1381: i32;
  var $i1382: i64;
  var $p1383: ref;
  var $p1384: ref;
  var $p1386: ref;
  var $p1388: ref;
  var $p1389: ref;
  var $p1390: ref;
  var $p1391: ref;
  var $p1392: ref;
  var $p1393: ref;
  var $p1394: ref;
  var $i1395: i8;
  var $i1396: i8;
  var $i1397: i8;
  var $p1398: ref;
  var $i1399: i8;
  var $i1400: i8;
  var $i1401: i8;
  var $p1402: ref;
  var $i1403: i8;
  var $i1404: i8;
  var $i1405: i8;
  var $p1406: ref;
  var $p1407: ref;
  var $p1409: ref;
  var $p1411: ref;
  var $p1412: ref;
  var $p1413: ref;
  var $i1414: i8;
  var $i1415: i32;
  var $i1416: i1;
  var $p1417: ref;
  var $i1418: i8;
  var $i1419: i8;
  var $i1420: i32;
  var $i1421: i32;
  var $i1422: i32;
  var $i1423: i64;
  var $p1424: ref;
  var $p1425: ref;
  var $i1426: i8;
  var $i1427: i8;
  var $i1428: i32;
  var $i1429: i32;
  var $i1430: i64;
  var $p1431: ref;
  var $p1432: ref;
  var $p1434: ref;
  var $p1436: ref;
  var $p1437: ref;
  var $p1438: ref;
  var $p1439: ref;
  var $p1440: ref;
  var $p1441: ref;
  var $p1442: ref;
  var $i1443: i8;
  var $i1444: i8;
  var $i1445: i8;
  var $p1446: ref;
  var $i1447: i8;
  var $i1448: i8;
  var $i1449: i8;
  var $p1450: ref;
  var $i1451: i8;
  var $i1452: i8;
  var $p1453: ref;
  var $p1454: ref;
  var $p1456: ref;
  var $p1458: ref;
  var $p1459: ref;
  var $p1460: ref;
  var $i1461: i8;
  var $i1462: i32;
  var $i1463: i1;
  var $p1464: ref;
  var $i1465: i8;
  var $i1466: i8;
  var $i1467: i32;
  var $i1468: i32;
  var $i1469: i32;
  var $i1470: i64;
  var $p1471: ref;
  var $p1472: ref;
  var $i1473: i8;
  var $i1474: i8;
  var $i1475: i32;
  var $i1476: i32;
  var $i1477: i64;
  var $p1478: ref;
  var $p1479: ref;
  var $p1481: ref;
  var $p1483: ref;
  var $p1484: ref;
  var $p1485: ref;
  var $p1486: ref;
  var $p1487: ref;
  var $p1488: ref;
  var $p1489: ref;
  var $i1490: i8;
  var $i1491: i8;
  var $i1492: i8;
  var $p1493: ref;
  var $i1494: i8;
  var $i1495: i8;
  var $i1496: i8;
  var $p1497: ref;
  var $i1498: i8;
  var $i1499: i8;
  var $i1500: i8;
  var $p1501: ref;
  var $p1502: ref;
  var $p1504: ref;
  var $p1506: ref;
  var $p1507: ref;
  var $p1508: ref;
  var $i1509: i8;
  var $i1510: i32;
  var $i1511: i1;
  var $p1512: ref;
  var $i1513: i8;
  var $i1514: i8;
  var $i1515: i32;
  var $i1516: i32;
  var $i1517: i32;
  var $i1518: i64;
  var $p1519: ref;
  var $p1520: ref;
  var $i1521: i8;
  var $i1522: i8;
  var $i1523: i32;
  var $i1524: i32;
  var $i1525: i64;
  var $p1526: ref;
  var $p1527: ref;
  var $p1529: ref;
  var $p1531: ref;
  var $p1532: ref;
  var $p1533: ref;
  var $p1534: ref;
  var $p1535: ref;
  var $p1536: ref;
  var $p1537: ref;
  var $i1538: i8;
  var $i1539: i8;
  var $i1540: i8;
  var $p1541: ref;
  var $i1542: i8;
  var $i1543: i8;
  var $i1544: i8;
  var $p1545: ref;
  var $i1546: i8;
  var $i1547: i8;
  var $p1548: ref;
  var $p1549: ref;
  var $p1551: ref;
  var $p1553: ref;
  var $p1554: ref;
  var $p1555: ref;
  var $i1556: i8;
  var $i1557: i32;
  var $i1558: i1;
  var $p1559: ref;
  var $i1560: i8;
  var $i1561: i8;
  var $i1562: i32;
  var $i1563: i32;
  var $i1564: i32;
  var $i1565: i64;
  var $p1566: ref;
  var $p1567: ref;
  var $i1568: i8;
  var $i1569: i8;
  var $i1570: i32;
  var $i1571: i32;
  var $i1572: i64;
  var $p1573: ref;
  var $p1574: ref;
  var $p1576: ref;
  var $p1578: ref;
  var $p1579: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p2, ep0_string);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(1, 8));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p3, .str.39);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(2, 8));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p4, .str.40);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(3, 8));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p5, .str.41);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(4, 8));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p6, .str.42);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(5, 8));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p7, .str.43);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(6, 8));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p8, .str.44);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(7, 8));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p9, .str.45);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(8, 8));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p10, .str.46);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(9, 8));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p11, .str.47);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(10, 8));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p12, .str.48);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(11, 8));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p13, .str.49);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(12, 8));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p14, .str.50);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(13, 8));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p15, .str.51);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(14, 8));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p16, .str.52);
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(15, 8));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p17, .str.53);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(16, 8));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p18, .str.54);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(17, 8));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p19, .str.55);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(18, 8));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p20, .str.56);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(19, 8));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p21, .str.57);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(20, 8));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p22, .str.58);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(21, 8));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p23, .str.59);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(22, 8));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p24, .str.60);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(23, 8));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p25, .str.61);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(24, 8));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p26, .str.62);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(25, 8));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p27, .str.63);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(26, 8));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p28, .str.64);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(27, 8));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p29, .str.65);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(28, 8));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p30, .str.66);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(29, 8));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p31, .str.67);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(30, 8));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p32, .str.68);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(31, 8));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.16 := $store.ref($M.16, $p33, .str.69);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p35, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} INIT_LIST_HEAD($p37);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.1;
    call {:si_unique_call 946} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p39, 0, 4608, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_13;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, $p0);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.1, $p43);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i45 := $and.i8($i44, $sub.i8(0, 65));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i46 := $or.i8($i45, 64);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p43, $i46);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.1, $p47);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i49 := $and.i8($i48, $sub.i8(0, 32));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p47, $i49);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i52 := $and.i8($i51, $sub.i8(0, 33));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i53 := $or.i8($i52, 32);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p50, $i53);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(0, 8));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.16, $p54);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, $p55);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, pch_udc_ep_ops);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p41);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p60, $mul.ref(128, 1));
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.1, $p61);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i64 == 1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.1, $p72);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i74 := $and.i8($i73, 31);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, 16);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i77 := $mul.i32($i76, 32);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p79, $i78);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} usb_ep_set_maxpacket_limit($p80, 512);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} list_add_tail($p82, $p84);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} INIT_LIST_HEAD($p85);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(1, 144));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(96, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p112, $p0);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.1, $p113);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i115 := $and.i8($i114, $sub.i8(0, 65));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i116 := $or.i8($i115, 64);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p113, $i116);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.1, $p117);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i119 := $and.i8($i118, $sub.i8(0, 32));
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p117, $i119);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.1, $p120);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i122 := $and.i8($i121, $sub.i8(0, 33));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p120, $i122);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(1, 8));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.16, $p123);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p126, $p124);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p128, pch_udc_ep_ops);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p111);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(128, 1));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.1, $p130);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i133 == 1);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.1, $p134);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i136 := $and.i8($i135, 31);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i137, 16);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i139 := $mul.i32($i138, 32);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i139);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(104, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p141, $i140);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} usb_ep_set_maxpacket_limit($p149, 512);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} list_add_tail($p151, $p153);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(112, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} INIT_LIST_HEAD($p154);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(2, 144));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(96, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p158, $p0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.1, $p159);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i161 := $and.i8($i160, $sub.i8(0, 65));
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i162 := $or.i8($i161, 64);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p159, $i162);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.1, $p163);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i165 := $and.i8($i164, $sub.i8(0, 32));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i166 := $or.i8($i165, 1);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p163, $i166);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.1, $p167);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i169 := $and.i8($i168, $sub.i8(0, 33));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i170 := $or.i8($i169, 32);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p167, $i170);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(2, 8));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.16, $p171);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p174, $p172);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p176, pch_udc_ep_ops);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p157);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p177, $mul.ref(128, 1));
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i179 := $load.i8($M.1, $p178);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i181 == 1);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.1, $p182);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i184 := $and.i8($i183, 31);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i185, 16);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i187 := $mul.i32($i186, 32);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i187);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(104, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p189, $i188);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} usb_ep_set_maxpacket_limit($p197, 512);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} list_add_tail($p199, $p201);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(112, 1));
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} INIT_LIST_HEAD($p202);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p204, $mul.ref(3, 144));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(96, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p206, $p0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.1, $p207);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i209 := $and.i8($i208, $sub.i8(0, 65));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i210 := $or.i8($i209, 64);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p207, $i210);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.1, $p211);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i213 := $and.i8($i212, $sub.i8(0, 32));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i214 := $or.i8($i213, 1);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p211, $i214);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.1, $p215);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i217 := $and.i8($i216, $sub.i8(0, 33));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p215, $i217);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(3, 8));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.16, $p218);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p221, $p219);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p223, pch_udc_ep_ops);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p224 := $bitcast.ref.ref($p205);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p224, $mul.ref(128, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i226 := $load.i8($M.1, $p225);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i227 := $zext.i8.i32($i226);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i228 == 1);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.1, $p229);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i231 := $and.i8($i230, 31);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i233 := $add.i32($i232, 16);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i234 := $mul.i32($i233, 32);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i234);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(104, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p236, $i235);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} usb_ep_set_maxpacket_limit($p244, 512);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} list_add_tail($p246, $p248);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(112, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} INIT_LIST_HEAD($p249);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p251 := $bitcast.ref.ref($p250);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($p251, $mul.ref(4, 144));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(96, 1));
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p253, $p0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.1, $p254);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i256 := $and.i8($i255, $sub.i8(0, 65));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i257 := $or.i8($i256, 64);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p254, $i257);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i259 := $load.i8($M.1, $p258);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i260 := $and.i8($i259, $sub.i8(0, 32));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i261 := $or.i8($i260, 2);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p258, $i261);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.1, $p262);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i264 := $and.i8($i263, $sub.i8(0, 33));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i265 := $or.i8($i264, 32);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p262, $i265);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(4, 8));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.16, $p266);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p269, $p267);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p271, pch_udc_ep_ops);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p272 := $bitcast.ref.ref($p252);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($p272, $mul.ref(128, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i274 := $load.i8($M.1, $p273);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i275 := $zext.i8.i32($i274);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i276} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i276 == 1);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i278 := $load.i8($M.1, $p277);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i279 := $and.i8($i278, 31);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i280 := $zext.i8.i32($i279);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i281 := $add.i32($i280, 16);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i282 := $mul.i32($i281, 32);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i283 := $sext.i32.i64($i282);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(104, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p284, $i283);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} usb_ep_set_maxpacket_limit($p292, 512);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} list_add_tail($p294, $p296);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(112, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} INIT_LIST_HEAD($p297);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p299 := $bitcast.ref.ref($p298);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($p299, $mul.ref(5, 144));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(96, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p301, $p0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.1, $p302);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i304 := $and.i8($i303, $sub.i8(0, 65));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i305 := $or.i8($i304, 64);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p302, $i305);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.1, $p306);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i308 := $and.i8($i307, $sub.i8(0, 32));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i309 := $or.i8($i308, 2);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p306, $i309);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.1, $p310);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i312 := $and.i8($i311, $sub.i8(0, 33));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p310, $i312);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(5, 8));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.16, $p313);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p316, $p314);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p318, pch_udc_ep_ops);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p319 := $bitcast.ref.ref($p300);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p319, $mul.ref(128, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.1, $p320);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i323 == 1);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.1, $p324);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i326 := $and.i8($i325, 31);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i326);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i328 := $add.i32($i327, 16);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i329 := $mul.i32($i328, 32);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i330 := $sext.i32.i64($i329);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(104, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p331, $i330);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} usb_ep_set_maxpacket_limit($p339, 512);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} list_add_tail($p341, $p343);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(112, 1));
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} INIT_LIST_HEAD($p344);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p346 := $bitcast.ref.ref($p345);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($p346, $mul.ref(6, 144));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(96, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p348, $p0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i350 := $load.i8($M.1, $p349);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i351 := $and.i8($i350, $sub.i8(0, 65));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i352 := $or.i8($i351, 64);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p349, $i352);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i354 := $load.i8($M.1, $p353);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i355 := $and.i8($i354, $sub.i8(0, 32));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i356 := $or.i8($i355, 3);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p353, $i356);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i358 := $load.i8($M.1, $p357);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i359 := $and.i8($i358, $sub.i8(0, 33));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i360 := $or.i8($i359, 32);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p357, $i360);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(6, 8));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.16, $p361);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p364, $p362);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p366, pch_udc_ep_ops);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p367 := $bitcast.ref.ref($p347);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($p367, $mul.ref(128, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i369 := $load.i8($M.1, $p368);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i370 := $zext.i8.i32($i369);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i371 := $ne.i32($i370, 0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i371 == 1);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.1, $p372);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i374 := $and.i8($i373, 31);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i375 := $zext.i8.i32($i374);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i376 := $add.i32($i375, 16);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i377 := $mul.i32($i376, 32);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i378 := $sext.i32.i64($i377);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(104, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p379, $i378);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} usb_ep_set_maxpacket_limit($p387, 512);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} list_add_tail($p389, $p391);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(112, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} INIT_LIST_HEAD($p392);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p394 := $bitcast.ref.ref($p393);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p395 := $add.ref($p394, $mul.ref(7, 144));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(96, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p396, $p0);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i398 := $load.i8($M.1, $p397);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i399 := $and.i8($i398, $sub.i8(0, 65));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i400 := $or.i8($i399, 64);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p397, $i400);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i402 := $load.i8($M.1, $p401);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i403 := $and.i8($i402, $sub.i8(0, 32));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i404 := $or.i8($i403, 3);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p401, $i404);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i406 := $load.i8($M.1, $p405);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i407 := $and.i8($i406, $sub.i8(0, 33));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p405, $i407);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(7, 8));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.16, $p408);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p411, $p409);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p413, pch_udc_ep_ops);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p414 := $bitcast.ref.ref($p395);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($p414, $mul.ref(128, 1));
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i416 := $load.i8($M.1, $p415);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i417 := $zext.i8.i32($i416);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i418 := $ne.i32($i417, 0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i418 == 1);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i420 := $load.i8($M.1, $p419);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i421 := $and.i8($i420, 31);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i421);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i423 := $add.i32($i422, 16);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i424 := $mul.i32($i423, 32);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i425 := $sext.i32.i64($i424);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(104, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p426, $i425);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} usb_ep_set_maxpacket_limit($p434, 512);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} list_add_tail($p436, $p438);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(112, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} INIT_LIST_HEAD($p439);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p441 := $bitcast.ref.ref($p440);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($p441, $mul.ref(8, 144));
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(96, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p443, $p0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.1, $p444);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i446 := $and.i8($i445, $sub.i8(0, 65));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i447 := $or.i8($i446, 64);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p444, $i447);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i449 := $load.i8($M.1, $p448);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i450 := $and.i8($i449, $sub.i8(0, 32));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i451 := $or.i8($i450, 4);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p448, $i451);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.1, $p452);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i454 := $and.i8($i453, $sub.i8(0, 33));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i455 := $or.i8($i454, 32);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p452, $i455);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(8, 8));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p457 := $load.ref($M.16, $p456);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p459, $p457);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p461, pch_udc_ep_ops);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p462 := $bitcast.ref.ref($p442);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($p462, $mul.ref(128, 1));
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.1, $p463);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i465 := $zext.i8.i32($i464);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i466 := $ne.i32($i465, 0);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i466 == 1);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.1, $p467);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i469 := $and.i8($i468, 31);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i470 := $zext.i8.i32($i469);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i471 := $add.i32($i470, 16);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i472 := $mul.i32($i471, 32);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i473 := $sext.i32.i64($i472);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(104, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p474, $i473);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} usb_ep_set_maxpacket_limit($p482, 512);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} list_add_tail($p484, $p486);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(112, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} INIT_LIST_HEAD($p487);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p489 := $bitcast.ref.ref($p488);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($p489, $mul.ref(9, 144));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(96, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p491, $p0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.1, $p492);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i494 := $and.i8($i493, $sub.i8(0, 65));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i495 := $or.i8($i494, 64);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p492, $i495);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i497 := $load.i8($M.1, $p496);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i498 := $and.i8($i497, $sub.i8(0, 32));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i499 := $or.i8($i498, 4);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p496, $i499);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.1, $p500);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i502 := $and.i8($i501, $sub.i8(0, 33));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p500, $i502);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(9, 8));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p504 := $load.ref($M.16, $p503);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p506, $p504);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p508, pch_udc_ep_ops);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p490);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($p509, $mul.ref(128, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i511 := $load.i8($M.1, $p510);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i512 := $zext.i8.i32($i511);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i513 := $ne.i32($i512, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i513 == 1);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i515 := $load.i8($M.1, $p514);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i516 := $and.i8($i515, 31);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i517 := $zext.i8.i32($i516);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i518 := $add.i32($i517, 16);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i519 := $mul.i32($i518, 32);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i520 := $sext.i32.i64($i519);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(104, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p521, $i520);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} usb_ep_set_maxpacket_limit($p529, 512);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} list_add_tail($p531, $p533);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(112, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} INIT_LIST_HEAD($p534);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $p536 := $bitcast.ref.ref($p535);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($p536, $mul.ref(10, 144));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(96, 1));
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p538, $p0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i540 := $load.i8($M.1, $p539);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i541 := $and.i8($i540, $sub.i8(0, 65));
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i542 := $or.i8($i541, 64);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p539, $i542);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i544 := $load.i8($M.1, $p543);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i545 := $and.i8($i544, $sub.i8(0, 32));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i546 := $or.i8($i545, 5);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p543, $i546);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i548 := $load.i8($M.1, $p547);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i549 := $and.i8($i548, $sub.i8(0, 33));
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i550 := $or.i8($i549, 32);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p547, $i550);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(10, 8));
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.16, $p551);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p554, $p552);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p556, pch_udc_ep_ops);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p557 := $bitcast.ref.ref($p537);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($p557, $mul.ref(128, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i559 := $load.i8($M.1, $p558);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i560 := $zext.i8.i32($i559);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i561 := $ne.i32($i560, 0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i561} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i561 == 1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i563 := $load.i8($M.1, $p562);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i564 := $and.i8($i563, 31);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i565 := $zext.i8.i32($i564);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i566 := $add.i32($i565, 16);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i567 := $mul.i32($i566, 32);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i568 := $sext.i32.i64($i567);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(104, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p569, $i568);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} usb_ep_set_maxpacket_limit($p577, 512);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} list_add_tail($p579, $p581);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(112, 1));
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} INIT_LIST_HEAD($p582);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p584 := $bitcast.ref.ref($p583);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($p584, $mul.ref(11, 144));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(96, 1));
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p586, $p0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i588 := $load.i8($M.1, $p587);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i589 := $and.i8($i588, $sub.i8(0, 65));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i590 := $or.i8($i589, 64);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p587, $i590);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i592 := $load.i8($M.1, $p591);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i593 := $and.i8($i592, $sub.i8(0, 32));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i594 := $or.i8($i593, 5);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p591, $i594);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i596 := $load.i8($M.1, $p595);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i597 := $and.i8($i596, $sub.i8(0, 33));
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p595, $i597);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(11, 8));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $p599 := $load.ref($M.16, $p598);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p601, $p599);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p603, pch_udc_ep_ops);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p604 := $bitcast.ref.ref($p585);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($p604, $mul.ref(128, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i606 := $load.i8($M.1, $p605);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i607 := $zext.i8.i32($i606);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i608 := $ne.i32($i607, 0);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i608 == 1);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i610 := $load.i8($M.1, $p609);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i611 := $and.i8($i610, 31);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i612 := $zext.i8.i32($i611);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i613 := $add.i32($i612, 16);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i614 := $mul.i32($i613, 32);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i615 := $sext.i32.i64($i614);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(104, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p616, $i615);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1));
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} usb_ep_set_maxpacket_limit($p624, 512);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} list_add_tail($p626, $p628);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(112, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} INIT_LIST_HEAD($p629);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p631 := $bitcast.ref.ref($p630);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($p631, $mul.ref(12, 144));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(96, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p633, $p0);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i635 := $load.i8($M.1, $p634);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i636 := $and.i8($i635, $sub.i8(0, 65));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i637 := $or.i8($i636, 64);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p634, $i637);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i639 := $load.i8($M.1, $p638);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i640 := $and.i8($i639, $sub.i8(0, 32));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i641 := $or.i8($i640, 6);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p638, $i641);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i643 := $load.i8($M.1, $p642);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i644 := $and.i8($i643, $sub.i8(0, 33));
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i645 := $or.i8($i644, 32);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p642, $i645);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(12, 8));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.16, $p646);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p649, $p647);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p651, pch_udc_ep_ops);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p652 := $bitcast.ref.ref($p632);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($p652, $mul.ref(128, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i654 := $load.i8($M.1, $p653);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i655 := $zext.i8.i32($i654);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i656 := $ne.i32($i655, 0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i656 == 1);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i658 := $load.i8($M.1, $p657);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i659 := $and.i8($i658, 31);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i660 := $zext.i8.i32($i659);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i661 := $add.i32($i660, 16);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i662 := $mul.i32($i661, 32);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i663 := $sext.i32.i64($i662);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(104, 1));
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p664, $i663);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} usb_ep_set_maxpacket_limit($p672, 512);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} list_add_tail($p674, $p676);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(112, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} INIT_LIST_HEAD($p677);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p679 := $bitcast.ref.ref($p678);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($p679, $mul.ref(13, 144));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p681 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(96, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p681, $p0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i683 := $load.i8($M.1, $p682);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i684 := $and.i8($i683, $sub.i8(0, 65));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i685 := $or.i8($i684, 64);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p682, $i685);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i687 := $load.i8($M.1, $p686);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i688 := $and.i8($i687, $sub.i8(0, 32));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i689 := $or.i8($i688, 6);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p686, $i689);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i691 := $load.i8($M.1, $p690);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i692 := $and.i8($i691, $sub.i8(0, 33));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p690, $i692);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(13, 8));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p694 := $load.ref($M.16, $p693);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p696, $p694);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p698, pch_udc_ep_ops);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p699 := $bitcast.ref.ref($p680);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($p699, $mul.ref(128, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i701 := $load.i8($M.1, $p700);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i702 := $zext.i8.i32($i701);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i703 := $ne.i32($i702, 0);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i703} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i703 == 1);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i705 := $load.i8($M.1, $p704);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i706 := $and.i8($i705, 31);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i707 := $zext.i8.i32($i706);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i708 := $add.i32($i707, 16);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i709 := $mul.i32($i708, 32);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i710 := $sext.i32.i64($i709);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(104, 1));
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p711, $i710);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1));
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} usb_ep_set_maxpacket_limit($p719, 512);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} list_add_tail($p721, $p723);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(112, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} INIT_LIST_HEAD($p724);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p726 := $bitcast.ref.ref($p725);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($p726, $mul.ref(14, 144));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(96, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p728, $p0);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i730 := $load.i8($M.1, $p729);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i731 := $and.i8($i730, $sub.i8(0, 65));
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i732 := $or.i8($i731, 64);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p729, $i732);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i734 := $load.i8($M.1, $p733);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i735 := $and.i8($i734, $sub.i8(0, 32));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i736 := $or.i8($i735, 7);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p733, $i736);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i738 := $load.i8($M.1, $p737);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i739 := $and.i8($i738, $sub.i8(0, 33));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i740 := $or.i8($i739, 32);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p737, $i740);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(14, 8));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $p742 := $load.ref($M.16, $p741);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p744, $p742);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p746, pch_udc_ep_ops);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p747 := $bitcast.ref.ref($p727);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($p747, $mul.ref(128, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i749 := $load.i8($M.1, $p748);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i750 := $zext.i8.i32($i749);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i751 := $ne.i32($i750, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i751} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i751 == 1);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i753 := $load.i8($M.1, $p752);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i754 := $and.i8($i753, 31);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i755 := $zext.i8.i32($i754);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i756 := $add.i32($i755, 16);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i757 := $mul.i32($i756, 32);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i758 := $sext.i32.i64($i757);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(104, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p759, $i758);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} usb_ep_set_maxpacket_limit($p767, 512);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} list_add_tail($p769, $p771);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(112, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} INIT_LIST_HEAD($p772);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p774 := $bitcast.ref.ref($p773);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($p774, $mul.ref(15, 144));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(96, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p776, $p0);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i778 := $load.i8($M.1, $p777);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i779 := $and.i8($i778, $sub.i8(0, 65));
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i780 := $or.i8($i779, 64);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p777, $i780);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i782 := $load.i8($M.1, $p781);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i783 := $and.i8($i782, $sub.i8(0, 32));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i784 := $or.i8($i783, 7);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p781, $i784);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i786 := $load.i8($M.1, $p785);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i787 := $and.i8($i786, $sub.i8(0, 33));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p785, $i787);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(15, 8));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p789 := $load.ref($M.16, $p788);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p791, $p789);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p793, pch_udc_ep_ops);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p794 := $bitcast.ref.ref($p775);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($p794, $mul.ref(128, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i796 := $load.i8($M.1, $p795);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i797 := $zext.i8.i32($i796);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i798 := $ne.i32($i797, 0);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i798 == 1);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i800 := $load.i8($M.1, $p799);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i801 := $and.i8($i800, 31);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i802 := $zext.i8.i32($i801);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i803 := $add.i32($i802, 16);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i804 := $mul.i32($i803, 32);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i805 := $sext.i32.i64($i804);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p806 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(104, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p806, $i805);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p814 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} usb_ep_set_maxpacket_limit($p814, 512);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} list_add_tail($p816, $p818);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p819 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(112, 1));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} INIT_LIST_HEAD($p819);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p821 := $bitcast.ref.ref($p820);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($p821, $mul.ref(16, 144));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(96, 1));
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p823, $p0);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i825 := $load.i8($M.1, $p824);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i826 := $and.i8($i825, $sub.i8(0, 65));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i827 := $or.i8($i826, 64);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p824, $i827);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p828 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $i829 := $load.i8($M.1, $p828);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i830 := $and.i8($i829, $sub.i8(0, 32));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i831 := $or.i8($i830, 8);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p828, $i831);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i833 := $load.i8($M.1, $p832);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i834 := $and.i8($i833, $sub.i8(0, 33));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i835 := $or.i8($i834, 32);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p832, $i835);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(16, 8));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p837 := $load.ref($M.16, $p836);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p839, $p837);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p841, pch_udc_ep_ops);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p842 := $bitcast.ref.ref($p822);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($p842, $mul.ref(128, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i844 := $load.i8($M.1, $p843);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i845 := $zext.i8.i32($i844);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i846 := $ne.i32($i845, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i846} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i846 == 1);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i848 := $load.i8($M.1, $p847);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i849 := $and.i8($i848, 31);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i850 := $zext.i8.i32($i849);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i851 := $add.i32($i850, 16);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $i852 := $mul.i32($i851, 32);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i853 := $sext.i32.i64($i852);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(104, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p854, $i853);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} usb_ep_set_maxpacket_limit($p862, 512);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} list_add_tail($p864, $p866);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(112, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} INIT_LIST_HEAD($p867);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p869 := $bitcast.ref.ref($p868);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($p869, $mul.ref(17, 144));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(96, 1));
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p871, $p0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i873 := $load.i8($M.1, $p872);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i874 := $and.i8($i873, $sub.i8(0, 65));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i875 := $or.i8($i874, 64);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p872, $i875);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i877 := $load.i8($M.1, $p876);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i878 := $and.i8($i877, $sub.i8(0, 32));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i879 := $or.i8($i878, 8);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p876, $i879);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i881 := $load.i8($M.1, $p880);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i882 := $and.i8($i881, $sub.i8(0, 33));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p880, $i882);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(17, 8));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p884 := $load.ref($M.16, $p883);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p886, $p884);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p888, pch_udc_ep_ops);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p889 := $bitcast.ref.ref($p870);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p890 := $add.ref($p889, $mul.ref(128, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i891 := $load.i8($M.1, $p890);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i892 := $zext.i8.i32($i891);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i893 := $ne.i32($i892, 0);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i893} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i893 == 1);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p894 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i895 := $load.i8($M.1, $p894);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i896 := $and.i8($i895, 31);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i897 := $zext.i8.i32($i896);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i898 := $add.i32($i897, 16);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i899 := $mul.i32($i898, 32);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i900 := $sext.i32.i64($i899);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(104, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p901, $i900);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} usb_ep_set_maxpacket_limit($p909, 512);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} list_add_tail($p911, $p913);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(112, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} INIT_LIST_HEAD($p914);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p916 := $bitcast.ref.ref($p915);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($p916, $mul.ref(18, 144));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p918 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(96, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p918, $p0);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p919 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i920 := $load.i8($M.1, $p919);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i921 := $and.i8($i920, $sub.i8(0, 65));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i922 := $or.i8($i921, 64);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p919, $i922);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i924 := $load.i8($M.1, $p923);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i925 := $and.i8($i924, $sub.i8(0, 32));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i926 := $or.i8($i925, 9);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p923, $i926);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i928 := $load.i8($M.1, $p927);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i929 := $and.i8($i928, $sub.i8(0, 33));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i930 := $or.i8($i929, 32);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p927, $i930);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(18, 8));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.16, $p931);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p934, $p932);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p936, pch_udc_ep_ops);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p937 := $bitcast.ref.ref($p917);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($p937, $mul.ref(128, 1));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i939 := $load.i8($M.1, $p938);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i940 := $zext.i8.i32($i939);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i941 := $ne.i32($i940, 0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i941} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i941 == 1);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i943 := $load.i8($M.1, $p942);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i944 := $and.i8($i943, 31);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i945 := $zext.i8.i32($i944);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i946 := $add.i32($i945, 16);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i947 := $mul.i32($i946, 32);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i948 := $sext.i32.i64($i947);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(104, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p949, $i948);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p957 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1));
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} usb_ep_set_maxpacket_limit($p957, 512);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} list_add_tail($p959, $p961);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(112, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} INIT_LIST_HEAD($p962);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p964 := $bitcast.ref.ref($p963);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p965 := $add.ref($p964, $mul.ref(19, 144));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(96, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p966, $p0);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $i968 := $load.i8($M.1, $p967);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i969 := $and.i8($i968, $sub.i8(0, 65));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i970 := $or.i8($i969, 64);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p967, $i970);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i972 := $load.i8($M.1, $p971);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i973 := $and.i8($i972, $sub.i8(0, 32));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i974 := $or.i8($i973, 9);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p971, $i974);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i976 := $load.i8($M.1, $p975);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i977 := $and.i8($i976, $sub.i8(0, 33));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p975, $i977);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(19, 8));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p979 := $load.ref($M.16, $p978);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p981, $p979);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p983, pch_udc_ep_ops);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p984 := $bitcast.ref.ref($p965);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($p984, $mul.ref(128, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i986 := $load.i8($M.1, $p985);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i987 := $zext.i8.i32($i986);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i988 := $ne.i32($i987, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume {:branchcond $i988} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i988 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i990 := $load.i8($M.1, $p989);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i991 := $and.i8($i990, 31);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i992 := $zext.i8.i32($i991);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i993 := $add.i32($i992, 16);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i994 := $mul.i32($i993, 32);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i995 := $sext.i32.i64($i994);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(104, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p996, $i995);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p1004 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} usb_ep_set_maxpacket_limit($p1004, 512);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p1008 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} list_add_tail($p1006, $p1008);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(112, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} INIT_LIST_HEAD($p1009);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p1011 := $bitcast.ref.ref($p1010);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($p1011, $mul.ref(20, 144));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(96, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1013, $p0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i1015 := $load.i8($M.1, $p1014);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i1016 := $and.i8($i1015, $sub.i8(0, 65));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i1017 := $or.i8($i1016, 64);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1014, $i1017);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i1019 := $load.i8($M.1, $p1018);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i1020 := $and.i8($i1019, $sub.i8(0, 32));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i1021 := $or.i8($i1020, 10);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1018, $i1021);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $p1022 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i1023 := $load.i8($M.1, $p1022);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i1024 := $and.i8($i1023, $sub.i8(0, 33));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i1025 := $or.i8($i1024, 32);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1022, $i1025);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p1026 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(20, 8));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p1027 := $load.ref($M.16, $p1026);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1029, $p1027);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p1031 := $add.ref($add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1031, pch_udc_ep_ops);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p1032 := $bitcast.ref.ref($p1012);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p1033 := $add.ref($p1032, $mul.ref(128, 1));
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i1034 := $load.i8($M.1, $p1033);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i1035 := $zext.i8.i32($i1034);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i1036 := $ne.i32($i1035, 0);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1036} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i1036 == 1);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p1037 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i1038 := $load.i8($M.1, $p1037);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i1039 := $and.i8($i1038, 31);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i1040 := $zext.i8.i32($i1039);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i1041 := $add.i32($i1040, 16);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i1042 := $mul.i32($i1041, 32);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i1043 := $sext.i32.i64($i1042);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p1044 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(104, 1));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1044, $i1043);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p1052 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} usb_ep_set_maxpacket_limit($p1052, 512);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p1054 := $add.ref($add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} list_add_tail($p1054, $p1056);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p1057 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(112, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} INIT_LIST_HEAD($p1057);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p1059 := $bitcast.ref.ref($p1058);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($p1059, $mul.ref(21, 144));
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p1061 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(96, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1061, $p0);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i1063 := $load.i8($M.1, $p1062);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i1064 := $and.i8($i1063, $sub.i8(0, 65));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i1065 := $or.i8($i1064, 64);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1062, $i1065);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i1067 := $load.i8($M.1, $p1066);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i1068 := $and.i8($i1067, $sub.i8(0, 32));
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i1069 := $or.i8($i1068, 10);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1066, $i1069);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i1071 := $load.i8($M.1, $p1070);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i1072 := $and.i8($i1071, $sub.i8(0, 33));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1070, $i1072);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p1073 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(21, 8));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $p1074 := $load.ref($M.16, $p1073);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p1076 := $add.ref($add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1076, $p1074);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p1078 := $add.ref($add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1078, pch_udc_ep_ops);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p1079 := $bitcast.ref.ref($p1060);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($p1079, $mul.ref(128, 1));
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i1081 := $load.i8($M.1, $p1080);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i1082 := $zext.i8.i32($i1081);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i1083 := $ne.i32($i1082, 0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1083} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i1083 == 1);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i1085 := $load.i8($M.1, $p1084);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i1086 := $and.i8($i1085, 31);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i1087 := $zext.i8.i32($i1086);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i1088 := $add.i32($i1087, 16);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i1089 := $mul.i32($i1088, 32);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i1090 := $sext.i32.i64($i1089);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p1091 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(104, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1091, $i1090);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p1099 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} usb_ep_set_maxpacket_limit($p1099, 512);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p1101 := $add.ref($add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p1103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} list_add_tail($p1101, $p1103);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p1104 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(112, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} INIT_LIST_HEAD($p1104);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p1105 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p1106 := $bitcast.ref.ref($p1105);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p1107 := $add.ref($p1106, $mul.ref(22, 144));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(96, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1108, $p0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p1109 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i1110 := $load.i8($M.1, $p1109);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i1111 := $and.i8($i1110, $sub.i8(0, 65));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i1112 := $or.i8($i1111, 64);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1109, $i1112);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p1113 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i1114 := $load.i8($M.1, $p1113);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i1115 := $and.i8($i1114, $sub.i8(0, 32));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i1116 := $or.i8($i1115, 11);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1113, $i1116);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p1117 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i1118 := $load.i8($M.1, $p1117);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i1119 := $and.i8($i1118, $sub.i8(0, 33));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i1120 := $or.i8($i1119, 32);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1117, $i1120);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p1121 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(22, 8));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p1122 := $load.ref($M.16, $p1121);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p1124 := $add.ref($add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1124, $p1122);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p1126 := $add.ref($add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1126, pch_udc_ep_ops);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p1127 := $bitcast.ref.ref($p1107);
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p1128 := $add.ref($p1127, $mul.ref(128, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i1129 := $load.i8($M.1, $p1128);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i1130 := $zext.i8.i32($i1129);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i1131 := $ne.i32($i1130, 0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1131} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i1131 == 1);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i1133 := $load.i8($M.1, $p1132);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i1134 := $and.i8($i1133, 31);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i1135 := $zext.i8.i32($i1134);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i1136 := $add.i32($i1135, 16);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i1137 := $mul.i32($i1136, 32);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i1138 := $sext.i32.i64($i1137);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p1139 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(104, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1139, $i1138);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p1147 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} usb_ep_set_maxpacket_limit($p1147, 512);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p1151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} list_add_tail($p1149, $p1151);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p1152 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(112, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} INIT_LIST_HEAD($p1152);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p1153 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p1154 := $bitcast.ref.ref($p1153);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($p1154, $mul.ref(23, 144));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(96, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1156, $p0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p1157 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i1158 := $load.i8($M.1, $p1157);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i1159 := $and.i8($i1158, $sub.i8(0, 65));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i1160 := $or.i8($i1159, 64);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1157, $i1160);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i1162 := $load.i8($M.1, $p1161);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i1163 := $and.i8($i1162, $sub.i8(0, 32));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i1164 := $or.i8($i1163, 11);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1161, $i1164);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p1165 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i1166 := $load.i8($M.1, $p1165);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i1167 := $and.i8($i1166, $sub.i8(0, 33));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1165, $i1167);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p1168 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(23, 8));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p1169 := $load.ref($M.16, $p1168);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p1171 := $add.ref($add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1171, $p1169);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p1173 := $add.ref($add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1173, pch_udc_ep_ops);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p1174 := $bitcast.ref.ref($p1155);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $p1175 := $add.ref($p1174, $mul.ref(128, 1));
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i1176 := $load.i8($M.1, $p1175);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i1177 := $zext.i8.i32($i1176);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i1178 := $ne.i32($i1177, 0);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1178} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i1178 == 1);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p1179 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i1180 := $load.i8($M.1, $p1179);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i1181 := $and.i8($i1180, 31);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i1182 := $zext.i8.i32($i1181);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i1183 := $add.i32($i1182, 16);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i1184 := $mul.i32($i1183, 32);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i1185 := $sext.i32.i64($i1184);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(104, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1186, $i1185);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p1194 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} usb_ep_set_maxpacket_limit($p1194, 512);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p1196 := $add.ref($add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p1198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} list_add_tail($p1196, $p1198);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p1199 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(112, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} INIT_LIST_HEAD($p1199);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $p1201 := $bitcast.ref.ref($p1200);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p1202 := $add.ref($p1201, $mul.ref(24, 144));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(96, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1203, $p0);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p1204 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i1205 := $load.i8($M.1, $p1204);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i1206 := $and.i8($i1205, $sub.i8(0, 65));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i1207 := $or.i8($i1206, 64);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1204, $i1207);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p1208 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i1209 := $load.i8($M.1, $p1208);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i1210 := $and.i8($i1209, $sub.i8(0, 32));
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i1211 := $or.i8($i1210, 12);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1208, $i1211);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p1212 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i1213 := $load.i8($M.1, $p1212);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i1214 := $and.i8($i1213, $sub.i8(0, 33));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i1215 := $or.i8($i1214, 32);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1212, $i1215);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p1216 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(24, 8));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p1217 := $load.ref($M.16, $p1216);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p1219 := $add.ref($add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1219, $p1217);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1221, pch_udc_ep_ops);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p1222 := $bitcast.ref.ref($p1202);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p1223 := $add.ref($p1222, $mul.ref(128, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i1224 := $load.i8($M.1, $p1223);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i1225 := $zext.i8.i32($i1224);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i1226 := $ne.i32($i1225, 0);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1226} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i1226 == 1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i1228 := $load.i8($M.1, $p1227);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i1229 := $and.i8($i1228, 31);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i1230 := $zext.i8.i32($i1229);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i1231 := $add.i32($i1230, 16);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i1232 := $mul.i32($i1231, 32);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i1233 := $sext.i32.i64($i1232);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p1234 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(104, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1234, $i1233);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1));
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} usb_ep_set_maxpacket_limit($p1242, 512);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p1244 := $add.ref($add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p1246 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} list_add_tail($p1244, $p1246);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p1247 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(112, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} INIT_LIST_HEAD($p1247);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p1248 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p1249 := $bitcast.ref.ref($p1248);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p1250 := $add.ref($p1249, $mul.ref(25, 144));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(96, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1251, $p0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $p1252 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i1253 := $load.i8($M.1, $p1252);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i1254 := $and.i8($i1253, $sub.i8(0, 65));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i1255 := $or.i8($i1254, 64);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1252, $i1255);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i1257 := $load.i8($M.1, $p1256);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i1258 := $and.i8($i1257, $sub.i8(0, 32));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i1259 := $or.i8($i1258, 12);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1256, $i1259);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i1261 := $load.i8($M.1, $p1260);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i1262 := $and.i8($i1261, $sub.i8(0, 33));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1260, $i1262);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(25, 8));
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p1264 := $load.ref($M.16, $p1263);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p1266 := $add.ref($add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1266, $p1264);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p1268 := $add.ref($add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1268, pch_udc_ep_ops);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p1269 := $bitcast.ref.ref($p1250);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($p1269, $mul.ref(128, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i1271 := $load.i8($M.1, $p1270);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i1272 := $zext.i8.i32($i1271);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i1273 := $ne.i32($i1272, 0);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1273} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i1273 == 1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p1274 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i1275 := $load.i8($M.1, $p1274);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i1276 := $and.i8($i1275, 31);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i1277 := $zext.i8.i32($i1276);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i1278 := $add.i32($i1277, 16);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i1279 := $mul.i32($i1278, 32);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i1280 := $sext.i32.i64($i1279);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(104, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1281, $i1280);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p1289 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} usb_ep_set_maxpacket_limit($p1289, 512);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p1291 := $add.ref($add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} list_add_tail($p1291, $p1293);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p1294 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(112, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} INIT_LIST_HEAD($p1294);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p1296 := $bitcast.ref.ref($p1295);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p1297 := $add.ref($p1296, $mul.ref(26, 144));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(96, 1));
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1298, $p0);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i1300 := $load.i8($M.1, $p1299);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i1301 := $and.i8($i1300, $sub.i8(0, 65));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i1302 := $or.i8($i1301, 64);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1299, $i1302);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p1303 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i1304 := $load.i8($M.1, $p1303);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $i1305 := $and.i8($i1304, $sub.i8(0, 32));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i1306 := $or.i8($i1305, 13);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1303, $i1306);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p1307 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i1308 := $load.i8($M.1, $p1307);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i1309 := $and.i8($i1308, $sub.i8(0, 33));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i1310 := $or.i8($i1309, 32);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1307, $i1310);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p1311 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(26, 8));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p1312 := $load.ref($M.16, $p1311);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p1314 := $add.ref($add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1314, $p1312);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1316, pch_udc_ep_ops);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p1317 := $bitcast.ref.ref($p1297);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($p1317, $mul.ref(128, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i1319 := $load.i8($M.1, $p1318);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i1320 := $zext.i8.i32($i1319);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i1321 := $ne.i32($i1320, 0);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1321} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i1321 == 1);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p1322 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i1323 := $load.i8($M.1, $p1322);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i1324 := $and.i8($i1323, 31);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i1325 := $zext.i8.i32($i1324);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i1326 := $add.i32($i1325, 16);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i1327 := $mul.i32($i1326, 32);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i1328 := $sext.i32.i64($i1327);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p1329 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(104, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1329, $i1328);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p1337 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} usb_ep_set_maxpacket_limit($p1337, 512);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p1339 := $add.ref($add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p1341 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} list_add_tail($p1339, $p1341);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $p1342 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(112, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} INIT_LIST_HEAD($p1342);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p1343 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p1344 := $bitcast.ref.ref($p1343);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p1345 := $add.ref($p1344, $mul.ref(27, 144));
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p1346 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(96, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1346, $p0);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $p1347 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i1348 := $load.i8($M.1, $p1347);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i1349 := $and.i8($i1348, $sub.i8(0, 65));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i1350 := $or.i8($i1349, 64);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1347, $i1350);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p1351 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i1352 := $load.i8($M.1, $p1351);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i1353 := $and.i8($i1352, $sub.i8(0, 32));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i1354 := $or.i8($i1353, 13);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1351, $i1354);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p1355 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i1356 := $load.i8($M.1, $p1355);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i1357 := $and.i8($i1356, $sub.i8(0, 33));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1355, $i1357);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $p1358 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(27, 8));
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p1359 := $load.ref($M.16, $p1358);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p1361 := $add.ref($add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1361, $p1359);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p1363 := $add.ref($add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1363, pch_udc_ep_ops);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p1364 := $bitcast.ref.ref($p1345);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $p1365 := $add.ref($p1364, $mul.ref(128, 1));
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i1366 := $load.i8($M.1, $p1365);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i1367 := $zext.i8.i32($i1366);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i1368 := $ne.i32($i1367, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1368} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i1368 == 1);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p1369 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i1370 := $load.i8($M.1, $p1369);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i1371 := $and.i8($i1370, 31);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i1372 := $zext.i8.i32($i1371);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i1373 := $add.i32($i1372, 16);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i1374 := $mul.i32($i1373, 32);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i1375 := $sext.i32.i64($i1374);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p1376 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(104, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1376, $i1375);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p1384 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} usb_ep_set_maxpacket_limit($p1384, 512);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $p1386 := $add.ref($add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p1388 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} list_add_tail($p1386, $p1388);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p1389 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(112, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} INIT_LIST_HEAD($p1389);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p1390 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p1391 := $bitcast.ref.ref($p1390);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p1392 := $add.ref($p1391, $mul.ref(28, 144));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p1393 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(96, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1393, $p0);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p1394 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i1395 := $load.i8($M.1, $p1394);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i1396 := $and.i8($i1395, $sub.i8(0, 65));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i1397 := $or.i8($i1396, 64);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1394, $i1397);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p1398 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i1399 := $load.i8($M.1, $p1398);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i1400 := $and.i8($i1399, $sub.i8(0, 32));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i1401 := $or.i8($i1400, 14);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1398, $i1401);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p1402 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i1403 := $load.i8($M.1, $p1402);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i1404 := $and.i8($i1403, $sub.i8(0, 33));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i1405 := $or.i8($i1404, 32);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1402, $i1405);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p1406 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(28, 8));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p1407 := $load.ref($M.16, $p1406);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p1409 := $add.ref($add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1409, $p1407);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p1411 := $add.ref($add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1411, pch_udc_ep_ops);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $p1412 := $bitcast.ref.ref($p1392);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p1413 := $add.ref($p1412, $mul.ref(128, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i1414 := $load.i8($M.1, $p1413);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i1415 := $zext.i8.i32($i1414);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i1416 := $ne.i32($i1415, 0);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1416} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i1416 == 1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p1417 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i1418 := $load.i8($M.1, $p1417);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i1419 := $and.i8($i1418, 31);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i1420 := $zext.i8.i32($i1419);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i1421 := $add.i32($i1420, 16);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i1422 := $mul.i32($i1421, 32);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i1423 := $sext.i32.i64($i1422);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p1424 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(104, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1424, $i1423);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p1432 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} usb_ep_set_maxpacket_limit($p1432, 512);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p1434 := $add.ref($add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $p1436 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} list_add_tail($p1434, $p1436);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p1437 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(112, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} INIT_LIST_HEAD($p1437);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p1438 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p1439 := $bitcast.ref.ref($p1438);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p1440 := $add.ref($p1439, $mul.ref(29, 144));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p1441 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(96, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1441, $p0);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p1442 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i1443 := $load.i8($M.1, $p1442);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i1444 := $and.i8($i1443, $sub.i8(0, 65));
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i1445 := $or.i8($i1444, 64);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1442, $i1445);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p1446 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i1447 := $load.i8($M.1, $p1446);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i1448 := $and.i8($i1447, $sub.i8(0, 32));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i1449 := $or.i8($i1448, 14);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1446, $i1449);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p1450 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i1451 := $load.i8($M.1, $p1450);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i1452 := $and.i8($i1451, $sub.i8(0, 33));
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1450, $i1452);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p1453 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(29, 8));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p1454 := $load.ref($M.16, $p1453);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p1456 := $add.ref($add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1456, $p1454);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p1458 := $add.ref($add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1458, pch_udc_ep_ops);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p1459 := $bitcast.ref.ref($p1440);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($p1459, $mul.ref(128, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i1461 := $load.i8($M.1, $p1460);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i1462 := $zext.i8.i32($i1461);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i1463 := $ne.i32($i1462, 0);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1463} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i1463 == 1);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $p1464 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i1465 := $load.i8($M.1, $p1464);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i1466 := $and.i8($i1465, 31);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i1467 := $zext.i8.i32($i1466);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i1468 := $add.i32($i1467, 16);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i1469 := $mul.i32($i1468, 32);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i1470 := $sext.i32.i64($i1469);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p1471 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(104, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1471, $i1470);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p1479 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} usb_ep_set_maxpacket_limit($p1479, 512);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p1481 := $add.ref($add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $p1483 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} list_add_tail($p1481, $p1483);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p1484 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(112, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} INIT_LIST_HEAD($p1484);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p1485 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p1486 := $bitcast.ref.ref($p1485);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p1487 := $add.ref($p1486, $mul.ref(30, 144));
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $p1488 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(96, 1));
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1488, $p0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p1489 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i1490 := $load.i8($M.1, $p1489);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $i1491 := $and.i8($i1490, $sub.i8(0, 65));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i1492 := $or.i8($i1491, 64);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1489, $i1492);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p1493 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i1494 := $load.i8($M.1, $p1493);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i1495 := $and.i8($i1494, $sub.i8(0, 32));
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i1496 := $or.i8($i1495, 15);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1493, $i1496);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $p1497 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i1498 := $load.i8($M.1, $p1497);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i1499 := $and.i8($i1498, $sub.i8(0, 33));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i1500 := $or.i8($i1499, 32);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1497, $i1500);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p1501 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(30, 8));
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p1502 := $load.ref($M.16, $p1501);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p1504 := $add.ref($add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1504, $p1502);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p1506 := $add.ref($add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1506, pch_udc_ep_ops);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p1507 := $bitcast.ref.ref($p1487);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p1508 := $add.ref($p1507, $mul.ref(128, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i1509 := $load.i8($M.1, $p1508);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i1510 := $zext.i8.i32($i1509);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i1511 := $ne.i32($i1510, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1511} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i1511 == 1);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p1512 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i1513 := $load.i8($M.1, $p1512);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $i1514 := $and.i8($i1513, 31);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i1515 := $zext.i8.i32($i1514);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i1516 := $add.i32($i1515, 16);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i1517 := $mul.i32($i1516, 32);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i1518 := $sext.i32.i64($i1517);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p1519 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(104, 1));
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1519, $i1518);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p1527 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1));
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} usb_ep_set_maxpacket_limit($p1527, 512);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $p1529 := $add.ref($add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p1531 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} list_add_tail($p1529, $p1531);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p1532 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(112, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} INIT_LIST_HEAD($p1532);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p1533 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p1534 := $bitcast.ref.ref($p1533);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p1535 := $add.ref($p1534, $mul.ref(31, 144));
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p1536 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(96, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1536, $p0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p1537 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i1538 := $load.i8($M.1, $p1537);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i1539 := $and.i8($i1538, $sub.i8(0, 65));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i1540 := $or.i8($i1539, 64);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1537, $i1540);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p1541 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i1542 := $load.i8($M.1, $p1541);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i1543 := $and.i8($i1542, $sub.i8(0, 32));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i1544 := $or.i8($i1543, 15);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1541, $i1544);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p1545 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i1546 := $load.i8($M.1, $p1545);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i1547 := $and.i8($i1546, $sub.i8(0, 33));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p1545, $i1547);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p1548 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(31, 8));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p1549 := $load.ref($M.16, $p1548);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p1551 := $add.ref($add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1551, $p1549);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p1553 := $add.ref($add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p1553, pch_udc_ep_ops);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p1554 := $bitcast.ref.ref($p1535);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $p1555 := $add.ref($p1554, $mul.ref(128, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i1556 := $load.i8($M.1, $p1555);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i1557 := $zext.i8.i32($i1556);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i1558 := $ne.i32($i1557, 0);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1558} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i1558 == 1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p1559 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i1560 := $load.i8($M.1, $p1559);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i1561 := $and.i8($i1560, 31);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i1562 := $zext.i8.i32($i1561);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i1563 := $add.i32($i1562, 16);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i1564 := $mul.i32($i1563, 32);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i1565 := $sext.i32.i64($i1564);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p1566 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(104, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1566, $i1565);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p1574 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} usb_ep_set_maxpacket_limit($p1574, 512);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p1576 := $add.ref($add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p1578 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(96, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} list_add_tail($p1576, $p1578);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p1579 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(112, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} INIT_LIST_HEAD($p1579);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} usb_ep_set_maxpacket_limit($p88, 64);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(0, 1));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} usb_ep_set_maxpacket_limit($p91, 64);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} list_del_init($p95);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(1, 144)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} list_del_init($p99);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1584, 1)), $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p104, $p102);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(88, 1));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.1, $p106);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} INIT_LIST_HEAD($p108);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    return;

  $bb128:
    assume $i1558 == 1;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p1567 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(128, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i1568 := $load.i8($M.1, $p1567);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i1569 := $and.i8($i1568, 31);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i1570 := $zext.i8.i32($i1569);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i1571 := $mul.i32($i1570, 32);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i1572 := $sext.i32.i64($i1571);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p1573 := $add.ref($add.ref($p1534, $mul.ref(31, 144)), $mul.ref(104, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1573, $i1572);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb124:
    assume $i1511 == 1;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p1520 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(128, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i1521 := $load.i8($M.1, $p1520);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i1522 := $and.i8($i1521, 31);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i1523 := $zext.i8.i32($i1522);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i1524 := $mul.i32($i1523, 32);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i1525 := $sext.i32.i64($i1524);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($add.ref($p1486, $mul.ref(30, 144)), $mul.ref(104, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1526, $i1525);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume $i1463 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p1472 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(128, 1));
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i1473 := $load.i8($M.1, $p1472);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i1474 := $and.i8($i1473, 31);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i1475 := $zext.i8.i32($i1474);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i1476 := $mul.i32($i1475, 32);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i1477 := $sext.i32.i64($i1476);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p1478 := $add.ref($add.ref($p1439, $mul.ref(29, 144)), $mul.ref(104, 1));
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1478, $i1477);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb116:
    assume $i1416 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $p1425 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(128, 1));
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i1426 := $load.i8($M.1, $p1425);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i1427 := $and.i8($i1426, 31);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i1428 := $zext.i8.i32($i1427);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i1429 := $mul.i32($i1428, 32);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i1430 := $sext.i32.i64($i1429);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p1431 := $add.ref($add.ref($p1391, $mul.ref(28, 144)), $mul.ref(104, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1431, $i1430);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb112:
    assume $i1368 == 1;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p1377 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(128, 1));
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i1378 := $load.i8($M.1, $p1377);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i1379 := $and.i8($i1378, 31);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i1380 := $zext.i8.i32($i1379);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i1381 := $mul.i32($i1380, 32);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i1382 := $sext.i32.i64($i1381);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p1383 := $add.ref($add.ref($p1344, $mul.ref(27, 144)), $mul.ref(104, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1383, $i1382);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb108:
    assume $i1321 == 1;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p1330 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(128, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i1331 := $load.i8($M.1, $p1330);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i1332 := $and.i8($i1331, 31);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i1333 := $zext.i8.i32($i1332);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i1334 := $mul.i32($i1333, 32);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i1335 := $sext.i32.i64($i1334);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p1336 := $add.ref($add.ref($p1296, $mul.ref(26, 144)), $mul.ref(104, 1));
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1336, $i1335);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb104:
    assume $i1273 == 1;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(128, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i1283 := $load.i8($M.1, $p1282);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i1284 := $and.i8($i1283, 31);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i1285 := $zext.i8.i32($i1284);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i1286 := $mul.i32($i1285, 32);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i1287 := $sext.i32.i64($i1286);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $p1288 := $add.ref($add.ref($p1249, $mul.ref(25, 144)), $mul.ref(104, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1288, $i1287);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb100:
    assume $i1226 == 1;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p1235 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(128, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i1236 := $load.i8($M.1, $p1235);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i1237 := $and.i8($i1236, 31);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i1238 := $zext.i8.i32($i1237);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i1239 := $mul.i32($i1238, 32);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i1240 := $sext.i32.i64($i1239);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p1241 := $add.ref($add.ref($p1201, $mul.ref(24, 144)), $mul.ref(104, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1241, $i1240);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb96:
    assume $i1178 == 1;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p1187 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(128, 1));
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i1188 := $load.i8($M.1, $p1187);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i1189 := $and.i8($i1188, 31);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i1190 := $zext.i8.i32($i1189);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i1191 := $mul.i32($i1190, 32);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i1192 := $sext.i32.i64($i1191);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p1193 := $add.ref($add.ref($p1154, $mul.ref(23, 144)), $mul.ref(104, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1193, $i1192);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb92:
    assume $i1131 == 1;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(128, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i1141 := $load.i8($M.1, $p1140);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i1142 := $and.i8($i1141, 31);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i1143 := $zext.i8.i32($i1142);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i1144 := $mul.i32($i1143, 32);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i1145 := $sext.i32.i64($i1144);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($p1106, $mul.ref(22, 144)), $mul.ref(104, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1146, $i1145);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb88:
    assume $i1083 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p1092 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(128, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $i1093 := $load.i8($M.1, $p1092);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $i1094 := $and.i8($i1093, 31);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i1095 := $zext.i8.i32($i1094);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i1096 := $mul.i32($i1095, 32);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i1097 := $sext.i32.i64($i1096);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p1098 := $add.ref($add.ref($p1059, $mul.ref(21, 144)), $mul.ref(104, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1098, $i1097);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb84:
    assume $i1036 == 1;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $p1045 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(128, 1));
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i1046 := $load.i8($M.1, $p1045);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i1047 := $and.i8($i1046, 31);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i1048 := $zext.i8.i32($i1047);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i1049 := $mul.i32($i1048, 32);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i1050 := $sext.i32.i64($i1049);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p1051 := $add.ref($add.ref($p1011, $mul.ref(20, 144)), $mul.ref(104, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1051, $i1050);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb80:
    assume $i988 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(128, 1));
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i998 := $load.i8($M.1, $p997);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i999 := $and.i8($i998, 31);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i1000 := $zext.i8.i32($i999);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i1001 := $mul.i32($i1000, 32);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i1002 := $sext.i32.i64($i1001);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($add.ref($p964, $mul.ref(19, 144)), $mul.ref(104, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p1003, $i1002);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume $i941 == 1;
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p950 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(128, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i951 := $load.i8($M.1, $p950);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i952 := $and.i8($i951, 31);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i953 := $zext.i8.i32($i952);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i954 := $mul.i32($i953, 32);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i955 := $sext.i32.i64($i954);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p916, $mul.ref(18, 144)), $mul.ref(104, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p956, $i955);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume $i893 == 1;
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(128, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $i903 := $load.i8($M.1, $p902);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i904 := $and.i8($i903, 31);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i905 := $zext.i8.i32($i904);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i906 := $mul.i32($i905, 32);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i907 := $sext.i32.i64($i906);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($p869, $mul.ref(17, 144)), $mul.ref(104, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p908, $i907);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb68:
    assume $i846 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(128, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i856 := $load.i8($M.1, $p855);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i857 := $and.i8($i856, 31);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i858 := $zext.i8.i32($i857);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i859 := $mul.i32($i858, 32);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i860 := $sext.i32.i64($i859);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($p821, $mul.ref(16, 144)), $mul.ref(104, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p861, $i860);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb64:
    assume $i798 == 1;
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(128, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i808 := $load.i8($M.1, $p807);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i809 := $and.i8($i808, 31);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i810 := $zext.i8.i32($i809);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i811 := $mul.i32($i810, 32);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i812 := $sext.i32.i64($i811);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p774, $mul.ref(15, 144)), $mul.ref(104, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p813, $i812);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb60:
    assume $i751 == 1;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(128, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i761 := $load.i8($M.1, $p760);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i762 := $and.i8($i761, 31);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i763 := $zext.i8.i32($i762);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i764 := $mul.i32($i763, 32);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i765 := $sext.i32.i64($i764);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p726, $mul.ref(14, 144)), $mul.ref(104, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p766, $i765);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume $i703 == 1;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(128, 1));
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i713 := $load.i8($M.1, $p712);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i714 := $and.i8($i713, 31);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i715 := $zext.i8.i32($i714);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i716 := $mul.i32($i715, 32);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i717 := $sext.i32.i64($i716);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p679, $mul.ref(13, 144)), $mul.ref(104, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p718, $i717);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb52:
    assume $i656 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(128, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i666 := $load.i8($M.1, $p665);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i667 := $and.i8($i666, 31);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i668 := $zext.i8.i32($i667);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i669 := $mul.i32($i668, 32);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i670 := $sext.i32.i64($i669);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p631, $mul.ref(12, 144)), $mul.ref(104, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p671, $i670);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i608 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(128, 1));
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i618 := $load.i8($M.1, $p617);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i619 := $and.i8($i618, 31);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i620 := $zext.i8.i32($i619);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i621 := $mul.i32($i620, 32);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i622 := $sext.i32.i64($i621);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p584, $mul.ref(11, 144)), $mul.ref(104, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p623, $i622);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume $i561 == 1;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(128, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.1, $p570);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i572 := $and.i8($i571, 31);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i573 := $zext.i8.i32($i572);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i574 := $mul.i32($i573, 32);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i575 := $sext.i32.i64($i574);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p536, $mul.ref(10, 144)), $mul.ref(104, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p576, $i575);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb40:
    assume $i513 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(128, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i523 := $load.i8($M.1, $p522);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i524 := $and.i8($i523, 31);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i525 := $zext.i8.i32($i524);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i526 := $mul.i32($i525, 32);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i527 := $sext.i32.i64($i526);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p489, $mul.ref(9, 144)), $mul.ref(104, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p528, $i527);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i466 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(128, 1));
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i476 := $load.i8($M.1, $p475);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i477 := $and.i8($i476, 31);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i478 := $zext.i8.i32($i477);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i479 := $mul.i32($i478, 32);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i480 := $sext.i32.i64($i479);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p441, $mul.ref(8, 144)), $mul.ref(104, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p481, $i480);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i418 == 1;
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(128, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i428 := $load.i8($M.1, $p427);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i429 := $and.i8($i428, 31);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i431 := $mul.i32($i430, 32);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i432 := $sext.i32.i64($i431);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p394, $mul.ref(7, 144)), $mul.ref(104, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p433, $i432);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb28:
    assume $i371 == 1;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(128, 1));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.1, $p380);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i382 := $and.i8($i381, 31);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i383 := $zext.i8.i32($i382);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i384 := $mul.i32($i383, 32);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i385 := $sext.i32.i64($i384);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p346, $mul.ref(6, 144)), $mul.ref(104, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p386, $i385);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume $i323 == 1;
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(128, 1));
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.1, $p332);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i334 := $and.i8($i333, 31);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i335 := $zext.i8.i32($i334);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i336 := $mul.i32($i335, 32);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i337 := $sext.i32.i64($i336);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p299, $mul.ref(5, 144)), $mul.ref(104, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p338, $i337);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i276 == 1;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(128, 1));
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.1, $p285);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i287 := $and.i8($i286, 31);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i289 := $mul.i32($i288, 32);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i290 := $sext.i32.i64($i289);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p251, $mul.ref(4, 144)), $mul.ref(104, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p291, $i290);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i228 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(128, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.1, $p237);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i239 := $and.i8($i238, 31);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i241 := $mul.i32($i240, 32);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i242 := $sext.i32.i64($i241);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p204, $mul.ref(3, 144)), $mul.ref(104, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p243, $i242);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i181 == 1;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(128, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.1, $p190);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i192 := $and.i8($i191, 31);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i194 := $mul.i32($i193, 32);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i195 := $sext.i32.i64($i194);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p156, $mul.ref(2, 144)), $mul.ref(104, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p196, $i195);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i133 == 1;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(128, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.1, $p142);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i144 := $and.i8($i143, 31);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i146 := $mul.i32($i145, 32);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i146);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p110, $mul.ref(1, 144)), $mul.ref(104, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p148, $i147);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb3:
    assume $i64 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.1, $p65);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i67 := $and.i8($i66, 31);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i69 := $mul.i32($i68, 32);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p41, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p71, $i70);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const pch_vbus_gpio_init: ref;

axiom pch_vbus_gpio_init == $sub.ref(0, 353557);

procedure pch_vbus_gpio_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.14, assertsPassed, $M.5, $M.16;



implementation pch_vbus_gpio_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i1;
  var $i12: i1;
  var $i13: i8;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p37: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $p65: ref;
  var $i11: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1052} {:cexpr "pch_vbus_gpio_init:arg:vbus_gpio_port___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p7, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i12 := gpio_is_valid($i1);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i8($i12);
    call {:si_unique_call 1054} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 1055} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $i18 := gpio_request($i1, .str.72);
    call {:si_unique_call 1058} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p22, $i1);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} vslice_dummy_var_44 := gpio_direction_input($i1);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(8, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __init_work($p25, 0);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p26, 137438953408);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.1;
    cmdloc_dummy_var_15 := $M.1;
    call {:si_unique_call 1062} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p30, $p31, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_16;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(8, 1)), $mul.ref(32, 1));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} lockdep_init_map($p34, .str.74, $p2, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} INIT_LIST_HEAD($p37);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(8, 1)), $mul.ref(24, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, pch_vbus_gpio_work_fall);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i41 := gpio_to_irq($i1);
    call {:si_unique_call 1066} {:cexpr "irq_num"} boogie_si_record_i32($i41);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 0);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} vslice_dummy_var_45 := irq_set_irq_type($i41, 3);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i45 := ldv_request_irq_102($i41, pch_vbus_gpio_irq, 0, .str.75, $p44);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 1069} {:cexpr "err"} boogie_si_record_i32($i45);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_46 := printk.ref.ref.i32.i32(.str.77, .str.71, $i41, $i45);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p48, $i41);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(88, 1));
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} __init_work($p50, 0);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p51, 137438953408);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p5);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.1;
    cmdloc_dummy_var_18 := $M.1;
    call {:si_unique_call 1071} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p55, $p56, 8, $zext.i32.i64(8), 0 == 1);
    $M.1 := cmdloc_dummy_var_19;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(88, 1)), $mul.ref(32, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} lockdep_init_map($p59, .str.76, $p4, 0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} INIT_LIST_HEAD($p62);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(88, 1)), $mul.ref(24, 1));
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, pch_vbus_gpio_work_rise);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_43 := printk.ref.ref.i32.i32(.str.73, .str.71, $i1, $i18);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} vslice_dummy_var_42 := printk.ref.ref.i32(.str.70, .str.71, $i1);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;
}



const gpio_is_valid: ref;

axiom gpio_is_valid == $sub.ref(0, 354589);

procedure gpio_is_valid($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation gpio_is_valid($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} {:cexpr "gpio_is_valid:arg:number"} boogie_si_record_i32($i0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 511);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gpio_request: ref;

axiom gpio_request == $sub.ref(0, 355621);

procedure gpio_request($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_request($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1076} {:cexpr "gpio_request:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1077} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1078} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpio_direction_input: ref;

axiom gpio_direction_input == $sub.ref(0, 356653);

procedure gpio_direction_input($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_direction_input($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} {:cexpr "gpio_direction_input:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $p1 := gpio_to_desc($i0);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i2 := gpiod_direction_input($p1);
    call {:si_unique_call 1082} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 357685);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 358717);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    return;
}



const pch_vbus_gpio_work_fall: ref;

axiom pch_vbus_gpio_work_fall == $sub.ref(0, 359749);

procedure pch_vbus_gpio_work_fall($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, $M.5, assertsPassed;



implementation pch_vbus_gpio_work_fall($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i32;
  var $i103: i1;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i1;
  var $i108: i32;
  var $i109: i1;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i1;
  var $i144: i32;
  var $i145: i1;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i1;
  var $i168: i32;
  var $i169: i1;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i1;
  var $i174: i32;
  var $i175: i1;
  var $i176: i1;
  var $i177: i32;
  var $i178: i1;
  var $i179: i1;
  var $i180: i32;
  var $i181: i1;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i1;
  var $i192: i32;
  var $i193: i1;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i1;
  var $i198: i32;
  var $i199: i1;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $i206: i1;
  var $i207: i32;
  var $i208: i1;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i1;
  var $i216: i32;
  var $i217: i1;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i239: i1;
  var $i240: i32;
  var $i241: i1;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $i245: i1;
  var $i246: i32;
  var $i247: i1;
  var $i248: i1;
  var $i249: i32;
  var $i250: i1;
  var $i251: i1;
  var $i252: i32;
  var $i253: i1;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i1;
  var $i276: i32;
  var $i277: i1;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i281: i1;
  var $i282: i32;
  var $i283: i1;
  var $i284: i1;
  var $i285: i32;
  var $i286: i1;
  var $i287: i1;
  var $i288: i32;
  var $i289: i1;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $i293: i1;
  var $i294: i32;
  var $i295: i1;
  var $i296: i1;
  var $i297: i32;
  var $i298: i1;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i1;
  var $i306: i32;
  var $i307: i1;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i1;
  var $i312: i32;
  var $i313: i1;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i1;
  var $i318: i32;
  var $i319: i1;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i1;
  var $i324: i32;
  var $i325: i1;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $i329: i1;
  var $i330: i32;
  var $i331: i1;
  var $i332: i1;
  var $i333: i32;
  var $i334: i1;
  var $i335: i1;
  var $i336: i32;
  var $i337: i1;
  var $i338: i1;
  var $i339: i32;
  var $i340: i1;
  var $i341: i1;
  var $i342: i32;
  var $i343: i1;
  var $i344: i1;
  var $i345: i32;
  var $i346: i1;
  var $i347: i1;
  var $i348: i32;
  var $i349: i1;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $i353: i1;
  var $i354: i32;
  var $i355: i1;
  var $i356: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i1;
  var $i360: i32;
  var $i361: i1;
  var $i362: i1;
  var $i363: i32;
  var $i364: i1;
  var $i365: i1;
  var $i366: i32;
  var $i367: i1;
  var $i368: i1;
  var $i369: i32;
  var $i370: i1;
  var $i371: i1;
  var $i372: i32;
  var $i373: i1;
  var $i374: i1;
  var $i375: i32;
  var $i376: i1;
  var $i377: i1;
  var $i378: i32;
  var $i379: i1;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $i383: i1;
  var $i384: i32;
  var $i385: i1;
  var $i386: i1;
  var $i387: i32;
  var $i388: i1;
  var $i389: i1;
  var $i390: i32;
  var $i391: i1;
  var $i392: i1;
  var $i393: i32;
  var $i394: i1;
  var $i395: i1;
  var $i396: i32;
  var $i397: i1;
  var $i398: i1;
  var $i399: i32;
  var $i400: i1;
  var $i401: i1;
  var $i402: i32;
  var $i403: i1;
  var $i404: i1;
  var $i405: i32;
  var $i406: i1;
  var $i407: i1;
  var $i408: i32;
  var $i409: i1;
  var $i410: i1;
  var $i411: i32;
  var $i412: i1;
  var $i413: i1;
  var $i414: i32;
  var $i415: i1;
  var $i416: i1;
  var $i417: i32;
  var $i418: i1;
  var $i419: i1;
  var $i420: i32;
  var $i421: i1;
  var $i422: i1;
  var $i423: i32;
  var $i424: i1;
  var $i425: i1;
  var $i426: i32;
  var $i427: i1;
  var $i428: i1;
  var $i429: i32;
  var $i430: i1;
  var $i431: i1;
  var $i432: i32;
  var $i433: i1;
  var $i434: i1;
  var $i435: i32;
  var $i436: i1;
  var $i437: i1;
  var $i438: i32;
  var $i439: i1;
  var $i440: i1;
  var $i441: i32;
  var $i442: i1;
  var $i443: i1;
  var $i444: i32;
  var $i445: i1;
  var $i446: i1;
  var $i447: i32;
  var $i448: i1;
  var $i449: i1;
  var $i450: i32;
  var $i451: i1;
  var $i452: i1;
  var $i453: i32;
  var $i454: i1;
  var $i455: i1;
  var $i456: i32;
  var $i457: i1;
  var $i458: i1;
  var $i459: i32;
  var $i460: i1;
  var $i461: i1;
  var $i462: i32;
  var $i463: i1;
  var $i464: i1;
  var $i465: i32;
  var $i466: i1;
  var $i467: i1;
  var $i468: i32;
  var $i469: i1;
  var $i470: i1;
  var $i471: i32;
  var $i472: i1;
  var $i473: i1;
  var $i474: i32;
  var $i475: i1;
  var $i476: i1;
  var $i477: i32;
  var $i478: i1;
  var $i479: i1;
  var $i480: i32;
  var $i481: i1;
  var $i482: i1;
  var $i483: i32;
  var $i484: i1;
  var $i485: i1;
  var $i486: i32;
  var $i487: i1;
  var $i488: i1;
  var $i489: i32;
  var $i490: i1;
  var $i491: i1;
  var $i492: i32;
  var $i493: i1;
  var $i494: i1;
  var $i495: i32;
  var $i496: i1;
  var $i497: i1;
  var $i498: i32;
  var $i499: i1;
  var $i500: i1;
  var $i501: i32;
  var $i502: i1;
  var $i503: i1;
  var $i504: i32;
  var $i505: i1;
  var $i506: i1;
  var $i507: i32;
  var $i508: i1;
  var $i509: i1;
  var $i510: i32;
  var $i511: i1;
  var $i512: i1;
  var $i513: i32;
  var $i514: i1;
  var $i515: i1;
  var $i516: i32;
  var $i517: i1;
  var $i518: i1;
  var $i519: i32;
  var $i520: i1;
  var $i521: i1;
  var $i522: i32;
  var $i523: i1;
  var $i524: i1;
  var $i525: i32;
  var $i526: i1;
  var $i527: i1;
  var $i528: i32;
  var $i529: i1;
  var $i530: i1;
  var $i531: i32;
  var $i532: i1;
  var $i533: i1;
  var $i534: i32;
  var $i535: i1;
  var $i536: i1;
  var $i537: i32;
  var $i538: i1;
  var $i539: i1;
  var $i540: i32;
  var $i541: i1;
  var $i542: i1;
  var $i543: i32;
  var $i544: i1;
  var $i545: i1;
  var $i546: i32;
  var $i547: i1;
  var $i548: i1;
  var $i549: i32;
  var $i550: i1;
  var $i551: i1;
  var $i552: i32;
  var $i553: i1;
  var $i554: i1;
  var $i555: i32;
  var $i556: i1;
  var $i557: i1;
  var $i558: i32;
  var $i559: i1;
  var $i560: i1;
  var $i561: i32;
  var $i562: i1;
  var $i563: i1;
  var $i564: i32;
  var $i565: i1;
  var $i566: i1;
  var $i567: i32;
  var $i568: i1;
  var $i569: i1;
  var $i570: i32;
  var $i571: i1;
  var $i572: i1;
  var $i573: i32;
  var $i574: i1;
  var $i575: i1;
  var $i576: i32;
  var $i577: i1;
  var $i578: i1;
  var $i579: i32;
  var $i580: i1;
  var $i581: i1;
  var $i582: i32;
  var $i583: i1;
  var $i584: i1;
  var $i585: i32;
  var $i586: i1;
  var $i587: i1;
  var $i588: i32;
  var $i589: i1;
  var $i590: i1;
  var $i591: i32;
  var $i592: i1;
  var $i593: i1;
  var $i594: i32;
  var $i595: i1;
  var $i596: i1;
  var $i597: i32;
  var $i598: i1;
  var $i599: i1;
  var $i600: i32;
  var $i601: i1;
  var $i602: i1;
  var $i603: i32;
  var $i604: i1;
  var $i605: i1;
  var $i606: i32;
  var $i607: i1;
  var $i608: i1;
  var $i609: i32;
  var $i610: i1;
  var $i611: i1;
  var $i612: i32;
  var $i613: i1;
  var $i614: i1;
  var $i615: i32;
  var $i616: i1;
  var $i617: i1;
  var $i618: i32;
  var $i619: i1;
  var $i620: i1;
  var $i621: i32;
  var $i622: i1;
  var $i623: i1;
  var $i624: i32;
  var $i625: i1;
  var $i626: i1;
  var $i627: i32;
  var $i628: i1;
  var $i629: i1;
  var $i630: i32;
  var $i631: i1;
  var $i632: i1;
  var $i633: i32;
  var $i634: i1;
  var $i635: i1;
  var $i636: i32;
  var $i637: i1;
  var $i638: i1;
  var $i639: i32;
  var $i640: i1;
  var $i641: i1;
  var $i642: i32;
  var $i643: i1;
  var $i644: i1;
  var $i645: i32;
  var $i646: i1;
  var $i647: i1;
  var $i648: i32;
  var $i649: i1;
  var $i650: i1;
  var $i651: i32;
  var $i652: i1;
  var $i653: i1;
  var $i654: i32;
  var $i655: i1;
  var $i656: i1;
  var $i657: i32;
  var $i658: i1;
  var $i659: i1;
  var $i660: i32;
  var $i661: i1;
  var $i662: i1;
  var $i663: i32;
  var $i664: i1;
  var $i665: i1;
  var $i666: i32;
  var $i667: i1;
  var $i668: i1;
  var $i669: i32;
  var $i670: i1;
  var $i671: i1;
  var $i672: i32;
  var $i673: i1;
  var $i674: i1;
  var $i675: i32;
  var $i676: i1;
  var $i677: i1;
  var $i678: i32;
  var $i679: i1;
  var $i680: i1;
  var $i681: i32;
  var $i682: i1;
  var $i683: i1;
  var $i684: i32;
  var $i685: i1;
  var $i686: i1;
  var $i687: i32;
  var $i688: i1;
  var $i689: i1;
  var $i690: i32;
  var $i691: i1;
  var $i692: i1;
  var $i693: i32;
  var $i694: i1;
  var $i695: i1;
  var $i696: i32;
  var $i697: i1;
  var $i698: i1;
  var $i699: i32;
  var $i700: i1;
  var $i701: i1;
  var $i702: i32;
  var $i703: i1;
  var $i704: i1;
  var $i705: i32;
  var $i706: i1;
  var $i707: i1;
  var $i708: i32;
  var $i709: i1;
  var $i710: i1;
  var $i711: i32;
  var $i712: i1;
  var $i713: i1;
  var $i714: i32;
  var $i715: i1;
  var $i716: i1;
  var $i717: i32;
  var $i718: i1;
  var $i719: i1;
  var $i720: i32;
  var $i721: i1;
  var $i722: i1;
  var $i723: i32;
  var $i724: i1;
  var $i725: i1;
  var $i726: i32;
  var $i727: i1;
  var $i728: i1;
  var $i729: i32;
  var $i730: i1;
  var $i731: i1;
  var $i732: i32;
  var $i733: i1;
  var $i734: i1;
  var $i735: i32;
  var $i736: i1;
  var $i737: i1;
  var $i738: i32;
  var $i739: i1;
  var $i740: i1;
  var $i741: i32;
  var $i742: i1;
  var $i743: i1;
  var $i744: i32;
  var $i745: i1;
  var $i746: i1;
  var $i747: i32;
  var $i748: i1;
  var $i749: i1;
  var $i750: i32;
  var $i751: i1;
  var $i752: i1;
  var $i753: i32;
  var $i754: i1;
  var $i755: i1;
  var $i756: i32;
  var $i757: i1;
  var $i758: i1;
  var $i759: i32;
  var $i760: i1;
  var $i761: i1;
  var $i762: i32;
  var $i763: i1;
  var $i764: i1;
  var $i765: i32;
  var $i766: i1;
  var $i767: i1;
  var $i768: i32;
  var $i769: i1;
  var $i770: i1;
  var $i771: i32;
  var $i772: i1;
  var $i773: i1;
  var $i774: i32;
  var $i775: i1;
  var $i776: i1;
  var $i777: i32;
  var $i778: i1;
  var $i779: i1;
  var $i780: i32;
  var $i781: i1;
  var $i782: i1;
  var $i783: i32;
  var $i784: i1;
  var $i785: i1;
  var $i786: i32;
  var $i787: i1;
  var $i788: i1;
  var $i789: i32;
  var $i790: i1;
  var $i791: i1;
  var $i792: i32;
  var $i793: i1;
  var $i794: i1;
  var $i795: i32;
  var $i796: i1;
  var $i797: i1;
  var $i798: i32;
  var $i799: i1;
  var $i800: i1;
  var $i801: i32;
  var $i802: i1;
  var $i803: i1;
  var $i804: i32;
  var $i805: i1;
  var $i806: i1;
  var $i807: i32;
  var $i808: i1;
  var $i809: i1;
  var $i810: i32;
  var $i811: i1;
  var $i812: i1;
  var $i813: i32;
  var $i814: i1;
  var $i815: i1;
  var $i816: i32;
  var $i817: i1;
  var $i818: i1;
  var $i819: i32;
  var $i820: i1;
  var $i821: i1;
  var $i822: i32;
  var $i823: i1;
  var $i824: i1;
  var $i825: i32;
  var $i826: i1;
  var $i827: i1;
  var $i828: i32;
  var $i829: i1;
  var $i830: i1;
  var $i831: i32;
  var $i832: i1;
  var $i833: i1;
  var $i834: i32;
  var $i835: i1;
  var $i836: i1;
  var $i837: i32;
  var $i838: i1;
  var $i839: i1;
  var $i840: i32;
  var $i841: i1;
  var $i842: i1;
  var $i843: i32;
  var $i844: i1;
  var $i845: i1;
  var $i846: i32;
  var $i847: i1;
  var $i848: i1;
  var $i849: i32;
  var $i850: i1;
  var $i851: i1;
  var $i852: i32;
  var $i853: i1;
  var $i854: i1;
  var $i855: i32;
  var $i856: i1;
  var $i857: i1;
  var $i858: i32;
  var $i859: i1;
  var $i860: i1;
  var $i861: i32;
  var $i862: i1;
  var $i863: i1;
  var $i864: i32;
  var $i865: i1;
  var $i866: i1;
  var $i867: i32;
  var $i868: i1;
  var $i869: i1;
  var $i870: i32;
  var $i871: i1;
  var $i872: i1;
  var $i873: i32;
  var $i874: i1;
  var $i875: i1;
  var $i876: i32;
  var $i877: i1;
  var $i878: i1;
  var $i879: i32;
  var $i880: i1;
  var $i881: i1;
  var $i882: i32;
  var $i883: i1;
  var $i884: i1;
  var $i885: i32;
  var $i886: i1;
  var $i887: i1;
  var $i888: i32;
  var $i889: i1;
  var $i890: i1;
  var $i891: i32;
  var $i892: i1;
  var $i893: i1;
  var $i894: i32;
  var $i895: i1;
  var $i896: i1;
  var $i897: i32;
  var $i898: i1;
  var $i899: i1;
  var $i900: i32;
  var $i901: i1;
  var $i902: i1;
  var $i903: i32;
  var $i904: i1;
  var $i905: i1;
  var $i906: i32;
  var $i907: i1;
  var $i908: i1;
  var $i909: i32;
  var $i910: i1;
  var $i911: i1;
  var $i912: i32;
  var $i913: i1;
  var $i914: i1;
  var $i915: i32;
  var $i916: i1;
  var $i917: i1;
  var $i918: i32;
  var $i919: i1;
  var $i920: i1;
  var $i921: i32;
  var $i922: i1;
  var $i923: i1;
  var $i924: i32;
  var $i925: i1;
  var $i926: i1;
  var $i927: i32;
  var $i928: i1;
  var $i929: i1;
  var $i930: i32;
  var $i931: i1;
  var $i932: i1;
  var $i933: i32;
  var $i934: i1;
  var $i935: i1;
  var $i936: i32;
  var $i937: i1;
  var $i938: i1;
  var $i939: i32;
  var $i940: i1;
  var $i941: i1;
  var $i942: i32;
  var $i943: i1;
  var $i944: i1;
  var $i945: i32;
  var $i946: i1;
  var $i947: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 8), 168));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i10 := pch_vbus_gpio_get_value($p5);
    call {:si_unique_call 1087} {:cexpr "vbus"} boogie_si_record_i32($i10);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($sub.i32(0, 1), $i10);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __const_udelay(4295000);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} __const_udelay(4295000);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} __const_udelay(4295000);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} __const_udelay(4295000);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __const_udelay(4295000);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __const_udelay(4295000);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} __const_udelay(4295000);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __const_udelay(4295000);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __const_udelay(4295000);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i51 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i10, $i51);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(4295000);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} __const_udelay(4295000);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __const_udelay(4295000);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295000);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} __const_udelay(4295000);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(4295000);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __const_udelay(4295000);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} __const_udelay(4295000);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i54 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, $i54);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} __const_udelay(4295000);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(4295000);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(4295000);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} __const_udelay(4295000);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __const_udelay(4295000);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} __const_udelay(4295000);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} __const_udelay(4295000);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __const_udelay(4295000);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i57 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i54, $i57);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __const_udelay(4295000);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} __const_udelay(4295000);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(4295000);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} __const_udelay(4295000);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} __const_udelay(4295000);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} __const_udelay(4295000);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(4295000);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} __const_udelay(4295000);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(4295000);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i60 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i57, $i60);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb97, $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} __const_udelay(4295000);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __const_udelay(4295000);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} __const_udelay(4295000);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} __const_udelay(4295000);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} __const_udelay(4295000);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} __const_udelay(4295000);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} __const_udelay(4295000);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} __const_udelay(4295000);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} __const_udelay(4295000);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i63 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i60, $i63);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} __const_udelay(4295000);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __const_udelay(4295000);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} __const_udelay(4295000);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} __const_udelay(4295000);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __const_udelay(4295000);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} __const_udelay(4295000);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} __const_udelay(4295000);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} __const_udelay(4295000);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} __const_udelay(4295000);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i66 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i63, $i66);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} __const_udelay(4295000);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} __const_udelay(4295000);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __const_udelay(4295000);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} __const_udelay(4295000);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} __const_udelay(4295000);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} __const_udelay(4295000);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __const_udelay(4295000);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} __const_udelay(4295000);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} __const_udelay(4295000);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i69 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i66, $i69);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} __const_udelay(4295000);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} __const_udelay(4295000);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} __const_udelay(4295000);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} __const_udelay(4295000);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} __const_udelay(4295000);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} __const_udelay(4295000);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} __const_udelay(4295000);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} __const_udelay(4295000);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} __const_udelay(4295000);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i72 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i69, $i72);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} __const_udelay(4295000);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} __const_udelay(4295000);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} __const_udelay(4295000);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} __const_udelay(4295000);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} __const_udelay(4295000);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} __const_udelay(4295000);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} __const_udelay(4295000);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} __const_udelay(4295000);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} __const_udelay(4295000);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i75 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i72, $i75);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} __const_udelay(4295000);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} __const_udelay(4295000);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} __const_udelay(4295000);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} __const_udelay(4295000);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __const_udelay(4295000);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} __const_udelay(4295000);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} __const_udelay(4295000);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} __const_udelay(4295000);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} __const_udelay(4295000);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i78 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i75, $i78);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb211, $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} __const_udelay(4295000);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} __const_udelay(4295000);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} __const_udelay(4295000);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} __const_udelay(4295000);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __const_udelay(4295000);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __const_udelay(4295000);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} __const_udelay(4295000);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} __const_udelay(4295000);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} __const_udelay(4295000);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i81 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i78, $i81);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __const_udelay(4295000);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} __const_udelay(4295000);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} __const_udelay(4295000);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} __const_udelay(4295000);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} __const_udelay(4295000);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} __const_udelay(4295000);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} __const_udelay(4295000);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} __const_udelay(4295000);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} __const_udelay(4295000);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i84 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i81, $i84);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} __const_udelay(4295000);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __const_udelay(4295000);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} __const_udelay(4295000);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} __const_udelay(4295000);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __const_udelay(4295000);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} __const_udelay(4295000);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} __const_udelay(4295000);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} __const_udelay(4295000);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} __const_udelay(4295000);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i87 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i84, $i87);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb268, $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} __const_udelay(4295000);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} __const_udelay(4295000);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} __const_udelay(4295000);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} __const_udelay(4295000);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} __const_udelay(4295000);
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} __const_udelay(4295000);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} __const_udelay(4295000);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} __const_udelay(4295000);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} __const_udelay(4295000);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i90 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i87, $i90);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb287, $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} __const_udelay(4295000);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} __const_udelay(4295000);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} __const_udelay(4295000);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} __const_udelay(4295000);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} __const_udelay(4295000);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} __const_udelay(4295000);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} __const_udelay(4295000);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} __const_udelay(4295000);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} __const_udelay(4295000);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i93 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i90, $i93);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb306, $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    assume !($i94 == 1);
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} __const_udelay(4295000);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} __const_udelay(4295000);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} __const_udelay(4295000);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} __const_udelay(4295000);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} __const_udelay(4295000);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} __const_udelay(4295000);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} __const_udelay(4295000);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} __const_udelay(4295000);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} __const_udelay(4295000);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i96 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i93, $i96);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb325, $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} __const_udelay(4295000);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} __const_udelay(4295000);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} __const_udelay(4295000);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} __const_udelay(4295000);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} __const_udelay(4295000);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} __const_udelay(4295000);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} __const_udelay(4295000);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} __const_udelay(4295000);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} __const_udelay(4295000);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i99 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i96, $i99);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb344, $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} __const_udelay(4295000);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} __const_udelay(4295000);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} __const_udelay(4295000);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} __const_udelay(4295000);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} __const_udelay(4295000);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} __const_udelay(4295000);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} __const_udelay(4295000);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} __const_udelay(4295000);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} __const_udelay(4295000);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i102 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i99, $i102);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb363, $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} __const_udelay(4295000);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} __const_udelay(4295000);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} __const_udelay(4295000);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} __const_udelay(4295000);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} __const_udelay(4295000);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} __const_udelay(4295000);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} __const_udelay(4295000);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} __const_udelay(4295000);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} __const_udelay(4295000);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i105 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i102, $i105);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb382, $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} __const_udelay(4295000);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} __const_udelay(4295000);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} __const_udelay(4295000);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} __const_udelay(4295000);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} __const_udelay(4295000);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} __const_udelay(4295000);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} __const_udelay(4295000);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} __const_udelay(4295000);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} __const_udelay(4295000);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i108 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i105, $i108);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb401, $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} __const_udelay(4295000);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} __const_udelay(4295000);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} __const_udelay(4295000);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} __const_udelay(4295000);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} __const_udelay(4295000);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} __const_udelay(4295000);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} __const_udelay(4295000);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} __const_udelay(4295000);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} __const_udelay(4295000);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i111 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i108, $i111);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb420, $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} __const_udelay(4295000);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} __const_udelay(4295000);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} __const_udelay(4295000);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} __const_udelay(4295000);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} __const_udelay(4295000);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} __const_udelay(4295000);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} __const_udelay(4295000);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} __const_udelay(4295000);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} __const_udelay(4295000);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i114 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i111, $i114);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb439, $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} __const_udelay(4295000);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} __const_udelay(4295000);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} __const_udelay(4295000);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} __const_udelay(4295000);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} __const_udelay(4295000);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} __const_udelay(4295000);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} __const_udelay(4295000);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} __const_udelay(4295000);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} __const_udelay(4295000);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $i117 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i114, $i117);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb458, $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} __const_udelay(4295000);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} __const_udelay(4295000);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} __const_udelay(4295000);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} __const_udelay(4295000);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} __const_udelay(4295000);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} __const_udelay(4295000);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} __const_udelay(4295000);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} __const_udelay(4295000);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} __const_udelay(4295000);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i120 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i117, $i120);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb477, $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} __const_udelay(4295000);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} __const_udelay(4295000);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} __const_udelay(4295000);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} __const_udelay(4295000);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} __const_udelay(4295000);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} __const_udelay(4295000);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} __const_udelay(4295000);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} __const_udelay(4295000);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} __const_udelay(4295000);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $i123 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i120, $i123);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb496, $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} __const_udelay(4295000);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} __const_udelay(4295000);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} __const_udelay(4295000);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} __const_udelay(4295000);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} __const_udelay(4295000);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} __const_udelay(4295000);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} __const_udelay(4295000);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} __const_udelay(4295000);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} __const_udelay(4295000);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $i126 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i123, $i126);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb515, $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} __const_udelay(4295000);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} __const_udelay(4295000);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} __const_udelay(4295000);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} __const_udelay(4295000);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} __const_udelay(4295000);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} __const_udelay(4295000);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} __const_udelay(4295000);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} __const_udelay(4295000);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} __const_udelay(4295000);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $i129 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i126, $i129);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb534, $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} __const_udelay(4295000);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} __const_udelay(4295000);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} __const_udelay(4295000);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    goto $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} __const_udelay(4295000);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} __const_udelay(4295000);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} __const_udelay(4295000);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} __const_udelay(4295000);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} __const_udelay(4295000);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} __const_udelay(4295000);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i132 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i129, $i132);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb553, $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} __const_udelay(4295000);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} __const_udelay(4295000);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} __const_udelay(4295000);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} __const_udelay(4295000);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} __const_udelay(4295000);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} __const_udelay(4295000);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} __const_udelay(4295000);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} __const_udelay(4295000);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb568;

  $bb568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} __const_udelay(4295000);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i135 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i132, $i135);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb572, $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} __const_udelay(4295000);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} __const_udelay(4295000);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} __const_udelay(4295000);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} __const_udelay(4295000);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} __const_udelay(4295000);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} __const_udelay(4295000);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} __const_udelay(4295000);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} __const_udelay(4295000);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} __const_udelay(4295000);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $i138 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i135, $i138);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb591, $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} __const_udelay(4295000);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} __const_udelay(4295000);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} __const_udelay(4295000);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} __const_udelay(4295000);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} __const_udelay(4295000);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} __const_udelay(4295000);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} __const_udelay(4295000);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} __const_udelay(4295000);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} __const_udelay(4295000);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i141 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i138, $i141);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i142} true;
    goto $bb610, $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} __const_udelay(4295000);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} __const_udelay(4295000);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} __const_udelay(4295000);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} __const_udelay(4295000);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} __const_udelay(4295000);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} __const_udelay(4295000);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} __const_udelay(4295000);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} __const_udelay(4295000);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} __const_udelay(4295000);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i144 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i141, $i144);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb629, $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} __const_udelay(4295000);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} __const_udelay(4295000);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} __const_udelay(4295000);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} __const_udelay(4295000);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} __const_udelay(4295000);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} __const_udelay(4295000);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} __const_udelay(4295000);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} __const_udelay(4295000);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} __const_udelay(4295000);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} $i147 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i144, $i147);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb648, $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} __const_udelay(4295000);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} __const_udelay(4295000);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} __const_udelay(4295000);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} __const_udelay(4295000);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} __const_udelay(4295000);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} __const_udelay(4295000);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} __const_udelay(4295000);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} __const_udelay(4295000);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} __const_udelay(4295000);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} $i150 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i147, $i150);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb667, $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} __const_udelay(4295000);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} __const_udelay(4295000);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} __const_udelay(4295000);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} __const_udelay(4295000);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} __const_udelay(4295000);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} __const_udelay(4295000);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} __const_udelay(4295000);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} __const_udelay(4295000);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} __const_udelay(4295000);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $i153 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i150, $i153);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb686, $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} __const_udelay(4295000);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} __const_udelay(4295000);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} __const_udelay(4295000);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} __const_udelay(4295000);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} __const_udelay(4295000);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} __const_udelay(4295000);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} __const_udelay(4295000);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} __const_udelay(4295000);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} __const_udelay(4295000);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} $i156 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i153, $i156);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb705, $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    assume !($i157 == 1);
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} __const_udelay(4295000);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} __const_udelay(4295000);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} __const_udelay(4295000);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} __const_udelay(4295000);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} __const_udelay(4295000);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} __const_udelay(4295000);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} __const_udelay(4295000);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} __const_udelay(4295000);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} __const_udelay(4295000);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i159 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i156, $i159);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb724, $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} __const_udelay(4295000);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} __const_udelay(4295000);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} __const_udelay(4295000);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} __const_udelay(4295000);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} __const_udelay(4295000);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} __const_udelay(4295000);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} __const_udelay(4295000);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} __const_udelay(4295000);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} __const_udelay(4295000);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $i162 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i159, $i162);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb743, $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    assume !($i163 == 1);
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} __const_udelay(4295000);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} __const_udelay(4295000);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} __const_udelay(4295000);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} __const_udelay(4295000);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} __const_udelay(4295000);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} __const_udelay(4295000);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} __const_udelay(4295000);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} __const_udelay(4295000);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} __const_udelay(4295000);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i165 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i162, $i165);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb762, $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} __const_udelay(4295000);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} __const_udelay(4295000);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} __const_udelay(4295000);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    goto $bb772;

  $bb772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} __const_udelay(4295000);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} __const_udelay(4295000);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} __const_udelay(4295000);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} __const_udelay(4295000);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} __const_udelay(4295000);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} __const_udelay(4295000);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} $i168 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i165, $i168);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb781, $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} __const_udelay(4295000);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} __const_udelay(4295000);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} __const_udelay(4295000);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} __const_udelay(4295000);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} __const_udelay(4295000);
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} __const_udelay(4295000);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} __const_udelay(4295000);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} __const_udelay(4295000);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} __const_udelay(4295000);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $i171 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i168, $i171);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb800, $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} __const_udelay(4295000);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} __const_udelay(4295000);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} __const_udelay(4295000);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} __const_udelay(4295000);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} __const_udelay(4295000);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} __const_udelay(4295000);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} __const_udelay(4295000);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} __const_udelay(4295000);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} __const_udelay(4295000);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $i174 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i171, $i174);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb819, $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} __const_udelay(4295000);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} __const_udelay(4295000);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} __const_udelay(4295000);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} __const_udelay(4295000);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} __const_udelay(4295000);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} __const_udelay(4295000);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} __const_udelay(4295000);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} __const_udelay(4295000);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} __const_udelay(4295000);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} $i177 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i174, $i177);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb838, $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    assume !($i178 == 1);
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} __const_udelay(4295000);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} __const_udelay(4295000);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} __const_udelay(4295000);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} __const_udelay(4295000);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} __const_udelay(4295000);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} __const_udelay(4295000);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} __const_udelay(4295000);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} __const_udelay(4295000);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} __const_udelay(4295000);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    goto $bb854;

  $bb854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb855;

  $bb855:
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $i180 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i177, $i180);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb857, $bb858;

  $bb858:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb859;

  $bb859:
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} __const_udelay(4295000);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} __const_udelay(4295000);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    goto $bb866;

  $bb866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} __const_udelay(4295000);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto $bb867;

  $bb867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} __const_udelay(4295000);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} __const_udelay(4295000);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} __const_udelay(4295000);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    goto $bb870;

  $bb870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} __const_udelay(4295000);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    goto $bb871;

  $bb871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} __const_udelay(4295000);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} __const_udelay(4295000);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} $i183 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i180, $i183);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb876, $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb878;

  $bb878:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    goto $bb882;

  $bb882:
    assume {:verifier.code 0} true;
    goto $bb883;

  $bb883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} __const_udelay(4295000);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} __const_udelay(4295000);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} __const_udelay(4295000);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} __const_udelay(4295000);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} __const_udelay(4295000);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} __const_udelay(4295000);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} __const_udelay(4295000);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto $bb890;

  $bb890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} __const_udelay(4295000);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb891;

  $bb891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} __const_udelay(4295000);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    goto $bb894;

  $bb894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i186 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i183, $i186);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb895, $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    assume !($i187 == 1);
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    goto $bb902;

  $bb902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} __const_udelay(4295000);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb903;

  $bb903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} __const_udelay(4295000);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} __const_udelay(4295000);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} __const_udelay(4295000);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb906;

  $bb906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} __const_udelay(4295000);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    goto $bb907;

  $bb907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} __const_udelay(4295000);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} __const_udelay(4295000);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} __const_udelay(4295000);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} __const_udelay(4295000);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i189 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i186, $i189);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb914, $bb915;

  $bb915:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb919;

  $bb919:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} __const_udelay(4295000);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} __const_udelay(4295000);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} __const_udelay(4295000);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} __const_udelay(4295000);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} __const_udelay(4295000);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    goto $bb926;

  $bb926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} __const_udelay(4295000);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} __const_udelay(4295000);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} __const_udelay(4295000);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} __const_udelay(4295000);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb931;

  $bb931:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $i192 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i189, $i192);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb933, $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    goto $bb938;

  $bb938:
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} __const_udelay(4295000);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} __const_udelay(4295000);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} __const_udelay(4295000);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    goto $bb943;

  $bb943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} __const_udelay(4295000);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} __const_udelay(4295000);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} __const_udelay(4295000);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} __const_udelay(4295000);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} __const_udelay(4295000);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} __const_udelay(4295000);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb950;

  $bb950:
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i195 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i192, $i195);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb952, $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} __const_udelay(4295000);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} __const_udelay(4295000);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} __const_udelay(4295000);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    goto $bb962;

  $bb962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} __const_udelay(4295000);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} __const_udelay(4295000);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} __const_udelay(4295000);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} __const_udelay(4295000);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} __const_udelay(4295000);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb967;

  $bb967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} __const_udelay(4295000);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $i198 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i195, $i198);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb971, $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} __const_udelay(4295000);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb979;

  $bb979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} __const_udelay(4295000);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} __const_udelay(4295000);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} __const_udelay(4295000);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} __const_udelay(4295000);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} __const_udelay(4295000);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} __const_udelay(4295000);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} __const_udelay(4295000);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    goto $bb986;

  $bb986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} __const_udelay(4295000);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i201 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i198, $i201);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb990, $bb991;

  $bb991:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} __const_udelay(4295000);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    goto $bb998;

  $bb998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} __const_udelay(4295000);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} __const_udelay(4295000);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} __const_udelay(4295000);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} __const_udelay(4295000);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} __const_udelay(4295000);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    goto $bb1003;

  $bb1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} __const_udelay(4295000);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} __const_udelay(4295000);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} __const_udelay(4295000);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $i204 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i201, $i204);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb1009, $bb1010;

  $bb1010:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    goto $bb1015;

  $bb1015:
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} __const_udelay(4295000);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} __const_udelay(4295000);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} __const_udelay(4295000);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} __const_udelay(4295000);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} __const_udelay(4295000);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} __const_udelay(4295000);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    goto $bb1022;

  $bb1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} __const_udelay(4295000);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    goto $bb1023;

  $bb1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} __const_udelay(4295000);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} __const_udelay(4295000);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1026:
    assume {:verifier.code 0} true;
    goto $bb1027;

  $bb1027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $i207 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i204, $i207);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb1028, $bb1029;

  $bb1029:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb1030;

  $bb1030:
    assume {:verifier.code 0} true;
    goto $bb1033;

  $bb1033:
    assume {:verifier.code 0} true;
    goto $bb1034;

  $bb1034:
    assume {:verifier.code 0} true;
    goto $bb1035;

  $bb1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} __const_udelay(4295000);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    goto $bb1036;

  $bb1036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} __const_udelay(4295000);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    goto $bb1037;

  $bb1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} __const_udelay(4295000);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    goto $bb1038;

  $bb1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} __const_udelay(4295000);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    goto $bb1039;

  $bb1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} __const_udelay(4295000);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    goto $bb1040;

  $bb1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} __const_udelay(4295000);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    goto $bb1041;

  $bb1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} __const_udelay(4295000);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} __const_udelay(4295000);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    goto $bb1043;

  $bb1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} __const_udelay(4295000);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1045;

  $bb1045:
    assume {:verifier.code 0} true;
    goto $bb1046;

  $bb1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $i210 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i207, $i210);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb1047, $bb1048;

  $bb1048:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb1049;

  $bb1049:
    assume {:verifier.code 0} true;
    goto $bb1052;

  $bb1052:
    assume {:verifier.code 0} true;
    goto $bb1053;

  $bb1053:
    assume {:verifier.code 0} true;
    goto $bb1054;

  $bb1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} __const_udelay(4295000);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb1055;

  $bb1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} __const_udelay(4295000);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    goto $bb1056;

  $bb1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} __const_udelay(4295000);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    goto $bb1057;

  $bb1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} __const_udelay(4295000);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    goto $bb1058;

  $bb1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} __const_udelay(4295000);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    goto $bb1059;

  $bb1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} __const_udelay(4295000);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    goto $bb1060;

  $bb1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} __const_udelay(4295000);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    goto $bb1061;

  $bb1061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} __const_udelay(4295000);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    goto $bb1062;

  $bb1062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} __const_udelay(4295000);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb1063;

  $bb1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1064;

  $bb1064:
    assume {:verifier.code 0} true;
    goto $bb1065;

  $bb1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i213 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i210, $i213);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i214} true;
    goto $bb1066, $bb1067;

  $bb1067:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb1068;

  $bb1068:
    assume {:verifier.code 0} true;
    goto $bb1071;

  $bb1071:
    assume {:verifier.code 0} true;
    goto $bb1072;

  $bb1072:
    assume {:verifier.code 0} true;
    goto $bb1073;

  $bb1073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} __const_udelay(4295000);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    goto $bb1074;

  $bb1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} __const_udelay(4295000);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    goto $bb1075;

  $bb1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} __const_udelay(4295000);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    goto $bb1076;

  $bb1076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} __const_udelay(4295000);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb1077;

  $bb1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} __const_udelay(4295000);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    goto $bb1078;

  $bb1078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} __const_udelay(4295000);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    goto $bb1079;

  $bb1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} __const_udelay(4295000);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb1080;

  $bb1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} __const_udelay(4295000);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    goto $bb1081;

  $bb1081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} __const_udelay(4295000);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    goto $bb1082;

  $bb1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1083;

  $bb1083:
    assume {:verifier.code 0} true;
    goto $bb1084;

  $bb1084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} $i216 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i213, $i216);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb1085, $bb1086;

  $bb1086:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb1087;

  $bb1087:
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1090:
    assume {:verifier.code 0} true;
    goto $bb1091;

  $bb1091:
    assume {:verifier.code 0} true;
    goto $bb1092;

  $bb1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} __const_udelay(4295000);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb1093;

  $bb1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} __const_udelay(4295000);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    goto $bb1094;

  $bb1094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} __const_udelay(4295000);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    goto $bb1095;

  $bb1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} __const_udelay(4295000);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    goto $bb1096;

  $bb1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} __const_udelay(4295000);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    goto $bb1097;

  $bb1097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} __const_udelay(4295000);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} __const_udelay(4295000);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    goto $bb1099;

  $bb1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} __const_udelay(4295000);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    goto $bb1100;

  $bb1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} __const_udelay(4295000);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    goto $bb1101;

  $bb1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1102;

  $bb1102:
    assume {:verifier.code 0} true;
    goto $bb1103;

  $bb1103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $i219 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i220 := $eq.i32($i216, $i219);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb1104, $bb1105;

  $bb1105:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb1106;

  $bb1106:
    assume {:verifier.code 0} true;
    goto $bb1109;

  $bb1109:
    assume {:verifier.code 0} true;
    goto $bb1110;

  $bb1110:
    assume {:verifier.code 0} true;
    goto $bb1111;

  $bb1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} __const_udelay(4295000);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    goto $bb1112;

  $bb1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1722} __const_udelay(4295000);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    goto $bb1113;

  $bb1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} __const_udelay(4295000);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    goto $bb1114;

  $bb1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} __const_udelay(4295000);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    goto $bb1115;

  $bb1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} __const_udelay(4295000);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    goto $bb1116;

  $bb1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} __const_udelay(4295000);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    goto $bb1117;

  $bb1117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} __const_udelay(4295000);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    goto $bb1118;

  $bb1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} __const_udelay(4295000);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    goto $bb1119;

  $bb1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} __const_udelay(4295000);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    goto $bb1120;

  $bb1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1121;

  $bb1121:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $i222 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i219, $i222);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb1123, $bb1124;

  $bb1124:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb1125;

  $bb1125:
    assume {:verifier.code 0} true;
    goto $bb1128;

  $bb1128:
    assume {:verifier.code 0} true;
    goto $bb1129;

  $bb1129:
    assume {:verifier.code 0} true;
    goto $bb1130;

  $bb1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} __const_udelay(4295000);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto $bb1131;

  $bb1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} __const_udelay(4295000);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    goto $bb1132;

  $bb1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} __const_udelay(4295000);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    goto $bb1133;

  $bb1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} __const_udelay(4295000);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    goto $bb1134;

  $bb1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} __const_udelay(4295000);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    goto $bb1135;

  $bb1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} __const_udelay(4295000);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    goto $bb1136;

  $bb1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} __const_udelay(4295000);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb1137;

  $bb1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} __const_udelay(4295000);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    goto $bb1138;

  $bb1138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} __const_udelay(4295000);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    goto $bb1139;

  $bb1139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1140;

  $bb1140:
    assume {:verifier.code 0} true;
    goto $bb1141;

  $bb1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i225 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i222, $i225);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb1142, $bb1143;

  $bb1143:
    assume {:verifier.code 0} true;
    assume !($i226 == 1);
    goto $bb1144;

  $bb1144:
    assume {:verifier.code 0} true;
    goto $bb1147;

  $bb1147:
    assume {:verifier.code 0} true;
    goto $bb1148;

  $bb1148:
    assume {:verifier.code 0} true;
    goto $bb1149;

  $bb1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} __const_udelay(4295000);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    goto $bb1150;

  $bb1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} __const_udelay(4295000);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    goto $bb1151;

  $bb1151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} __const_udelay(4295000);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    goto $bb1152;

  $bb1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} __const_udelay(4295000);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb1153;

  $bb1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} __const_udelay(4295000);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb1154;

  $bb1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} __const_udelay(4295000);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    goto $bb1155;

  $bb1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} __const_udelay(4295000);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb1156;

  $bb1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1750} __const_udelay(4295000);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    goto $bb1157;

  $bb1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} __const_udelay(4295000);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb1158;

  $bb1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1159;

  $bb1159:
    assume {:verifier.code 0} true;
    goto $bb1160;

  $bb1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $i228 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i225, $i228);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i229} true;
    goto $bb1161, $bb1162;

  $bb1162:
    assume {:verifier.code 0} true;
    assume !($i229 == 1);
    goto $bb1163;

  $bb1163:
    assume {:verifier.code 0} true;
    goto $bb1166;

  $bb1166:
    assume {:verifier.code 0} true;
    goto $bb1167;

  $bb1167:
    assume {:verifier.code 0} true;
    goto $bb1168;

  $bb1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} __const_udelay(4295000);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    goto $bb1169;

  $bb1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} __const_udelay(4295000);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb1170;

  $bb1170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} __const_udelay(4295000);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    goto $bb1171;

  $bb1171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} __const_udelay(4295000);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb1172;

  $bb1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} __const_udelay(4295000);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb1173;

  $bb1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} __const_udelay(4295000);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    goto $bb1174;

  $bb1174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} __const_udelay(4295000);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    goto $bb1175;

  $bb1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} __const_udelay(4295000);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb1176;

  $bb1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} __const_udelay(4295000);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    goto $bb1177;

  $bb1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1178;

  $bb1178:
    assume {:verifier.code 0} true;
    goto $bb1179;

  $bb1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $i231 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i228, $i231);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb1180, $bb1181;

  $bb1181:
    assume {:verifier.code 0} true;
    assume !($i232 == 1);
    goto $bb1182;

  $bb1182:
    assume {:verifier.code 0} true;
    goto $bb1185;

  $bb1185:
    assume {:verifier.code 0} true;
    goto $bb1186;

  $bb1186:
    assume {:verifier.code 0} true;
    goto $bb1187;

  $bb1187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} __const_udelay(4295000);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    goto $bb1188;

  $bb1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} __const_udelay(4295000);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb1189;

  $bb1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} __const_udelay(4295000);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    goto $bb1190;

  $bb1190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} __const_udelay(4295000);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    goto $bb1191;

  $bb1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} __const_udelay(4295000);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb1192;

  $bb1192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} __const_udelay(4295000);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    goto $bb1193;

  $bb1193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} __const_udelay(4295000);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb1194;

  $bb1194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} __const_udelay(4295000);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    goto $bb1195;

  $bb1195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} __const_udelay(4295000);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    goto $bb1196;

  $bb1196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1197;

  $bb1197:
    assume {:verifier.code 0} true;
    goto $bb1198;

  $bb1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i234 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i231, $i234);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i235} true;
    goto $bb1199, $bb1200;

  $bb1200:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb1201;

  $bb1201:
    assume {:verifier.code 0} true;
    goto $bb1204;

  $bb1204:
    assume {:verifier.code 0} true;
    goto $bb1205;

  $bb1205:
    assume {:verifier.code 0} true;
    goto $bb1206;

  $bb1206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} __const_udelay(4295000);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb1207;

  $bb1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} __const_udelay(4295000);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    goto $bb1208;

  $bb1208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} __const_udelay(4295000);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    goto $bb1209;

  $bb1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} __const_udelay(4295000);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} __const_udelay(4295000);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    goto $bb1211;

  $bb1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} __const_udelay(4295000);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    goto $bb1212;

  $bb1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} __const_udelay(4295000);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    goto $bb1213;

  $bb1213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} __const_udelay(4295000);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    goto $bb1214;

  $bb1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} __const_udelay(4295000);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb1215;

  $bb1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1216;

  $bb1216:
    assume {:verifier.code 0} true;
    goto $bb1217;

  $bb1217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $i237 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i234, $i237);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb1218, $bb1219;

  $bb1219:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb1220;

  $bb1220:
    assume {:verifier.code 0} true;
    goto $bb1223;

  $bb1223:
    assume {:verifier.code 0} true;
    goto $bb1224;

  $bb1224:
    assume {:verifier.code 0} true;
    goto $bb1225;

  $bb1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} __const_udelay(4295000);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    goto $bb1226;

  $bb1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} __const_udelay(4295000);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    goto $bb1227;

  $bb1227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} __const_udelay(4295000);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    goto $bb1228;

  $bb1228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} __const_udelay(4295000);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    goto $bb1229;

  $bb1229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} __const_udelay(4295000);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    goto $bb1230;

  $bb1230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} __const_udelay(4295000);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb1231;

  $bb1231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} __const_udelay(4295000);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    goto $bb1232;

  $bb1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} __const_udelay(4295000);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    goto $bb1233;

  $bb1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} __const_udelay(4295000);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    goto $bb1234;

  $bb1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1235;

  $bb1235:
    assume {:verifier.code 0} true;
    goto $bb1236;

  $bb1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1797} $i240 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i237, $i240);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb1237, $bb1238;

  $bb1238:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb1239;

  $bb1239:
    assume {:verifier.code 0} true;
    goto $bb1242;

  $bb1242:
    assume {:verifier.code 0} true;
    goto $bb1243;

  $bb1243:
    assume {:verifier.code 0} true;
    goto $bb1244;

  $bb1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} __const_udelay(4295000);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    goto $bb1245;

  $bb1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} __const_udelay(4295000);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    goto $bb1246;

  $bb1246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} __const_udelay(4295000);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb1247;

  $bb1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} __const_udelay(4295000);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    goto $bb1248;

  $bb1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} __const_udelay(4295000);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    goto $bb1249;

  $bb1249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} __const_udelay(4295000);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    goto $bb1250;

  $bb1250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} __const_udelay(4295000);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    goto $bb1251;

  $bb1251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} __const_udelay(4295000);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    goto $bb1252;

  $bb1252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} __const_udelay(4295000);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    goto $bb1253;

  $bb1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1254;

  $bb1254:
    assume {:verifier.code 0} true;
    goto $bb1255;

  $bb1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $i243 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i240, $i243);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i244} true;
    goto $bb1256, $bb1257;

  $bb1257:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb1258;

  $bb1258:
    assume {:verifier.code 0} true;
    goto $bb1261;

  $bb1261:
    assume {:verifier.code 0} true;
    goto $bb1262;

  $bb1262:
    assume {:verifier.code 0} true;
    goto $bb1263;

  $bb1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} __const_udelay(4295000);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    goto $bb1264;

  $bb1264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} __const_udelay(4295000);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    goto $bb1265;

  $bb1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} __const_udelay(4295000);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    goto $bb1266;

  $bb1266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} __const_udelay(4295000);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    goto $bb1267;

  $bb1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} __const_udelay(4295000);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    goto $bb1268;

  $bb1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} __const_udelay(4295000);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    goto $bb1269;

  $bb1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} __const_udelay(4295000);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    goto $bb1270;

  $bb1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} __const_udelay(4295000);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    goto $bb1271;

  $bb1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} __const_udelay(4295000);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    goto $bb1272;

  $bb1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1273;

  $bb1273:
    assume {:verifier.code 0} true;
    goto $bb1274;

  $bb1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} $i246 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i243, $i246);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb1275, $bb1276;

  $bb1276:
    assume {:verifier.code 0} true;
    assume !($i247 == 1);
    goto $bb1277;

  $bb1277:
    assume {:verifier.code 0} true;
    goto $bb1280;

  $bb1280:
    assume {:verifier.code 0} true;
    goto $bb1281;

  $bb1281:
    assume {:verifier.code 0} true;
    goto $bb1282;

  $bb1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} __const_udelay(4295000);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    goto $bb1283;

  $bb1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} __const_udelay(4295000);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    goto $bb1284;

  $bb1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1822} __const_udelay(4295000);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    goto $bb1285;

  $bb1285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} __const_udelay(4295000);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    goto $bb1286;

  $bb1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} __const_udelay(4295000);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    goto $bb1287;

  $bb1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} __const_udelay(4295000);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    goto $bb1288;

  $bb1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} __const_udelay(4295000);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    goto $bb1289;

  $bb1289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} __const_udelay(4295000);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb1290;

  $bb1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} __const_udelay(4295000);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    goto $bb1291;

  $bb1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1292;

  $bb1292:
    assume {:verifier.code 0} true;
    goto $bb1293;

  $bb1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $i249 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i246, $i249);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb1294, $bb1295;

  $bb1295:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb1296;

  $bb1296:
    assume {:verifier.code 0} true;
    goto $bb1299;

  $bb1299:
    assume {:verifier.code 0} true;
    goto $bb1300;

  $bb1300:
    assume {:verifier.code 0} true;
    goto $bb1301;

  $bb1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} __const_udelay(4295000);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    goto $bb1302;

  $bb1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1832} __const_udelay(4295000);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    goto $bb1303;

  $bb1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} __const_udelay(4295000);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    goto $bb1304;

  $bb1304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} __const_udelay(4295000);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    goto $bb1305;

  $bb1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} __const_udelay(4295000);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    goto $bb1306;

  $bb1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} __const_udelay(4295000);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    goto $bb1307;

  $bb1307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} __const_udelay(4295000);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    goto $bb1308;

  $bb1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} __const_udelay(4295000);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    goto $bb1309;

  $bb1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} __const_udelay(4295000);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    goto $bb1310;

  $bb1310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1311;

  $bb1311:
    assume {:verifier.code 0} true;
    goto $bb1312;

  $bb1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1841} $i252 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i253 := $eq.i32($i249, $i252);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb1313, $bb1314;

  $bb1314:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb1315;

  $bb1315:
    assume {:verifier.code 0} true;
    goto $bb1318;

  $bb1318:
    assume {:verifier.code 0} true;
    goto $bb1319;

  $bb1319:
    assume {:verifier.code 0} true;
    goto $bb1320;

  $bb1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} __const_udelay(4295000);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    goto $bb1321;

  $bb1321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} __const_udelay(4295000);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    goto $bb1322;

  $bb1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} __const_udelay(4295000);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    goto $bb1323;

  $bb1323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} __const_udelay(4295000);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb1324;

  $bb1324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} __const_udelay(4295000);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    goto $bb1325;

  $bb1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} __const_udelay(4295000);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb1326;

  $bb1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} __const_udelay(4295000);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    goto $bb1327;

  $bb1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} __const_udelay(4295000);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    goto $bb1328;

  $bb1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} __const_udelay(4295000);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    goto $bb1329;

  $bb1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1330;

  $bb1330:
    assume {:verifier.code 0} true;
    goto $bb1331;

  $bb1331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} $i255 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i252, $i255);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb1332, $bb1333;

  $bb1333:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb1334;

  $bb1334:
    assume {:verifier.code 0} true;
    goto $bb1337;

  $bb1337:
    assume {:verifier.code 0} true;
    goto $bb1338;

  $bb1338:
    assume {:verifier.code 0} true;
    goto $bb1339;

  $bb1339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} __const_udelay(4295000);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    goto $bb1340;

  $bb1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} __const_udelay(4295000);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    goto $bb1341;

  $bb1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} __const_udelay(4295000);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    goto $bb1342;

  $bb1342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} __const_udelay(4295000);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    goto $bb1343;

  $bb1343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1857} __const_udelay(4295000);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    goto $bb1344;

  $bb1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} __const_udelay(4295000);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    goto $bb1345;

  $bb1345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} __const_udelay(4295000);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    goto $bb1346;

  $bb1346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} __const_udelay(4295000);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    goto $bb1347;

  $bb1347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} __const_udelay(4295000);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    goto $bb1348;

  $bb1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1349;

  $bb1349:
    assume {:verifier.code 0} true;
    goto $bb1350;

  $bb1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i258 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i255, $i258);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb1351, $bb1352;

  $bb1352:
    assume {:verifier.code 0} true;
    assume !($i259 == 1);
    goto $bb1353;

  $bb1353:
    assume {:verifier.code 0} true;
    goto $bb1356;

  $bb1356:
    assume {:verifier.code 0} true;
    goto $bb1357;

  $bb1357:
    assume {:verifier.code 0} true;
    goto $bb1358;

  $bb1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} __const_udelay(4295000);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    goto $bb1359;

  $bb1359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} __const_udelay(4295000);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    goto $bb1360;

  $bb1360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} __const_udelay(4295000);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    goto $bb1361;

  $bb1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} __const_udelay(4295000);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    goto $bb1362;

  $bb1362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} __const_udelay(4295000);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    goto $bb1363;

  $bb1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} __const_udelay(4295000);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    goto $bb1364;

  $bb1364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} __const_udelay(4295000);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    goto $bb1365;

  $bb1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} __const_udelay(4295000);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    goto $bb1366;

  $bb1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} __const_udelay(4295000);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    goto $bb1367;

  $bb1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1368;

  $bb1368:
    assume {:verifier.code 0} true;
    goto $bb1369;

  $bb1369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} $i261 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i258, $i261);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb1370, $bb1371;

  $bb1371:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb1372;

  $bb1372:
    assume {:verifier.code 0} true;
    goto $bb1375;

  $bb1375:
    assume {:verifier.code 0} true;
    goto $bb1376;

  $bb1376:
    assume {:verifier.code 0} true;
    goto $bb1377;

  $bb1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} __const_udelay(4295000);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    goto $bb1378;

  $bb1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} __const_udelay(4295000);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    goto $bb1379;

  $bb1379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} __const_udelay(4295000);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    goto $bb1380;

  $bb1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} __const_udelay(4295000);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    goto $bb1381;

  $bb1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} __const_udelay(4295000);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    goto $bb1382;

  $bb1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} __const_udelay(4295000);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    goto $bb1383;

  $bb1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} __const_udelay(4295000);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    goto $bb1384;

  $bb1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} __const_udelay(4295000);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    goto $bb1385;

  $bb1385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} __const_udelay(4295000);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    goto $bb1386;

  $bb1386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1387;

  $bb1387:
    assume {:verifier.code 0} true;
    goto $bb1388;

  $bb1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} $i264 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i261, $i264);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb1389, $bb1390;

  $bb1390:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb1391;

  $bb1391:
    assume {:verifier.code 0} true;
    goto $bb1394;

  $bb1394:
    assume {:verifier.code 0} true;
    goto $bb1395;

  $bb1395:
    assume {:verifier.code 0} true;
    goto $bb1396;

  $bb1396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} __const_udelay(4295000);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    goto $bb1397;

  $bb1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} __const_udelay(4295000);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    goto $bb1398;

  $bb1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} __const_udelay(4295000);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    goto $bb1399;

  $bb1399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} __const_udelay(4295000);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    goto $bb1400;

  $bb1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} __const_udelay(4295000);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb1401;

  $bb1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} __const_udelay(4295000);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    goto $bb1402;

  $bb1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} __const_udelay(4295000);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    goto $bb1403;

  $bb1403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} __const_udelay(4295000);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    goto $bb1404;

  $bb1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} __const_udelay(4295000);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    goto $bb1405;

  $bb1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1406;

  $bb1406:
    assume {:verifier.code 0} true;
    goto $bb1407;

  $bb1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} $i267 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i264, $i267);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb1408, $bb1409;

  $bb1409:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb1410;

  $bb1410:
    assume {:verifier.code 0} true;
    goto $bb1413;

  $bb1413:
    assume {:verifier.code 0} true;
    goto $bb1414;

  $bb1414:
    assume {:verifier.code 0} true;
    goto $bb1415;

  $bb1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} __const_udelay(4295000);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    goto $bb1416;

  $bb1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} __const_udelay(4295000);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    goto $bb1417;

  $bb1417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} __const_udelay(4295000);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    goto $bb1418;

  $bb1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} __const_udelay(4295000);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    goto $bb1419;

  $bb1419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} __const_udelay(4295000);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    goto $bb1420;

  $bb1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} __const_udelay(4295000);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    goto $bb1421;

  $bb1421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} __const_udelay(4295000);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    goto $bb1422;

  $bb1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} __const_udelay(4295000);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    goto $bb1423;

  $bb1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} __const_udelay(4295000);
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    goto $bb1424;

  $bb1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1425;

  $bb1425:
    assume {:verifier.code 0} true;
    goto $bb1426;

  $bb1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1907} $i270 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i267, $i270);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb1427, $bb1428;

  $bb1428:
    assume {:verifier.code 0} true;
    assume !($i271 == 1);
    goto $bb1429;

  $bb1429:
    assume {:verifier.code 0} true;
    goto $bb1432;

  $bb1432:
    assume {:verifier.code 0} true;
    goto $bb1433;

  $bb1433:
    assume {:verifier.code 0} true;
    goto $bb1434;

  $bb1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} __const_udelay(4295000);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    goto $bb1435;

  $bb1435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} __const_udelay(4295000);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    goto $bb1436;

  $bb1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} __const_udelay(4295000);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    goto $bb1437;

  $bb1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} __const_udelay(4295000);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    goto $bb1438;

  $bb1438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} __const_udelay(4295000);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb1439;

  $bb1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} __const_udelay(4295000);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    goto $bb1440;

  $bb1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} __const_udelay(4295000);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    goto $bb1441;

  $bb1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} __const_udelay(4295000);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    goto $bb1442;

  $bb1442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} __const_udelay(4295000);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    goto $bb1443;

  $bb1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1917} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1444;

  $bb1444:
    assume {:verifier.code 0} true;
    goto $bb1445;

  $bb1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $i273 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i270, $i273);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb1446, $bb1447;

  $bb1447:
    assume {:verifier.code 0} true;
    assume !($i274 == 1);
    goto $bb1448;

  $bb1448:
    assume {:verifier.code 0} true;
    goto $bb1451;

  $bb1451:
    assume {:verifier.code 0} true;
    goto $bb1452;

  $bb1452:
    assume {:verifier.code 0} true;
    goto $bb1453;

  $bb1453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} __const_udelay(4295000);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    goto $bb1454;

  $bb1454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} __const_udelay(4295000);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    goto $bb1455;

  $bb1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1921} __const_udelay(4295000);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    goto $bb1456;

  $bb1456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} __const_udelay(4295000);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    goto $bb1457;

  $bb1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} __const_udelay(4295000);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    goto $bb1458;

  $bb1458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} __const_udelay(4295000);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    goto $bb1459;

  $bb1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1925} __const_udelay(4295000);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb1460;

  $bb1460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} __const_udelay(4295000);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    goto $bb1461;

  $bb1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1927} __const_udelay(4295000);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    goto $bb1462;

  $bb1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1463;

  $bb1463:
    assume {:verifier.code 0} true;
    goto $bb1464;

  $bb1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $i276 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i273, $i276);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb1465, $bb1466;

  $bb1466:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb1467;

  $bb1467:
    assume {:verifier.code 0} true;
    goto $bb1470;

  $bb1470:
    assume {:verifier.code 0} true;
    goto $bb1471;

  $bb1471:
    assume {:verifier.code 0} true;
    goto $bb1472;

  $bb1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} __const_udelay(4295000);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    goto $bb1473;

  $bb1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} __const_udelay(4295000);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    goto $bb1474;

  $bb1474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} __const_udelay(4295000);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    goto $bb1475;

  $bb1475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} __const_udelay(4295000);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb1476;

  $bb1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} __const_udelay(4295000);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    goto $bb1477;

  $bb1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} __const_udelay(4295000);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    goto $bb1478;

  $bb1478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} __const_udelay(4295000);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    goto $bb1479;

  $bb1479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} __const_udelay(4295000);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb1480;

  $bb1480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} __const_udelay(4295000);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    goto $bb1481;

  $bb1481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1482;

  $bb1482:
    assume {:verifier.code 0} true;
    goto $bb1483;

  $bb1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} $i279 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i276, $i279);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb1484, $bb1485;

  $bb1485:
    assume {:verifier.code 0} true;
    assume !($i280 == 1);
    goto $bb1486;

  $bb1486:
    assume {:verifier.code 0} true;
    goto $bb1489;

  $bb1489:
    assume {:verifier.code 0} true;
    goto $bb1490;

  $bb1490:
    assume {:verifier.code 0} true;
    goto $bb1491;

  $bb1491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} __const_udelay(4295000);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    goto $bb1492;

  $bb1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} __const_udelay(4295000);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    goto $bb1493;

  $bb1493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} __const_udelay(4295000);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    goto $bb1494;

  $bb1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} __const_udelay(4295000);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    goto $bb1495;

  $bb1495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} __const_udelay(4295000);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    goto $bb1496;

  $bb1496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} __const_udelay(4295000);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    goto $bb1497;

  $bb1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} __const_udelay(4295000);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    goto $bb1498;

  $bb1498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} __const_udelay(4295000);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    goto $bb1499;

  $bb1499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} __const_udelay(4295000);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    goto $bb1500;

  $bb1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1501;

  $bb1501:
    assume {:verifier.code 0} true;
    goto $bb1502;

  $bb1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} $i282 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i283 := $eq.i32($i279, $i282);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb1503, $bb1504;

  $bb1504:
    assume {:verifier.code 0} true;
    assume !($i283 == 1);
    goto $bb1505;

  $bb1505:
    assume {:verifier.code 0} true;
    goto $bb1508;

  $bb1508:
    assume {:verifier.code 0} true;
    goto $bb1509;

  $bb1509:
    assume {:verifier.code 0} true;
    goto $bb1510;

  $bb1510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} __const_udelay(4295000);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    goto $bb1511;

  $bb1511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} __const_udelay(4295000);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb1512;

  $bb1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} __const_udelay(4295000);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    goto $bb1513;

  $bb1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} __const_udelay(4295000);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    goto $bb1514;

  $bb1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} __const_udelay(4295000);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    goto $bb1515;

  $bb1515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} __const_udelay(4295000);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    goto $bb1516;

  $bb1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} __const_udelay(4295000);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    goto $bb1517;

  $bb1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} __const_udelay(4295000);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    goto $bb1518;

  $bb1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1960} __const_udelay(4295000);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    goto $bb1519;

  $bb1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1520;

  $bb1520:
    assume {:verifier.code 0} true;
    goto $bb1521;

  $bb1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} $i285 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i282, $i285);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb1522, $bb1523;

  $bb1523:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb1524;

  $bb1524:
    assume {:verifier.code 0} true;
    goto $bb1527;

  $bb1527:
    assume {:verifier.code 0} true;
    goto $bb1528;

  $bb1528:
    assume {:verifier.code 0} true;
    goto $bb1529;

  $bb1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1963} __const_udelay(4295000);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    goto $bb1530;

  $bb1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} __const_udelay(4295000);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    goto $bb1531;

  $bb1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} __const_udelay(4295000);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb1532;

  $bb1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} __const_udelay(4295000);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    goto $bb1533;

  $bb1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} __const_udelay(4295000);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    goto $bb1534;

  $bb1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} __const_udelay(4295000);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    goto $bb1535;

  $bb1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} __const_udelay(4295000);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    goto $bb1536;

  $bb1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} __const_udelay(4295000);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    goto $bb1537;

  $bb1537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} __const_udelay(4295000);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    goto $bb1538;

  $bb1538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1539;

  $bb1539:
    assume {:verifier.code 0} true;
    goto $bb1540;

  $bb1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} $i288 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i285, $i288);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb1541, $bb1542;

  $bb1542:
    assume {:verifier.code 0} true;
    assume !($i289 == 1);
    goto $bb1543;

  $bb1543:
    assume {:verifier.code 0} true;
    goto $bb1546;

  $bb1546:
    assume {:verifier.code 0} true;
    goto $bb1547;

  $bb1547:
    assume {:verifier.code 0} true;
    goto $bb1548;

  $bb1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} __const_udelay(4295000);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    goto $bb1549;

  $bb1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} __const_udelay(4295000);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    goto $bb1550;

  $bb1550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} __const_udelay(4295000);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    goto $bb1551;

  $bb1551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} __const_udelay(4295000);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    goto $bb1552;

  $bb1552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} __const_udelay(4295000);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    goto $bb1553;

  $bb1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} __const_udelay(4295000);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    goto $bb1554;

  $bb1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} __const_udelay(4295000);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    goto $bb1555;

  $bb1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} __const_udelay(4295000);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    goto $bb1556;

  $bb1556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} __const_udelay(4295000);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    goto $bb1557;

  $bb1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1558;

  $bb1558:
    assume {:verifier.code 0} true;
    goto $bb1559;

  $bb1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} $i291 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i288, $i291);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i292} true;
    goto $bb1560, $bb1561;

  $bb1561:
    assume {:verifier.code 0} true;
    assume !($i292 == 1);
    goto $bb1562;

  $bb1562:
    assume {:verifier.code 0} true;
    goto $bb1565;

  $bb1565:
    assume {:verifier.code 0} true;
    goto $bb1566;

  $bb1566:
    assume {:verifier.code 0} true;
    goto $bb1567;

  $bb1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} __const_udelay(4295000);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    goto $bb1568;

  $bb1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} __const_udelay(4295000);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    goto $bb1569;

  $bb1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} __const_udelay(4295000);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    goto $bb1570;

  $bb1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} __const_udelay(4295000);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb1571;

  $bb1571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} __const_udelay(4295000);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    goto $bb1572;

  $bb1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} __const_udelay(4295000);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    goto $bb1573;

  $bb1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} __const_udelay(4295000);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto $bb1574;

  $bb1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} __const_udelay(4295000);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    goto $bb1575;

  $bb1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} __const_udelay(4295000);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    goto $bb1576;

  $bb1576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1577;

  $bb1577:
    assume {:verifier.code 0} true;
    goto $bb1578;

  $bb1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} $i294 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i291, $i294);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb1579, $bb1580;

  $bb1580:
    assume {:verifier.code 0} true;
    assume !($i295 == 1);
    goto $bb1581;

  $bb1581:
    assume {:verifier.code 0} true;
    goto $bb1584;

  $bb1584:
    assume {:verifier.code 0} true;
    goto $bb1585;

  $bb1585:
    assume {:verifier.code 0} true;
    goto $bb1586;

  $bb1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} __const_udelay(4295000);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    goto $bb1587;

  $bb1587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} __const_udelay(4295000);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    goto $bb1588;

  $bb1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} __const_udelay(4295000);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    goto $bb1589;

  $bb1589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} __const_udelay(4295000);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    goto $bb1590;

  $bb1590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} __const_udelay(4295000);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    goto $bb1591;

  $bb1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} __const_udelay(4295000);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb1592;

  $bb1592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} __const_udelay(4295000);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    goto $bb1593;

  $bb1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} __const_udelay(4295000);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb1594;

  $bb1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} __const_udelay(4295000);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    goto $bb1595;

  $bb1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1596;

  $bb1596:
    assume {:verifier.code 0} true;
    goto $bb1597;

  $bb1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $i297 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i294, $i297);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb1598, $bb1599;

  $bb1599:
    assume {:verifier.code 0} true;
    assume !($i298 == 1);
    goto $bb1600;

  $bb1600:
    assume {:verifier.code 0} true;
    goto $bb1603;

  $bb1603:
    assume {:verifier.code 0} true;
    goto $bb1604;

  $bb1604:
    assume {:verifier.code 0} true;
    goto $bb1605;

  $bb1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} __const_udelay(4295000);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    goto $bb1606;

  $bb1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} __const_udelay(4295000);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    goto $bb1607;

  $bb1607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} __const_udelay(4295000);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    goto $bb1608;

  $bb1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} __const_udelay(4295000);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    goto $bb1609;

  $bb1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} __const_udelay(4295000);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    goto $bb1610;

  $bb1610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} __const_udelay(4295000);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    goto $bb1611;

  $bb1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} __const_udelay(4295000);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    goto $bb1612;

  $bb1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} __const_udelay(4295000);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    goto $bb1613;

  $bb1613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} __const_udelay(4295000);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    goto $bb1614;

  $bb1614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1615;

  $bb1615:
    assume {:verifier.code 0} true;
    goto $bb1616;

  $bb1616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} $i300 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i297, $i300);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb1617, $bb1618;

  $bb1618:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb1619;

  $bb1619:
    assume {:verifier.code 0} true;
    goto $bb1622;

  $bb1622:
    assume {:verifier.code 0} true;
    goto $bb1623;

  $bb1623:
    assume {:verifier.code 0} true;
    goto $bb1624;

  $bb1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} __const_udelay(4295000);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    goto $bb1625;

  $bb1625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} __const_udelay(4295000);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    goto $bb1626;

  $bb1626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} __const_udelay(4295000);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    goto $bb1627;

  $bb1627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} __const_udelay(4295000);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto $bb1628;

  $bb1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} __const_udelay(4295000);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    goto $bb1629;

  $bb1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} __const_udelay(4295000);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb1630;

  $bb1630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} __const_udelay(4295000);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    goto $bb1631;

  $bb1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} __const_udelay(4295000);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    goto $bb1632;

  $bb1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} __const_udelay(4295000);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb1633;

  $bb1633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1634;

  $bb1634:
    assume {:verifier.code 0} true;
    goto $bb1635;

  $bb1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} $i303 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i300, $i303);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb1636, $bb1637;

  $bb1637:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb1638;

  $bb1638:
    assume {:verifier.code 0} true;
    goto $bb1641;

  $bb1641:
    assume {:verifier.code 0} true;
    goto $bb1642;

  $bb1642:
    assume {:verifier.code 0} true;
    goto $bb1643;

  $bb1643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} __const_udelay(4295000);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    goto $bb1644;

  $bb1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} __const_udelay(4295000);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    goto $bb1645;

  $bb1645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} __const_udelay(4295000);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    goto $bb1646;

  $bb1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} __const_udelay(4295000);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    goto $bb1647;

  $bb1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} __const_udelay(4295000);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    goto $bb1648;

  $bb1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} __const_udelay(4295000);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    goto $bb1649;

  $bb1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} __const_udelay(4295000);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    goto $bb1650;

  $bb1650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} __const_udelay(4295000);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    goto $bb1651;

  $bb1651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} __const_udelay(4295000);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    goto $bb1652;

  $bb1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1653;

  $bb1653:
    assume {:verifier.code 0} true;
    goto $bb1654;

  $bb1654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} $i306 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i307 := $eq.i32($i303, $i306);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb1655, $bb1656;

  $bb1656:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb1657;

  $bb1657:
    assume {:verifier.code 0} true;
    goto $bb1660;

  $bb1660:
    assume {:verifier.code 0} true;
    goto $bb1661;

  $bb1661:
    assume {:verifier.code 0} true;
    goto $bb1662;

  $bb1662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} __const_udelay(4295000);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    goto $bb1663;

  $bb1663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} __const_udelay(4295000);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    goto $bb1664;

  $bb1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} __const_udelay(4295000);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    goto $bb1665;

  $bb1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} __const_udelay(4295000);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb1666;

  $bb1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} __const_udelay(4295000);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    goto $bb1667;

  $bb1667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} __const_udelay(4295000);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto $bb1668;

  $bb1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} __const_udelay(4295000);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    goto $bb1669;

  $bb1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} __const_udelay(4295000);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    goto $bb1670;

  $bb1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} __const_udelay(4295000);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    goto $bb1671;

  $bb1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1672;

  $bb1672:
    assume {:verifier.code 0} true;
    goto $bb1673;

  $bb1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} $i309 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i306, $i309);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb1674, $bb1675;

  $bb1675:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb1676;

  $bb1676:
    assume {:verifier.code 0} true;
    goto $bb1679;

  $bb1679:
    assume {:verifier.code 0} true;
    goto $bb1680;

  $bb1680:
    assume {:verifier.code 0} true;
    goto $bb1681;

  $bb1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} __const_udelay(4295000);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    goto $bb1682;

  $bb1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} __const_udelay(4295000);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    goto $bb1683;

  $bb1683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} __const_udelay(4295000);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    goto $bb1684;

  $bb1684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} __const_udelay(4295000);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    goto $bb1685;

  $bb1685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} __const_udelay(4295000);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    goto $bb1686;

  $bb1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} __const_udelay(4295000);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    goto $bb1687;

  $bb1687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} __const_udelay(4295000);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    goto $bb1688;

  $bb1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} __const_udelay(4295000);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    goto $bb1689;

  $bb1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} __const_udelay(4295000);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    goto $bb1690;

  $bb1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1691;

  $bb1691:
    assume {:verifier.code 0} true;
    goto $bb1692;

  $bb1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i312 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i313 := $eq.i32($i309, $i312);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i313} true;
    goto $bb1693, $bb1694;

  $bb1694:
    assume {:verifier.code 0} true;
    assume !($i313 == 1);
    goto $bb1695;

  $bb1695:
    assume {:verifier.code 0} true;
    goto $bb1698;

  $bb1698:
    assume {:verifier.code 0} true;
    goto $bb1699;

  $bb1699:
    assume {:verifier.code 0} true;
    goto $bb1700;

  $bb1700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} __const_udelay(4295000);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    goto $bb1701;

  $bb1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} __const_udelay(4295000);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    goto $bb1702;

  $bb1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} __const_udelay(4295000);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    goto $bb1703;

  $bb1703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} __const_udelay(4295000);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    goto $bb1704;

  $bb1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} __const_udelay(4295000);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    goto $bb1705;

  $bb1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} __const_udelay(4295000);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    goto $bb1706;

  $bb1706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} __const_udelay(4295000);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto $bb1707;

  $bb1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} __const_udelay(4295000);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    goto $bb1708;

  $bb1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} __const_udelay(4295000);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb1709;

  $bb1709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1710;

  $bb1710:
    assume {:verifier.code 0} true;
    goto $bb1711;

  $bb1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $i315 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    $i316 := $eq.i32($i312, $i315);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb1712, $bb1713;

  $bb1713:
    assume {:verifier.code 0} true;
    assume !($i316 == 1);
    goto $bb1714;

  $bb1714:
    assume {:verifier.code 0} true;
    goto $bb1717;

  $bb1717:
    assume {:verifier.code 0} true;
    goto $bb1718;

  $bb1718:
    assume {:verifier.code 0} true;
    goto $bb1719;

  $bb1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} __const_udelay(4295000);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    goto $bb1720;

  $bb1720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} __const_udelay(4295000);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    goto $bb1721;

  $bb1721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} __const_udelay(4295000);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    goto $bb1722;

  $bb1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} __const_udelay(4295000);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    goto $bb1723;

  $bb1723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} __const_udelay(4295000);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    goto $bb1724;

  $bb1724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} __const_udelay(4295000);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    goto $bb1725;

  $bb1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} __const_udelay(4295000);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    goto $bb1726;

  $bb1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} __const_udelay(4295000);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    goto $bb1727;

  $bb1727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} __const_udelay(4295000);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    goto $bb1728;

  $bb1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1729;

  $bb1729:
    assume {:verifier.code 0} true;
    goto $bb1730;

  $bb1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $i318 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i315, $i318);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb1731, $bb1732;

  $bb1732:
    assume {:verifier.code 0} true;
    assume !($i319 == 1);
    goto $bb1733;

  $bb1733:
    assume {:verifier.code 0} true;
    goto $bb1736;

  $bb1736:
    assume {:verifier.code 0} true;
    goto $bb1737;

  $bb1737:
    assume {:verifier.code 0} true;
    goto $bb1738;

  $bb1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} __const_udelay(4295000);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    goto $bb1739;

  $bb1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} __const_udelay(4295000);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    goto $bb1740;

  $bb1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} __const_udelay(4295000);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    goto $bb1741;

  $bb1741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} __const_udelay(4295000);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    goto $bb1742;

  $bb1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} __const_udelay(4295000);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    goto $bb1743;

  $bb1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} __const_udelay(4295000);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    goto $bb1744;

  $bb1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} __const_udelay(4295000);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    goto $bb1745;

  $bb1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} __const_udelay(4295000);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    goto $bb1746;

  $bb1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} __const_udelay(4295000);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    goto $bb1747;

  $bb1747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1748;

  $bb1748:
    assume {:verifier.code 0} true;
    goto $bb1749;

  $bb1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $i321 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i318, $i321);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb1750, $bb1751;

  $bb1751:
    assume {:verifier.code 0} true;
    assume !($i322 == 1);
    goto $bb1752;

  $bb1752:
    assume {:verifier.code 0} true;
    goto $bb1755;

  $bb1755:
    assume {:verifier.code 0} true;
    goto $bb1756;

  $bb1756:
    assume {:verifier.code 0} true;
    goto $bb1757;

  $bb1757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} __const_udelay(4295000);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    goto $bb1758;

  $bb1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} __const_udelay(4295000);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    goto $bb1759;

  $bb1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} __const_udelay(4295000);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    goto $bb1760;

  $bb1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} __const_udelay(4295000);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    goto $bb1761;

  $bb1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} __const_udelay(4295000);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    goto $bb1762;

  $bb1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} __const_udelay(4295000);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    goto $bb1763;

  $bb1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} __const_udelay(4295000);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    goto $bb1764;

  $bb1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} __const_udelay(4295000);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    goto $bb1765;

  $bb1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} __const_udelay(4295000);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    goto $bb1766;

  $bb1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1767;

  $bb1767:
    assume {:verifier.code 0} true;
    goto $bb1768;

  $bb1768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} $i324 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i321, $i324);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb1769, $bb1770;

  $bb1770:
    assume {:verifier.code 0} true;
    assume !($i325 == 1);
    goto $bb1771;

  $bb1771:
    assume {:verifier.code 0} true;
    goto $bb1774;

  $bb1774:
    assume {:verifier.code 0} true;
    goto $bb1775;

  $bb1775:
    assume {:verifier.code 0} true;
    goto $bb1776;

  $bb1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} __const_udelay(4295000);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    goto $bb1777;

  $bb1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} __const_udelay(4295000);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    goto $bb1778;

  $bb1778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} __const_udelay(4295000);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    goto $bb1779;

  $bb1779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} __const_udelay(4295000);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto $bb1780;

  $bb1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} __const_udelay(4295000);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    goto $bb1781;

  $bb1781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} __const_udelay(4295000);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    goto $bb1782;

  $bb1782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} __const_udelay(4295000);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    goto $bb1783;

  $bb1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} __const_udelay(4295000);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    goto $bb1784;

  $bb1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} __const_udelay(4295000);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    goto $bb1785;

  $bb1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1786;

  $bb1786:
    assume {:verifier.code 0} true;
    goto $bb1787;

  $bb1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $i327 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i328 := $eq.i32($i324, $i327);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb1788, $bb1789;

  $bb1789:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb1790;

  $bb1790:
    assume {:verifier.code 0} true;
    goto $bb1793;

  $bb1793:
    assume {:verifier.code 0} true;
    goto $bb1794;

  $bb1794:
    assume {:verifier.code 0} true;
    goto $bb1795;

  $bb1795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} __const_udelay(4295000);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    goto $bb1796;

  $bb1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} __const_udelay(4295000);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    goto $bb1797;

  $bb1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} __const_udelay(4295000);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    goto $bb1798;

  $bb1798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} __const_udelay(4295000);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    goto $bb1799;

  $bb1799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} __const_udelay(4295000);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    goto $bb1800;

  $bb1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} __const_udelay(4295000);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    goto $bb1801;

  $bb1801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} __const_udelay(4295000);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    goto $bb1802;

  $bb1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} __const_udelay(4295000);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    goto $bb1803;

  $bb1803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} __const_udelay(4295000);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    goto $bb1804;

  $bb1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1805;

  $bb1805:
    assume {:verifier.code 0} true;
    goto $bb1806;

  $bb1806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i330 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i327, $i330);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb1807, $bb1808;

  $bb1808:
    assume {:verifier.code 0} true;
    assume !($i331 == 1);
    goto $bb1809;

  $bb1809:
    assume {:verifier.code 0} true;
    goto $bb1812;

  $bb1812:
    assume {:verifier.code 0} true;
    goto $bb1813;

  $bb1813:
    assume {:verifier.code 0} true;
    goto $bb1814;

  $bb1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} __const_udelay(4295000);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    goto $bb1815;

  $bb1815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} __const_udelay(4295000);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    goto $bb1816;

  $bb1816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} __const_udelay(4295000);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb1817;

  $bb1817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} __const_udelay(4295000);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb1818;

  $bb1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} __const_udelay(4295000);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    goto $bb1819;

  $bb1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} __const_udelay(4295000);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    goto $bb1820;

  $bb1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} __const_udelay(4295000);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    goto $bb1821;

  $bb1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} __const_udelay(4295000);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    goto $bb1822;

  $bb1822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} __const_udelay(4295000);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    goto $bb1823;

  $bb1823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1824;

  $bb1824:
    assume {:verifier.code 0} true;
    goto $bb1825;

  $bb1825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $i333 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i330, $i333);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb1826, $bb1827;

  $bb1827:
    assume {:verifier.code 0} true;
    assume !($i334 == 1);
    goto $bb1828;

  $bb1828:
    assume {:verifier.code 0} true;
    goto $bb1831;

  $bb1831:
    assume {:verifier.code 0} true;
    goto $bb1832;

  $bb1832:
    assume {:verifier.code 0} true;
    goto $bb1833;

  $bb1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} __const_udelay(4295000);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    goto $bb1834;

  $bb1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} __const_udelay(4295000);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    goto $bb1835;

  $bb1835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} __const_udelay(4295000);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    goto $bb1836;

  $bb1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} __const_udelay(4295000);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    goto $bb1837;

  $bb1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} __const_udelay(4295000);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto $bb1838;

  $bb1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} __const_udelay(4295000);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    goto $bb1839;

  $bb1839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} __const_udelay(4295000);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb1840;

  $bb1840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} __const_udelay(4295000);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    goto $bb1841;

  $bb1841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} __const_udelay(4295000);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    goto $bb1842;

  $bb1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1843;

  $bb1843:
    assume {:verifier.code 0} true;
    goto $bb1844;

  $bb1844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $i336 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i333, $i336);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb1845, $bb1846;

  $bb1846:
    assume {:verifier.code 0} true;
    assume !($i337 == 1);
    goto $bb1847;

  $bb1847:
    assume {:verifier.code 0} true;
    goto $bb1850;

  $bb1850:
    assume {:verifier.code 0} true;
    goto $bb1851;

  $bb1851:
    assume {:verifier.code 0} true;
    goto $bb1852;

  $bb1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} __const_udelay(4295000);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    goto $bb1853;

  $bb1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} __const_udelay(4295000);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    goto $bb1854;

  $bb1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} __const_udelay(4295000);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    goto $bb1855;

  $bb1855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} __const_udelay(4295000);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    goto $bb1856;

  $bb1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} __const_udelay(4295000);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    goto $bb1857;

  $bb1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} __const_udelay(4295000);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    goto $bb1858;

  $bb1858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} __const_udelay(4295000);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto $bb1859;

  $bb1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} __const_udelay(4295000);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    goto $bb1860;

  $bb1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} __const_udelay(4295000);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    goto $bb1861;

  $bb1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1862;

  $bb1862:
    assume {:verifier.code 0} true;
    goto $bb1863;

  $bb1863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} $i339 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i336, $i339);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb1864, $bb1865;

  $bb1865:
    assume {:verifier.code 0} true;
    assume !($i340 == 1);
    goto $bb1866;

  $bb1866:
    assume {:verifier.code 0} true;
    goto $bb1869;

  $bb1869:
    assume {:verifier.code 0} true;
    goto $bb1870;

  $bb1870:
    assume {:verifier.code 0} true;
    goto $bb1871;

  $bb1871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} __const_udelay(4295000);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    goto $bb1872;

  $bb1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} __const_udelay(4295000);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    goto $bb1873;

  $bb1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} __const_udelay(4295000);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    goto $bb1874;

  $bb1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} __const_udelay(4295000);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    goto $bb1875;

  $bb1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} __const_udelay(4295000);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    goto $bb1876;

  $bb1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} __const_udelay(4295000);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    goto $bb1877;

  $bb1877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} __const_udelay(4295000);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    goto $bb1878;

  $bb1878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} __const_udelay(4295000);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    goto $bb1879;

  $bb1879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} __const_udelay(4295000);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    goto $bb1880;

  $bb1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1881;

  $bb1881:
    assume {:verifier.code 0} true;
    goto $bb1882;

  $bb1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} $i342 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i339, $i342);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb1883, $bb1884;

  $bb1884:
    assume {:verifier.code 0} true;
    assume !($i343 == 1);
    goto $bb1885;

  $bb1885:
    assume {:verifier.code 0} true;
    goto $bb1888;

  $bb1888:
    assume {:verifier.code 0} true;
    goto $bb1889;

  $bb1889:
    assume {:verifier.code 0} true;
    goto $bb1890;

  $bb1890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} __const_udelay(4295000);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    goto $bb1891;

  $bb1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} __const_udelay(4295000);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    goto $bb1892;

  $bb1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} __const_udelay(4295000);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    goto $bb1893;

  $bb1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} __const_udelay(4295000);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    goto $bb1894;

  $bb1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} __const_udelay(4295000);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    goto $bb1895;

  $bb1895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} __const_udelay(4295000);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    goto $bb1896;

  $bb1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} __const_udelay(4295000);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    goto $bb1897;

  $bb1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} __const_udelay(4295000);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    goto $bb1898;

  $bb1898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} __const_udelay(4295000);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    goto $bb1899;

  $bb1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1900;

  $bb1900:
    assume {:verifier.code 0} true;
    goto $bb1901;

  $bb1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} $i345 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i342, $i345);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i346} true;
    goto $bb1902, $bb1903;

  $bb1903:
    assume {:verifier.code 0} true;
    assume !($i346 == 1);
    goto $bb1904;

  $bb1904:
    assume {:verifier.code 0} true;
    goto $bb1907;

  $bb1907:
    assume {:verifier.code 0} true;
    goto $bb1908;

  $bb1908:
    assume {:verifier.code 0} true;
    goto $bb1909;

  $bb1909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} __const_udelay(4295000);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    goto $bb1910;

  $bb1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} __const_udelay(4295000);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    goto $bb1911;

  $bb1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} __const_udelay(4295000);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto $bb1912;

  $bb1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} __const_udelay(4295000);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    goto $bb1913;

  $bb1913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} __const_udelay(4295000);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    goto $bb1914;

  $bb1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} __const_udelay(4295000);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    goto $bb1915;

  $bb1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} __const_udelay(4295000);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    goto $bb1916;

  $bb1916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} __const_udelay(4295000);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    goto $bb1917;

  $bb1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} __const_udelay(4295000);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    goto $bb1918;

  $bb1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1919;

  $bb1919:
    assume {:verifier.code 0} true;
    goto $bb1920;

  $bb1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $i348 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i349 := $eq.i32($i345, $i348);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb1921, $bb1922;

  $bb1922:
    assume {:verifier.code 0} true;
    assume !($i349 == 1);
    goto $bb1923;

  $bb1923:
    assume {:verifier.code 0} true;
    goto $bb1926;

  $bb1926:
    assume {:verifier.code 0} true;
    goto $bb1927;

  $bb1927:
    assume {:verifier.code 0} true;
    goto $bb1928;

  $bb1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} __const_udelay(4295000);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    goto $bb1929;

  $bb1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} __const_udelay(4295000);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb1930;

  $bb1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} __const_udelay(4295000);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    goto $bb1931;

  $bb1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} __const_udelay(4295000);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    goto $bb1932;

  $bb1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} __const_udelay(4295000);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    goto $bb1933;

  $bb1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} __const_udelay(4295000);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    goto $bb1934;

  $bb1934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} __const_udelay(4295000);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb1935;

  $bb1935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} __const_udelay(4295000);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    goto $bb1936;

  $bb1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} __const_udelay(4295000);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    goto $bb1937;

  $bb1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1938;

  $bb1938:
    assume {:verifier.code 0} true;
    goto $bb1939;

  $bb1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} $i351 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i352 := $eq.i32($i348, $i351);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i352} true;
    goto $bb1940, $bb1941;

  $bb1941:
    assume {:verifier.code 0} true;
    assume !($i352 == 1);
    goto $bb1942;

  $bb1942:
    assume {:verifier.code 0} true;
    goto $bb1945;

  $bb1945:
    assume {:verifier.code 0} true;
    goto $bb1946;

  $bb1946:
    assume {:verifier.code 0} true;
    goto $bb1947;

  $bb1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} __const_udelay(4295000);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb1948;

  $bb1948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} __const_udelay(4295000);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    goto $bb1949;

  $bb1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} __const_udelay(4295000);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    goto $bb1950;

  $bb1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} __const_udelay(4295000);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    goto $bb1951;

  $bb1951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} __const_udelay(4295000);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    goto $bb1952;

  $bb1952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} __const_udelay(4295000);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    goto $bb1953;

  $bb1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} __const_udelay(4295000);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    goto $bb1954;

  $bb1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} __const_udelay(4295000);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    goto $bb1955;

  $bb1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} __const_udelay(4295000);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    goto $bb1956;

  $bb1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1957;

  $bb1957:
    assume {:verifier.code 0} true;
    goto $bb1958;

  $bb1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} $i354 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i351, $i354);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb1959, $bb1960;

  $bb1960:
    assume {:verifier.code 0} true;
    assume !($i355 == 1);
    goto $bb1961;

  $bb1961:
    assume {:verifier.code 0} true;
    goto $bb1964;

  $bb1964:
    assume {:verifier.code 0} true;
    goto $bb1965;

  $bb1965:
    assume {:verifier.code 0} true;
    goto $bb1966;

  $bb1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} __const_udelay(4295000);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    goto $bb1967;

  $bb1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} __const_udelay(4295000);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    goto $bb1968;

  $bb1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} __const_udelay(4295000);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    goto $bb1969;

  $bb1969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2219} __const_udelay(4295000);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    goto $bb1970;

  $bb1970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2220} __const_udelay(4295000);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    goto $bb1971;

  $bb1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2221} __const_udelay(4295000);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    goto $bb1972;

  $bb1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2222} __const_udelay(4295000);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    goto $bb1973;

  $bb1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2223} __const_udelay(4295000);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    goto $bb1974;

  $bb1974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} __const_udelay(4295000);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    goto $bb1975;

  $bb1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1976;

  $bb1976:
    assume {:verifier.code 0} true;
    goto $bb1977;

  $bb1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2226} $i357 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i354, $i357);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb1978, $bb1979;

  $bb1979:
    assume {:verifier.code 0} true;
    assume !($i358 == 1);
    goto $bb1980;

  $bb1980:
    assume {:verifier.code 0} true;
    goto $bb1983;

  $bb1983:
    assume {:verifier.code 0} true;
    goto $bb1984;

  $bb1984:
    assume {:verifier.code 0} true;
    goto $bb1985;

  $bb1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} __const_udelay(4295000);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    goto $bb1986;

  $bb1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} __const_udelay(4295000);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    goto $bb1987;

  $bb1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2229} __const_udelay(4295000);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    goto $bb1988;

  $bb1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} __const_udelay(4295000);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    goto $bb1989;

  $bb1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} __const_udelay(4295000);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    goto $bb1990;

  $bb1990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} __const_udelay(4295000);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    goto $bb1991;

  $bb1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} __const_udelay(4295000);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    goto $bb1992;

  $bb1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} __const_udelay(4295000);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    goto $bb1993;

  $bb1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} __const_udelay(4295000);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    goto $bb1994;

  $bb1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1995;

  $bb1995:
    assume {:verifier.code 0} true;
    goto $bb1996;

  $bb1996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $i360 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i357, $i360);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb1997, $bb1998;

  $bb1998:
    assume {:verifier.code 0} true;
    assume !($i361 == 1);
    goto $bb1999;

  $bb1999:
    assume {:verifier.code 0} true;
    goto $bb2002;

  $bb2002:
    assume {:verifier.code 0} true;
    goto $bb2003;

  $bb2003:
    assume {:verifier.code 0} true;
    goto $bb2004;

  $bb2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} __const_udelay(4295000);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    goto $bb2005;

  $bb2005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} __const_udelay(4295000);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    goto $bb2006;

  $bb2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} __const_udelay(4295000);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    goto $bb2007;

  $bb2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} __const_udelay(4295000);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    goto $bb2008;

  $bb2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} __const_udelay(4295000);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb2009;

  $bb2009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} __const_udelay(4295000);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    goto $bb2010;

  $bb2010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} __const_udelay(4295000);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb2011;

  $bb2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} __const_udelay(4295000);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    goto $bb2012;

  $bb2012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} __const_udelay(4295000);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    goto $bb2013;

  $bb2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2014;

  $bb2014:
    assume {:verifier.code 0} true;
    goto $bb2015;

  $bb2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $i363 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i360, $i363);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb2016, $bb2017;

  $bb2017:
    assume {:verifier.code 0} true;
    assume !($i364 == 1);
    goto $bb2018;

  $bb2018:
    assume {:verifier.code 0} true;
    goto $bb2021;

  $bb2021:
    assume {:verifier.code 0} true;
    goto $bb2022;

  $bb2022:
    assume {:verifier.code 0} true;
    goto $bb2023;

  $bb2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} __const_udelay(4295000);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    goto $bb2024;

  $bb2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} __const_udelay(4295000);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    goto $bb2025;

  $bb2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} __const_udelay(4295000);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    goto $bb2026;

  $bb2026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} __const_udelay(4295000);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    goto $bb2027;

  $bb2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} __const_udelay(4295000);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    goto $bb2028;

  $bb2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} __const_udelay(4295000);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    goto $bb2029;

  $bb2029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} __const_udelay(4295000);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    goto $bb2030;

  $bb2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} __const_udelay(4295000);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    goto $bb2031;

  $bb2031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} __const_udelay(4295000);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    goto $bb2032;

  $bb2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2033;

  $bb2033:
    assume {:verifier.code 0} true;
    goto $bb2034;

  $bb2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} $i366 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i363, $i366);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb2035, $bb2036;

  $bb2036:
    assume {:verifier.code 0} true;
    assume !($i367 == 1);
    goto $bb2037;

  $bb2037:
    assume {:verifier.code 0} true;
    goto $bb2040;

  $bb2040:
    assume {:verifier.code 0} true;
    goto $bb2041;

  $bb2041:
    assume {:verifier.code 0} true;
    goto $bb2042;

  $bb2042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} __const_udelay(4295000);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    goto $bb2043;

  $bb2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} __const_udelay(4295000);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    goto $bb2044;

  $bb2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} __const_udelay(4295000);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    goto $bb2045;

  $bb2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} __const_udelay(4295000);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    goto $bb2046;

  $bb2046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} __const_udelay(4295000);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    goto $bb2047;

  $bb2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} __const_udelay(4295000);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    goto $bb2048;

  $bb2048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} __const_udelay(4295000);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    goto $bb2049;

  $bb2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} __const_udelay(4295000);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    goto $bb2050;

  $bb2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} __const_udelay(4295000);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    goto $bb2051;

  $bb2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2052;

  $bb2052:
    assume {:verifier.code 0} true;
    goto $bb2053;

  $bb2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $i369 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i366, $i369);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb2054, $bb2055;

  $bb2055:
    assume {:verifier.code 0} true;
    assume !($i370 == 1);
    goto $bb2056;

  $bb2056:
    assume {:verifier.code 0} true;
    goto $bb2059;

  $bb2059:
    assume {:verifier.code 0} true;
    goto $bb2060;

  $bb2060:
    assume {:verifier.code 0} true;
    goto $bb2061;

  $bb2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} __const_udelay(4295000);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    goto $bb2062;

  $bb2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} __const_udelay(4295000);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb2063;

  $bb2063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} __const_udelay(4295000);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    goto $bb2064;

  $bb2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} __const_udelay(4295000);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    goto $bb2065;

  $bb2065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} __const_udelay(4295000);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    goto $bb2066;

  $bb2066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} __const_udelay(4295000);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    goto $bb2067;

  $bb2067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} __const_udelay(4295000);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    goto $bb2068;

  $bb2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} __const_udelay(4295000);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    goto $bb2069;

  $bb2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} __const_udelay(4295000);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    goto $bb2070;

  $bb2070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2071;

  $bb2071:
    assume {:verifier.code 0} true;
    goto $bb2072;

  $bb2072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} $i372 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i369, $i372);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i373} true;
    goto $bb2073, $bb2074;

  $bb2074:
    assume {:verifier.code 0} true;
    assume !($i373 == 1);
    goto $bb2075;

  $bb2075:
    assume {:verifier.code 0} true;
    goto $bb2078;

  $bb2078:
    assume {:verifier.code 0} true;
    goto $bb2079;

  $bb2079:
    assume {:verifier.code 0} true;
    goto $bb2080;

  $bb2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} __const_udelay(4295000);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    goto $bb2081;

  $bb2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} __const_udelay(4295000);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    goto $bb2082;

  $bb2082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} __const_udelay(4295000);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    goto $bb2083;

  $bb2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} __const_udelay(4295000);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    goto $bb2084;

  $bb2084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} __const_udelay(4295000);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    goto $bb2085;

  $bb2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} __const_udelay(4295000);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    goto $bb2086;

  $bb2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} __const_udelay(4295000);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    goto $bb2087;

  $bb2087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} __const_udelay(4295000);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    goto $bb2088;

  $bb2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} __const_udelay(4295000);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    goto $bb2089;

  $bb2089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2090;

  $bb2090:
    assume {:verifier.code 0} true;
    goto $bb2091;

  $bb2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} $i375 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i372, $i375);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb2092, $bb2093;

  $bb2093:
    assume {:verifier.code 0} true;
    assume !($i376 == 1);
    goto $bb2094;

  $bb2094:
    assume {:verifier.code 0} true;
    goto $bb2097;

  $bb2097:
    assume {:verifier.code 0} true;
    goto $bb2098;

  $bb2098:
    assume {:verifier.code 0} true;
    goto $bb2099;

  $bb2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} __const_udelay(4295000);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    goto $bb2100;

  $bb2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} __const_udelay(4295000);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    goto $bb2101;

  $bb2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} __const_udelay(4295000);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    goto $bb2102;

  $bb2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} __const_udelay(4295000);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    goto $bb2103;

  $bb2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} __const_udelay(4295000);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    goto $bb2104;

  $bb2104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2298} __const_udelay(4295000);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    goto $bb2105;

  $bb2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} __const_udelay(4295000);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    goto $bb2106;

  $bb2106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} __const_udelay(4295000);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    goto $bb2107;

  $bb2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2301} __const_udelay(4295000);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    goto $bb2108;

  $bb2108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2109;

  $bb2109:
    assume {:verifier.code 0} true;
    goto $bb2110;

  $bb2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2303} $i378 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32($i375, $i378);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb2111, $bb2112;

  $bb2112:
    assume {:verifier.code 0} true;
    assume !($i379 == 1);
    goto $bb2113;

  $bb2113:
    assume {:verifier.code 0} true;
    goto $bb2116;

  $bb2116:
    assume {:verifier.code 0} true;
    goto $bb2117;

  $bb2117:
    assume {:verifier.code 0} true;
    goto $bb2118;

  $bb2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} __const_udelay(4295000);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    goto $bb2119;

  $bb2119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} __const_udelay(4295000);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    goto $bb2120;

  $bb2120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} __const_udelay(4295000);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    goto $bb2121;

  $bb2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} __const_udelay(4295000);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    goto $bb2122;

  $bb2122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} __const_udelay(4295000);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    goto $bb2123;

  $bb2123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} __const_udelay(4295000);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    goto $bb2124;

  $bb2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} __const_udelay(4295000);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb2125;

  $bb2125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} __const_udelay(4295000);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    goto $bb2126;

  $bb2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} __const_udelay(4295000);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    goto $bb2127;

  $bb2127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2313} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2128;

  $bb2128:
    assume {:verifier.code 0} true;
    goto $bb2129;

  $bb2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} $i381 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i378, $i381);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb2130, $bb2131;

  $bb2131:
    assume {:verifier.code 0} true;
    assume !($i382 == 1);
    goto $bb2132;

  $bb2132:
    assume {:verifier.code 0} true;
    goto $bb2135;

  $bb2135:
    assume {:verifier.code 0} true;
    goto $bb2136;

  $bb2136:
    assume {:verifier.code 0} true;
    goto $bb2137;

  $bb2137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} __const_udelay(4295000);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    goto $bb2138;

  $bb2138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2316} __const_udelay(4295000);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    goto $bb2139;

  $bb2139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} __const_udelay(4295000);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    goto $bb2140;

  $bb2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} __const_udelay(4295000);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    goto $bb2141;

  $bb2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} __const_udelay(4295000);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    goto $bb2142;

  $bb2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} __const_udelay(4295000);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    goto $bb2143;

  $bb2143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} __const_udelay(4295000);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    goto $bb2144;

  $bb2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} __const_udelay(4295000);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    goto $bb2145;

  $bb2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} __const_udelay(4295000);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    goto $bb2146;

  $bb2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2147;

  $bb2147:
    assume {:verifier.code 0} true;
    goto $bb2148;

  $bb2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} $i384 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i381, $i384);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb2149, $bb2150;

  $bb2150:
    assume {:verifier.code 0} true;
    assume !($i385 == 1);
    goto $bb2151;

  $bb2151:
    assume {:verifier.code 0} true;
    goto $bb2154;

  $bb2154:
    assume {:verifier.code 0} true;
    goto $bb2155;

  $bb2155:
    assume {:verifier.code 0} true;
    goto $bb2156;

  $bb2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} __const_udelay(4295000);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    goto $bb2157;

  $bb2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} __const_udelay(4295000);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    goto $bb2158;

  $bb2158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} __const_udelay(4295000);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    goto $bb2159;

  $bb2159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} __const_udelay(4295000);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    goto $bb2160;

  $bb2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} __const_udelay(4295000);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    goto $bb2161;

  $bb2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} __const_udelay(4295000);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    goto $bb2162;

  $bb2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} __const_udelay(4295000);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    goto $bb2163;

  $bb2163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} __const_udelay(4295000);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    goto $bb2164;

  $bb2164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} __const_udelay(4295000);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    goto $bb2165;

  $bb2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2166;

  $bb2166:
    assume {:verifier.code 0} true;
    goto $bb2167;

  $bb2167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} $i387 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i384, $i387);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i388} true;
    goto $bb2168, $bb2169;

  $bb2169:
    assume {:verifier.code 0} true;
    assume !($i388 == 1);
    goto $bb2170;

  $bb2170:
    assume {:verifier.code 0} true;
    goto $bb2173;

  $bb2173:
    assume {:verifier.code 0} true;
    goto $bb2174;

  $bb2174:
    assume {:verifier.code 0} true;
    goto $bb2175;

  $bb2175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} __const_udelay(4295000);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    goto $bb2176;

  $bb2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} __const_udelay(4295000);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    goto $bb2177;

  $bb2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} __const_udelay(4295000);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    goto $bb2178;

  $bb2178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} __const_udelay(4295000);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    goto $bb2179;

  $bb2179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} __const_udelay(4295000);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    goto $bb2180;

  $bb2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} __const_udelay(4295000);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    goto $bb2181;

  $bb2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} __const_udelay(4295000);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    goto $bb2182;

  $bb2182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} __const_udelay(4295000);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    goto $bb2183;

  $bb2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} __const_udelay(4295000);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    goto $bb2184;

  $bb2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2185;

  $bb2185:
    assume {:verifier.code 0} true;
    goto $bb2186;

  $bb2186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} $i390 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i391 := $eq.i32($i387, $i390);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i391} true;
    goto $bb2187, $bb2188;

  $bb2188:
    assume {:verifier.code 0} true;
    assume !($i391 == 1);
    goto $bb2189;

  $bb2189:
    assume {:verifier.code 0} true;
    goto $bb2192;

  $bb2192:
    assume {:verifier.code 0} true;
    goto $bb2193;

  $bb2193:
    assume {:verifier.code 0} true;
    goto $bb2194;

  $bb2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} __const_udelay(4295000);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    goto $bb2195;

  $bb2195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} __const_udelay(4295000);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb2196;

  $bb2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2350} __const_udelay(4295000);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    goto $bb2197;

  $bb2197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} __const_udelay(4295000);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    goto $bb2198;

  $bb2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} __const_udelay(4295000);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    goto $bb2199;

  $bb2199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} __const_udelay(4295000);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    goto $bb2200;

  $bb2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} __const_udelay(4295000);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    goto $bb2201;

  $bb2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} __const_udelay(4295000);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    goto $bb2202;

  $bb2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} __const_udelay(4295000);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    goto $bb2203;

  $bb2203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2204;

  $bb2204:
    assume {:verifier.code 0} true;
    goto $bb2205;

  $bb2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} $i393 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i394 := $eq.i32($i390, $i393);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i394} true;
    goto $bb2206, $bb2207;

  $bb2207:
    assume {:verifier.code 0} true;
    assume !($i394 == 1);
    goto $bb2208;

  $bb2208:
    assume {:verifier.code 0} true;
    goto $bb2211;

  $bb2211:
    assume {:verifier.code 0} true;
    goto $bb2212;

  $bb2212:
    assume {:verifier.code 0} true;
    goto $bb2213;

  $bb2213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} __const_udelay(4295000);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    goto $bb2214;

  $bb2214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} __const_udelay(4295000);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    goto $bb2215;

  $bb2215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} __const_udelay(4295000);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    goto $bb2216;

  $bb2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} __const_udelay(4295000);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    goto $bb2217;

  $bb2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2363} __const_udelay(4295000);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    goto $bb2218;

  $bb2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} __const_udelay(4295000);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    goto $bb2219;

  $bb2219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} __const_udelay(4295000);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    goto $bb2220;

  $bb2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2366} __const_udelay(4295000);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    goto $bb2221;

  $bb2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} __const_udelay(4295000);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    goto $bb2222;

  $bb2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2368} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2223;

  $bb2223:
    assume {:verifier.code 0} true;
    goto $bb2224;

  $bb2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $i396 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i397 := $eq.i32($i393, $i396);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i397} true;
    goto $bb2225, $bb2226;

  $bb2226:
    assume {:verifier.code 0} true;
    assume !($i397 == 1);
    goto $bb2227;

  $bb2227:
    assume {:verifier.code 0} true;
    goto $bb2230;

  $bb2230:
    assume {:verifier.code 0} true;
    goto $bb2231;

  $bb2231:
    assume {:verifier.code 0} true;
    goto $bb2232;

  $bb2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} __const_udelay(4295000);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    goto $bb2233;

  $bb2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} __const_udelay(4295000);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    goto $bb2234;

  $bb2234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2372} __const_udelay(4295000);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    goto $bb2235;

  $bb2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} __const_udelay(4295000);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    goto $bb2236;

  $bb2236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} __const_udelay(4295000);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    goto $bb2237;

  $bb2237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} __const_udelay(4295000);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    goto $bb2238;

  $bb2238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} __const_udelay(4295000);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    goto $bb2239;

  $bb2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} __const_udelay(4295000);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    goto $bb2240;

  $bb2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} __const_udelay(4295000);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    goto $bb2241;

  $bb2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2242;

  $bb2242:
    assume {:verifier.code 0} true;
    goto $bb2243;

  $bb2243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} $i399 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i396, $i399);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb2244, $bb2245;

  $bb2245:
    assume {:verifier.code 0} true;
    assume !($i400 == 1);
    goto $bb2246;

  $bb2246:
    assume {:verifier.code 0} true;
    goto $bb2249;

  $bb2249:
    assume {:verifier.code 0} true;
    goto $bb2250;

  $bb2250:
    assume {:verifier.code 0} true;
    goto $bb2251;

  $bb2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} __const_udelay(4295000);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    goto $bb2252;

  $bb2252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} __const_udelay(4295000);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    goto $bb2253;

  $bb2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} __const_udelay(4295000);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    goto $bb2254;

  $bb2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2384} __const_udelay(4295000);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    goto $bb2255;

  $bb2255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} __const_udelay(4295000);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    goto $bb2256;

  $bb2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2386} __const_udelay(4295000);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    goto $bb2257;

  $bb2257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} __const_udelay(4295000);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    goto $bb2258;

  $bb2258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} __const_udelay(4295000);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    goto $bb2259;

  $bb2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} __const_udelay(4295000);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    goto $bb2260;

  $bb2260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2261;

  $bb2261:
    assume {:verifier.code 0} true;
    goto $bb2262;

  $bb2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $i402 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i403 := $eq.i32($i399, $i402);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i403} true;
    goto $bb2263, $bb2264;

  $bb2264:
    assume {:verifier.code 0} true;
    assume !($i403 == 1);
    goto $bb2265;

  $bb2265:
    assume {:verifier.code 0} true;
    goto $bb2268;

  $bb2268:
    assume {:verifier.code 0} true;
    goto $bb2269;

  $bb2269:
    assume {:verifier.code 0} true;
    goto $bb2270;

  $bb2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2392} __const_udelay(4295000);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb2271;

  $bb2271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} __const_udelay(4295000);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    goto $bb2272;

  $bb2272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} __const_udelay(4295000);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    goto $bb2273;

  $bb2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2395} __const_udelay(4295000);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    goto $bb2274;

  $bb2274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} __const_udelay(4295000);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    goto $bb2275;

  $bb2275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2397} __const_udelay(4295000);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    goto $bb2276;

  $bb2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} __const_udelay(4295000);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    goto $bb2277;

  $bb2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} __const_udelay(4295000);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    goto $bb2278;

  $bb2278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} __const_udelay(4295000);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    goto $bb2279;

  $bb2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2280;

  $bb2280:
    assume {:verifier.code 0} true;
    goto $bb2281;

  $bb2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $i405 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i402, $i405);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb2282, $bb2283;

  $bb2283:
    assume {:verifier.code 0} true;
    assume !($i406 == 1);
    goto $bb2284;

  $bb2284:
    assume {:verifier.code 0} true;
    goto $bb2287;

  $bb2287:
    assume {:verifier.code 0} true;
    goto $bb2288;

  $bb2288:
    assume {:verifier.code 0} true;
    goto $bb2289;

  $bb2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} __const_udelay(4295000);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    goto $bb2290;

  $bb2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} __const_udelay(4295000);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb2291;

  $bb2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} __const_udelay(4295000);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    goto $bb2292;

  $bb2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} __const_udelay(4295000);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    goto $bb2293;

  $bb2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} __const_udelay(4295000);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    goto $bb2294;

  $bb2294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2408} __const_udelay(4295000);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    goto $bb2295;

  $bb2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} __const_udelay(4295000);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    goto $bb2296;

  $bb2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2410} __const_udelay(4295000);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    goto $bb2297;

  $bb2297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} __const_udelay(4295000);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    goto $bb2298;

  $bb2298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2299;

  $bb2299:
    assume {:verifier.code 0} true;
    goto $bb2300;

  $bb2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $i408 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i409 := $eq.i32($i405, $i408);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i409} true;
    goto $bb2301, $bb2302;

  $bb2302:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb2303;

  $bb2303:
    assume {:verifier.code 0} true;
    goto $bb2306;

  $bb2306:
    assume {:verifier.code 0} true;
    goto $bb2307;

  $bb2307:
    assume {:verifier.code 0} true;
    goto $bb2308;

  $bb2308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2414} __const_udelay(4295000);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    goto $bb2309;

  $bb2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} __const_udelay(4295000);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb2310;

  $bb2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} __const_udelay(4295000);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    goto $bb2311;

  $bb2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} __const_udelay(4295000);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    goto $bb2312;

  $bb2312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} __const_udelay(4295000);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    goto $bb2313;

  $bb2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} __const_udelay(4295000);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    goto $bb2314;

  $bb2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} __const_udelay(4295000);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    goto $bb2315;

  $bb2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} __const_udelay(4295000);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    goto $bb2316;

  $bb2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} __const_udelay(4295000);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    goto $bb2317;

  $bb2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2318;

  $bb2318:
    assume {:verifier.code 0} true;
    goto $bb2319;

  $bb2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} $i411 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i408, $i411);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb2320, $bb2321;

  $bb2321:
    assume {:verifier.code 0} true;
    assume !($i412 == 1);
    goto $bb2322;

  $bb2322:
    assume {:verifier.code 0} true;
    goto $bb2325;

  $bb2325:
    assume {:verifier.code 0} true;
    goto $bb2326;

  $bb2326:
    assume {:verifier.code 0} true;
    goto $bb2327;

  $bb2327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2425} __const_udelay(4295000);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    goto $bb2328;

  $bb2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2426} __const_udelay(4295000);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    goto $bb2329;

  $bb2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} __const_udelay(4295000);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    goto $bb2330;

  $bb2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} __const_udelay(4295000);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto $bb2331;

  $bb2331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} __const_udelay(4295000);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    goto $bb2332;

  $bb2332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} __const_udelay(4295000);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    goto $bb2333;

  $bb2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} __const_udelay(4295000);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    goto $bb2334;

  $bb2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} __const_udelay(4295000);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    goto $bb2335;

  $bb2335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} __const_udelay(4295000);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    goto $bb2336;

  $bb2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2337;

  $bb2337:
    assume {:verifier.code 0} true;
    goto $bb2338;

  $bb2338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} $i414 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i411, $i414);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb2339, $bb2340;

  $bb2340:
    assume {:verifier.code 0} true;
    assume !($i415 == 1);
    goto $bb2341;

  $bb2341:
    assume {:verifier.code 0} true;
    goto $bb2344;

  $bb2344:
    assume {:verifier.code 0} true;
    goto $bb2345;

  $bb2345:
    assume {:verifier.code 0} true;
    goto $bb2346;

  $bb2346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} __const_udelay(4295000);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb2347;

  $bb2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} __const_udelay(4295000);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    goto $bb2348;

  $bb2348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} __const_udelay(4295000);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    goto $bb2349;

  $bb2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} __const_udelay(4295000);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    goto $bb2350;

  $bb2350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} __const_udelay(4295000);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    goto $bb2351;

  $bb2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} __const_udelay(4295000);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb2352;

  $bb2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} __const_udelay(4295000);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    goto $bb2353;

  $bb2353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} __const_udelay(4295000);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    goto $bb2354;

  $bb2354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} __const_udelay(4295000);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    goto $bb2355;

  $bb2355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2356;

  $bb2356:
    assume {:verifier.code 0} true;
    goto $bb2357;

  $bb2357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} $i417 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i414, $i417);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb2358, $bb2359;

  $bb2359:
    assume {:verifier.code 0} true;
    assume !($i418 == 1);
    goto $bb2360;

  $bb2360:
    assume {:verifier.code 0} true;
    goto $bb2363;

  $bb2363:
    assume {:verifier.code 0} true;
    goto $bb2364;

  $bb2364:
    assume {:verifier.code 0} true;
    goto $bb2365;

  $bb2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} __const_udelay(4295000);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    goto $bb2366;

  $bb2366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} __const_udelay(4295000);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    goto $bb2367;

  $bb2367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} __const_udelay(4295000);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    goto $bb2368;

  $bb2368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} __const_udelay(4295000);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    goto $bb2369;

  $bb2369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} __const_udelay(4295000);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    goto $bb2370;

  $bb2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} __const_udelay(4295000);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb2371;

  $bb2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} __const_udelay(4295000);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    goto $bb2372;

  $bb2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} __const_udelay(4295000);
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    goto $bb2373;

  $bb2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} __const_udelay(4295000);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto $bb2374;

  $bb2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2375;

  $bb2375:
    assume {:verifier.code 0} true;
    goto $bb2376;

  $bb2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $i420 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i417, $i420);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i421} true;
    goto $bb2377, $bb2378;

  $bb2378:
    assume {:verifier.code 0} true;
    assume !($i421 == 1);
    goto $bb2379;

  $bb2379:
    assume {:verifier.code 0} true;
    goto $bb2382;

  $bb2382:
    assume {:verifier.code 0} true;
    goto $bb2383;

  $bb2383:
    assume {:verifier.code 0} true;
    goto $bb2384;

  $bb2384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} __const_udelay(4295000);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    goto $bb2385;

  $bb2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} __const_udelay(4295000);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    goto $bb2386;

  $bb2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} __const_udelay(4295000);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    goto $bb2387;

  $bb2387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} __const_udelay(4295000);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    goto $bb2388;

  $bb2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} __const_udelay(4295000);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    goto $bb2389;

  $bb2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} __const_udelay(4295000);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    goto $bb2390;

  $bb2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} __const_udelay(4295000);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    goto $bb2391;

  $bb2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} __const_udelay(4295000);
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    goto $bb2392;

  $bb2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} __const_udelay(4295000);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    goto $bb2393;

  $bb2393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2394;

  $bb2394:
    assume {:verifier.code 0} true;
    goto $bb2395;

  $bb2395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} $i423 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i424 := $eq.i32($i420, $i423);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i424} true;
    goto $bb2396, $bb2397;

  $bb2397:
    assume {:verifier.code 0} true;
    assume !($i424 == 1);
    goto $bb2398;

  $bb2398:
    assume {:verifier.code 0} true;
    goto $bb2401;

  $bb2401:
    assume {:verifier.code 0} true;
    goto $bb2402;

  $bb2402:
    assume {:verifier.code 0} true;
    goto $bb2403;

  $bb2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} __const_udelay(4295000);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    goto $bb2404;

  $bb2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} __const_udelay(4295000);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    goto $bb2405;

  $bb2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} __const_udelay(4295000);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    goto $bb2406;

  $bb2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} __const_udelay(4295000);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    goto $bb2407;

  $bb2407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} __const_udelay(4295000);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    goto $bb2408;

  $bb2408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} __const_udelay(4295000);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    goto $bb2409;

  $bb2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} __const_udelay(4295000);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    goto $bb2410;

  $bb2410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} __const_udelay(4295000);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    goto $bb2411;

  $bb2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} __const_udelay(4295000);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    goto $bb2412;

  $bb2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2413;

  $bb2413:
    assume {:verifier.code 0} true;
    goto $bb2414;

  $bb2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} $i426 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i423, $i426);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb2415, $bb2416;

  $bb2416:
    assume {:verifier.code 0} true;
    assume !($i427 == 1);
    goto $bb2417;

  $bb2417:
    assume {:verifier.code 0} true;
    goto $bb2420;

  $bb2420:
    assume {:verifier.code 0} true;
    goto $bb2421;

  $bb2421:
    assume {:verifier.code 0} true;
    goto $bb2422;

  $bb2422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} __const_udelay(4295000);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    goto $bb2423;

  $bb2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} __const_udelay(4295000);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    goto $bb2424;

  $bb2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} __const_udelay(4295000);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    goto $bb2425;

  $bb2425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} __const_udelay(4295000);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    goto $bb2426;

  $bb2426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} __const_udelay(4295000);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    goto $bb2427;

  $bb2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} __const_udelay(4295000);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    goto $bb2428;

  $bb2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} __const_udelay(4295000);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    goto $bb2429;

  $bb2429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} __const_udelay(4295000);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    goto $bb2430;

  $bb2430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} __const_udelay(4295000);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    goto $bb2431;

  $bb2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2432;

  $bb2432:
    assume {:verifier.code 0} true;
    goto $bb2433;

  $bb2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $i429 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $i430 := $eq.i32($i426, $i429);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb2434, $bb2435;

  $bb2435:
    assume {:verifier.code 0} true;
    assume !($i430 == 1);
    goto $bb2436;

  $bb2436:
    assume {:verifier.code 0} true;
    goto $bb2439;

  $bb2439:
    assume {:verifier.code 0} true;
    goto $bb2440;

  $bb2440:
    assume {:verifier.code 0} true;
    goto $bb2441;

  $bb2441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} __const_udelay(4295000);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    goto $bb2442;

  $bb2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} __const_udelay(4295000);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    goto $bb2443;

  $bb2443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} __const_udelay(4295000);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    goto $bb2444;

  $bb2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} __const_udelay(4295000);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    goto $bb2445;

  $bb2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} __const_udelay(4295000);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    goto $bb2446;

  $bb2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} __const_udelay(4295000);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    goto $bb2447;

  $bb2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} __const_udelay(4295000);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    goto $bb2448;

  $bb2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} __const_udelay(4295000);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    goto $bb2449;

  $bb2449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} __const_udelay(4295000);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    goto $bb2450;

  $bb2450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2451;

  $bb2451:
    assume {:verifier.code 0} true;
    goto $bb2452;

  $bb2452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $i432 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i433 := $eq.i32($i429, $i432);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i433} true;
    goto $bb2453, $bb2454;

  $bb2454:
    assume {:verifier.code 0} true;
    assume !($i433 == 1);
    goto $bb2455;

  $bb2455:
    assume {:verifier.code 0} true;
    goto $bb2458;

  $bb2458:
    assume {:verifier.code 0} true;
    goto $bb2459;

  $bb2459:
    assume {:verifier.code 0} true;
    goto $bb2460;

  $bb2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} __const_udelay(4295000);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    goto $bb2461;

  $bb2461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} __const_udelay(4295000);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    goto $bb2462;

  $bb2462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} __const_udelay(4295000);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    goto $bb2463;

  $bb2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} __const_udelay(4295000);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    goto $bb2464;

  $bb2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} __const_udelay(4295000);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    goto $bb2465;

  $bb2465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} __const_udelay(4295000);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    goto $bb2466;

  $bb2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} __const_udelay(4295000);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    goto $bb2467;

  $bb2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} __const_udelay(4295000);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    goto $bb2468;

  $bb2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} __const_udelay(4295000);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    goto $bb2469;

  $bb2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2470;

  $bb2470:
    assume {:verifier.code 0} true;
    goto $bb2471;

  $bb2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} $i435 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i432, $i435);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i436} true;
    goto $bb2472, $bb2473;

  $bb2473:
    assume {:verifier.code 0} true;
    assume !($i436 == 1);
    goto $bb2474;

  $bb2474:
    assume {:verifier.code 0} true;
    goto $bb2477;

  $bb2477:
    assume {:verifier.code 0} true;
    goto $bb2478;

  $bb2478:
    assume {:verifier.code 0} true;
    goto $bb2479;

  $bb2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} __const_udelay(4295000);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    goto $bb2480;

  $bb2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} __const_udelay(4295000);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    goto $bb2481;

  $bb2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} __const_udelay(4295000);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    goto $bb2482;

  $bb2482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} __const_udelay(4295000);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    goto $bb2483;

  $bb2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} __const_udelay(4295000);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    goto $bb2484;

  $bb2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} __const_udelay(4295000);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    goto $bb2485;

  $bb2485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} __const_udelay(4295000);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    goto $bb2486;

  $bb2486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} __const_udelay(4295000);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    goto $bb2487;

  $bb2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} __const_udelay(4295000);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    goto $bb2488;

  $bb2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2489;

  $bb2489:
    assume {:verifier.code 0} true;
    goto $bb2490;

  $bb2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} $i438 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i435, $i438);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i439} true;
    goto $bb2491, $bb2492;

  $bb2492:
    assume {:verifier.code 0} true;
    assume !($i439 == 1);
    goto $bb2493;

  $bb2493:
    assume {:verifier.code 0} true;
    goto $bb2496;

  $bb2496:
    assume {:verifier.code 0} true;
    goto $bb2497;

  $bb2497:
    assume {:verifier.code 0} true;
    goto $bb2498;

  $bb2498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} __const_udelay(4295000);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    goto $bb2499;

  $bb2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} __const_udelay(4295000);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    goto $bb2500;

  $bb2500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} __const_udelay(4295000);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    goto $bb2501;

  $bb2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} __const_udelay(4295000);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    goto $bb2502;

  $bb2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} __const_udelay(4295000);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto $bb2503;

  $bb2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} __const_udelay(4295000);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    goto $bb2504;

  $bb2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} __const_udelay(4295000);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    goto $bb2505;

  $bb2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} __const_udelay(4295000);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    goto $bb2506;

  $bb2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} __const_udelay(4295000);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    goto $bb2507;

  $bb2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2508;

  $bb2508:
    assume {:verifier.code 0} true;
    goto $bb2509;

  $bb2509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} $i441 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i442 := $eq.i32($i438, $i441);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i442} true;
    goto $bb2510, $bb2511;

  $bb2511:
    assume {:verifier.code 0} true;
    assume !($i442 == 1);
    goto $bb2512;

  $bb2512:
    assume {:verifier.code 0} true;
    goto $bb2515;

  $bb2515:
    assume {:verifier.code 0} true;
    goto $bb2516;

  $bb2516:
    assume {:verifier.code 0} true;
    goto $bb2517;

  $bb2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} __const_udelay(4295000);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    goto $bb2518;

  $bb2518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} __const_udelay(4295000);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    goto $bb2519;

  $bb2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} __const_udelay(4295000);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    goto $bb2520;

  $bb2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} __const_udelay(4295000);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    goto $bb2521;

  $bb2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} __const_udelay(4295000);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    goto $bb2522;

  $bb2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} __const_udelay(4295000);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    goto $bb2523;

  $bb2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} __const_udelay(4295000);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    goto $bb2524;

  $bb2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} __const_udelay(4295000);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    goto $bb2525;

  $bb2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} __const_udelay(4295000);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb2526;

  $bb2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2527;

  $bb2527:
    assume {:verifier.code 0} true;
    goto $bb2528;

  $bb2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} $i444 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i445 := $eq.i32($i441, $i444);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i445} true;
    goto $bb2529, $bb2530;

  $bb2530:
    assume {:verifier.code 0} true;
    assume !($i445 == 1);
    goto $bb2531;

  $bb2531:
    assume {:verifier.code 0} true;
    goto $bb2534;

  $bb2534:
    assume {:verifier.code 0} true;
    goto $bb2535;

  $bb2535:
    assume {:verifier.code 0} true;
    goto $bb2536;

  $bb2536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} __const_udelay(4295000);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    goto $bb2537;

  $bb2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} __const_udelay(4295000);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    goto $bb2538;

  $bb2538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} __const_udelay(4295000);
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    goto $bb2539;

  $bb2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} __const_udelay(4295000);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    goto $bb2540;

  $bb2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} __const_udelay(4295000);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    goto $bb2541;

  $bb2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} __const_udelay(4295000);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    goto $bb2542;

  $bb2542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} __const_udelay(4295000);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    goto $bb2543;

  $bb2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} __const_udelay(4295000);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    goto $bb2544;

  $bb2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} __const_udelay(4295000);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    goto $bb2545;

  $bb2545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2546;

  $bb2546:
    assume {:verifier.code 0} true;
    goto $bb2547;

  $bb2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} $i447 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i448 := $eq.i32($i444, $i447);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i448} true;
    goto $bb2548, $bb2549;

  $bb2549:
    assume {:verifier.code 0} true;
    assume !($i448 == 1);
    goto $bb2550;

  $bb2550:
    assume {:verifier.code 0} true;
    goto $bb2553;

  $bb2553:
    assume {:verifier.code 0} true;
    goto $bb2554;

  $bb2554:
    assume {:verifier.code 0} true;
    goto $bb2555;

  $bb2555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} __const_udelay(4295000);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb2556;

  $bb2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} __const_udelay(4295000);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    goto $bb2557;

  $bb2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} __const_udelay(4295000);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    goto $bb2558;

  $bb2558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} __const_udelay(4295000);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    goto $bb2559;

  $bb2559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} __const_udelay(4295000);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    goto $bb2560;

  $bb2560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} __const_udelay(4295000);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    goto $bb2561;

  $bb2561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} __const_udelay(4295000);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    goto $bb2562;

  $bb2562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} __const_udelay(4295000);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    goto $bb2563;

  $bb2563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} __const_udelay(4295000);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    goto $bb2564;

  $bb2564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2565;

  $bb2565:
    assume {:verifier.code 0} true;
    goto $bb2566;

  $bb2566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $i450 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i451 := $eq.i32($i447, $i450);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i451} true;
    goto $bb2567, $bb2568;

  $bb2568:
    assume {:verifier.code 0} true;
    assume !($i451 == 1);
    goto $bb2569;

  $bb2569:
    assume {:verifier.code 0} true;
    goto $bb2572;

  $bb2572:
    assume {:verifier.code 0} true;
    goto $bb2573;

  $bb2573:
    assume {:verifier.code 0} true;
    goto $bb2574;

  $bb2574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} __const_udelay(4295000);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    goto $bb2575;

  $bb2575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} __const_udelay(4295000);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    goto $bb2576;

  $bb2576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} __const_udelay(4295000);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    goto $bb2577;

  $bb2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} __const_udelay(4295000);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    goto $bb2578;

  $bb2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} __const_udelay(4295000);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    goto $bb2579;

  $bb2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} __const_udelay(4295000);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    goto $bb2580;

  $bb2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} __const_udelay(4295000);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    goto $bb2581;

  $bb2581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} __const_udelay(4295000);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb2582;

  $bb2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} __const_udelay(4295000);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    goto $bb2583;

  $bb2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2584;

  $bb2584:
    assume {:verifier.code 0} true;
    goto $bb2585;

  $bb2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $i453 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i450, $i453);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb2586, $bb2587;

  $bb2587:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb2588;

  $bb2588:
    assume {:verifier.code 0} true;
    goto $bb2591;

  $bb2591:
    assume {:verifier.code 0} true;
    goto $bb2592;

  $bb2592:
    assume {:verifier.code 0} true;
    goto $bb2593;

  $bb2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} __const_udelay(4295000);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    goto $bb2594;

  $bb2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} __const_udelay(4295000);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    goto $bb2595;

  $bb2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} __const_udelay(4295000);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    goto $bb2596;

  $bb2596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} __const_udelay(4295000);
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    goto $bb2597;

  $bb2597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} __const_udelay(4295000);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    goto $bb2598;

  $bb2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} __const_udelay(4295000);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    goto $bb2599;

  $bb2599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} __const_udelay(4295000);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    goto $bb2600;

  $bb2600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} __const_udelay(4295000);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    goto $bb2601;

  $bb2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} __const_udelay(4295000);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    goto $bb2602;

  $bb2602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2603;

  $bb2603:
    assume {:verifier.code 0} true;
    goto $bb2604;

  $bb2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} $i456 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i457 := $eq.i32($i453, $i456);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb2605, $bb2606;

  $bb2606:
    assume {:verifier.code 0} true;
    assume !($i457 == 1);
    goto $bb2607;

  $bb2607:
    assume {:verifier.code 0} true;
    goto $bb2610;

  $bb2610:
    assume {:verifier.code 0} true;
    goto $bb2611;

  $bb2611:
    assume {:verifier.code 0} true;
    goto $bb2612;

  $bb2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} __const_udelay(4295000);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    goto $bb2613;

  $bb2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} __const_udelay(4295000);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    goto $bb2614;

  $bb2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} __const_udelay(4295000);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    goto $bb2615;

  $bb2615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} __const_udelay(4295000);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    goto $bb2616;

  $bb2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} __const_udelay(4295000);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    goto $bb2617;

  $bb2617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} __const_udelay(4295000);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    goto $bb2618;

  $bb2618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} __const_udelay(4295000);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    goto $bb2619;

  $bb2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} __const_udelay(4295000);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    goto $bb2620;

  $bb2620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} __const_udelay(4295000);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    goto $bb2621;

  $bb2621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2622;

  $bb2622:
    assume {:verifier.code 0} true;
    goto $bb2623;

  $bb2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} $i459 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $i460 := $eq.i32($i456, $i459);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i460} true;
    goto $bb2624, $bb2625;

  $bb2625:
    assume {:verifier.code 0} true;
    assume !($i460 == 1);
    goto $bb2626;

  $bb2626:
    assume {:verifier.code 0} true;
    goto $bb2629;

  $bb2629:
    assume {:verifier.code 0} true;
    goto $bb2630;

  $bb2630:
    assume {:verifier.code 0} true;
    goto $bb2631;

  $bb2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} __const_udelay(4295000);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    goto $bb2632;

  $bb2632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} __const_udelay(4295000);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    goto $bb2633;

  $bb2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} __const_udelay(4295000);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    goto $bb2634;

  $bb2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} __const_udelay(4295000);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    goto $bb2635;

  $bb2635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} __const_udelay(4295000);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    goto $bb2636;

  $bb2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} __const_udelay(4295000);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    goto $bb2637;

  $bb2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} __const_udelay(4295000);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    goto $bb2638;

  $bb2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} __const_udelay(4295000);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    goto $bb2639;

  $bb2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} __const_udelay(4295000);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    goto $bb2640;

  $bb2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2641;

  $bb2641:
    assume {:verifier.code 0} true;
    goto $bb2642;

  $bb2642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} $i462 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i463 := $eq.i32($i459, $i462);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i463} true;
    goto $bb2643, $bb2644;

  $bb2644:
    assume {:verifier.code 0} true;
    assume !($i463 == 1);
    goto $bb2645;

  $bb2645:
    assume {:verifier.code 0} true;
    goto $bb2648;

  $bb2648:
    assume {:verifier.code 0} true;
    goto $bb2649;

  $bb2649:
    assume {:verifier.code 0} true;
    goto $bb2650;

  $bb2650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} __const_udelay(4295000);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    goto $bb2651;

  $bb2651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} __const_udelay(4295000);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    goto $bb2652;

  $bb2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} __const_udelay(4295000);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    goto $bb2653;

  $bb2653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} __const_udelay(4295000);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    goto $bb2654;

  $bb2654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} __const_udelay(4295000);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    goto $bb2655;

  $bb2655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} __const_udelay(4295000);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb2656;

  $bb2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} __const_udelay(4295000);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    goto $bb2657;

  $bb2657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} __const_udelay(4295000);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    goto $bb2658;

  $bb2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} __const_udelay(4295000);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    goto $bb2659;

  $bb2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2660;

  $bb2660:
    assume {:verifier.code 0} true;
    goto $bb2661;

  $bb2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $i465 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i462, $i465);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i466} true;
    goto $bb2662, $bb2663;

  $bb2663:
    assume {:verifier.code 0} true;
    assume !($i466 == 1);
    goto $bb2664;

  $bb2664:
    assume {:verifier.code 0} true;
    goto $bb2667;

  $bb2667:
    assume {:verifier.code 0} true;
    goto $bb2668;

  $bb2668:
    assume {:verifier.code 0} true;
    goto $bb2669;

  $bb2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} __const_udelay(4295000);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    goto $bb2670;

  $bb2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} __const_udelay(4295000);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    goto $bb2671;

  $bb2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} __const_udelay(4295000);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    goto $bb2672;

  $bb2672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} __const_udelay(4295000);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    goto $bb2673;

  $bb2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} __const_udelay(4295000);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    goto $bb2674;

  $bb2674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} __const_udelay(4295000);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    goto $bb2675;

  $bb2675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} __const_udelay(4295000);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    goto $bb2676;

  $bb2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} __const_udelay(4295000);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    goto $bb2677;

  $bb2677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} __const_udelay(4295000);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    goto $bb2678;

  $bb2678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2679;

  $bb2679:
    assume {:verifier.code 0} true;
    goto $bb2680;

  $bb2680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $i468 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i465, $i468);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb2681, $bb2682;

  $bb2682:
    assume {:verifier.code 0} true;
    assume !($i469 == 1);
    goto $bb2683;

  $bb2683:
    assume {:verifier.code 0} true;
    goto $bb2686;

  $bb2686:
    assume {:verifier.code 0} true;
    goto $bb2687;

  $bb2687:
    assume {:verifier.code 0} true;
    goto $bb2688;

  $bb2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} __const_udelay(4295000);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    goto $bb2689;

  $bb2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} __const_udelay(4295000);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    goto $bb2690;

  $bb2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} __const_udelay(4295000);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    goto $bb2691;

  $bb2691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} __const_udelay(4295000);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    goto $bb2692;

  $bb2692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} __const_udelay(4295000);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    goto $bb2693;

  $bb2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} __const_udelay(4295000);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    goto $bb2694;

  $bb2694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} __const_udelay(4295000);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    goto $bb2695;

  $bb2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} __const_udelay(4295000);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    goto $bb2696;

  $bb2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} __const_udelay(4295000);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    goto $bb2697;

  $bb2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2698;

  $bb2698:
    assume {:verifier.code 0} true;
    goto $bb2699;

  $bb2699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $i471 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i468, $i471);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i472} true;
    goto $bb2700, $bb2701;

  $bb2701:
    assume {:verifier.code 0} true;
    assume !($i472 == 1);
    goto $bb2702;

  $bb2702:
    assume {:verifier.code 0} true;
    goto $bb2705;

  $bb2705:
    assume {:verifier.code 0} true;
    goto $bb2706;

  $bb2706:
    assume {:verifier.code 0} true;
    goto $bb2707;

  $bb2707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} __const_udelay(4295000);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto $bb2708;

  $bb2708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} __const_udelay(4295000);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    goto $bb2709;

  $bb2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} __const_udelay(4295000);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    goto $bb2710;

  $bb2710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} __const_udelay(4295000);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    goto $bb2711;

  $bb2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} __const_udelay(4295000);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    goto $bb2712;

  $bb2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} __const_udelay(4295000);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    goto $bb2713;

  $bb2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} __const_udelay(4295000);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    goto $bb2714;

  $bb2714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} __const_udelay(4295000);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    goto $bb2715;

  $bb2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} __const_udelay(4295000);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    goto $bb2716;

  $bb2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2717;

  $bb2717:
    assume {:verifier.code 0} true;
    goto $bb2718;

  $bb2718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} $i474 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i475 := $eq.i32($i471, $i474);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb2719, $bb2720;

  $bb2720:
    assume {:verifier.code 0} true;
    assume !($i475 == 1);
    goto $bb2721;

  $bb2721:
    assume {:verifier.code 0} true;
    goto $bb2724;

  $bb2724:
    assume {:verifier.code 0} true;
    goto $bb2725;

  $bb2725:
    assume {:verifier.code 0} true;
    goto $bb2726;

  $bb2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} __const_udelay(4295000);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    goto $bb2727;

  $bb2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} __const_udelay(4295000);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    goto $bb2728;

  $bb2728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} __const_udelay(4295000);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    goto $bb2729;

  $bb2729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} __const_udelay(4295000);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    goto $bb2730;

  $bb2730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} __const_udelay(4295000);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    goto $bb2731;

  $bb2731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} __const_udelay(4295000);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    goto $bb2732;

  $bb2732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} __const_udelay(4295000);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    goto $bb2733;

  $bb2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} __const_udelay(4295000);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto $bb2734;

  $bb2734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} __const_udelay(4295000);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    goto $bb2735;

  $bb2735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2736;

  $bb2736:
    assume {:verifier.code 0} true;
    goto $bb2737;

  $bb2737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $i477 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i478 := $eq.i32($i474, $i477);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i478} true;
    goto $bb2738, $bb2739;

  $bb2739:
    assume {:verifier.code 0} true;
    assume !($i478 == 1);
    goto $bb2740;

  $bb2740:
    assume {:verifier.code 0} true;
    goto $bb2743;

  $bb2743:
    assume {:verifier.code 0} true;
    goto $bb2744;

  $bb2744:
    assume {:verifier.code 0} true;
    goto $bb2745;

  $bb2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} __const_udelay(4295000);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    goto $bb2746;

  $bb2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} __const_udelay(4295000);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    goto $bb2747;

  $bb2747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} __const_udelay(4295000);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    goto $bb2748;

  $bb2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} __const_udelay(4295000);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    goto $bb2749;

  $bb2749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} __const_udelay(4295000);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    goto $bb2750;

  $bb2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} __const_udelay(4295000);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    goto $bb2751;

  $bb2751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} __const_udelay(4295000);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    goto $bb2752;

  $bb2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} __const_udelay(4295000);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb2753;

  $bb2753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} __const_udelay(4295000);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    goto $bb2754;

  $bb2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2755;

  $bb2755:
    assume {:verifier.code 0} true;
    goto $bb2756;

  $bb2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $i480 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i477, $i480);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i481} true;
    goto $bb2757, $bb2758;

  $bb2758:
    assume {:verifier.code 0} true;
    assume !($i481 == 1);
    goto $bb2759;

  $bb2759:
    assume {:verifier.code 0} true;
    goto $bb2762;

  $bb2762:
    assume {:verifier.code 0} true;
    goto $bb2763;

  $bb2763:
    assume {:verifier.code 0} true;
    goto $bb2764;

  $bb2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} __const_udelay(4295000);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    goto $bb2765;

  $bb2765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} __const_udelay(4295000);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    goto $bb2766;

  $bb2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} __const_udelay(4295000);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    goto $bb2767;

  $bb2767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} __const_udelay(4295000);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    goto $bb2768;

  $bb2768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} __const_udelay(4295000);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    goto $bb2769;

  $bb2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} __const_udelay(4295000);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto $bb2770;

  $bb2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} __const_udelay(4295000);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    goto $bb2771;

  $bb2771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} __const_udelay(4295000);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    goto $bb2772;

  $bb2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} __const_udelay(4295000);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    goto $bb2773;

  $bb2773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2774;

  $bb2774:
    assume {:verifier.code 0} true;
    goto $bb2775;

  $bb2775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} $i483 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i484 := $eq.i32($i480, $i483);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i484} true;
    goto $bb2776, $bb2777;

  $bb2777:
    assume {:verifier.code 0} true;
    assume !($i484 == 1);
    goto $bb2778;

  $bb2778:
    assume {:verifier.code 0} true;
    goto $bb2781;

  $bb2781:
    assume {:verifier.code 0} true;
    goto $bb2782;

  $bb2782:
    assume {:verifier.code 0} true;
    goto $bb2783;

  $bb2783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} __const_udelay(4295000);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    goto $bb2784;

  $bb2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} __const_udelay(4295000);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    goto $bb2785;

  $bb2785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} __const_udelay(4295000);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb2786;

  $bb2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} __const_udelay(4295000);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    goto $bb2787;

  $bb2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} __const_udelay(4295000);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    goto $bb2788;

  $bb2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} __const_udelay(4295000);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    goto $bb2789;

  $bb2789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2695} __const_udelay(4295000);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    goto $bb2790;

  $bb2790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} __const_udelay(4295000);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    goto $bb2791;

  $bb2791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} __const_udelay(4295000);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    goto $bb2792;

  $bb2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2793;

  $bb2793:
    assume {:verifier.code 0} true;
    goto $bb2794;

  $bb2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} $i486 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i487 := $eq.i32($i483, $i486);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i487} true;
    goto $bb2795, $bb2796;

  $bb2796:
    assume {:verifier.code 0} true;
    assume !($i487 == 1);
    goto $bb2797;

  $bb2797:
    assume {:verifier.code 0} true;
    goto $bb2800;

  $bb2800:
    assume {:verifier.code 0} true;
    goto $bb2801;

  $bb2801:
    assume {:verifier.code 0} true;
    goto $bb2802;

  $bb2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} __const_udelay(4295000);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    goto $bb2803;

  $bb2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} __const_udelay(4295000);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    goto $bb2804;

  $bb2804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} __const_udelay(4295000);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    goto $bb2805;

  $bb2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} __const_udelay(4295000);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    goto $bb2806;

  $bb2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} __const_udelay(4295000);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    goto $bb2807;

  $bb2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} __const_udelay(4295000);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    goto $bb2808;

  $bb2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} __const_udelay(4295000);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    goto $bb2809;

  $bb2809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} __const_udelay(4295000);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    goto $bb2810;

  $bb2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} __const_udelay(4295000);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    goto $bb2811;

  $bb2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2812;

  $bb2812:
    assume {:verifier.code 0} true;
    goto $bb2813;

  $bb2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $i489 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i486, $i489);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i490} true;
    goto $bb2814, $bb2815;

  $bb2815:
    assume {:verifier.code 0} true;
    assume !($i490 == 1);
    goto $bb2816;

  $bb2816:
    assume {:verifier.code 0} true;
    goto $bb2819;

  $bb2819:
    assume {:verifier.code 0} true;
    goto $bb2820;

  $bb2820:
    assume {:verifier.code 0} true;
    goto $bb2821;

  $bb2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2711} __const_udelay(4295000);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb2822;

  $bb2822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} __const_udelay(4295000);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    goto $bb2823;

  $bb2823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} __const_udelay(4295000);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    goto $bb2824;

  $bb2824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} __const_udelay(4295000);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    goto $bb2825;

  $bb2825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} __const_udelay(4295000);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    goto $bb2826;

  $bb2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} __const_udelay(4295000);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    goto $bb2827;

  $bb2827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} __const_udelay(4295000);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    goto $bb2828;

  $bb2828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} __const_udelay(4295000);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    goto $bb2829;

  $bb2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} __const_udelay(4295000);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    goto $bb2830;

  $bb2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2720} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2831;

  $bb2831:
    assume {:verifier.code 0} true;
    goto $bb2832;

  $bb2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $i492 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i493 := $eq.i32($i489, $i492);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i493} true;
    goto $bb2833, $bb2834;

  $bb2834:
    assume {:verifier.code 0} true;
    assume !($i493 == 1);
    goto $bb2835;

  $bb2835:
    assume {:verifier.code 0} true;
    goto $bb2838;

  $bb2838:
    assume {:verifier.code 0} true;
    goto $bb2839;

  $bb2839:
    assume {:verifier.code 0} true;
    goto $bb2840;

  $bb2840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} __const_udelay(4295000);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    goto $bb2841;

  $bb2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} __const_udelay(4295000);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    goto $bb2842;

  $bb2842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} __const_udelay(4295000);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    goto $bb2843;

  $bb2843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} __const_udelay(4295000);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    goto $bb2844;

  $bb2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} __const_udelay(4295000);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    goto $bb2845;

  $bb2845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} __const_udelay(4295000);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    goto $bb2846;

  $bb2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2728} __const_udelay(4295000);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    goto $bb2847;

  $bb2847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} __const_udelay(4295000);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    goto $bb2848;

  $bb2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} __const_udelay(4295000);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    goto $bb2849;

  $bb2849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2850;

  $bb2850:
    assume {:verifier.code 0} true;
    goto $bb2851;

  $bb2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $i495 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i492, $i495);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i496} true;
    goto $bb2852, $bb2853;

  $bb2853:
    assume {:verifier.code 0} true;
    assume !($i496 == 1);
    goto $bb2854;

  $bb2854:
    assume {:verifier.code 0} true;
    goto $bb2857;

  $bb2857:
    assume {:verifier.code 0} true;
    goto $bb2858;

  $bb2858:
    assume {:verifier.code 0} true;
    goto $bb2859;

  $bb2859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2733} __const_udelay(4295000);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    goto $bb2860;

  $bb2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} __const_udelay(4295000);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    goto $bb2861;

  $bb2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} __const_udelay(4295000);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb2862;

  $bb2862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} __const_udelay(4295000);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    goto $bb2863;

  $bb2863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} __const_udelay(4295000);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    goto $bb2864;

  $bb2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} __const_udelay(4295000);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    goto $bb2865;

  $bb2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} __const_udelay(4295000);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    goto $bb2866;

  $bb2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} __const_udelay(4295000);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    goto $bb2867;

  $bb2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} __const_udelay(4295000);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    goto $bb2868;

  $bb2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2869;

  $bb2869:
    assume {:verifier.code 0} true;
    goto $bb2870;

  $bb2870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} $i498 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i499 := $eq.i32($i495, $i498);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i499} true;
    goto $bb2871, $bb2872;

  $bb2872:
    assume {:verifier.code 0} true;
    assume !($i499 == 1);
    goto $bb2873;

  $bb2873:
    assume {:verifier.code 0} true;
    goto $bb2876;

  $bb2876:
    assume {:verifier.code 0} true;
    goto $bb2877;

  $bb2877:
    assume {:verifier.code 0} true;
    goto $bb2878;

  $bb2878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} __const_udelay(4295000);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    goto $bb2879;

  $bb2879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} __const_udelay(4295000);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    goto $bb2880;

  $bb2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} __const_udelay(4295000);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    goto $bb2881;

  $bb2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} __const_udelay(4295000);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    goto $bb2882;

  $bb2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} __const_udelay(4295000);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    goto $bb2883;

  $bb2883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} __const_udelay(4295000);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    goto $bb2884;

  $bb2884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} __const_udelay(4295000);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    goto $bb2885;

  $bb2885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} __const_udelay(4295000);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    goto $bb2886;

  $bb2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} __const_udelay(4295000);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    goto $bb2887;

  $bb2887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2888;

  $bb2888:
    assume {:verifier.code 0} true;
    goto $bb2889;

  $bb2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} $i501 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i502 := $eq.i32($i498, $i501);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i502} true;
    goto $bb2890, $bb2891;

  $bb2891:
    assume {:verifier.code 0} true;
    assume !($i502 == 1);
    goto $bb2892;

  $bb2892:
    assume {:verifier.code 0} true;
    goto $bb2895;

  $bb2895:
    assume {:verifier.code 0} true;
    goto $bb2896;

  $bb2896:
    assume {:verifier.code 0} true;
    goto $bb2897;

  $bb2897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} __const_udelay(4295000);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    goto $bb2898;

  $bb2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} __const_udelay(4295000);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    goto $bb2899;

  $bb2899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} __const_udelay(4295000);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    goto $bb2900;

  $bb2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} __const_udelay(4295000);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    goto $bb2901;

  $bb2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} __const_udelay(4295000);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    goto $bb2902;

  $bb2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} __const_udelay(4295000);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    goto $bb2903;

  $bb2903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2761} __const_udelay(4295000);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    goto $bb2904;

  $bb2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} __const_udelay(4295000);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    goto $bb2905;

  $bb2905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2763} __const_udelay(4295000);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    goto $bb2906;

  $bb2906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2907;

  $bb2907:
    assume {:verifier.code 0} true;
    goto $bb2908;

  $bb2908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2765} $i504 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $i505 := $eq.i32($i501, $i504);
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i505} true;
    goto $bb2909, $bb2910;

  $bb2910:
    assume {:verifier.code 0} true;
    assume !($i505 == 1);
    goto $bb2911;

  $bb2911:
    assume {:verifier.code 0} true;
    goto $bb2914;

  $bb2914:
    assume {:verifier.code 0} true;
    goto $bb2915;

  $bb2915:
    assume {:verifier.code 0} true;
    goto $bb2916;

  $bb2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} __const_udelay(4295000);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    goto $bb2917;

  $bb2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} __const_udelay(4295000);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    goto $bb2918;

  $bb2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2768} __const_udelay(4295000);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    goto $bb2919;

  $bb2919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} __const_udelay(4295000);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    goto $bb2920;

  $bb2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} __const_udelay(4295000);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    goto $bb2921;

  $bb2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} __const_udelay(4295000);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    goto $bb2922;

  $bb2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} __const_udelay(4295000);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    goto $bb2923;

  $bb2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2773} __const_udelay(4295000);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    goto $bb2924;

  $bb2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} __const_udelay(4295000);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    goto $bb2925;

  $bb2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2775} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2926;

  $bb2926:
    assume {:verifier.code 0} true;
    goto $bb2927;

  $bb2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} $i507 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i504, $i507);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i508} true;
    goto $bb2928, $bb2929;

  $bb2929:
    assume {:verifier.code 0} true;
    assume !($i508 == 1);
    goto $bb2930;

  $bb2930:
    assume {:verifier.code 0} true;
    goto $bb2933;

  $bb2933:
    assume {:verifier.code 0} true;
    goto $bb2934;

  $bb2934:
    assume {:verifier.code 0} true;
    goto $bb2935;

  $bb2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} __const_udelay(4295000);
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    goto $bb2936;

  $bb2936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} __const_udelay(4295000);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    goto $bb2937;

  $bb2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} __const_udelay(4295000);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    goto $bb2938;

  $bb2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2780} __const_udelay(4295000);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    goto $bb2939;

  $bb2939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} __const_udelay(4295000);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    goto $bb2940;

  $bb2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} __const_udelay(4295000);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    goto $bb2941;

  $bb2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} __const_udelay(4295000);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    goto $bb2942;

  $bb2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} __const_udelay(4295000);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    goto $bb2943;

  $bb2943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2785} __const_udelay(4295000);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    goto $bb2944;

  $bb2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2945;

  $bb2945:
    assume {:verifier.code 0} true;
    goto $bb2946;

  $bb2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2787} $i510 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $i511 := $eq.i32($i507, $i510);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb2947, $bb2948;

  $bb2948:
    assume {:verifier.code 0} true;
    assume !($i511 == 1);
    goto $bb2949;

  $bb2949:
    assume {:verifier.code 0} true;
    goto $bb2952;

  $bb2952:
    assume {:verifier.code 0} true;
    goto $bb2953;

  $bb2953:
    assume {:verifier.code 0} true;
    goto $bb2954;

  $bb2954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} __const_udelay(4295000);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    goto $bb2955;

  $bb2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2789} __const_udelay(4295000);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb2956;

  $bb2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} __const_udelay(4295000);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    goto $bb2957;

  $bb2957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2791} __const_udelay(4295000);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    goto $bb2958;

  $bb2958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} __const_udelay(4295000);
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    goto $bb2959;

  $bb2959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} __const_udelay(4295000);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    goto $bb2960;

  $bb2960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} __const_udelay(4295000);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    goto $bb2961;

  $bb2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} __const_udelay(4295000);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    goto $bb2962;

  $bb2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} __const_udelay(4295000);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    goto $bb2963;

  $bb2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2797} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2964;

  $bb2964:
    assume {:verifier.code 0} true;
    goto $bb2965;

  $bb2965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} $i513 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i510, $i513);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i514} true;
    goto $bb2966, $bb2967;

  $bb2967:
    assume {:verifier.code 0} true;
    assume !($i514 == 1);
    goto $bb2968;

  $bb2968:
    assume {:verifier.code 0} true;
    goto $bb2971;

  $bb2971:
    assume {:verifier.code 0} true;
    goto $bb2972;

  $bb2972:
    assume {:verifier.code 0} true;
    goto $bb2973;

  $bb2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} __const_udelay(4295000);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    goto $bb2974;

  $bb2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} __const_udelay(4295000);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    goto $bb2975;

  $bb2975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} __const_udelay(4295000);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    goto $bb2976;

  $bb2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} __const_udelay(4295000);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    goto $bb2977;

  $bb2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} __const_udelay(4295000);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    goto $bb2978;

  $bb2978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} __const_udelay(4295000);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    goto $bb2979;

  $bb2979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} __const_udelay(4295000);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    goto $bb2980;

  $bb2980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} __const_udelay(4295000);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    goto $bb2981;

  $bb2981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} __const_udelay(4295000);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    goto $bb2982;

  $bb2982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2983;

  $bb2983:
    assume {:verifier.code 0} true;
    goto $bb2984;

  $bb2984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} $i516 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i517 := $eq.i32($i513, $i516);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i517} true;
    goto $bb2985, $bb2986;

  $bb2986:
    assume {:verifier.code 0} true;
    assume !($i517 == 1);
    goto $bb2987;

  $bb2987:
    assume {:verifier.code 0} true;
    goto $bb2990;

  $bb2990:
    assume {:verifier.code 0} true;
    goto $bb2991;

  $bb2991:
    assume {:verifier.code 0} true;
    goto $bb2992;

  $bb2992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} __const_udelay(4295000);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    goto $bb2993;

  $bb2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} __const_udelay(4295000);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    goto $bb2994;

  $bb2994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} __const_udelay(4295000);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    goto $bb2995;

  $bb2995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} __const_udelay(4295000);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    goto $bb2996;

  $bb2996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} __const_udelay(4295000);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    goto $bb2997;

  $bb2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} __const_udelay(4295000);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    goto $bb2998;

  $bb2998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} __const_udelay(4295000);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    goto $bb2999;

  $bb2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2817} __const_udelay(4295000);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    goto $bb3000;

  $bb3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} __const_udelay(4295000);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    goto $bb3001;

  $bb3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3002;

  $bb3002:
    assume {:verifier.code 0} true;
    goto $bb3003;

  $bb3003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} $i519 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i516, $i519);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb3004, $bb3005;

  $bb3005:
    assume {:verifier.code 0} true;
    assume !($i520 == 1);
    goto $bb3006;

  $bb3006:
    assume {:verifier.code 0} true;
    goto $bb3009;

  $bb3009:
    assume {:verifier.code 0} true;
    goto $bb3010;

  $bb3010:
    assume {:verifier.code 0} true;
    goto $bb3011;

  $bb3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} __const_udelay(4295000);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    goto $bb3012;

  $bb3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} __const_udelay(4295000);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    goto $bb3013;

  $bb3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} __const_udelay(4295000);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    goto $bb3014;

  $bb3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} __const_udelay(4295000);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    goto $bb3015;

  $bb3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} __const_udelay(4295000);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    goto $bb3016;

  $bb3016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} __const_udelay(4295000);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    goto $bb3017;

  $bb3017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} __const_udelay(4295000);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    goto $bb3018;

  $bb3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} __const_udelay(4295000);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    goto $bb3019;

  $bb3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} __const_udelay(4295000);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    goto $bb3020;

  $bb3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3021;

  $bb3021:
    assume {:verifier.code 0} true;
    goto $bb3022;

  $bb3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} $i522 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i519, $i522);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i523} true;
    goto $bb3023, $bb3024;

  $bb3024:
    assume {:verifier.code 0} true;
    assume !($i523 == 1);
    goto $bb3025;

  $bb3025:
    assume {:verifier.code 0} true;
    goto $bb3028;

  $bb3028:
    assume {:verifier.code 0} true;
    goto $bb3029;

  $bb3029:
    assume {:verifier.code 0} true;
    goto $bb3030;

  $bb3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} __const_udelay(4295000);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    goto $bb3031;

  $bb3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} __const_udelay(4295000);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    goto $bb3032;

  $bb3032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} __const_udelay(4295000);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    goto $bb3033;

  $bb3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} __const_udelay(4295000);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    goto $bb3034;

  $bb3034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} __const_udelay(4295000);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    goto $bb3035;

  $bb3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} __const_udelay(4295000);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    goto $bb3036;

  $bb3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} __const_udelay(4295000);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    goto $bb3037;

  $bb3037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} __const_udelay(4295000);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    goto $bb3038;

  $bb3038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} __const_udelay(4295000);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    goto $bb3039;

  $bb3039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3040;

  $bb3040:
    assume {:verifier.code 0} true;
    goto $bb3041;

  $bb3041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} $i525 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32($i522, $i525);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i526} true;
    goto $bb3042, $bb3043;

  $bb3043:
    assume {:verifier.code 0} true;
    assume !($i526 == 1);
    goto $bb3044;

  $bb3044:
    assume {:verifier.code 0} true;
    goto $bb3047;

  $bb3047:
    assume {:verifier.code 0} true;
    goto $bb3048;

  $bb3048:
    assume {:verifier.code 0} true;
    goto $bb3049;

  $bb3049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} __const_udelay(4295000);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    goto $bb3050;

  $bb3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} __const_udelay(4295000);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    goto $bb3051;

  $bb3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} __const_udelay(4295000);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    goto $bb3052;

  $bb3052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} __const_udelay(4295000);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    goto $bb3053;

  $bb3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} __const_udelay(4295000);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    goto $bb3054;

  $bb3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} __const_udelay(4295000);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    goto $bb3055;

  $bb3055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} __const_udelay(4295000);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    goto $bb3056;

  $bb3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} __const_udelay(4295000);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    goto $bb3057;

  $bb3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} __const_udelay(4295000);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    goto $bb3058;

  $bb3058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3059;

  $bb3059:
    assume {:verifier.code 0} true;
    goto $bb3060;

  $bb3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} $i528 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i529 := $eq.i32($i525, $i528);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i529} true;
    goto $bb3061, $bb3062;

  $bb3062:
    assume {:verifier.code 0} true;
    assume !($i529 == 1);
    goto $bb3063;

  $bb3063:
    assume {:verifier.code 0} true;
    goto $bb3066;

  $bb3066:
    assume {:verifier.code 0} true;
    goto $bb3067;

  $bb3067:
    assume {:verifier.code 0} true;
    goto $bb3068;

  $bb3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} __const_udelay(4295000);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    goto $bb3069;

  $bb3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} __const_udelay(4295000);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    goto $bb3070;

  $bb3070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} __const_udelay(4295000);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    goto $bb3071;

  $bb3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} __const_udelay(4295000);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    goto $bb3072;

  $bb3072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} __const_udelay(4295000);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    goto $bb3073;

  $bb3073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} __const_udelay(4295000);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    goto $bb3074;

  $bb3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} __const_udelay(4295000);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    goto $bb3075;

  $bb3075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} __const_udelay(4295000);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    goto $bb3076;

  $bb3076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} __const_udelay(4295000);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    goto $bb3077;

  $bb3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3078;

  $bb3078:
    assume {:verifier.code 0} true;
    goto $bb3079;

  $bb3079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} $i531 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i532 := $eq.i32($i528, $i531);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i532} true;
    goto $bb3080, $bb3081;

  $bb3081:
    assume {:verifier.code 0} true;
    assume !($i532 == 1);
    goto $bb3082;

  $bb3082:
    assume {:verifier.code 0} true;
    goto $bb3085;

  $bb3085:
    assume {:verifier.code 0} true;
    goto $bb3086;

  $bb3086:
    assume {:verifier.code 0} true;
    goto $bb3087;

  $bb3087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} __const_udelay(4295000);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    goto $bb3088;

  $bb3088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} __const_udelay(4295000);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    goto $bb3089;

  $bb3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} __const_udelay(4295000);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    goto $bb3090;

  $bb3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} __const_udelay(4295000);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    goto $bb3091;

  $bb3091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} __const_udelay(4295000);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    goto $bb3092;

  $bb3092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} __const_udelay(4295000);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    goto $bb3093;

  $bb3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} __const_udelay(4295000);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    goto $bb3094;

  $bb3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} __const_udelay(4295000);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto $bb3095;

  $bb3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} __const_udelay(4295000);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    goto $bb3096;

  $bb3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3097;

  $bb3097:
    assume {:verifier.code 0} true;
    goto $bb3098;

  $bb3098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} $i534 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i535 := $eq.i32($i531, $i534);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i535} true;
    goto $bb3099, $bb3100;

  $bb3100:
    assume {:verifier.code 0} true;
    assume !($i535 == 1);
    goto $bb3101;

  $bb3101:
    assume {:verifier.code 0} true;
    goto $bb3104;

  $bb3104:
    assume {:verifier.code 0} true;
    goto $bb3105;

  $bb3105:
    assume {:verifier.code 0} true;
    goto $bb3106;

  $bb3106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} __const_udelay(4295000);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    goto $bb3107;

  $bb3107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} __const_udelay(4295000);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    goto $bb3108;

  $bb3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} __const_udelay(4295000);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    goto $bb3109;

  $bb3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} __const_udelay(4295000);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    goto $bb3110;

  $bb3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} __const_udelay(4295000);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    goto $bb3111;

  $bb3111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2881} __const_udelay(4295000);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    goto $bb3112;

  $bb3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} __const_udelay(4295000);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    goto $bb3113;

  $bb3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2883} __const_udelay(4295000);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    goto $bb3114;

  $bb3114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} __const_udelay(4295000);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    goto $bb3115;

  $bb3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2885} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3116;

  $bb3116:
    assume {:verifier.code 0} true;
    goto $bb3117;

  $bb3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} $i537 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i538 := $eq.i32($i534, $i537);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i538} true;
    goto $bb3118, $bb3119;

  $bb3119:
    assume {:verifier.code 0} true;
    assume !($i538 == 1);
    goto $bb3120;

  $bb3120:
    assume {:verifier.code 0} true;
    goto $bb3123;

  $bb3123:
    assume {:verifier.code 0} true;
    goto $bb3124;

  $bb3124:
    assume {:verifier.code 0} true;
    goto $bb3125;

  $bb3125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2887} __const_udelay(4295000);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    goto $bb3126;

  $bb3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} __const_udelay(4295000);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    goto $bb3127;

  $bb3127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2889} __const_udelay(4295000);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    goto $bb3128;

  $bb3128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} __const_udelay(4295000);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    goto $bb3129;

  $bb3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2891} __const_udelay(4295000);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    goto $bb3130;

  $bb3130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} __const_udelay(4295000);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    goto $bb3131;

  $bb3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2893} __const_udelay(4295000);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    goto $bb3132;

  $bb3132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} __const_udelay(4295000);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    goto $bb3133;

  $bb3133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2895} __const_udelay(4295000);
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    goto $bb3134;

  $bb3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3135;

  $bb3135:
    assume {:verifier.code 0} true;
    goto $bb3136;

  $bb3136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2897} $i540 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i541 := $eq.i32($i537, $i540);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i541} true;
    goto $bb3137, $bb3138;

  $bb3138:
    assume {:verifier.code 0} true;
    assume !($i541 == 1);
    goto $bb3139;

  $bb3139:
    assume {:verifier.code 0} true;
    goto $bb3142;

  $bb3142:
    assume {:verifier.code 0} true;
    goto $bb3143;

  $bb3143:
    assume {:verifier.code 0} true;
    goto $bb3144;

  $bb3144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} __const_udelay(4295000);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto $bb3145;

  $bb3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2899} __const_udelay(4295000);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    goto $bb3146;

  $bb3146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} __const_udelay(4295000);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    goto $bb3147;

  $bb3147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2901} __const_udelay(4295000);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    goto $bb3148;

  $bb3148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} __const_udelay(4295000);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    goto $bb3149;

  $bb3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2903} __const_udelay(4295000);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    goto $bb3150;

  $bb3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} __const_udelay(4295000);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    goto $bb3151;

  $bb3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2905} __const_udelay(4295000);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    goto $bb3152;

  $bb3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} __const_udelay(4295000);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    goto $bb3153;

  $bb3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2907} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3154;

  $bb3154:
    assume {:verifier.code 0} true;
    goto $bb3155;

  $bb3155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} $i543 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i540, $i543);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb3156, $bb3157;

  $bb3157:
    assume {:verifier.code 0} true;
    assume !($i544 == 1);
    goto $bb3158;

  $bb3158:
    assume {:verifier.code 0} true;
    goto $bb3161;

  $bb3161:
    assume {:verifier.code 0} true;
    goto $bb3162;

  $bb3162:
    assume {:verifier.code 0} true;
    goto $bb3163;

  $bb3163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2909} __const_udelay(4295000);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    goto $bb3164;

  $bb3164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} __const_udelay(4295000);
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    goto $bb3165;

  $bb3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2911} __const_udelay(4295000);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    goto $bb3166;

  $bb3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} __const_udelay(4295000);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb3167;

  $bb3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2913} __const_udelay(4295000);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    goto $bb3168;

  $bb3168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} __const_udelay(4295000);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    goto $bb3169;

  $bb3169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2915} __const_udelay(4295000);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    goto $bb3170;

  $bb3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} __const_udelay(4295000);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    goto $bb3171;

  $bb3171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2917} __const_udelay(4295000);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    goto $bb3172;

  $bb3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3173;

  $bb3173:
    assume {:verifier.code 0} true;
    goto $bb3174;

  $bb3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2919} $i546 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $i547 := $eq.i32($i543, $i546);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i547} true;
    goto $bb3175, $bb3176;

  $bb3176:
    assume {:verifier.code 0} true;
    assume !($i547 == 1);
    goto $bb3177;

  $bb3177:
    assume {:verifier.code 0} true;
    goto $bb3180;

  $bb3180:
    assume {:verifier.code 0} true;
    goto $bb3181;

  $bb3181:
    assume {:verifier.code 0} true;
    goto $bb3182;

  $bb3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} __const_udelay(4295000);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    goto $bb3183;

  $bb3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2921} __const_udelay(4295000);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    goto $bb3184;

  $bb3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} __const_udelay(4295000);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    goto $bb3185;

  $bb3185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} __const_udelay(4295000);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    goto $bb3186;

  $bb3186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2924} __const_udelay(4295000);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    goto $bb3187;

  $bb3187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2925} __const_udelay(4295000);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    goto $bb3188;

  $bb3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} __const_udelay(4295000);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb3189;

  $bb3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} __const_udelay(4295000);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    goto $bb3190;

  $bb3190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} __const_udelay(4295000);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    goto $bb3191;

  $bb3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3192;

  $bb3192:
    assume {:verifier.code 0} true;
    goto $bb3193;

  $bb3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} $i549 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i546, $i549);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i550} true;
    goto $bb3194, $bb3195;

  $bb3195:
    assume {:verifier.code 0} true;
    assume !($i550 == 1);
    goto $bb3196;

  $bb3196:
    assume {:verifier.code 0} true;
    goto $bb3199;

  $bb3199:
    assume {:verifier.code 0} true;
    goto $bb3200;

  $bb3200:
    assume {:verifier.code 0} true;
    goto $bb3201;

  $bb3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2931} __const_udelay(4295000);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    goto $bb3202;

  $bb3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2932} __const_udelay(4295000);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    goto $bb3203;

  $bb3203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2933} __const_udelay(4295000);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    goto $bb3204;

  $bb3204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2934} __const_udelay(4295000);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    goto $bb3205;

  $bb3205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2935} __const_udelay(4295000);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    goto $bb3206;

  $bb3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2936} __const_udelay(4295000);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    goto $bb3207;

  $bb3207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2937} __const_udelay(4295000);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    goto $bb3208;

  $bb3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2938} __const_udelay(4295000);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    goto $bb3209;

  $bb3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2939} __const_udelay(4295000);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    goto $bb3210;

  $bb3210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2940} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3211;

  $bb3211:
    assume {:verifier.code 0} true;
    goto $bb3212;

  $bb3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2941} $i552 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $i553 := $eq.i32($i549, $i552);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i553} true;
    goto $bb3213, $bb3214;

  $bb3214:
    assume {:verifier.code 0} true;
    assume !($i553 == 1);
    goto $bb3215;

  $bb3215:
    assume {:verifier.code 0} true;
    goto $bb3218;

  $bb3218:
    assume {:verifier.code 0} true;
    goto $bb3219;

  $bb3219:
    assume {:verifier.code 0} true;
    goto $bb3220;

  $bb3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2942} __const_udelay(4295000);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    goto $bb3221;

  $bb3221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2943} __const_udelay(4295000);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    goto $bb3222;

  $bb3222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2944} __const_udelay(4295000);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    goto $bb3223;

  $bb3223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2945} __const_udelay(4295000);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    goto $bb3224;

  $bb3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2946} __const_udelay(4295000);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    goto $bb3225;

  $bb3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2947} __const_udelay(4295000);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    goto $bb3226;

  $bb3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2948} __const_udelay(4295000);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    goto $bb3227;

  $bb3227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2949} __const_udelay(4295000);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    goto $bb3228;

  $bb3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2950} __const_udelay(4295000);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    goto $bb3229;

  $bb3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2951} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3230;

  $bb3230:
    assume {:verifier.code 0} true;
    goto $bb3231;

  $bb3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2952} $i555 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i556 := $eq.i32($i552, $i555);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i556} true;
    goto $bb3232, $bb3233;

  $bb3233:
    assume {:verifier.code 0} true;
    assume !($i556 == 1);
    goto $bb3234;

  $bb3234:
    assume {:verifier.code 0} true;
    goto $bb3237;

  $bb3237:
    assume {:verifier.code 0} true;
    goto $bb3238;

  $bb3238:
    assume {:verifier.code 0} true;
    goto $bb3239;

  $bb3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2953} __const_udelay(4295000);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    goto $bb3240;

  $bb3240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2954} __const_udelay(4295000);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    goto $bb3241;

  $bb3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2955} __const_udelay(4295000);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    goto $bb3242;

  $bb3242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2956} __const_udelay(4295000);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    goto $bb3243;

  $bb3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2957} __const_udelay(4295000);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    goto $bb3244;

  $bb3244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2958} __const_udelay(4295000);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    goto $bb3245;

  $bb3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2959} __const_udelay(4295000);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    goto $bb3246;

  $bb3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2960} __const_udelay(4295000);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb3247;

  $bb3247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2961} __const_udelay(4295000);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    goto $bb3248;

  $bb3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2962} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3249;

  $bb3249:
    assume {:verifier.code 0} true;
    goto $bb3250;

  $bb3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2963} $i558 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i559 := $eq.i32($i555, $i558);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i559} true;
    goto $bb3251, $bb3252;

  $bb3252:
    assume {:verifier.code 0} true;
    assume !($i559 == 1);
    goto $bb3253;

  $bb3253:
    assume {:verifier.code 0} true;
    goto $bb3256;

  $bb3256:
    assume {:verifier.code 0} true;
    goto $bb3257;

  $bb3257:
    assume {:verifier.code 0} true;
    goto $bb3258;

  $bb3258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2964} __const_udelay(4295000);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    goto $bb3259;

  $bb3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2965} __const_udelay(4295000);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    goto $bb3260;

  $bb3260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2966} __const_udelay(4295000);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    goto $bb3261;

  $bb3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2967} __const_udelay(4295000);
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    goto $bb3262;

  $bb3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2968} __const_udelay(4295000);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb3263;

  $bb3263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2969} __const_udelay(4295000);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    goto $bb3264;

  $bb3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2970} __const_udelay(4295000);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    goto $bb3265;

  $bb3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2971} __const_udelay(4295000);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    goto $bb3266;

  $bb3266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2972} __const_udelay(4295000);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    goto $bb3267;

  $bb3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3268;

  $bb3268:
    assume {:verifier.code 0} true;
    goto $bb3269;

  $bb3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2974} $i561 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $i562 := $eq.i32($i558, $i561);
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i562} true;
    goto $bb3270, $bb3271;

  $bb3271:
    assume {:verifier.code 0} true;
    assume !($i562 == 1);
    goto $bb3272;

  $bb3272:
    assume {:verifier.code 0} true;
    goto $bb3275;

  $bb3275:
    assume {:verifier.code 0} true;
    goto $bb3276;

  $bb3276:
    assume {:verifier.code 0} true;
    goto $bb3277;

  $bb3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2975} __const_udelay(4295000);
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    goto $bb3278;

  $bb3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2976} __const_udelay(4295000);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    goto $bb3279;

  $bb3279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2977} __const_udelay(4295000);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    goto $bb3280;

  $bb3280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2978} __const_udelay(4295000);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    goto $bb3281;

  $bb3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2979} __const_udelay(4295000);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    goto $bb3282;

  $bb3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2980} __const_udelay(4295000);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    goto $bb3283;

  $bb3283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2981} __const_udelay(4295000);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    goto $bb3284;

  $bb3284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2982} __const_udelay(4295000);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    goto $bb3285;

  $bb3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2983} __const_udelay(4295000);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    goto $bb3286;

  $bb3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2984} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3287;

  $bb3287:
    assume {:verifier.code 0} true;
    goto $bb3288;

  $bb3288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2985} $i564 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i565 := $eq.i32($i561, $i564);
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb3289, $bb3290;

  $bb3290:
    assume {:verifier.code 0} true;
    assume !($i565 == 1);
    goto $bb3291;

  $bb3291:
    assume {:verifier.code 0} true;
    goto $bb3294;

  $bb3294:
    assume {:verifier.code 0} true;
    goto $bb3295;

  $bb3295:
    assume {:verifier.code 0} true;
    goto $bb3296;

  $bb3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2986} __const_udelay(4295000);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    goto $bb3297;

  $bb3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2987} __const_udelay(4295000);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    goto $bb3298;

  $bb3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2988} __const_udelay(4295000);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    goto $bb3299;

  $bb3299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2989} __const_udelay(4295000);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    goto $bb3300;

  $bb3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2990} __const_udelay(4295000);
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    goto $bb3301;

  $bb3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2991} __const_udelay(4295000);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    goto $bb3302;

  $bb3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2992} __const_udelay(4295000);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    goto $bb3303;

  $bb3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2993} __const_udelay(4295000);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    goto $bb3304;

  $bb3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2994} __const_udelay(4295000);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    goto $bb3305;

  $bb3305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2995} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3306;

  $bb3306:
    assume {:verifier.code 0} true;
    goto $bb3307;

  $bb3307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2996} $i567 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $i568 := $eq.i32($i564, $i567);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb3308, $bb3309;

  $bb3309:
    assume {:verifier.code 0} true;
    assume !($i568 == 1);
    goto $bb3310;

  $bb3310:
    assume {:verifier.code 0} true;
    goto $bb3313;

  $bb3313:
    assume {:verifier.code 0} true;
    goto $bb3314;

  $bb3314:
    assume {:verifier.code 0} true;
    goto $bb3315;

  $bb3315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2997} __const_udelay(4295000);
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    goto $bb3316;

  $bb3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2998} __const_udelay(4295000);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    goto $bb3317;

  $bb3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2999} __const_udelay(4295000);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    goto $bb3318;

  $bb3318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3000} __const_udelay(4295000);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    goto $bb3319;

  $bb3319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3001} __const_udelay(4295000);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    goto $bb3320;

  $bb3320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3002} __const_udelay(4295000);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    goto $bb3321;

  $bb3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3003} __const_udelay(4295000);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    goto $bb3322;

  $bb3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3004} __const_udelay(4295000);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    goto $bb3323;

  $bb3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3005} __const_udelay(4295000);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    goto $bb3324;

  $bb3324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3006} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3325;

  $bb3325:
    assume {:verifier.code 0} true;
    goto $bb3326;

  $bb3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3007} $i570 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i571 := $eq.i32($i567, $i570);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i571} true;
    goto $bb3327, $bb3328;

  $bb3328:
    assume {:verifier.code 0} true;
    assume !($i571 == 1);
    goto $bb3329;

  $bb3329:
    assume {:verifier.code 0} true;
    goto $bb3332;

  $bb3332:
    assume {:verifier.code 0} true;
    goto $bb3333;

  $bb3333:
    assume {:verifier.code 0} true;
    goto $bb3334;

  $bb3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3008} __const_udelay(4295000);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    goto $bb3335;

  $bb3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3009} __const_udelay(4295000);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    goto $bb3336;

  $bb3336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3010} __const_udelay(4295000);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    goto $bb3337;

  $bb3337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3011} __const_udelay(4295000);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    goto $bb3338;

  $bb3338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3012} __const_udelay(4295000);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    goto $bb3339;

  $bb3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3013} __const_udelay(4295000);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    goto $bb3340;

  $bb3340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3014} __const_udelay(4295000);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    goto $bb3341;

  $bb3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3015} __const_udelay(4295000);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    goto $bb3342;

  $bb3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3016} __const_udelay(4295000);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    goto $bb3343;

  $bb3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3017} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3344;

  $bb3344:
    assume {:verifier.code 0} true;
    goto $bb3345;

  $bb3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3018} $i573 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32($i570, $i573);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i574} true;
    goto $bb3346, $bb3347;

  $bb3347:
    assume {:verifier.code 0} true;
    assume !($i574 == 1);
    goto $bb3348;

  $bb3348:
    assume {:verifier.code 0} true;
    goto $bb3351;

  $bb3351:
    assume {:verifier.code 0} true;
    goto $bb3352;

  $bb3352:
    assume {:verifier.code 0} true;
    goto $bb3353;

  $bb3353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3019} __const_udelay(4295000);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    goto $bb3354;

  $bb3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3020} __const_udelay(4295000);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    goto $bb3355;

  $bb3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3021} __const_udelay(4295000);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb3356;

  $bb3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3022} __const_udelay(4295000);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    goto $bb3357;

  $bb3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3023} __const_udelay(4295000);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    goto $bb3358;

  $bb3358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3024} __const_udelay(4295000);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    goto $bb3359;

  $bb3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3025} __const_udelay(4295000);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    goto $bb3360;

  $bb3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3026} __const_udelay(4295000);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    goto $bb3361;

  $bb3361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3027} __const_udelay(4295000);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    goto $bb3362;

  $bb3362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3028} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3363;

  $bb3363:
    assume {:verifier.code 0} true;
    goto $bb3364;

  $bb3364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3029} $i576 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i577 := $eq.i32($i573, $i576);
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i577} true;
    goto $bb3365, $bb3366;

  $bb3366:
    assume {:verifier.code 0} true;
    assume !($i577 == 1);
    goto $bb3367;

  $bb3367:
    assume {:verifier.code 0} true;
    goto $bb3370;

  $bb3370:
    assume {:verifier.code 0} true;
    goto $bb3371;

  $bb3371:
    assume {:verifier.code 0} true;
    goto $bb3372;

  $bb3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3030} __const_udelay(4295000);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    goto $bb3373;

  $bb3373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3031} __const_udelay(4295000);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    goto $bb3374;

  $bb3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3032} __const_udelay(4295000);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    goto $bb3375;

  $bb3375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3033} __const_udelay(4295000);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    goto $bb3376;

  $bb3376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3034} __const_udelay(4295000);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    goto $bb3377;

  $bb3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3035} __const_udelay(4295000);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    goto $bb3378;

  $bb3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3036} __const_udelay(4295000);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    goto $bb3379;

  $bb3379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3037} __const_udelay(4295000);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    goto $bb3380;

  $bb3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3038} __const_udelay(4295000);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    goto $bb3381;

  $bb3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3039} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3382;

  $bb3382:
    assume {:verifier.code 0} true;
    goto $bb3383;

  $bb3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3040} $i579 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i580 := $eq.i32($i576, $i579);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i580} true;
    goto $bb3384, $bb3385;

  $bb3385:
    assume {:verifier.code 0} true;
    assume !($i580 == 1);
    goto $bb3386;

  $bb3386:
    assume {:verifier.code 0} true;
    goto $bb3389;

  $bb3389:
    assume {:verifier.code 0} true;
    goto $bb3390;

  $bb3390:
    assume {:verifier.code 0} true;
    goto $bb3391;

  $bb3391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3041} __const_udelay(4295000);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    goto $bb3392;

  $bb3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3042} __const_udelay(4295000);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    goto $bb3393;

  $bb3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3043} __const_udelay(4295000);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    goto $bb3394;

  $bb3394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3044} __const_udelay(4295000);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    goto $bb3395;

  $bb3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3045} __const_udelay(4295000);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    goto $bb3396;

  $bb3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3046} __const_udelay(4295000);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    goto $bb3397;

  $bb3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3047} __const_udelay(4295000);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    goto $bb3398;

  $bb3398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3048} __const_udelay(4295000);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    goto $bb3399;

  $bb3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3049} __const_udelay(4295000);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    goto $bb3400;

  $bb3400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3050} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3401;

  $bb3401:
    assume {:verifier.code 0} true;
    goto $bb3402;

  $bb3402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3051} $i582 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $i583 := $eq.i32($i579, $i582);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i583} true;
    goto $bb3403, $bb3404;

  $bb3404:
    assume {:verifier.code 0} true;
    assume !($i583 == 1);
    goto $bb3405;

  $bb3405:
    assume {:verifier.code 0} true;
    goto $bb3408;

  $bb3408:
    assume {:verifier.code 0} true;
    goto $bb3409;

  $bb3409:
    assume {:verifier.code 0} true;
    goto $bb3410;

  $bb3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3052} __const_udelay(4295000);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    goto $bb3411;

  $bb3411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3053} __const_udelay(4295000);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb3412;

  $bb3412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3054} __const_udelay(4295000);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    goto $bb3413;

  $bb3413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3055} __const_udelay(4295000);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    goto $bb3414;

  $bb3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3056} __const_udelay(4295000);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    goto $bb3415;

  $bb3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3057} __const_udelay(4295000);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    goto $bb3416;

  $bb3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3058} __const_udelay(4295000);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    goto $bb3417;

  $bb3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3059} __const_udelay(4295000);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    goto $bb3418;

  $bb3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3060} __const_udelay(4295000);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    goto $bb3419;

  $bb3419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3061} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3420;

  $bb3420:
    assume {:verifier.code 0} true;
    goto $bb3421;

  $bb3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3062} $i585 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $i586 := $eq.i32($i582, $i585);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i586} true;
    goto $bb3422, $bb3423;

  $bb3423:
    assume {:verifier.code 0} true;
    assume !($i586 == 1);
    goto $bb3424;

  $bb3424:
    assume {:verifier.code 0} true;
    goto $bb3427;

  $bb3427:
    assume {:verifier.code 0} true;
    goto $bb3428;

  $bb3428:
    assume {:verifier.code 0} true;
    goto $bb3429;

  $bb3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3063} __const_udelay(4295000);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    goto $bb3430;

  $bb3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3064} __const_udelay(4295000);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    goto $bb3431;

  $bb3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3065} __const_udelay(4295000);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    goto $bb3432;

  $bb3432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3066} __const_udelay(4295000);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    goto $bb3433;

  $bb3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3067} __const_udelay(4295000);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    goto $bb3434;

  $bb3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3068} __const_udelay(4295000);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    goto $bb3435;

  $bb3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3069} __const_udelay(4295000);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    goto $bb3436;

  $bb3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3070} __const_udelay(4295000);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    goto $bb3437;

  $bb3437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3071} __const_udelay(4295000);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    goto $bb3438;

  $bb3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3072} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3439;

  $bb3439:
    assume {:verifier.code 0} true;
    goto $bb3440;

  $bb3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3073} $i588 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $i589 := $eq.i32($i585, $i588);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i589} true;
    goto $bb3441, $bb3442;

  $bb3442:
    assume {:verifier.code 0} true;
    assume !($i589 == 1);
    goto $bb3443;

  $bb3443:
    assume {:verifier.code 0} true;
    goto $bb3446;

  $bb3446:
    assume {:verifier.code 0} true;
    goto $bb3447;

  $bb3447:
    assume {:verifier.code 0} true;
    goto $bb3448;

  $bb3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3074} __const_udelay(4295000);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    goto $bb3449;

  $bb3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3075} __const_udelay(4295000);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    goto $bb3450;

  $bb3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3076} __const_udelay(4295000);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    goto $bb3451;

  $bb3451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3077} __const_udelay(4295000);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    goto $bb3452;

  $bb3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3078} __const_udelay(4295000);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    goto $bb3453;

  $bb3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3079} __const_udelay(4295000);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    goto $bb3454;

  $bb3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3080} __const_udelay(4295000);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    goto $bb3455;

  $bb3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3081} __const_udelay(4295000);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb3456;

  $bb3456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3082} __const_udelay(4295000);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    goto $bb3457;

  $bb3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3083} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3458;

  $bb3458:
    assume {:verifier.code 0} true;
    goto $bb3459;

  $bb3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3084} $i591 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $i592 := $eq.i32($i588, $i591);
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i592} true;
    goto $bb3460, $bb3461;

  $bb3461:
    assume {:verifier.code 0} true;
    assume !($i592 == 1);
    goto $bb3462;

  $bb3462:
    assume {:verifier.code 0} true;
    goto $bb3465;

  $bb3465:
    assume {:verifier.code 0} true;
    goto $bb3466;

  $bb3466:
    assume {:verifier.code 0} true;
    goto $bb3467;

  $bb3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3085} __const_udelay(4295000);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    goto $bb3468;

  $bb3468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3086} __const_udelay(4295000);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    goto $bb3469;

  $bb3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3087} __const_udelay(4295000);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    goto $bb3470;

  $bb3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3088} __const_udelay(4295000);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    goto $bb3471;

  $bb3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3089} __const_udelay(4295000);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    goto $bb3472;

  $bb3472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3090} __const_udelay(4295000);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    goto $bb3473;

  $bb3473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3091} __const_udelay(4295000);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    goto $bb3474;

  $bb3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3092} __const_udelay(4295000);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    goto $bb3475;

  $bb3475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3093} __const_udelay(4295000);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    goto $bb3476;

  $bb3476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3094} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3477;

  $bb3477:
    assume {:verifier.code 0} true;
    goto $bb3478;

  $bb3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3095} $i594 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $i595 := $eq.i32($i591, $i594);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i595} true;
    goto $bb3479, $bb3480;

  $bb3480:
    assume {:verifier.code 0} true;
    assume !($i595 == 1);
    goto $bb3481;

  $bb3481:
    assume {:verifier.code 0} true;
    goto $bb3484;

  $bb3484:
    assume {:verifier.code 0} true;
    goto $bb3485;

  $bb3485:
    assume {:verifier.code 0} true;
    goto $bb3486;

  $bb3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3096} __const_udelay(4295000);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    goto $bb3487;

  $bb3487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3097} __const_udelay(4295000);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    goto $bb3488;

  $bb3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3098} __const_udelay(4295000);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    goto $bb3489;

  $bb3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3099} __const_udelay(4295000);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    goto $bb3490;

  $bb3490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3100} __const_udelay(4295000);
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    goto $bb3491;

  $bb3491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3101} __const_udelay(4295000);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    goto $bb3492;

  $bb3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3102} __const_udelay(4295000);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    goto $bb3493;

  $bb3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3103} __const_udelay(4295000);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    goto $bb3494;

  $bb3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3104} __const_udelay(4295000);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    goto $bb3495;

  $bb3495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3105} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3496;

  $bb3496:
    assume {:verifier.code 0} true;
    goto $bb3497;

  $bb3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3106} $i597 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32($i594, $i597);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i598} true;
    goto $bb3498, $bb3499;

  $bb3499:
    assume {:verifier.code 0} true;
    assume !($i598 == 1);
    goto $bb3500;

  $bb3500:
    assume {:verifier.code 0} true;
    goto $bb3503;

  $bb3503:
    assume {:verifier.code 0} true;
    goto $bb3504;

  $bb3504:
    assume {:verifier.code 0} true;
    goto $bb3505;

  $bb3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3107} __const_udelay(4295000);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    goto $bb3506;

  $bb3506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3108} __const_udelay(4295000);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    goto $bb3507;

  $bb3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3109} __const_udelay(4295000);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    goto $bb3508;

  $bb3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3110} __const_udelay(4295000);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    goto $bb3509;

  $bb3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3111} __const_udelay(4295000);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    goto $bb3510;

  $bb3510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3112} __const_udelay(4295000);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    goto $bb3511;

  $bb3511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3113} __const_udelay(4295000);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb3512;

  $bb3512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3114} __const_udelay(4295000);
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    goto $bb3513;

  $bb3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3115} __const_udelay(4295000);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    goto $bb3514;

  $bb3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3116} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3515;

  $bb3515:
    assume {:verifier.code 0} true;
    goto $bb3516;

  $bb3516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3117} $i600 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $i601 := $eq.i32($i597, $i600);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb3517, $bb3518;

  $bb3518:
    assume {:verifier.code 0} true;
    assume !($i601 == 1);
    goto $bb3519;

  $bb3519:
    assume {:verifier.code 0} true;
    goto $bb3522;

  $bb3522:
    assume {:verifier.code 0} true;
    goto $bb3523;

  $bb3523:
    assume {:verifier.code 0} true;
    goto $bb3524;

  $bb3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3118} __const_udelay(4295000);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    goto $bb3525;

  $bb3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3119} __const_udelay(4295000);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    goto $bb3526;

  $bb3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3120} __const_udelay(4295000);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    goto $bb3527;

  $bb3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3121} __const_udelay(4295000);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    goto $bb3528;

  $bb3528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3122} __const_udelay(4295000);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    goto $bb3529;

  $bb3529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3123} __const_udelay(4295000);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    goto $bb3530;

  $bb3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3124} __const_udelay(4295000);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    goto $bb3531;

  $bb3531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3125} __const_udelay(4295000);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    goto $bb3532;

  $bb3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3126} __const_udelay(4295000);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    goto $bb3533;

  $bb3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3127} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3534;

  $bb3534:
    assume {:verifier.code 0} true;
    goto $bb3535;

  $bb3535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3128} $i603 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i604 := $eq.i32($i600, $i603);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i604} true;
    goto $bb3536, $bb3537;

  $bb3537:
    assume {:verifier.code 0} true;
    assume !($i604 == 1);
    goto $bb3538;

  $bb3538:
    assume {:verifier.code 0} true;
    goto $bb3541;

  $bb3541:
    assume {:verifier.code 0} true;
    goto $bb3542;

  $bb3542:
    assume {:verifier.code 0} true;
    goto $bb3543;

  $bb3543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3129} __const_udelay(4295000);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    goto $bb3544;

  $bb3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3130} __const_udelay(4295000);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    goto $bb3545;

  $bb3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3131} __const_udelay(4295000);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    goto $bb3546;

  $bb3546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3132} __const_udelay(4295000);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    goto $bb3547;

  $bb3547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3133} __const_udelay(4295000);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    goto $bb3548;

  $bb3548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3134} __const_udelay(4295000);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    goto $bb3549;

  $bb3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3135} __const_udelay(4295000);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    goto $bb3550;

  $bb3550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3136} __const_udelay(4295000);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    goto $bb3551;

  $bb3551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3137} __const_udelay(4295000);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    goto $bb3552;

  $bb3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3138} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3553;

  $bb3553:
    assume {:verifier.code 0} true;
    goto $bb3554;

  $bb3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3139} $i606 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $i607 := $eq.i32($i603, $i606);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i607} true;
    goto $bb3555, $bb3556;

  $bb3556:
    assume {:verifier.code 0} true;
    assume !($i607 == 1);
    goto $bb3557;

  $bb3557:
    assume {:verifier.code 0} true;
    goto $bb3560;

  $bb3560:
    assume {:verifier.code 0} true;
    goto $bb3561;

  $bb3561:
    assume {:verifier.code 0} true;
    goto $bb3562;

  $bb3562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3140} __const_udelay(4295000);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    goto $bb3563;

  $bb3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3141} __const_udelay(4295000);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    goto $bb3564;

  $bb3564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3142} __const_udelay(4295000);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    goto $bb3565;

  $bb3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3143} __const_udelay(4295000);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    goto $bb3566;

  $bb3566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3144} __const_udelay(4295000);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    goto $bb3567;

  $bb3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3145} __const_udelay(4295000);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    goto $bb3568;

  $bb3568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3146} __const_udelay(4295000);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    goto $bb3569;

  $bb3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3147} __const_udelay(4295000);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    goto $bb3570;

  $bb3570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3148} __const_udelay(4295000);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    goto $bb3571;

  $bb3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3149} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3572;

  $bb3572:
    assume {:verifier.code 0} true;
    goto $bb3573;

  $bb3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3150} $i609 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $i610 := $eq.i32($i606, $i609);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i610} true;
    goto $bb3574, $bb3575;

  $bb3575:
    assume {:verifier.code 0} true;
    assume !($i610 == 1);
    goto $bb3576;

  $bb3576:
    assume {:verifier.code 0} true;
    goto $bb3579;

  $bb3579:
    assume {:verifier.code 0} true;
    goto $bb3580;

  $bb3580:
    assume {:verifier.code 0} true;
    goto $bb3581;

  $bb3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3151} __const_udelay(4295000);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    goto $bb3582;

  $bb3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3152} __const_udelay(4295000);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    goto $bb3583;

  $bb3583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3153} __const_udelay(4295000);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    goto $bb3584;

  $bb3584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3154} __const_udelay(4295000);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    goto $bb3585;

  $bb3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3155} __const_udelay(4295000);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    goto $bb3586;

  $bb3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3156} __const_udelay(4295000);
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    goto $bb3587;

  $bb3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3157} __const_udelay(4295000);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    goto $bb3588;

  $bb3588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3158} __const_udelay(4295000);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    goto $bb3589;

  $bb3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3159} __const_udelay(4295000);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    goto $bb3590;

  $bb3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3160} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3591;

  $bb3591:
    assume {:verifier.code 0} true;
    goto $bb3592;

  $bb3592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3161} $i612 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i613 := $eq.i32($i609, $i612);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i613} true;
    goto $bb3593, $bb3594;

  $bb3594:
    assume {:verifier.code 0} true;
    assume !($i613 == 1);
    goto $bb3595;

  $bb3595:
    assume {:verifier.code 0} true;
    goto $bb3598;

  $bb3598:
    assume {:verifier.code 0} true;
    goto $bb3599;

  $bb3599:
    assume {:verifier.code 0} true;
    goto $bb3600;

  $bb3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3162} __const_udelay(4295000);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    goto $bb3601;

  $bb3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3163} __const_udelay(4295000);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    goto $bb3602;

  $bb3602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3164} __const_udelay(4295000);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    goto $bb3603;

  $bb3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3165} __const_udelay(4295000);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    goto $bb3604;

  $bb3604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3166} __const_udelay(4295000);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    goto $bb3605;

  $bb3605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3167} __const_udelay(4295000);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    goto $bb3606;

  $bb3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3168} __const_udelay(4295000);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    goto $bb3607;

  $bb3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3169} __const_udelay(4295000);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    goto $bb3608;

  $bb3608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3170} __const_udelay(4295000);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    goto $bb3609;

  $bb3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3171} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3610;

  $bb3610:
    assume {:verifier.code 0} true;
    goto $bb3611;

  $bb3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3172} $i615 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i616 := $eq.i32($i612, $i615);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i616} true;
    goto $bb3612, $bb3613;

  $bb3613:
    assume {:verifier.code 0} true;
    assume !($i616 == 1);
    goto $bb3614;

  $bb3614:
    assume {:verifier.code 0} true;
    goto $bb3617;

  $bb3617:
    assume {:verifier.code 0} true;
    goto $bb3618;

  $bb3618:
    assume {:verifier.code 0} true;
    goto $bb3619;

  $bb3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3173} __const_udelay(4295000);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    goto $bb3620;

  $bb3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3174} __const_udelay(4295000);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    goto $bb3621;

  $bb3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3175} __const_udelay(4295000);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    goto $bb3622;

  $bb3622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3176} __const_udelay(4295000);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    goto $bb3623;

  $bb3623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3177} __const_udelay(4295000);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    goto $bb3624;

  $bb3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3178} __const_udelay(4295000);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    goto $bb3625;

  $bb3625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3179} __const_udelay(4295000);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    goto $bb3626;

  $bb3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3180} __const_udelay(4295000);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    goto $bb3627;

  $bb3627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3181} __const_udelay(4295000);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb3628;

  $bb3628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3182} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3629;

  $bb3629:
    assume {:verifier.code 0} true;
    goto $bb3630;

  $bb3630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3183} $i618 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $i619 := $eq.i32($i615, $i618);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i619} true;
    goto $bb3631, $bb3632;

  $bb3632:
    assume {:verifier.code 0} true;
    assume !($i619 == 1);
    goto $bb3633;

  $bb3633:
    assume {:verifier.code 0} true;
    goto $bb3636;

  $bb3636:
    assume {:verifier.code 0} true;
    goto $bb3637;

  $bb3637:
    assume {:verifier.code 0} true;
    goto $bb3638;

  $bb3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3184} __const_udelay(4295000);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    goto $bb3639;

  $bb3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3185} __const_udelay(4295000);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    goto $bb3640;

  $bb3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3186} __const_udelay(4295000);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    goto $bb3641;

  $bb3641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3187} __const_udelay(4295000);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    goto $bb3642;

  $bb3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3188} __const_udelay(4295000);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    goto $bb3643;

  $bb3643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3189} __const_udelay(4295000);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    goto $bb3644;

  $bb3644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3190} __const_udelay(4295000);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    goto $bb3645;

  $bb3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3191} __const_udelay(4295000);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    goto $bb3646;

  $bb3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3192} __const_udelay(4295000);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb3647;

  $bb3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3193} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3648;

  $bb3648:
    assume {:verifier.code 0} true;
    goto $bb3649;

  $bb3649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3194} $i621 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i622 := $eq.i32($i618, $i621);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i622} true;
    goto $bb3650, $bb3651;

  $bb3651:
    assume {:verifier.code 0} true;
    assume !($i622 == 1);
    goto $bb3652;

  $bb3652:
    assume {:verifier.code 0} true;
    goto $bb3655;

  $bb3655:
    assume {:verifier.code 0} true;
    goto $bb3656;

  $bb3656:
    assume {:verifier.code 0} true;
    goto $bb3657;

  $bb3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3195} __const_udelay(4295000);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    goto $bb3658;

  $bb3658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3196} __const_udelay(4295000);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    goto $bb3659;

  $bb3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3197} __const_udelay(4295000);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    goto $bb3660;

  $bb3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3198} __const_udelay(4295000);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    goto $bb3661;

  $bb3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3199} __const_udelay(4295000);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    goto $bb3662;

  $bb3662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3200} __const_udelay(4295000);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    goto $bb3663;

  $bb3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3201} __const_udelay(4295000);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    goto $bb3664;

  $bb3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3202} __const_udelay(4295000);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    goto $bb3665;

  $bb3665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3203} __const_udelay(4295000);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    goto $bb3666;

  $bb3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3204} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3667;

  $bb3667:
    assume {:verifier.code 0} true;
    goto $bb3668;

  $bb3668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3205} $i624 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $i625 := $eq.i32($i621, $i624);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i625} true;
    goto $bb3669, $bb3670;

  $bb3670:
    assume {:verifier.code 0} true;
    assume !($i625 == 1);
    goto $bb3671;

  $bb3671:
    assume {:verifier.code 0} true;
    goto $bb3674;

  $bb3674:
    assume {:verifier.code 0} true;
    goto $bb3675;

  $bb3675:
    assume {:verifier.code 0} true;
    goto $bb3676;

  $bb3676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3206} __const_udelay(4295000);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    goto $bb3677;

  $bb3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3207} __const_udelay(4295000);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    goto $bb3678;

  $bb3678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3208} __const_udelay(4295000);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    goto $bb3679;

  $bb3679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3209} __const_udelay(4295000);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    goto $bb3680;

  $bb3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3210} __const_udelay(4295000);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    goto $bb3681;

  $bb3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3211} __const_udelay(4295000);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    goto $bb3682;

  $bb3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3212} __const_udelay(4295000);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    goto $bb3683;

  $bb3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3213} __const_udelay(4295000);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    goto $bb3684;

  $bb3684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3214} __const_udelay(4295000);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    goto $bb3685;

  $bb3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3215} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3686;

  $bb3686:
    assume {:verifier.code 0} true;
    goto $bb3687;

  $bb3687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3216} $i627 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i628 := $eq.i32($i624, $i627);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i628} true;
    goto $bb3688, $bb3689;

  $bb3689:
    assume {:verifier.code 0} true;
    assume !($i628 == 1);
    goto $bb3690;

  $bb3690:
    assume {:verifier.code 0} true;
    goto $bb3693;

  $bb3693:
    assume {:verifier.code 0} true;
    goto $bb3694;

  $bb3694:
    assume {:verifier.code 0} true;
    goto $bb3695;

  $bb3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3217} __const_udelay(4295000);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    goto $bb3696;

  $bb3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3218} __const_udelay(4295000);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    goto $bb3697;

  $bb3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3219} __const_udelay(4295000);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    goto $bb3698;

  $bb3698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3220} __const_udelay(4295000);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    goto $bb3699;

  $bb3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3221} __const_udelay(4295000);
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    goto $bb3700;

  $bb3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3222} __const_udelay(4295000);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    goto $bb3701;

  $bb3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3223} __const_udelay(4295000);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    goto $bb3702;

  $bb3702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3224} __const_udelay(4295000);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    goto $bb3703;

  $bb3703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3225} __const_udelay(4295000);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    goto $bb3704;

  $bb3704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3226} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3705;

  $bb3705:
    assume {:verifier.code 0} true;
    goto $bb3706;

  $bb3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3227} $i630 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i631 := $eq.i32($i627, $i630);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i631} true;
    goto $bb3707, $bb3708;

  $bb3708:
    assume {:verifier.code 0} true;
    assume !($i631 == 1);
    goto $bb3709;

  $bb3709:
    assume {:verifier.code 0} true;
    goto $bb3712;

  $bb3712:
    assume {:verifier.code 0} true;
    goto $bb3713;

  $bb3713:
    assume {:verifier.code 0} true;
    goto $bb3714;

  $bb3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3228} __const_udelay(4295000);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    goto $bb3715;

  $bb3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3229} __const_udelay(4295000);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    goto $bb3716;

  $bb3716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3230} __const_udelay(4295000);
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    goto $bb3717;

  $bb3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3231} __const_udelay(4295000);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    goto $bb3718;

  $bb3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3232} __const_udelay(4295000);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    goto $bb3719;

  $bb3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3233} __const_udelay(4295000);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    goto $bb3720;

  $bb3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3234} __const_udelay(4295000);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    goto $bb3721;

  $bb3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3235} __const_udelay(4295000);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    goto $bb3722;

  $bb3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3236} __const_udelay(4295000);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    goto $bb3723;

  $bb3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3237} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3724;

  $bb3724:
    assume {:verifier.code 0} true;
    goto $bb3725;

  $bb3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3238} $i633 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $i634 := $eq.i32($i630, $i633);
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i634} true;
    goto $bb3726, $bb3727;

  $bb3727:
    assume {:verifier.code 0} true;
    assume !($i634 == 1);
    goto $bb3728;

  $bb3728:
    assume {:verifier.code 0} true;
    goto $bb3731;

  $bb3731:
    assume {:verifier.code 0} true;
    goto $bb3732;

  $bb3732:
    assume {:verifier.code 0} true;
    goto $bb3733;

  $bb3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3239} __const_udelay(4295000);
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    goto $bb3734;

  $bb3734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3240} __const_udelay(4295000);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    goto $bb3735;

  $bb3735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3241} __const_udelay(4295000);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    goto $bb3736;

  $bb3736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3242} __const_udelay(4295000);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    goto $bb3737;

  $bb3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3243} __const_udelay(4295000);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    goto $bb3738;

  $bb3738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3244} __const_udelay(4295000);
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    goto $bb3739;

  $bb3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3245} __const_udelay(4295000);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    goto $bb3740;

  $bb3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3246} __const_udelay(4295000);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    goto $bb3741;

  $bb3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3247} __const_udelay(4295000);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    goto $bb3742;

  $bb3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3248} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3743;

  $bb3743:
    assume {:verifier.code 0} true;
    goto $bb3744;

  $bb3744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3249} $i636 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i637 := $eq.i32($i633, $i636);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i637} true;
    goto $bb3745, $bb3746;

  $bb3746:
    assume {:verifier.code 0} true;
    assume !($i637 == 1);
    goto $bb3747;

  $bb3747:
    assume {:verifier.code 0} true;
    goto $bb3750;

  $bb3750:
    assume {:verifier.code 0} true;
    goto $bb3751;

  $bb3751:
    assume {:verifier.code 0} true;
    goto $bb3752;

  $bb3752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3250} __const_udelay(4295000);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    goto $bb3753;

  $bb3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3251} __const_udelay(4295000);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    goto $bb3754;

  $bb3754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3252} __const_udelay(4295000);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    goto $bb3755;

  $bb3755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3253} __const_udelay(4295000);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    goto $bb3756;

  $bb3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3254} __const_udelay(4295000);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    goto $bb3757;

  $bb3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3255} __const_udelay(4295000);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    goto $bb3758;

  $bb3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3256} __const_udelay(4295000);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    goto $bb3759;

  $bb3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3257} __const_udelay(4295000);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    goto $bb3760;

  $bb3760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3258} __const_udelay(4295000);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    goto $bb3761;

  $bb3761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3259} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3762;

  $bb3762:
    assume {:verifier.code 0} true;
    goto $bb3763;

  $bb3763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3260} $i639 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $i640 := $eq.i32($i636, $i639);
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i640} true;
    goto $bb3764, $bb3765;

  $bb3765:
    assume {:verifier.code 0} true;
    assume !($i640 == 1);
    goto $bb3766;

  $bb3766:
    assume {:verifier.code 0} true;
    goto $bb3769;

  $bb3769:
    assume {:verifier.code 0} true;
    goto $bb3770;

  $bb3770:
    assume {:verifier.code 0} true;
    goto $bb3771;

  $bb3771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3261} __const_udelay(4295000);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    goto $bb3772;

  $bb3772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3262} __const_udelay(4295000);
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    goto $bb3773;

  $bb3773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3263} __const_udelay(4295000);
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    goto $bb3774;

  $bb3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3264} __const_udelay(4295000);
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    goto $bb3775;

  $bb3775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3265} __const_udelay(4295000);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    goto $bb3776;

  $bb3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3266} __const_udelay(4295000);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    goto $bb3777;

  $bb3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3267} __const_udelay(4295000);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    goto $bb3778;

  $bb3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3268} __const_udelay(4295000);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    goto $bb3779;

  $bb3779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3269} __const_udelay(4295000);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    goto $bb3780;

  $bb3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3270} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3781;

  $bb3781:
    assume {:verifier.code 0} true;
    goto $bb3782;

  $bb3782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3271} $i642 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $i643 := $eq.i32($i639, $i642);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i643} true;
    goto $bb3783, $bb3784;

  $bb3784:
    assume {:verifier.code 0} true;
    assume !($i643 == 1);
    goto $bb3785;

  $bb3785:
    assume {:verifier.code 0} true;
    goto $bb3788;

  $bb3788:
    assume {:verifier.code 0} true;
    goto $bb3789;

  $bb3789:
    assume {:verifier.code 0} true;
    goto $bb3790;

  $bb3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3272} __const_udelay(4295000);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    goto $bb3791;

  $bb3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3273} __const_udelay(4295000);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    goto $bb3792;

  $bb3792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3274} __const_udelay(4295000);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    goto $bb3793;

  $bb3793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3275} __const_udelay(4295000);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    goto $bb3794;

  $bb3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3276} __const_udelay(4295000);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    goto $bb3795;

  $bb3795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3277} __const_udelay(4295000);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    goto $bb3796;

  $bb3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3278} __const_udelay(4295000);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    goto $bb3797;

  $bb3797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3279} __const_udelay(4295000);
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    goto $bb3798;

  $bb3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3280} __const_udelay(4295000);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    goto $bb3799;

  $bb3799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3281} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3800;

  $bb3800:
    assume {:verifier.code 0} true;
    goto $bb3801;

  $bb3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3282} $i645 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $i646 := $eq.i32($i642, $i645);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i646} true;
    goto $bb3802, $bb3803;

  $bb3803:
    assume {:verifier.code 0} true;
    assume !($i646 == 1);
    goto $bb3804;

  $bb3804:
    assume {:verifier.code 0} true;
    goto $bb3807;

  $bb3807:
    assume {:verifier.code 0} true;
    goto $bb3808;

  $bb3808:
    assume {:verifier.code 0} true;
    goto $bb3809;

  $bb3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3283} __const_udelay(4295000);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    goto $bb3810;

  $bb3810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3284} __const_udelay(4295000);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    goto $bb3811;

  $bb3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3285} __const_udelay(4295000);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    goto $bb3812;

  $bb3812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3286} __const_udelay(4295000);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    goto $bb3813;

  $bb3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3287} __const_udelay(4295000);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    goto $bb3814;

  $bb3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3288} __const_udelay(4295000);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    goto $bb3815;

  $bb3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3289} __const_udelay(4295000);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    goto $bb3816;

  $bb3816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3290} __const_udelay(4295000);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    goto $bb3817;

  $bb3817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3291} __const_udelay(4295000);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    goto $bb3818;

  $bb3818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3292} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3819;

  $bb3819:
    assume {:verifier.code 0} true;
    goto $bb3820;

  $bb3820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3293} $i648 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $i649 := $eq.i32($i645, $i648);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i649} true;
    goto $bb3821, $bb3822;

  $bb3822:
    assume {:verifier.code 0} true;
    assume !($i649 == 1);
    goto $bb3823;

  $bb3823:
    assume {:verifier.code 0} true;
    goto $bb3826;

  $bb3826:
    assume {:verifier.code 0} true;
    goto $bb3827;

  $bb3827:
    assume {:verifier.code 0} true;
    goto $bb3828;

  $bb3828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3294} __const_udelay(4295000);
    goto corral_source_split_10915;

  corral_source_split_10915:
    assume {:verifier.code 0} true;
    goto $bb3829;

  $bb3829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3295} __const_udelay(4295000);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    goto $bb3830;

  $bb3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3296} __const_udelay(4295000);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    goto $bb3831;

  $bb3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3297} __const_udelay(4295000);
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    goto $bb3832;

  $bb3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3298} __const_udelay(4295000);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    goto $bb3833;

  $bb3833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3299} __const_udelay(4295000);
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    goto $bb3834;

  $bb3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3300} __const_udelay(4295000);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    goto $bb3835;

  $bb3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3301} __const_udelay(4295000);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    goto $bb3836;

  $bb3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3302} __const_udelay(4295000);
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    goto $bb3837;

  $bb3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3303} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3838;

  $bb3838:
    assume {:verifier.code 0} true;
    goto $bb3839;

  $bb3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3304} $i651 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    $i652 := $eq.i32($i648, $i651);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i652} true;
    goto $bb3840, $bb3841;

  $bb3841:
    assume {:verifier.code 0} true;
    assume !($i652 == 1);
    goto $bb3842;

  $bb3842:
    assume {:verifier.code 0} true;
    goto $bb3845;

  $bb3845:
    assume {:verifier.code 0} true;
    goto $bb3846;

  $bb3846:
    assume {:verifier.code 0} true;
    goto $bb3847;

  $bb3847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3305} __const_udelay(4295000);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    goto $bb3848;

  $bb3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3306} __const_udelay(4295000);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    goto $bb3849;

  $bb3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3307} __const_udelay(4295000);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    goto $bb3850;

  $bb3850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3308} __const_udelay(4295000);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    goto $bb3851;

  $bb3851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3309} __const_udelay(4295000);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    goto $bb3852;

  $bb3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3310} __const_udelay(4295000);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    goto $bb3853;

  $bb3853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3311} __const_udelay(4295000);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    goto $bb3854;

  $bb3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3312} __const_udelay(4295000);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    goto $bb3855;

  $bb3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3313} __const_udelay(4295000);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    goto $bb3856;

  $bb3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3314} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3857;

  $bb3857:
    assume {:verifier.code 0} true;
    goto $bb3858;

  $bb3858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3315} $i654 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i655 := $eq.i32($i651, $i654);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i655} true;
    goto $bb3859, $bb3860;

  $bb3860:
    assume {:verifier.code 0} true;
    assume !($i655 == 1);
    goto $bb3861;

  $bb3861:
    assume {:verifier.code 0} true;
    goto $bb3864;

  $bb3864:
    assume {:verifier.code 0} true;
    goto $bb3865;

  $bb3865:
    assume {:verifier.code 0} true;
    goto $bb3866;

  $bb3866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3316} __const_udelay(4295000);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    goto $bb3867;

  $bb3867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3317} __const_udelay(4295000);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    goto $bb3868;

  $bb3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3318} __const_udelay(4295000);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    goto $bb3869;

  $bb3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3319} __const_udelay(4295000);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    goto $bb3870;

  $bb3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3320} __const_udelay(4295000);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    goto $bb3871;

  $bb3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3321} __const_udelay(4295000);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb3872;

  $bb3872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3322} __const_udelay(4295000);
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    goto $bb3873;

  $bb3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3323} __const_udelay(4295000);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    goto $bb3874;

  $bb3874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3324} __const_udelay(4295000);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    goto $bb3875;

  $bb3875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3325} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3876;

  $bb3876:
    assume {:verifier.code 0} true;
    goto $bb3877;

  $bb3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3326} $i657 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i658 := $eq.i32($i654, $i657);
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i658} true;
    goto $bb3878, $bb3879;

  $bb3879:
    assume {:verifier.code 0} true;
    assume !($i658 == 1);
    goto $bb3880;

  $bb3880:
    assume {:verifier.code 0} true;
    goto $bb3883;

  $bb3883:
    assume {:verifier.code 0} true;
    goto $bb3884;

  $bb3884:
    assume {:verifier.code 0} true;
    goto $bb3885;

  $bb3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3327} __const_udelay(4295000);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    goto $bb3886;

  $bb3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3328} __const_udelay(4295000);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    goto $bb3887;

  $bb3887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3329} __const_udelay(4295000);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    goto $bb3888;

  $bb3888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3330} __const_udelay(4295000);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    goto $bb3889;

  $bb3889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3331} __const_udelay(4295000);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    goto $bb3890;

  $bb3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3332} __const_udelay(4295000);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    goto $bb3891;

  $bb3891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3333} __const_udelay(4295000);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    goto $bb3892;

  $bb3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3334} __const_udelay(4295000);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    goto $bb3893;

  $bb3893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3335} __const_udelay(4295000);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    goto $bb3894;

  $bb3894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3336} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3895;

  $bb3895:
    assume {:verifier.code 0} true;
    goto $bb3896;

  $bb3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3337} $i660 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $i661 := $eq.i32($i657, $i660);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i661} true;
    goto $bb3897, $bb3898;

  $bb3898:
    assume {:verifier.code 0} true;
    assume !($i661 == 1);
    goto $bb3899;

  $bb3899:
    assume {:verifier.code 0} true;
    goto $bb3902;

  $bb3902:
    assume {:verifier.code 0} true;
    goto $bb3903;

  $bb3903:
    assume {:verifier.code 0} true;
    goto $bb3904;

  $bb3904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3338} __const_udelay(4295000);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    goto $bb3905;

  $bb3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3339} __const_udelay(4295000);
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    goto $bb3906;

  $bb3906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3340} __const_udelay(4295000);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    goto $bb3907;

  $bb3907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3341} __const_udelay(4295000);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    goto $bb3908;

  $bb3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3342} __const_udelay(4295000);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    goto $bb3909;

  $bb3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3343} __const_udelay(4295000);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    goto $bb3910;

  $bb3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3344} __const_udelay(4295000);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto $bb3911;

  $bb3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3345} __const_udelay(4295000);
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    goto $bb3912;

  $bb3912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3346} __const_udelay(4295000);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    goto $bb3913;

  $bb3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3347} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3914;

  $bb3914:
    assume {:verifier.code 0} true;
    goto $bb3915;

  $bb3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3348} $i663 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $i664 := $eq.i32($i660, $i663);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i664} true;
    goto $bb3916, $bb3917;

  $bb3917:
    assume {:verifier.code 0} true;
    assume !($i664 == 1);
    goto $bb3918;

  $bb3918:
    assume {:verifier.code 0} true;
    goto $bb3921;

  $bb3921:
    assume {:verifier.code 0} true;
    goto $bb3922;

  $bb3922:
    assume {:verifier.code 0} true;
    goto $bb3923;

  $bb3923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3349} __const_udelay(4295000);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    goto $bb3924;

  $bb3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3350} __const_udelay(4295000);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    goto $bb3925;

  $bb3925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3351} __const_udelay(4295000);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    goto $bb3926;

  $bb3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3352} __const_udelay(4295000);
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    goto $bb3927;

  $bb3927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3353} __const_udelay(4295000);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    goto $bb3928;

  $bb3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3354} __const_udelay(4295000);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    goto $bb3929;

  $bb3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3355} __const_udelay(4295000);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    goto $bb3930;

  $bb3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3356} __const_udelay(4295000);
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    goto $bb3931;

  $bb3931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3357} __const_udelay(4295000);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    goto $bb3932;

  $bb3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3358} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3933;

  $bb3933:
    assume {:verifier.code 0} true;
    goto $bb3934;

  $bb3934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3359} $i666 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $i667 := $eq.i32($i663, $i666);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i667} true;
    goto $bb3935, $bb3936;

  $bb3936:
    assume {:verifier.code 0} true;
    assume !($i667 == 1);
    goto $bb3937;

  $bb3937:
    assume {:verifier.code 0} true;
    goto $bb3940;

  $bb3940:
    assume {:verifier.code 0} true;
    goto $bb3941;

  $bb3941:
    assume {:verifier.code 0} true;
    goto $bb3942;

  $bb3942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3360} __const_udelay(4295000);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    goto $bb3943;

  $bb3943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3361} __const_udelay(4295000);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    goto $bb3944;

  $bb3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3362} __const_udelay(4295000);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    goto $bb3945;

  $bb3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3363} __const_udelay(4295000);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    goto $bb3946;

  $bb3946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3364} __const_udelay(4295000);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    goto $bb3947;

  $bb3947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3365} __const_udelay(4295000);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    goto $bb3948;

  $bb3948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3366} __const_udelay(4295000);
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    goto $bb3949;

  $bb3949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3367} __const_udelay(4295000);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    goto $bb3950;

  $bb3950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3368} __const_udelay(4295000);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    goto $bb3951;

  $bb3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3369} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3952;

  $bb3952:
    assume {:verifier.code 0} true;
    goto $bb3953;

  $bb3953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3370} $i669 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i670 := $eq.i32($i666, $i669);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i670} true;
    goto $bb3954, $bb3955;

  $bb3955:
    assume {:verifier.code 0} true;
    assume !($i670 == 1);
    goto $bb3956;

  $bb3956:
    assume {:verifier.code 0} true;
    goto $bb3959;

  $bb3959:
    assume {:verifier.code 0} true;
    goto $bb3960;

  $bb3960:
    assume {:verifier.code 0} true;
    goto $bb3961;

  $bb3961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3371} __const_udelay(4295000);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    goto $bb3962;

  $bb3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3372} __const_udelay(4295000);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    goto $bb3963;

  $bb3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3373} __const_udelay(4295000);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    goto $bb3964;

  $bb3964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3374} __const_udelay(4295000);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    goto $bb3965;

  $bb3965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3375} __const_udelay(4295000);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    goto $bb3966;

  $bb3966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3376} __const_udelay(4295000);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    goto $bb3967;

  $bb3967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3377} __const_udelay(4295000);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    goto $bb3968;

  $bb3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3378} __const_udelay(4295000);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    goto $bb3969;

  $bb3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3379} __const_udelay(4295000);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    goto $bb3970;

  $bb3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3380} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3971;

  $bb3971:
    assume {:verifier.code 0} true;
    goto $bb3972;

  $bb3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3381} $i672 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i673 := $eq.i32($i669, $i672);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i673} true;
    goto $bb3973, $bb3974;

  $bb3974:
    assume {:verifier.code 0} true;
    assume !($i673 == 1);
    goto $bb3975;

  $bb3975:
    assume {:verifier.code 0} true;
    goto $bb3978;

  $bb3978:
    assume {:verifier.code 0} true;
    goto $bb3979;

  $bb3979:
    assume {:verifier.code 0} true;
    goto $bb3980;

  $bb3980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3382} __const_udelay(4295000);
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    goto $bb3981;

  $bb3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3383} __const_udelay(4295000);
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    goto $bb3982;

  $bb3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3384} __const_udelay(4295000);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    goto $bb3983;

  $bb3983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3385} __const_udelay(4295000);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    goto $bb3984;

  $bb3984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3386} __const_udelay(4295000);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    goto $bb3985;

  $bb3985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3387} __const_udelay(4295000);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    goto $bb3986;

  $bb3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3388} __const_udelay(4295000);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    goto $bb3987;

  $bb3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3389} __const_udelay(4295000);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    goto $bb3988;

  $bb3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3390} __const_udelay(4295000);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    goto $bb3989;

  $bb3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3391} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3990;

  $bb3990:
    assume {:verifier.code 0} true;
    goto $bb3991;

  $bb3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3392} $i675 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $i676 := $eq.i32($i672, $i675);
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i676} true;
    goto $bb3992, $bb3993;

  $bb3993:
    assume {:verifier.code 0} true;
    assume !($i676 == 1);
    goto $bb3994;

  $bb3994:
    assume {:verifier.code 0} true;
    goto $bb3997;

  $bb3997:
    assume {:verifier.code 0} true;
    goto $bb3998;

  $bb3998:
    assume {:verifier.code 0} true;
    goto $bb3999;

  $bb3999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3393} __const_udelay(4295000);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    goto $bb4000;

  $bb4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3394} __const_udelay(4295000);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    goto $bb4001;

  $bb4001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3395} __const_udelay(4295000);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    goto $bb4002;

  $bb4002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3396} __const_udelay(4295000);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    goto $bb4003;

  $bb4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3397} __const_udelay(4295000);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    goto $bb4004;

  $bb4004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3398} __const_udelay(4295000);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    goto $bb4005;

  $bb4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3399} __const_udelay(4295000);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    goto $bb4006;

  $bb4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3400} __const_udelay(4295000);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    goto $bb4007;

  $bb4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3401} __const_udelay(4295000);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    goto $bb4008;

  $bb4008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3402} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4009;

  $bb4009:
    assume {:verifier.code 0} true;
    goto $bb4010;

  $bb4010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3403} $i678 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i679 := $eq.i32($i675, $i678);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i679} true;
    goto $bb4011, $bb4012;

  $bb4012:
    assume {:verifier.code 0} true;
    assume !($i679 == 1);
    goto $bb4013;

  $bb4013:
    assume {:verifier.code 0} true;
    goto $bb4016;

  $bb4016:
    assume {:verifier.code 0} true;
    goto $bb4017;

  $bb4017:
    assume {:verifier.code 0} true;
    goto $bb4018;

  $bb4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3404} __const_udelay(4295000);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    goto $bb4019;

  $bb4019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3405} __const_udelay(4295000);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    goto $bb4020;

  $bb4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3406} __const_udelay(4295000);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    goto $bb4021;

  $bb4021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3407} __const_udelay(4295000);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    goto $bb4022;

  $bb4022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3408} __const_udelay(4295000);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    goto $bb4023;

  $bb4023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3409} __const_udelay(4295000);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    goto $bb4024;

  $bb4024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3410} __const_udelay(4295000);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    goto $bb4025;

  $bb4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3411} __const_udelay(4295000);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    goto $bb4026;

  $bb4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3412} __const_udelay(4295000);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    goto $bb4027;

  $bb4027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3413} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4028;

  $bb4028:
    assume {:verifier.code 0} true;
    goto $bb4029;

  $bb4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3414} $i681 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i682 := $eq.i32($i678, $i681);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i682} true;
    goto $bb4030, $bb4031;

  $bb4031:
    assume {:verifier.code 0} true;
    assume !($i682 == 1);
    goto $bb4032;

  $bb4032:
    assume {:verifier.code 0} true;
    goto $bb4035;

  $bb4035:
    assume {:verifier.code 0} true;
    goto $bb4036;

  $bb4036:
    assume {:verifier.code 0} true;
    goto $bb4037;

  $bb4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3415} __const_udelay(4295000);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    goto $bb4038;

  $bb4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3416} __const_udelay(4295000);
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    goto $bb4039;

  $bb4039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3417} __const_udelay(4295000);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    goto $bb4040;

  $bb4040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3418} __const_udelay(4295000);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    goto $bb4041;

  $bb4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3419} __const_udelay(4295000);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    goto $bb4042;

  $bb4042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3420} __const_udelay(4295000);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    goto $bb4043;

  $bb4043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3421} __const_udelay(4295000);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    goto $bb4044;

  $bb4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3422} __const_udelay(4295000);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    goto $bb4045;

  $bb4045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3423} __const_udelay(4295000);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    goto $bb4046;

  $bb4046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3424} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4047;

  $bb4047:
    assume {:verifier.code 0} true;
    goto $bb4048;

  $bb4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3425} $i684 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $i685 := $eq.i32($i681, $i684);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i685} true;
    goto $bb4049, $bb4050;

  $bb4050:
    assume {:verifier.code 0} true;
    assume !($i685 == 1);
    goto $bb4051;

  $bb4051:
    assume {:verifier.code 0} true;
    goto $bb4054;

  $bb4054:
    assume {:verifier.code 0} true;
    goto $bb4055;

  $bb4055:
    assume {:verifier.code 0} true;
    goto $bb4056;

  $bb4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3426} __const_udelay(4295000);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    goto $bb4057;

  $bb4057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3427} __const_udelay(4295000);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    goto $bb4058;

  $bb4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3428} __const_udelay(4295000);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    goto $bb4059;

  $bb4059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3429} __const_udelay(4295000);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    goto $bb4060;

  $bb4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3430} __const_udelay(4295000);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    goto $bb4061;

  $bb4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3431} __const_udelay(4295000);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    goto $bb4062;

  $bb4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3432} __const_udelay(4295000);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    goto $bb4063;

  $bb4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3433} __const_udelay(4295000);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    goto $bb4064;

  $bb4064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3434} __const_udelay(4295000);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    goto $bb4065;

  $bb4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3435} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4066;

  $bb4066:
    assume {:verifier.code 0} true;
    goto $bb4067;

  $bb4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3436} $i687 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i688 := $eq.i32($i684, $i687);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i688} true;
    goto $bb4068, $bb4069;

  $bb4069:
    assume {:verifier.code 0} true;
    assume !($i688 == 1);
    goto $bb4070;

  $bb4070:
    assume {:verifier.code 0} true;
    goto $bb4073;

  $bb4073:
    assume {:verifier.code 0} true;
    goto $bb4074;

  $bb4074:
    assume {:verifier.code 0} true;
    goto $bb4075;

  $bb4075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3437} __const_udelay(4295000);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    goto $bb4076;

  $bb4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3438} __const_udelay(4295000);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    goto $bb4077;

  $bb4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3439} __const_udelay(4295000);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    goto $bb4078;

  $bb4078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3440} __const_udelay(4295000);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    goto $bb4079;

  $bb4079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3441} __const_udelay(4295000);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    goto $bb4080;

  $bb4080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3442} __const_udelay(4295000);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    goto $bb4081;

  $bb4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3443} __const_udelay(4295000);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    goto $bb4082;

  $bb4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3444} __const_udelay(4295000);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    goto $bb4083;

  $bb4083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3445} __const_udelay(4295000);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    goto $bb4084;

  $bb4084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3446} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4085;

  $bb4085:
    assume {:verifier.code 0} true;
    goto $bb4086;

  $bb4086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3447} $i690 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i691 := $eq.i32($i687, $i690);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    assume {:branchcond $i691} true;
    goto $bb4087, $bb4088;

  $bb4088:
    assume {:verifier.code 0} true;
    assume !($i691 == 1);
    goto $bb4089;

  $bb4089:
    assume {:verifier.code 0} true;
    goto $bb4092;

  $bb4092:
    assume {:verifier.code 0} true;
    goto $bb4093;

  $bb4093:
    assume {:verifier.code 0} true;
    goto $bb4094;

  $bb4094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3448} __const_udelay(4295000);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    goto $bb4095;

  $bb4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3449} __const_udelay(4295000);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    goto $bb4096;

  $bb4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3450} __const_udelay(4295000);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    goto $bb4097;

  $bb4097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3451} __const_udelay(4295000);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    goto $bb4098;

  $bb4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3452} __const_udelay(4295000);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    goto $bb4099;

  $bb4099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3453} __const_udelay(4295000);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    goto $bb4100;

  $bb4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3454} __const_udelay(4295000);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    goto $bb4101;

  $bb4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3455} __const_udelay(4295000);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    goto $bb4102;

  $bb4102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3456} __const_udelay(4295000);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    goto $bb4103;

  $bb4103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3457} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4104;

  $bb4104:
    assume {:verifier.code 0} true;
    goto $bb4105;

  $bb4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3458} $i693 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i694 := $eq.i32($i690, $i693);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i694} true;
    goto $bb4106, $bb4107;

  $bb4107:
    assume {:verifier.code 0} true;
    assume !($i694 == 1);
    goto $bb4108;

  $bb4108:
    assume {:verifier.code 0} true;
    goto $bb4111;

  $bb4111:
    assume {:verifier.code 0} true;
    goto $bb4112;

  $bb4112:
    assume {:verifier.code 0} true;
    goto $bb4113;

  $bb4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3459} __const_udelay(4295000);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    goto $bb4114;

  $bb4114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3460} __const_udelay(4295000);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    goto $bb4115;

  $bb4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3461} __const_udelay(4295000);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    goto $bb4116;

  $bb4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3462} __const_udelay(4295000);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    goto $bb4117;

  $bb4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3463} __const_udelay(4295000);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    goto $bb4118;

  $bb4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3464} __const_udelay(4295000);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    goto $bb4119;

  $bb4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3465} __const_udelay(4295000);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    goto $bb4120;

  $bb4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3466} __const_udelay(4295000);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    goto $bb4121;

  $bb4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3467} __const_udelay(4295000);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    goto $bb4122;

  $bb4122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3468} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4123;

  $bb4123:
    assume {:verifier.code 0} true;
    goto $bb4124;

  $bb4124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3469} $i696 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $i697 := $eq.i32($i693, $i696);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i697} true;
    goto $bb4125, $bb4126;

  $bb4126:
    assume {:verifier.code 0} true;
    assume !($i697 == 1);
    goto $bb4127;

  $bb4127:
    assume {:verifier.code 0} true;
    goto $bb4130;

  $bb4130:
    assume {:verifier.code 0} true;
    goto $bb4131;

  $bb4131:
    assume {:verifier.code 0} true;
    goto $bb4132;

  $bb4132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3470} __const_udelay(4295000);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    goto $bb4133;

  $bb4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3471} __const_udelay(4295000);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    goto $bb4134;

  $bb4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3472} __const_udelay(4295000);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    goto $bb4135;

  $bb4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3473} __const_udelay(4295000);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    goto $bb4136;

  $bb4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3474} __const_udelay(4295000);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    goto $bb4137;

  $bb4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3475} __const_udelay(4295000);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    goto $bb4138;

  $bb4138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3476} __const_udelay(4295000);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    goto $bb4139;

  $bb4139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3477} __const_udelay(4295000);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    goto $bb4140;

  $bb4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3478} __const_udelay(4295000);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    goto $bb4141;

  $bb4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3479} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4142;

  $bb4142:
    assume {:verifier.code 0} true;
    goto $bb4143;

  $bb4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3480} $i699 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $i700 := $eq.i32($i696, $i699);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb4144, $bb4145;

  $bb4145:
    assume {:verifier.code 0} true;
    assume !($i700 == 1);
    goto $bb4146;

  $bb4146:
    assume {:verifier.code 0} true;
    goto $bb4149;

  $bb4149:
    assume {:verifier.code 0} true;
    goto $bb4150;

  $bb4150:
    assume {:verifier.code 0} true;
    goto $bb4151;

  $bb4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3481} __const_udelay(4295000);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    goto $bb4152;

  $bb4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3482} __const_udelay(4295000);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    goto $bb4153;

  $bb4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3483} __const_udelay(4295000);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    goto $bb4154;

  $bb4154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3484} __const_udelay(4295000);
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    goto $bb4155;

  $bb4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3485} __const_udelay(4295000);
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    goto $bb4156;

  $bb4156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3486} __const_udelay(4295000);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    goto $bb4157;

  $bb4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3487} __const_udelay(4295000);
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    goto $bb4158;

  $bb4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3488} __const_udelay(4295000);
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    goto $bb4159;

  $bb4159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3489} __const_udelay(4295000);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    goto $bb4160;

  $bb4160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3490} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4161;

  $bb4161:
    assume {:verifier.code 0} true;
    goto $bb4162;

  $bb4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3491} $i702 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $i703 := $eq.i32($i699, $i702);
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i703} true;
    goto $bb4163, $bb4164;

  $bb4164:
    assume {:verifier.code 0} true;
    assume !($i703 == 1);
    goto $bb4165;

  $bb4165:
    assume {:verifier.code 0} true;
    goto $bb4168;

  $bb4168:
    assume {:verifier.code 0} true;
    goto $bb4169;

  $bb4169:
    assume {:verifier.code 0} true;
    goto $bb4170;

  $bb4170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3492} __const_udelay(4295000);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    goto $bb4171;

  $bb4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3493} __const_udelay(4295000);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    goto $bb4172;

  $bb4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3494} __const_udelay(4295000);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    goto $bb4173;

  $bb4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3495} __const_udelay(4295000);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    goto $bb4174;

  $bb4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3496} __const_udelay(4295000);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    goto $bb4175;

  $bb4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3497} __const_udelay(4295000);
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    goto $bb4176;

  $bb4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3498} __const_udelay(4295000);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    goto $bb4177;

  $bb4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3499} __const_udelay(4295000);
    goto corral_source_split_11361;

  corral_source_split_11361:
    assume {:verifier.code 0} true;
    goto $bb4178;

  $bb4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3500} __const_udelay(4295000);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    goto $bb4179;

  $bb4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3501} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4180;

  $bb4180:
    assume {:verifier.code 0} true;
    goto $bb4181;

  $bb4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3502} $i705 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i706 := $eq.i32($i702, $i705);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i706} true;
    goto $bb4182, $bb4183;

  $bb4183:
    assume {:verifier.code 0} true;
    assume !($i706 == 1);
    goto $bb4184;

  $bb4184:
    assume {:verifier.code 0} true;
    goto $bb4187;

  $bb4187:
    assume {:verifier.code 0} true;
    goto $bb4188;

  $bb4188:
    assume {:verifier.code 0} true;
    goto $bb4189;

  $bb4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3503} __const_udelay(4295000);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    goto $bb4190;

  $bb4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3504} __const_udelay(4295000);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    goto $bb4191;

  $bb4191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3505} __const_udelay(4295000);
    goto corral_source_split_11375;

  corral_source_split_11375:
    assume {:verifier.code 0} true;
    goto $bb4192;

  $bb4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3506} __const_udelay(4295000);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    goto $bb4193;

  $bb4193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3507} __const_udelay(4295000);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    goto $bb4194;

  $bb4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3508} __const_udelay(4295000);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    goto $bb4195;

  $bb4195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3509} __const_udelay(4295000);
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    goto $bb4196;

  $bb4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3510} __const_udelay(4295000);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    goto $bb4197;

  $bb4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3511} __const_udelay(4295000);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    goto $bb4198;

  $bb4198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3512} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4199;

  $bb4199:
    assume {:verifier.code 0} true;
    goto $bb4200;

  $bb4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3513} $i708 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i709 := $eq.i32($i705, $i708);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i709} true;
    goto $bb4201, $bb4202;

  $bb4202:
    assume {:verifier.code 0} true;
    assume !($i709 == 1);
    goto $bb4203;

  $bb4203:
    assume {:verifier.code 0} true;
    goto $bb4206;

  $bb4206:
    assume {:verifier.code 0} true;
    goto $bb4207;

  $bb4207:
    assume {:verifier.code 0} true;
    goto $bb4208;

  $bb4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3514} __const_udelay(4295000);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    goto $bb4209;

  $bb4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3515} __const_udelay(4295000);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    goto $bb4210;

  $bb4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3516} __const_udelay(4295000);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    goto $bb4211;

  $bb4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3517} __const_udelay(4295000);
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    goto $bb4212;

  $bb4212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3518} __const_udelay(4295000);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    goto $bb4213;

  $bb4213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3519} __const_udelay(4295000);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    goto $bb4214;

  $bb4214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3520} __const_udelay(4295000);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    goto $bb4215;

  $bb4215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3521} __const_udelay(4295000);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    goto $bb4216;

  $bb4216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3522} __const_udelay(4295000);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    goto $bb4217;

  $bb4217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3523} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4218;

  $bb4218:
    assume {:verifier.code 0} true;
    goto $bb4219;

  $bb4219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3524} $i711 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $i712 := $eq.i32($i708, $i711);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i712} true;
    goto $bb4220, $bb4221;

  $bb4221:
    assume {:verifier.code 0} true;
    assume !($i712 == 1);
    goto $bb4222;

  $bb4222:
    assume {:verifier.code 0} true;
    goto $bb4225;

  $bb4225:
    assume {:verifier.code 0} true;
    goto $bb4226;

  $bb4226:
    assume {:verifier.code 0} true;
    goto $bb4227;

  $bb4227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3525} __const_udelay(4295000);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    goto $bb4228;

  $bb4228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3526} __const_udelay(4295000);
    goto corral_source_split_11421;

  corral_source_split_11421:
    assume {:verifier.code 0} true;
    goto $bb4229;

  $bb4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3527} __const_udelay(4295000);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    goto $bb4230;

  $bb4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3528} __const_udelay(4295000);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    goto $bb4231;

  $bb4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3529} __const_udelay(4295000);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    goto $bb4232;

  $bb4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3530} __const_udelay(4295000);
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    goto $bb4233;

  $bb4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3531} __const_udelay(4295000);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    goto $bb4234;

  $bb4234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3532} __const_udelay(4295000);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    goto $bb4235;

  $bb4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3533} __const_udelay(4295000);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    goto $bb4236;

  $bb4236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3534} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4237;

  $bb4237:
    assume {:verifier.code 0} true;
    goto $bb4238;

  $bb4238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3535} $i714 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i715 := $eq.i32($i711, $i714);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i715} true;
    goto $bb4239, $bb4240;

  $bb4240:
    assume {:verifier.code 0} true;
    assume !($i715 == 1);
    goto $bb4241;

  $bb4241:
    assume {:verifier.code 0} true;
    goto $bb4244;

  $bb4244:
    assume {:verifier.code 0} true;
    goto $bb4245;

  $bb4245:
    assume {:verifier.code 0} true;
    goto $bb4246;

  $bb4246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3536} __const_udelay(4295000);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    goto $bb4247;

  $bb4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3537} __const_udelay(4295000);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    goto $bb4248;

  $bb4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3538} __const_udelay(4295000);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    goto $bb4249;

  $bb4249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3539} __const_udelay(4295000);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    goto $bb4250;

  $bb4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3540} __const_udelay(4295000);
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    goto $bb4251;

  $bb4251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3541} __const_udelay(4295000);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    goto $bb4252;

  $bb4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3542} __const_udelay(4295000);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    goto $bb4253;

  $bb4253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3543} __const_udelay(4295000);
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    goto $bb4254;

  $bb4254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3544} __const_udelay(4295000);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    goto $bb4255;

  $bb4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3545} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4256;

  $bb4256:
    assume {:verifier.code 0} true;
    goto $bb4257;

  $bb4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3546} $i717 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i718 := $eq.i32($i714, $i717);
    goto corral_source_split_11462;

  corral_source_split_11462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i718} true;
    goto $bb4258, $bb4259;

  $bb4259:
    assume {:verifier.code 0} true;
    assume !($i718 == 1);
    goto $bb4260;

  $bb4260:
    assume {:verifier.code 0} true;
    goto $bb4263;

  $bb4263:
    assume {:verifier.code 0} true;
    goto $bb4264;

  $bb4264:
    assume {:verifier.code 0} true;
    goto $bb4265;

  $bb4265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3547} __const_udelay(4295000);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    goto $bb4266;

  $bb4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3548} __const_udelay(4295000);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    goto $bb4267;

  $bb4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3549} __const_udelay(4295000);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    goto $bb4268;

  $bb4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3550} __const_udelay(4295000);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    goto $bb4269;

  $bb4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3551} __const_udelay(4295000);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    goto $bb4270;

  $bb4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3552} __const_udelay(4295000);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    goto $bb4271;

  $bb4271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3553} __const_udelay(4295000);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    goto $bb4272;

  $bb4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3554} __const_udelay(4295000);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    goto $bb4273;

  $bb4273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3555} __const_udelay(4295000);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    goto $bb4274;

  $bb4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3556} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4275;

  $bb4275:
    assume {:verifier.code 0} true;
    goto $bb4276;

  $bb4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3557} $i720 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $i721 := $eq.i32($i717, $i720);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb4277, $bb4278;

  $bb4278:
    assume {:verifier.code 0} true;
    assume !($i721 == 1);
    goto $bb4279;

  $bb4279:
    assume {:verifier.code 0} true;
    goto $bb4282;

  $bb4282:
    assume {:verifier.code 0} true;
    goto $bb4283;

  $bb4283:
    assume {:verifier.code 0} true;
    goto $bb4284;

  $bb4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3558} __const_udelay(4295000);
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    goto $bb4285;

  $bb4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3559} __const_udelay(4295000);
    goto corral_source_split_11493;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    goto $bb4286;

  $bb4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3560} __const_udelay(4295000);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    goto $bb4287;

  $bb4287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3561} __const_udelay(4295000);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    goto $bb4288;

  $bb4288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3562} __const_udelay(4295000);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    goto $bb4289;

  $bb4289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3563} __const_udelay(4295000);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    goto $bb4290;

  $bb4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3564} __const_udelay(4295000);
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    goto $bb4291;

  $bb4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3565} __const_udelay(4295000);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    goto $bb4292;

  $bb4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3566} __const_udelay(4295000);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    goto $bb4293;

  $bb4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3567} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4294;

  $bb4294:
    assume {:verifier.code 0} true;
    goto $bb4295;

  $bb4295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3568} $i723 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $i724 := $eq.i32($i720, $i723);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i724} true;
    goto $bb4296, $bb4297;

  $bb4297:
    assume {:verifier.code 0} true;
    assume !($i724 == 1);
    goto $bb4298;

  $bb4298:
    assume {:verifier.code 0} true;
    goto $bb4301;

  $bb4301:
    assume {:verifier.code 0} true;
    goto $bb4302;

  $bb4302:
    assume {:verifier.code 0} true;
    goto $bb4303;

  $bb4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3569} __const_udelay(4295000);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    goto $bb4304;

  $bb4304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3570} __const_udelay(4295000);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    goto $bb4305;

  $bb4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3571} __const_udelay(4295000);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    goto $bb4306;

  $bb4306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3572} __const_udelay(4295000);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    goto $bb4307;

  $bb4307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3573} __const_udelay(4295000);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    goto $bb4308;

  $bb4308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3574} __const_udelay(4295000);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    goto $bb4309;

  $bb4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3575} __const_udelay(4295000);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    goto $bb4310;

  $bb4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3576} __const_udelay(4295000);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    goto $bb4311;

  $bb4311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3577} __const_udelay(4295000);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    goto $bb4312;

  $bb4312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3578} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4313;

  $bb4313:
    assume {:verifier.code 0} true;
    goto $bb4314;

  $bb4314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3579} $i726 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $i727 := $eq.i32($i723, $i726);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i727} true;
    goto $bb4315, $bb4316;

  $bb4316:
    assume {:verifier.code 0} true;
    assume !($i727 == 1);
    goto $bb4317;

  $bb4317:
    assume {:verifier.code 0} true;
    goto $bb4320;

  $bb4320:
    assume {:verifier.code 0} true;
    goto $bb4321;

  $bb4321:
    assume {:verifier.code 0} true;
    goto $bb4322;

  $bb4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3580} __const_udelay(4295000);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    goto $bb4323;

  $bb4323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3581} __const_udelay(4295000);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    goto $bb4324;

  $bb4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3582} __const_udelay(4295000);
    goto corral_source_split_11543;

  corral_source_split_11543:
    assume {:verifier.code 0} true;
    goto $bb4325;

  $bb4325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3583} __const_udelay(4295000);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    goto $bb4326;

  $bb4326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3584} __const_udelay(4295000);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    goto $bb4327;

  $bb4327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3585} __const_udelay(4295000);
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    goto $bb4328;

  $bb4328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3586} __const_udelay(4295000);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    goto $bb4329;

  $bb4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3587} __const_udelay(4295000);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    goto $bb4330;

  $bb4330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3588} __const_udelay(4295000);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    goto $bb4331;

  $bb4331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3589} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4332;

  $bb4332:
    assume {:verifier.code 0} true;
    goto $bb4333;

  $bb4333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3590} $i729 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i730 := $eq.i32($i726, $i729);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i730} true;
    goto $bb4334, $bb4335;

  $bb4335:
    assume {:verifier.code 0} true;
    assume !($i730 == 1);
    goto $bb4336;

  $bb4336:
    assume {:verifier.code 0} true;
    goto $bb4339;

  $bb4339:
    assume {:verifier.code 0} true;
    goto $bb4340;

  $bb4340:
    assume {:verifier.code 0} true;
    goto $bb4341;

  $bb4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3591} __const_udelay(4295000);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    goto $bb4342;

  $bb4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3592} __const_udelay(4295000);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb4343;

  $bb4343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3593} __const_udelay(4295000);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    goto $bb4344;

  $bb4344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3594} __const_udelay(4295000);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    goto $bb4345;

  $bb4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3595} __const_udelay(4295000);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    goto $bb4346;

  $bb4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3596} __const_udelay(4295000);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    goto $bb4347;

  $bb4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3597} __const_udelay(4295000);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    goto $bb4348;

  $bb4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3598} __const_udelay(4295000);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    goto $bb4349;

  $bb4349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3599} __const_udelay(4295000);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    goto $bb4350;

  $bb4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3600} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4351;

  $bb4351:
    assume {:verifier.code 0} true;
    goto $bb4352;

  $bb4352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3601} $i732 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i733 := $eq.i32($i729, $i732);
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    assume {:branchcond $i733} true;
    goto $bb4353, $bb4354;

  $bb4354:
    assume {:verifier.code 0} true;
    assume !($i733 == 1);
    goto $bb4355;

  $bb4355:
    assume {:verifier.code 0} true;
    goto $bb4358;

  $bb4358:
    assume {:verifier.code 0} true;
    goto $bb4359;

  $bb4359:
    assume {:verifier.code 0} true;
    goto $bb4360;

  $bb4360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3602} __const_udelay(4295000);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    goto $bb4361;

  $bb4361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3603} __const_udelay(4295000);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    goto $bb4362;

  $bb4362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3604} __const_udelay(4295000);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    goto $bb4363;

  $bb4363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3605} __const_udelay(4295000);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    goto $bb4364;

  $bb4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3606} __const_udelay(4295000);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    goto $bb4365;

  $bb4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3607} __const_udelay(4295000);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    goto $bb4366;

  $bb4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3608} __const_udelay(4295000);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    goto $bb4367;

  $bb4367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3609} __const_udelay(4295000);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    goto $bb4368;

  $bb4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3610} __const_udelay(4295000);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    goto $bb4369;

  $bb4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3611} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4370;

  $bb4370:
    assume {:verifier.code 0} true;
    goto $bb4371;

  $bb4371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3612} $i735 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i736 := $eq.i32($i732, $i735);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i736} true;
    goto $bb4372, $bb4373;

  $bb4373:
    assume {:verifier.code 0} true;
    assume !($i736 == 1);
    goto $bb4374;

  $bb4374:
    assume {:verifier.code 0} true;
    goto $bb4377;

  $bb4377:
    assume {:verifier.code 0} true;
    goto $bb4378;

  $bb4378:
    assume {:verifier.code 0} true;
    goto $bb4379;

  $bb4379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3613} __const_udelay(4295000);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    goto $bb4380;

  $bb4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3614} __const_udelay(4295000);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    goto $bb4381;

  $bb4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3615} __const_udelay(4295000);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    goto $bb4382;

  $bb4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3616} __const_udelay(4295000);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    goto $bb4383;

  $bb4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3617} __const_udelay(4295000);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto $bb4384;

  $bb4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3618} __const_udelay(4295000);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    goto $bb4385;

  $bb4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3619} __const_udelay(4295000);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    goto $bb4386;

  $bb4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3620} __const_udelay(4295000);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    goto $bb4387;

  $bb4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3621} __const_udelay(4295000);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    goto $bb4388;

  $bb4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3622} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4389;

  $bb4389:
    assume {:verifier.code 0} true;
    goto $bb4390;

  $bb4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3623} $i738 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $i739 := $eq.i32($i735, $i738);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i739} true;
    goto $bb4391, $bb4392;

  $bb4392:
    assume {:verifier.code 0} true;
    assume !($i739 == 1);
    goto $bb4393;

  $bb4393:
    assume {:verifier.code 0} true;
    goto $bb4396;

  $bb4396:
    assume {:verifier.code 0} true;
    goto $bb4397;

  $bb4397:
    assume {:verifier.code 0} true;
    goto $bb4398;

  $bb4398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3624} __const_udelay(4295000);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    goto $bb4399;

  $bb4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3625} __const_udelay(4295000);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    goto $bb4400;

  $bb4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3626} __const_udelay(4295000);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    goto $bb4401;

  $bb4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3627} __const_udelay(4295000);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    goto $bb4402;

  $bb4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3628} __const_udelay(4295000);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    goto $bb4403;

  $bb4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3629} __const_udelay(4295000);
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    goto $bb4404;

  $bb4404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3630} __const_udelay(4295000);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    goto $bb4405;

  $bb4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3631} __const_udelay(4295000);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    goto $bb4406;

  $bb4406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3632} __const_udelay(4295000);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    goto $bb4407;

  $bb4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3633} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4408;

  $bb4408:
    assume {:verifier.code 0} true;
    goto $bb4409;

  $bb4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3634} $i741 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $i742 := $eq.i32($i738, $i741);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i742} true;
    goto $bb4410, $bb4411;

  $bb4411:
    assume {:verifier.code 0} true;
    assume !($i742 == 1);
    goto $bb4412;

  $bb4412:
    assume {:verifier.code 0} true;
    goto $bb4415;

  $bb4415:
    assume {:verifier.code 0} true;
    goto $bb4416;

  $bb4416:
    assume {:verifier.code 0} true;
    goto $bb4417;

  $bb4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3635} __const_udelay(4295000);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    goto $bb4418;

  $bb4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3636} __const_udelay(4295000);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    goto $bb4419;

  $bb4419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3637} __const_udelay(4295000);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    goto $bb4420;

  $bb4420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3638} __const_udelay(4295000);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    goto $bb4421;

  $bb4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3639} __const_udelay(4295000);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    goto $bb4422;

  $bb4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3640} __const_udelay(4295000);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    goto $bb4423;

  $bb4423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3641} __const_udelay(4295000);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    goto $bb4424;

  $bb4424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3642} __const_udelay(4295000);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    goto $bb4425;

  $bb4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3643} __const_udelay(4295000);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    goto $bb4426;

  $bb4426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3644} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4427;

  $bb4427:
    assume {:verifier.code 0} true;
    goto $bb4428;

  $bb4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3645} $i744 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $i745 := $eq.i32($i741, $i744);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i745} true;
    goto $bb4429, $bb4430;

  $bb4430:
    assume {:verifier.code 0} true;
    assume !($i745 == 1);
    goto $bb4431;

  $bb4431:
    assume {:verifier.code 0} true;
    goto $bb4434;

  $bb4434:
    assume {:verifier.code 0} true;
    goto $bb4435;

  $bb4435:
    assume {:verifier.code 0} true;
    goto $bb4436;

  $bb4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3646} __const_udelay(4295000);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    goto $bb4437;

  $bb4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3647} __const_udelay(4295000);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    goto $bb4438;

  $bb4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3648} __const_udelay(4295000);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    goto $bb4439;

  $bb4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3649} __const_udelay(4295000);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    goto $bb4440;

  $bb4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3650} __const_udelay(4295000);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    goto $bb4441;

  $bb4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3651} __const_udelay(4295000);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    goto $bb4442;

  $bb4442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3652} __const_udelay(4295000);
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    goto $bb4443;

  $bb4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3653} __const_udelay(4295000);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    goto $bb4444;

  $bb4444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3654} __const_udelay(4295000);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    goto $bb4445;

  $bb4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3655} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4446;

  $bb4446:
    assume {:verifier.code 0} true;
    goto $bb4447;

  $bb4447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3656} $i747 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i748 := $eq.i32($i744, $i747);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i748} true;
    goto $bb4448, $bb4449;

  $bb4449:
    assume {:verifier.code 0} true;
    assume !($i748 == 1);
    goto $bb4450;

  $bb4450:
    assume {:verifier.code 0} true;
    goto $bb4453;

  $bb4453:
    assume {:verifier.code 0} true;
    goto $bb4454;

  $bb4454:
    assume {:verifier.code 0} true;
    goto $bb4455;

  $bb4455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3657} __const_udelay(4295000);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    goto $bb4456;

  $bb4456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3658} __const_udelay(4295000);
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    goto $bb4457;

  $bb4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3659} __const_udelay(4295000);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    goto $bb4458;

  $bb4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3660} __const_udelay(4295000);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    goto $bb4459;

  $bb4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3661} __const_udelay(4295000);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb4460;

  $bb4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3662} __const_udelay(4295000);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    goto $bb4461;

  $bb4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3663} __const_udelay(4295000);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    goto $bb4462;

  $bb4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3664} __const_udelay(4295000);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    goto $bb4463;

  $bb4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3665} __const_udelay(4295000);
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    goto $bb4464;

  $bb4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3666} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4465;

  $bb4465:
    assume {:verifier.code 0} true;
    goto $bb4466;

  $bb4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3667} $i750 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $i751 := $eq.i32($i747, $i750);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i751} true;
    goto $bb4467, $bb4468;

  $bb4468:
    assume {:verifier.code 0} true;
    assume !($i751 == 1);
    goto $bb4469;

  $bb4469:
    assume {:verifier.code 0} true;
    goto $bb4472;

  $bb4472:
    assume {:verifier.code 0} true;
    goto $bb4473;

  $bb4473:
    assume {:verifier.code 0} true;
    goto $bb4474;

  $bb4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3668} __const_udelay(4295000);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    goto $bb4475;

  $bb4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3669} __const_udelay(4295000);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    goto $bb4476;

  $bb4476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3670} __const_udelay(4295000);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    goto $bb4477;

  $bb4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3671} __const_udelay(4295000);
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    goto $bb4478;

  $bb4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3672} __const_udelay(4295000);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    goto $bb4479;

  $bb4479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3673} __const_udelay(4295000);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    goto $bb4480;

  $bb4480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3674} __const_udelay(4295000);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    goto $bb4481;

  $bb4481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3675} __const_udelay(4295000);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    goto $bb4482;

  $bb4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3676} __const_udelay(4295000);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    goto $bb4483;

  $bb4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3677} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4484;

  $bb4484:
    assume {:verifier.code 0} true;
    goto $bb4485;

  $bb4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3678} $i753 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i754 := $eq.i32($i750, $i753);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i754} true;
    goto $bb4486, $bb4487;

  $bb4487:
    assume {:verifier.code 0} true;
    assume !($i754 == 1);
    goto $bb4488;

  $bb4488:
    assume {:verifier.code 0} true;
    goto $bb4491;

  $bb4491:
    assume {:verifier.code 0} true;
    goto $bb4492;

  $bb4492:
    assume {:verifier.code 0} true;
    goto $bb4493;

  $bb4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3679} __const_udelay(4295000);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    goto $bb4494;

  $bb4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3680} __const_udelay(4295000);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    goto $bb4495;

  $bb4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3681} __const_udelay(4295000);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    goto $bb4496;

  $bb4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3682} __const_udelay(4295000);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    goto $bb4497;

  $bb4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3683} __const_udelay(4295000);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    goto $bb4498;

  $bb4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3684} __const_udelay(4295000);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    goto $bb4499;

  $bb4499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3685} __const_udelay(4295000);
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    goto $bb4500;

  $bb4500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3686} __const_udelay(4295000);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    goto $bb4501;

  $bb4501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3687} __const_udelay(4295000);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    goto $bb4502;

  $bb4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3688} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4503;

  $bb4503:
    assume {:verifier.code 0} true;
    goto $bb4504;

  $bb4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3689} $i756 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $i757 := $eq.i32($i753, $i756);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i757} true;
    goto $bb4505, $bb4506;

  $bb4506:
    assume {:verifier.code 0} true;
    assume !($i757 == 1);
    goto $bb4507;

  $bb4507:
    assume {:verifier.code 0} true;
    goto $bb4510;

  $bb4510:
    assume {:verifier.code 0} true;
    goto $bb4511;

  $bb4511:
    assume {:verifier.code 0} true;
    goto $bb4512;

  $bb4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3690} __const_udelay(4295000);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    goto $bb4513;

  $bb4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3691} __const_udelay(4295000);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    goto $bb4514;

  $bb4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3692} __const_udelay(4295000);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    goto $bb4515;

  $bb4515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3693} __const_udelay(4295000);
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    goto $bb4516;

  $bb4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3694} __const_udelay(4295000);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    goto $bb4517;

  $bb4517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3695} __const_udelay(4295000);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    goto $bb4518;

  $bb4518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3696} __const_udelay(4295000);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    goto $bb4519;

  $bb4519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3697} __const_udelay(4295000);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    goto $bb4520;

  $bb4520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3698} __const_udelay(4295000);
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    goto $bb4521;

  $bb4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3699} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4522;

  $bb4522:
    assume {:verifier.code 0} true;
    goto $bb4523;

  $bb4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3700} $i759 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    $i760 := $eq.i32($i756, $i759);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    assume {:branchcond $i760} true;
    goto $bb4524, $bb4525;

  $bb4525:
    assume {:verifier.code 0} true;
    assume !($i760 == 1);
    goto $bb4526;

  $bb4526:
    assume {:verifier.code 0} true;
    goto $bb4529;

  $bb4529:
    assume {:verifier.code 0} true;
    goto $bb4530;

  $bb4530:
    assume {:verifier.code 0} true;
    goto $bb4531;

  $bb4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3701} __const_udelay(4295000);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    goto $bb4532;

  $bb4532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3702} __const_udelay(4295000);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    goto $bb4533;

  $bb4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3703} __const_udelay(4295000);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    goto $bb4534;

  $bb4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3704} __const_udelay(4295000);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    goto $bb4535;

  $bb4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3705} __const_udelay(4295000);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    goto $bb4536;

  $bb4536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3706} __const_udelay(4295000);
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    goto $bb4537;

  $bb4537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3707} __const_udelay(4295000);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    goto $bb4538;

  $bb4538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3708} __const_udelay(4295000);
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    goto $bb4539;

  $bb4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3709} __const_udelay(4295000);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    goto $bb4540;

  $bb4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3710} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4541;

  $bb4541:
    assume {:verifier.code 0} true;
    goto $bb4542;

  $bb4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3711} $i762 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $i763 := $eq.i32($i759, $i762);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    assume {:branchcond $i763} true;
    goto $bb4543, $bb4544;

  $bb4544:
    assume {:verifier.code 0} true;
    assume !($i763 == 1);
    goto $bb4545;

  $bb4545:
    assume {:verifier.code 0} true;
    goto $bb4548;

  $bb4548:
    assume {:verifier.code 0} true;
    goto $bb4549;

  $bb4549:
    assume {:verifier.code 0} true;
    goto $bb4550;

  $bb4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3712} __const_udelay(4295000);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    goto $bb4551;

  $bb4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3713} __const_udelay(4295000);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    goto $bb4552;

  $bb4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3714} __const_udelay(4295000);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    goto $bb4553;

  $bb4553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3715} __const_udelay(4295000);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    goto $bb4554;

  $bb4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3716} __const_udelay(4295000);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    goto $bb4555;

  $bb4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3717} __const_udelay(4295000);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    goto $bb4556;

  $bb4556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3718} __const_udelay(4295000);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    goto $bb4557;

  $bb4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3719} __const_udelay(4295000);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    goto $bb4558;

  $bb4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3720} __const_udelay(4295000);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    goto $bb4559;

  $bb4559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3721} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4560;

  $bb4560:
    assume {:verifier.code 0} true;
    goto $bb4561;

  $bb4561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3722} $i765 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i766 := $eq.i32($i762, $i765);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i766} true;
    goto $bb4562, $bb4563;

  $bb4563:
    assume {:verifier.code 0} true;
    assume !($i766 == 1);
    goto $bb4564;

  $bb4564:
    assume {:verifier.code 0} true;
    goto $bb4567;

  $bb4567:
    assume {:verifier.code 0} true;
    goto $bb4568;

  $bb4568:
    assume {:verifier.code 0} true;
    goto $bb4569;

  $bb4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3723} __const_udelay(4295000);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    goto $bb4570;

  $bb4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3724} __const_udelay(4295000);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    goto $bb4571;

  $bb4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3725} __const_udelay(4295000);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    goto $bb4572;

  $bb4572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3726} __const_udelay(4295000);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    goto $bb4573;

  $bb4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3727} __const_udelay(4295000);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    goto $bb4574;

  $bb4574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3728} __const_udelay(4295000);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    goto $bb4575;

  $bb4575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3729} __const_udelay(4295000);
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    goto $bb4576;

  $bb4576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3730} __const_udelay(4295000);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    goto $bb4577;

  $bb4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3731} __const_udelay(4295000);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    goto $bb4578;

  $bb4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3732} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4579;

  $bb4579:
    assume {:verifier.code 0} true;
    goto $bb4580;

  $bb4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3733} $i768 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i769 := $eq.i32($i765, $i768);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i769} true;
    goto $bb4581, $bb4582;

  $bb4582:
    assume {:verifier.code 0} true;
    assume !($i769 == 1);
    goto $bb4583;

  $bb4583:
    assume {:verifier.code 0} true;
    goto $bb4586;

  $bb4586:
    assume {:verifier.code 0} true;
    goto $bb4587;

  $bb4587:
    assume {:verifier.code 0} true;
    goto $bb4588;

  $bb4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3734} __const_udelay(4295000);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    goto $bb4589;

  $bb4589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3735} __const_udelay(4295000);
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    goto $bb4590;

  $bb4590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3736} __const_udelay(4295000);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    goto $bb4591;

  $bb4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3737} __const_udelay(4295000);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    goto $bb4592;

  $bb4592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3738} __const_udelay(4295000);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    goto $bb4593;

  $bb4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3739} __const_udelay(4295000);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    goto $bb4594;

  $bb4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3740} __const_udelay(4295000);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    goto $bb4595;

  $bb4595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3741} __const_udelay(4295000);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    goto $bb4596;

  $bb4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3742} __const_udelay(4295000);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    goto $bb4597;

  $bb4597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3743} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4598;

  $bb4598:
    assume {:verifier.code 0} true;
    goto $bb4599;

  $bb4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3744} $i771 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $i772 := $eq.i32($i768, $i771);
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i772} true;
    goto $bb4600, $bb4601;

  $bb4601:
    assume {:verifier.code 0} true;
    assume !($i772 == 1);
    goto $bb4602;

  $bb4602:
    assume {:verifier.code 0} true;
    goto $bb4605;

  $bb4605:
    assume {:verifier.code 0} true;
    goto $bb4606;

  $bb4606:
    assume {:verifier.code 0} true;
    goto $bb4607;

  $bb4607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3745} __const_udelay(4295000);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    goto $bb4608;

  $bb4608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3746} __const_udelay(4295000);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    goto $bb4609;

  $bb4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3747} __const_udelay(4295000);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    goto $bb4610;

  $bb4610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3748} __const_udelay(4295000);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    goto $bb4611;

  $bb4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3749} __const_udelay(4295000);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    goto $bb4612;

  $bb4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3750} __const_udelay(4295000);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    goto $bb4613;

  $bb4613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3751} __const_udelay(4295000);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    goto $bb4614;

  $bb4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3752} __const_udelay(4295000);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    goto $bb4615;

  $bb4615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3753} __const_udelay(4295000);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    goto $bb4616;

  $bb4616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3754} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4617;

  $bb4617:
    assume {:verifier.code 0} true;
    goto $bb4618;

  $bb4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3755} $i774 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    $i775 := $eq.i32($i771, $i774);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i775} true;
    goto $bb4619, $bb4620;

  $bb4620:
    assume {:verifier.code 0} true;
    assume !($i775 == 1);
    goto $bb4621;

  $bb4621:
    assume {:verifier.code 0} true;
    goto $bb4624;

  $bb4624:
    assume {:verifier.code 0} true;
    goto $bb4625;

  $bb4625:
    assume {:verifier.code 0} true;
    goto $bb4626;

  $bb4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3756} __const_udelay(4295000);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    goto $bb4627;

  $bb4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3757} __const_udelay(4295000);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    goto $bb4628;

  $bb4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3758} __const_udelay(4295000);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    goto $bb4629;

  $bb4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3759} __const_udelay(4295000);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    goto $bb4630;

  $bb4630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3760} __const_udelay(4295000);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    goto $bb4631;

  $bb4631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3761} __const_udelay(4295000);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    goto $bb4632;

  $bb4632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3762} __const_udelay(4295000);
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    goto $bb4633;

  $bb4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3763} __const_udelay(4295000);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    goto $bb4634;

  $bb4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3764} __const_udelay(4295000);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    goto $bb4635;

  $bb4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3765} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4636;

  $bb4636:
    assume {:verifier.code 0} true;
    goto $bb4637;

  $bb4637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3766} $i777 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $i778 := $eq.i32($i774, $i777);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i778} true;
    goto $bb4638, $bb4639;

  $bb4639:
    assume {:verifier.code 0} true;
    assume !($i778 == 1);
    goto $bb4640;

  $bb4640:
    assume {:verifier.code 0} true;
    goto $bb4643;

  $bb4643:
    assume {:verifier.code 0} true;
    goto $bb4644;

  $bb4644:
    assume {:verifier.code 0} true;
    goto $bb4645;

  $bb4645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3767} __const_udelay(4295000);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    goto $bb4646;

  $bb4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3768} __const_udelay(4295000);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    goto $bb4647;

  $bb4647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3769} __const_udelay(4295000);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    goto $bb4648;

  $bb4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3770} __const_udelay(4295000);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    goto $bb4649;

  $bb4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3771} __const_udelay(4295000);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    goto $bb4650;

  $bb4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3772} __const_udelay(4295000);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    goto $bb4651;

  $bb4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3773} __const_udelay(4295000);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    goto $bb4652;

  $bb4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3774} __const_udelay(4295000);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    goto $bb4653;

  $bb4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3775} __const_udelay(4295000);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    goto $bb4654;

  $bb4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3776} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4655;

  $bb4655:
    assume {:verifier.code 0} true;
    goto $bb4656;

  $bb4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3777} $i780 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $i781 := $eq.i32($i777, $i780);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i781} true;
    goto $bb4657, $bb4658;

  $bb4658:
    assume {:verifier.code 0} true;
    assume !($i781 == 1);
    goto $bb4659;

  $bb4659:
    assume {:verifier.code 0} true;
    goto $bb4662;

  $bb4662:
    assume {:verifier.code 0} true;
    goto $bb4663;

  $bb4663:
    assume {:verifier.code 0} true;
    goto $bb4664;

  $bb4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3778} __const_udelay(4295000);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    goto $bb4665;

  $bb4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3779} __const_udelay(4295000);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    goto $bb4666;

  $bb4666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3780} __const_udelay(4295000);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    goto $bb4667;

  $bb4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3781} __const_udelay(4295000);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    goto $bb4668;

  $bb4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3782} __const_udelay(4295000);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    goto $bb4669;

  $bb4669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3783} __const_udelay(4295000);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    goto $bb4670;

  $bb4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3784} __const_udelay(4295000);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    goto $bb4671;

  $bb4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3785} __const_udelay(4295000);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    goto $bb4672;

  $bb4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3786} __const_udelay(4295000);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    goto $bb4673;

  $bb4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3787} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4674;

  $bb4674:
    assume {:verifier.code 0} true;
    goto $bb4675;

  $bb4675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3788} $i783 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $i784 := $eq.i32($i780, $i783);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i784} true;
    goto $bb4676, $bb4677;

  $bb4677:
    assume {:verifier.code 0} true;
    assume !($i784 == 1);
    goto $bb4678;

  $bb4678:
    assume {:verifier.code 0} true;
    goto $bb4681;

  $bb4681:
    assume {:verifier.code 0} true;
    goto $bb4682;

  $bb4682:
    assume {:verifier.code 0} true;
    goto $bb4683;

  $bb4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3789} __const_udelay(4295000);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    goto $bb4684;

  $bb4684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3790} __const_udelay(4295000);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    goto $bb4685;

  $bb4685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3791} __const_udelay(4295000);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    goto $bb4686;

  $bb4686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3792} __const_udelay(4295000);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    goto $bb4687;

  $bb4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3793} __const_udelay(4295000);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    goto $bb4688;

  $bb4688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3794} __const_udelay(4295000);
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    goto $bb4689;

  $bb4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3795} __const_udelay(4295000);
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    goto $bb4690;

  $bb4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3796} __const_udelay(4295000);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    goto $bb4691;

  $bb4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3797} __const_udelay(4295000);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    goto $bb4692;

  $bb4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3798} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4693;

  $bb4693:
    assume {:verifier.code 0} true;
    goto $bb4694;

  $bb4694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3799} $i786 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $i787 := $eq.i32($i783, $i786);
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i787} true;
    goto $bb4695, $bb4696;

  $bb4696:
    assume {:verifier.code 0} true;
    assume !($i787 == 1);
    goto $bb4697;

  $bb4697:
    assume {:verifier.code 0} true;
    goto $bb4700;

  $bb4700:
    assume {:verifier.code 0} true;
    goto $bb4701;

  $bb4701:
    assume {:verifier.code 0} true;
    goto $bb4702;

  $bb4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3800} __const_udelay(4295000);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb4703;

  $bb4703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3801} __const_udelay(4295000);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    goto $bb4704;

  $bb4704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3802} __const_udelay(4295000);
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    goto $bb4705;

  $bb4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3803} __const_udelay(4295000);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    goto $bb4706;

  $bb4706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3804} __const_udelay(4295000);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    goto $bb4707;

  $bb4707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3805} __const_udelay(4295000);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    goto $bb4708;

  $bb4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3806} __const_udelay(4295000);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    goto $bb4709;

  $bb4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3807} __const_udelay(4295000);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    goto $bb4710;

  $bb4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3808} __const_udelay(4295000);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    goto $bb4711;

  $bb4711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3809} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4712;

  $bb4712:
    assume {:verifier.code 0} true;
    goto $bb4713;

  $bb4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3810} $i789 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $i790 := $eq.i32($i786, $i789);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i790} true;
    goto $bb4714, $bb4715;

  $bb4715:
    assume {:verifier.code 0} true;
    assume !($i790 == 1);
    goto $bb4716;

  $bb4716:
    assume {:verifier.code 0} true;
    goto $bb4719;

  $bb4719:
    assume {:verifier.code 0} true;
    goto $bb4720;

  $bb4720:
    assume {:verifier.code 0} true;
    goto $bb4721;

  $bb4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3811} __const_udelay(4295000);
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    goto $bb4722;

  $bb4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3812} __const_udelay(4295000);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    goto $bb4723;

  $bb4723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3813} __const_udelay(4295000);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    goto $bb4724;

  $bb4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3814} __const_udelay(4295000);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    goto $bb4725;

  $bb4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3815} __const_udelay(4295000);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    goto $bb4726;

  $bb4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3816} __const_udelay(4295000);
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    goto $bb4727;

  $bb4727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3817} __const_udelay(4295000);
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    goto $bb4728;

  $bb4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3818} __const_udelay(4295000);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    goto $bb4729;

  $bb4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3819} __const_udelay(4295000);
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    goto $bb4730;

  $bb4730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3820} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4731;

  $bb4731:
    assume {:verifier.code 0} true;
    goto $bb4732;

  $bb4732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3821} $i792 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i793 := $eq.i32($i789, $i792);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i793} true;
    goto $bb4733, $bb4734;

  $bb4734:
    assume {:verifier.code 0} true;
    assume !($i793 == 1);
    goto $bb4735;

  $bb4735:
    assume {:verifier.code 0} true;
    goto $bb4738;

  $bb4738:
    assume {:verifier.code 0} true;
    goto $bb4739;

  $bb4739:
    assume {:verifier.code 0} true;
    goto $bb4740;

  $bb4740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3822} __const_udelay(4295000);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    goto $bb4741;

  $bb4741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3823} __const_udelay(4295000);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    goto $bb4742;

  $bb4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3824} __const_udelay(4295000);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    goto $bb4743;

  $bb4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3825} __const_udelay(4295000);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    goto $bb4744;

  $bb4744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3826} __const_udelay(4295000);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    goto $bb4745;

  $bb4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3827} __const_udelay(4295000);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    goto $bb4746;

  $bb4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3828} __const_udelay(4295000);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    goto $bb4747;

  $bb4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3829} __const_udelay(4295000);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    goto $bb4748;

  $bb4748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3830} __const_udelay(4295000);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    goto $bb4749;

  $bb4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3831} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4750;

  $bb4750:
    assume {:verifier.code 0} true;
    goto $bb4751;

  $bb4751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3832} $i795 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i796 := $eq.i32($i792, $i795);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i796} true;
    goto $bb4752, $bb4753;

  $bb4753:
    assume {:verifier.code 0} true;
    assume !($i796 == 1);
    goto $bb4754;

  $bb4754:
    assume {:verifier.code 0} true;
    goto $bb4757;

  $bb4757:
    assume {:verifier.code 0} true;
    goto $bb4758;

  $bb4758:
    assume {:verifier.code 0} true;
    goto $bb4759;

  $bb4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3833} __const_udelay(4295000);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    goto $bb4760;

  $bb4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3834} __const_udelay(4295000);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    goto $bb4761;

  $bb4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3835} __const_udelay(4295000);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    goto $bb4762;

  $bb4762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3836} __const_udelay(4295000);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    goto $bb4763;

  $bb4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3837} __const_udelay(4295000);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    goto $bb4764;

  $bb4764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3838} __const_udelay(4295000);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    goto $bb4765;

  $bb4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3839} __const_udelay(4295000);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    goto $bb4766;

  $bb4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3840} __const_udelay(4295000);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    goto $bb4767;

  $bb4767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3841} __const_udelay(4295000);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    goto $bb4768;

  $bb4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3842} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4769;

  $bb4769:
    assume {:verifier.code 0} true;
    goto $bb4770;

  $bb4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3843} $i798 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i799 := $eq.i32($i795, $i798);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i799} true;
    goto $bb4771, $bb4772;

  $bb4772:
    assume {:verifier.code 0} true;
    assume !($i799 == 1);
    goto $bb4773;

  $bb4773:
    assume {:verifier.code 0} true;
    goto $bb4776;

  $bb4776:
    assume {:verifier.code 0} true;
    goto $bb4777;

  $bb4777:
    assume {:verifier.code 0} true;
    goto $bb4778;

  $bb4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3844} __const_udelay(4295000);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    goto $bb4779;

  $bb4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3845} __const_udelay(4295000);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    goto $bb4780;

  $bb4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3846} __const_udelay(4295000);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    goto $bb4781;

  $bb4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3847} __const_udelay(4295000);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    goto $bb4782;

  $bb4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3848} __const_udelay(4295000);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    goto $bb4783;

  $bb4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3849} __const_udelay(4295000);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    goto $bb4784;

  $bb4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3850} __const_udelay(4295000);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    goto $bb4785;

  $bb4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3851} __const_udelay(4295000);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    goto $bb4786;

  $bb4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3852} __const_udelay(4295000);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    goto $bb4787;

  $bb4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3853} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4788;

  $bb4788:
    assume {:verifier.code 0} true;
    goto $bb4789;

  $bb4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3854} $i801 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i802 := $eq.i32($i798, $i801);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i802} true;
    goto $bb4790, $bb4791;

  $bb4791:
    assume {:verifier.code 0} true;
    assume !($i802 == 1);
    goto $bb4792;

  $bb4792:
    assume {:verifier.code 0} true;
    goto $bb4795;

  $bb4795:
    assume {:verifier.code 0} true;
    goto $bb4796;

  $bb4796:
    assume {:verifier.code 0} true;
    goto $bb4797;

  $bb4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3855} __const_udelay(4295000);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    goto $bb4798;

  $bb4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3856} __const_udelay(4295000);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    goto $bb4799;

  $bb4799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3857} __const_udelay(4295000);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    goto $bb4800;

  $bb4800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3858} __const_udelay(4295000);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    goto $bb4801;

  $bb4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3859} __const_udelay(4295000);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    goto $bb4802;

  $bb4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3860} __const_udelay(4295000);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    goto $bb4803;

  $bb4803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3861} __const_udelay(4295000);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    goto $bb4804;

  $bb4804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3862} __const_udelay(4295000);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    goto $bb4805;

  $bb4805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3863} __const_udelay(4295000);
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    goto $bb4806;

  $bb4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3864} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4807;

  $bb4807:
    assume {:verifier.code 0} true;
    goto $bb4808;

  $bb4808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3865} $i804 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i805 := $eq.i32($i801, $i804);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i805} true;
    goto $bb4809, $bb4810;

  $bb4810:
    assume {:verifier.code 0} true;
    assume !($i805 == 1);
    goto $bb4811;

  $bb4811:
    assume {:verifier.code 0} true;
    goto $bb4814;

  $bb4814:
    assume {:verifier.code 0} true;
    goto $bb4815;

  $bb4815:
    assume {:verifier.code 0} true;
    goto $bb4816;

  $bb4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3866} __const_udelay(4295000);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    goto $bb4817;

  $bb4817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3867} __const_udelay(4295000);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    goto $bb4818;

  $bb4818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3868} __const_udelay(4295000);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    goto $bb4819;

  $bb4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3869} __const_udelay(4295000);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    goto $bb4820;

  $bb4820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3870} __const_udelay(4295000);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    goto $bb4821;

  $bb4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3871} __const_udelay(4295000);
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    goto $bb4822;

  $bb4822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3872} __const_udelay(4295000);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    goto $bb4823;

  $bb4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3873} __const_udelay(4295000);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    goto $bb4824;

  $bb4824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3874} __const_udelay(4295000);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    goto $bb4825;

  $bb4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3875} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4826;

  $bb4826:
    assume {:verifier.code 0} true;
    goto $bb4827;

  $bb4827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3876} $i807 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i808 := $eq.i32($i804, $i807);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i808} true;
    goto $bb4828, $bb4829;

  $bb4829:
    assume {:verifier.code 0} true;
    assume !($i808 == 1);
    goto $bb4830;

  $bb4830:
    assume {:verifier.code 0} true;
    goto $bb4833;

  $bb4833:
    assume {:verifier.code 0} true;
    goto $bb4834;

  $bb4834:
    assume {:verifier.code 0} true;
    goto $bb4835;

  $bb4835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3877} __const_udelay(4295000);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    goto $bb4836;

  $bb4836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3878} __const_udelay(4295000);
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    goto $bb4837;

  $bb4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3879} __const_udelay(4295000);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    goto $bb4838;

  $bb4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3880} __const_udelay(4295000);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    goto $bb4839;

  $bb4839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3881} __const_udelay(4295000);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    goto $bb4840;

  $bb4840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3882} __const_udelay(4295000);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    goto $bb4841;

  $bb4841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3883} __const_udelay(4295000);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    goto $bb4842;

  $bb4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3884} __const_udelay(4295000);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    goto $bb4843;

  $bb4843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3885} __const_udelay(4295000);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    goto $bb4844;

  $bb4844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3886} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4845;

  $bb4845:
    assume {:verifier.code 0} true;
    goto $bb4846;

  $bb4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3887} $i810 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    $i811 := $eq.i32($i807, $i810);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i811} true;
    goto $bb4847, $bb4848;

  $bb4848:
    assume {:verifier.code 0} true;
    assume !($i811 == 1);
    goto $bb4849;

  $bb4849:
    assume {:verifier.code 0} true;
    goto $bb4852;

  $bb4852:
    assume {:verifier.code 0} true;
    goto $bb4853;

  $bb4853:
    assume {:verifier.code 0} true;
    goto $bb4854;

  $bb4854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3888} __const_udelay(4295000);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    goto $bb4855;

  $bb4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3889} __const_udelay(4295000);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    goto $bb4856;

  $bb4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3890} __const_udelay(4295000);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    goto $bb4857;

  $bb4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3891} __const_udelay(4295000);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    goto $bb4858;

  $bb4858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3892} __const_udelay(4295000);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    goto $bb4859;

  $bb4859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3893} __const_udelay(4295000);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    goto $bb4860;

  $bb4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3894} __const_udelay(4295000);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    goto $bb4861;

  $bb4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3895} __const_udelay(4295000);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    goto $bb4862;

  $bb4862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3896} __const_udelay(4295000);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    goto $bb4863;

  $bb4863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3897} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4864;

  $bb4864:
    assume {:verifier.code 0} true;
    goto $bb4865;

  $bb4865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3898} $i813 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $i814 := $eq.i32($i810, $i813);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i814} true;
    goto $bb4866, $bb4867;

  $bb4867:
    assume {:verifier.code 0} true;
    assume !($i814 == 1);
    goto $bb4868;

  $bb4868:
    assume {:verifier.code 0} true;
    goto $bb4871;

  $bb4871:
    assume {:verifier.code 0} true;
    goto $bb4872;

  $bb4872:
    assume {:verifier.code 0} true;
    goto $bb4873;

  $bb4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3899} __const_udelay(4295000);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    goto $bb4874;

  $bb4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3900} __const_udelay(4295000);
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    goto $bb4875;

  $bb4875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3901} __const_udelay(4295000);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    goto $bb4876;

  $bb4876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3902} __const_udelay(4295000);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    goto $bb4877;

  $bb4877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3903} __const_udelay(4295000);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    goto $bb4878;

  $bb4878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3904} __const_udelay(4295000);
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    goto $bb4879;

  $bb4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3905} __const_udelay(4295000);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    goto $bb4880;

  $bb4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3906} __const_udelay(4295000);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    goto $bb4881;

  $bb4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3907} __const_udelay(4295000);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    goto $bb4882;

  $bb4882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3908} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4883;

  $bb4883:
    assume {:verifier.code 0} true;
    goto $bb4884;

  $bb4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3909} $i816 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $i817 := $eq.i32($i813, $i816);
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    assume {:branchcond $i817} true;
    goto $bb4885, $bb4886;

  $bb4886:
    assume {:verifier.code 0} true;
    assume !($i817 == 1);
    goto $bb4887;

  $bb4887:
    assume {:verifier.code 0} true;
    goto $bb4890;

  $bb4890:
    assume {:verifier.code 0} true;
    goto $bb4891;

  $bb4891:
    assume {:verifier.code 0} true;
    goto $bb4892;

  $bb4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3910} __const_udelay(4295000);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    goto $bb4893;

  $bb4893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3911} __const_udelay(4295000);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    goto $bb4894;

  $bb4894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3912} __const_udelay(4295000);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    goto $bb4895;

  $bb4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3913} __const_udelay(4295000);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    goto $bb4896;

  $bb4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3914} __const_udelay(4295000);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    goto $bb4897;

  $bb4897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3915} __const_udelay(4295000);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    goto $bb4898;

  $bb4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3916} __const_udelay(4295000);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    goto $bb4899;

  $bb4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3917} __const_udelay(4295000);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    goto $bb4900;

  $bb4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3918} __const_udelay(4295000);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    goto $bb4901;

  $bb4901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3919} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4902;

  $bb4902:
    assume {:verifier.code 0} true;
    goto $bb4903;

  $bb4903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3920} $i819 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    $i820 := $eq.i32($i816, $i819);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i820} true;
    goto $bb4904, $bb4905;

  $bb4905:
    assume {:verifier.code 0} true;
    assume !($i820 == 1);
    goto $bb4906;

  $bb4906:
    assume {:verifier.code 0} true;
    goto $bb4909;

  $bb4909:
    assume {:verifier.code 0} true;
    goto $bb4910;

  $bb4910:
    assume {:verifier.code 0} true;
    goto $bb4911;

  $bb4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3921} __const_udelay(4295000);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    goto $bb4912;

  $bb4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3922} __const_udelay(4295000);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    goto $bb4913;

  $bb4913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3923} __const_udelay(4295000);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    goto $bb4914;

  $bb4914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3924} __const_udelay(4295000);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    goto $bb4915;

  $bb4915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3925} __const_udelay(4295000);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    goto $bb4916;

  $bb4916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3926} __const_udelay(4295000);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    goto $bb4917;

  $bb4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3927} __const_udelay(4295000);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    goto $bb4918;

  $bb4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3928} __const_udelay(4295000);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    goto $bb4919;

  $bb4919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3929} __const_udelay(4295000);
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    goto $bb4920;

  $bb4920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3930} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4921;

  $bb4921:
    assume {:verifier.code 0} true;
    goto $bb4922;

  $bb4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3931} $i822 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $i823 := $eq.i32($i819, $i822);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i823} true;
    goto $bb4923, $bb4924;

  $bb4924:
    assume {:verifier.code 0} true;
    assume !($i823 == 1);
    goto $bb4925;

  $bb4925:
    assume {:verifier.code 0} true;
    goto $bb4928;

  $bb4928:
    assume {:verifier.code 0} true;
    goto $bb4929;

  $bb4929:
    assume {:verifier.code 0} true;
    goto $bb4930;

  $bb4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3932} __const_udelay(4295000);
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    goto $bb4931;

  $bb4931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3933} __const_udelay(4295000);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    goto $bb4932;

  $bb4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3934} __const_udelay(4295000);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    goto $bb4933;

  $bb4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3935} __const_udelay(4295000);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    goto $bb4934;

  $bb4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3936} __const_udelay(4295000);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    goto $bb4935;

  $bb4935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3937} __const_udelay(4295000);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    goto $bb4936;

  $bb4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3938} __const_udelay(4295000);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    goto $bb4937;

  $bb4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3939} __const_udelay(4295000);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    goto $bb4938;

  $bb4938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3940} __const_udelay(4295000);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    goto $bb4939;

  $bb4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3941} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4940;

  $bb4940:
    assume {:verifier.code 0} true;
    goto $bb4941;

  $bb4941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3942} $i825 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i826 := $eq.i32($i822, $i825);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i826} true;
    goto $bb4942, $bb4943;

  $bb4943:
    assume {:verifier.code 0} true;
    assume !($i826 == 1);
    goto $bb4944;

  $bb4944:
    assume {:verifier.code 0} true;
    goto $bb4947;

  $bb4947:
    assume {:verifier.code 0} true;
    goto $bb4948;

  $bb4948:
    assume {:verifier.code 0} true;
    goto $bb4949;

  $bb4949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3943} __const_udelay(4295000);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    goto $bb4950;

  $bb4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3944} __const_udelay(4295000);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    goto $bb4951;

  $bb4951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3945} __const_udelay(4295000);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    goto $bb4952;

  $bb4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3946} __const_udelay(4295000);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    goto $bb4953;

  $bb4953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3947} __const_udelay(4295000);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    goto $bb4954;

  $bb4954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3948} __const_udelay(4295000);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    goto $bb4955;

  $bb4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3949} __const_udelay(4295000);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    goto $bb4956;

  $bb4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3950} __const_udelay(4295000);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    goto $bb4957;

  $bb4957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3951} __const_udelay(4295000);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    goto $bb4958;

  $bb4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3952} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4959;

  $bb4959:
    assume {:verifier.code 0} true;
    goto $bb4960;

  $bb4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3953} $i828 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i829 := $eq.i32($i825, $i828);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i829} true;
    goto $bb4961, $bb4962;

  $bb4962:
    assume {:verifier.code 0} true;
    assume !($i829 == 1);
    goto $bb4963;

  $bb4963:
    assume {:verifier.code 0} true;
    goto $bb4966;

  $bb4966:
    assume {:verifier.code 0} true;
    goto $bb4967;

  $bb4967:
    assume {:verifier.code 0} true;
    goto $bb4968;

  $bb4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3954} __const_udelay(4295000);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    goto $bb4969;

  $bb4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3955} __const_udelay(4295000);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    goto $bb4970;

  $bb4970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3956} __const_udelay(4295000);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    goto $bb4971;

  $bb4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3957} __const_udelay(4295000);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    goto $bb4972;

  $bb4972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3958} __const_udelay(4295000);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    goto $bb4973;

  $bb4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3959} __const_udelay(4295000);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    goto $bb4974;

  $bb4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3960} __const_udelay(4295000);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    goto $bb4975;

  $bb4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3961} __const_udelay(4295000);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    goto $bb4976;

  $bb4976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3962} __const_udelay(4295000);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    goto $bb4977;

  $bb4977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3963} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4978;

  $bb4978:
    assume {:verifier.code 0} true;
    goto $bb4979;

  $bb4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3964} $i831 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $i832 := $eq.i32($i828, $i831);
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i832} true;
    goto $bb4980, $bb4981;

  $bb4981:
    assume {:verifier.code 0} true;
    assume !($i832 == 1);
    goto $bb4982;

  $bb4982:
    assume {:verifier.code 0} true;
    goto $bb4985;

  $bb4985:
    assume {:verifier.code 0} true;
    goto $bb4986;

  $bb4986:
    assume {:verifier.code 0} true;
    goto $bb4987;

  $bb4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3965} __const_udelay(4295000);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    goto $bb4988;

  $bb4988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3966} __const_udelay(4295000);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    goto $bb4989;

  $bb4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3967} __const_udelay(4295000);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    goto $bb4990;

  $bb4990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3968} __const_udelay(4295000);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    goto $bb4991;

  $bb4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3969} __const_udelay(4295000);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    goto $bb4992;

  $bb4992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3970} __const_udelay(4295000);
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    goto $bb4993;

  $bb4993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3971} __const_udelay(4295000);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    goto $bb4994;

  $bb4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3972} __const_udelay(4295000);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    goto $bb4995;

  $bb4995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3973} __const_udelay(4295000);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    goto $bb4996;

  $bb4996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3974} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb4997;

  $bb4997:
    assume {:verifier.code 0} true;
    goto $bb4998;

  $bb4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3975} $i834 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $i835 := $eq.i32($i831, $i834);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i835} true;
    goto $bb4999, $bb5000;

  $bb5000:
    assume {:verifier.code 0} true;
    assume !($i835 == 1);
    goto $bb5001;

  $bb5001:
    assume {:verifier.code 0} true;
    goto $bb5004;

  $bb5004:
    assume {:verifier.code 0} true;
    goto $bb5005;

  $bb5005:
    assume {:verifier.code 0} true;
    goto $bb5006;

  $bb5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3976} __const_udelay(4295000);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    goto $bb5007;

  $bb5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3977} __const_udelay(4295000);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    goto $bb5008;

  $bb5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3978} __const_udelay(4295000);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    goto $bb5009;

  $bb5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3979} __const_udelay(4295000);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    goto $bb5010;

  $bb5010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3980} __const_udelay(4295000);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    goto $bb5011;

  $bb5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3981} __const_udelay(4295000);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    goto $bb5012;

  $bb5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3982} __const_udelay(4295000);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    goto $bb5013;

  $bb5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3983} __const_udelay(4295000);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    goto $bb5014;

  $bb5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3984} __const_udelay(4295000);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    goto $bb5015;

  $bb5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3985} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5016;

  $bb5016:
    assume {:verifier.code 0} true;
    goto $bb5017;

  $bb5017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3986} $i837 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $i838 := $eq.i32($i834, $i837);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i838} true;
    goto $bb5018, $bb5019;

  $bb5019:
    assume {:verifier.code 0} true;
    assume !($i838 == 1);
    goto $bb5020;

  $bb5020:
    assume {:verifier.code 0} true;
    goto $bb5023;

  $bb5023:
    assume {:verifier.code 0} true;
    goto $bb5024;

  $bb5024:
    assume {:verifier.code 0} true;
    goto $bb5025;

  $bb5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3987} __const_udelay(4295000);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    goto $bb5026;

  $bb5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3988} __const_udelay(4295000);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    goto $bb5027;

  $bb5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3989} __const_udelay(4295000);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    goto $bb5028;

  $bb5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3990} __const_udelay(4295000);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    goto $bb5029;

  $bb5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3991} __const_udelay(4295000);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    goto $bb5030;

  $bb5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3992} __const_udelay(4295000);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    goto $bb5031;

  $bb5031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3993} __const_udelay(4295000);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    goto $bb5032;

  $bb5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3994} __const_udelay(4295000);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    goto $bb5033;

  $bb5033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3995} __const_udelay(4295000);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    goto $bb5034;

  $bb5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3996} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5035;

  $bb5035:
    assume {:verifier.code 0} true;
    goto $bb5036;

  $bb5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3997} $i840 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $i841 := $eq.i32($i837, $i840);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i841} true;
    goto $bb5037, $bb5038;

  $bb5038:
    assume {:verifier.code 0} true;
    assume !($i841 == 1);
    goto $bb5039;

  $bb5039:
    assume {:verifier.code 0} true;
    goto $bb5042;

  $bb5042:
    assume {:verifier.code 0} true;
    goto $bb5043;

  $bb5043:
    assume {:verifier.code 0} true;
    goto $bb5044;

  $bb5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3998} __const_udelay(4295000);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    goto $bb5045;

  $bb5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3999} __const_udelay(4295000);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    goto $bb5046;

  $bb5046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4000} __const_udelay(4295000);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    goto $bb5047;

  $bb5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4001} __const_udelay(4295000);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    goto $bb5048;

  $bb5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4002} __const_udelay(4295000);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    goto $bb5049;

  $bb5049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4003} __const_udelay(4295000);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    goto $bb5050;

  $bb5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4004} __const_udelay(4295000);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    goto $bb5051;

  $bb5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4005} __const_udelay(4295000);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    goto $bb5052;

  $bb5052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4006} __const_udelay(4295000);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    goto $bb5053;

  $bb5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4007} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5054;

  $bb5054:
    assume {:verifier.code 0} true;
    goto $bb5055;

  $bb5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4008} $i843 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $i844 := $eq.i32($i840, $i843);
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i844} true;
    goto $bb5056, $bb5057;

  $bb5057:
    assume {:verifier.code 0} true;
    assume !($i844 == 1);
    goto $bb5058;

  $bb5058:
    assume {:verifier.code 0} true;
    goto $bb5061;

  $bb5061:
    assume {:verifier.code 0} true;
    goto $bb5062;

  $bb5062:
    assume {:verifier.code 0} true;
    goto $bb5063;

  $bb5063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4009} __const_udelay(4295000);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    goto $bb5064;

  $bb5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4010} __const_udelay(4295000);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    goto $bb5065;

  $bb5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4011} __const_udelay(4295000);
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    goto $bb5066;

  $bb5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4012} __const_udelay(4295000);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    goto $bb5067;

  $bb5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4013} __const_udelay(4295000);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    goto $bb5068;

  $bb5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4014} __const_udelay(4295000);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    goto $bb5069;

  $bb5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4015} __const_udelay(4295000);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    goto $bb5070;

  $bb5070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4016} __const_udelay(4295000);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    goto $bb5071;

  $bb5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4017} __const_udelay(4295000);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    goto $bb5072;

  $bb5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4018} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5073;

  $bb5073:
    assume {:verifier.code 0} true;
    goto $bb5074;

  $bb5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4019} $i846 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i847 := $eq.i32($i843, $i846);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i847} true;
    goto $bb5075, $bb5076;

  $bb5076:
    assume {:verifier.code 0} true;
    assume !($i847 == 1);
    goto $bb5077;

  $bb5077:
    assume {:verifier.code 0} true;
    goto $bb5080;

  $bb5080:
    assume {:verifier.code 0} true;
    goto $bb5081;

  $bb5081:
    assume {:verifier.code 0} true;
    goto $bb5082;

  $bb5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4020} __const_udelay(4295000);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    goto $bb5083;

  $bb5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4021} __const_udelay(4295000);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    goto $bb5084;

  $bb5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4022} __const_udelay(4295000);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    goto $bb5085;

  $bb5085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4023} __const_udelay(4295000);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    goto $bb5086;

  $bb5086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4024} __const_udelay(4295000);
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    goto $bb5087;

  $bb5087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4025} __const_udelay(4295000);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    goto $bb5088;

  $bb5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4026} __const_udelay(4295000);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    goto $bb5089;

  $bb5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4027} __const_udelay(4295000);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    goto $bb5090;

  $bb5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4028} __const_udelay(4295000);
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    goto $bb5091;

  $bb5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4029} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5092;

  $bb5092:
    assume {:verifier.code 0} true;
    goto $bb5093;

  $bb5093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4030} $i849 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $i850 := $eq.i32($i846, $i849);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i850} true;
    goto $bb5094, $bb5095;

  $bb5095:
    assume {:verifier.code 0} true;
    assume !($i850 == 1);
    goto $bb5096;

  $bb5096:
    assume {:verifier.code 0} true;
    goto $bb5099;

  $bb5099:
    assume {:verifier.code 0} true;
    goto $bb5100;

  $bb5100:
    assume {:verifier.code 0} true;
    goto $bb5101;

  $bb5101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4031} __const_udelay(4295000);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    goto $bb5102;

  $bb5102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4032} __const_udelay(4295000);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    goto $bb5103;

  $bb5103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4033} __const_udelay(4295000);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    goto $bb5104;

  $bb5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4034} __const_udelay(4295000);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    goto $bb5105;

  $bb5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4035} __const_udelay(4295000);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    goto $bb5106;

  $bb5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4036} __const_udelay(4295000);
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    goto $bb5107;

  $bb5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4037} __const_udelay(4295000);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    goto $bb5108;

  $bb5108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4038} __const_udelay(4295000);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    goto $bb5109;

  $bb5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4039} __const_udelay(4295000);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    goto $bb5110;

  $bb5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4040} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5111;

  $bb5111:
    assume {:verifier.code 0} true;
    goto $bb5112;

  $bb5112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4041} $i852 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $i853 := $eq.i32($i849, $i852);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i853} true;
    goto $bb5113, $bb5114;

  $bb5114:
    assume {:verifier.code 0} true;
    assume !($i853 == 1);
    goto $bb5115;

  $bb5115:
    assume {:verifier.code 0} true;
    goto $bb5118;

  $bb5118:
    assume {:verifier.code 0} true;
    goto $bb5119;

  $bb5119:
    assume {:verifier.code 0} true;
    goto $bb5120;

  $bb5120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4042} __const_udelay(4295000);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    goto $bb5121;

  $bb5121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4043} __const_udelay(4295000);
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    goto $bb5122;

  $bb5122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4044} __const_udelay(4295000);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    goto $bb5123;

  $bb5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4045} __const_udelay(4295000);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    goto $bb5124;

  $bb5124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4046} __const_udelay(4295000);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    goto $bb5125;

  $bb5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4047} __const_udelay(4295000);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    goto $bb5126;

  $bb5126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4048} __const_udelay(4295000);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    goto $bb5127;

  $bb5127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4049} __const_udelay(4295000);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    goto $bb5128;

  $bb5128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4050} __const_udelay(4295000);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    goto $bb5129;

  $bb5129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4051} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5130;

  $bb5130:
    assume {:verifier.code 0} true;
    goto $bb5131;

  $bb5131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4052} $i855 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i856 := $eq.i32($i852, $i855);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i856} true;
    goto $bb5132, $bb5133;

  $bb5133:
    assume {:verifier.code 0} true;
    assume !($i856 == 1);
    goto $bb5134;

  $bb5134:
    assume {:verifier.code 0} true;
    goto $bb5137;

  $bb5137:
    assume {:verifier.code 0} true;
    goto $bb5138;

  $bb5138:
    assume {:verifier.code 0} true;
    goto $bb5139;

  $bb5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4053} __const_udelay(4295000);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    goto $bb5140;

  $bb5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4054} __const_udelay(4295000);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    goto $bb5141;

  $bb5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4055} __const_udelay(4295000);
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    goto $bb5142;

  $bb5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4056} __const_udelay(4295000);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    goto $bb5143;

  $bb5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4057} __const_udelay(4295000);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    goto $bb5144;

  $bb5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4058} __const_udelay(4295000);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    goto $bb5145;

  $bb5145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4059} __const_udelay(4295000);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    goto $bb5146;

  $bb5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4060} __const_udelay(4295000);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    goto $bb5147;

  $bb5147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4061} __const_udelay(4295000);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    goto $bb5148;

  $bb5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4062} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5149;

  $bb5149:
    assume {:verifier.code 0} true;
    goto $bb5150;

  $bb5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4063} $i858 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $i859 := $eq.i32($i855, $i858);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i859} true;
    goto $bb5151, $bb5152;

  $bb5152:
    assume {:verifier.code 0} true;
    assume !($i859 == 1);
    goto $bb5153;

  $bb5153:
    assume {:verifier.code 0} true;
    goto $bb5156;

  $bb5156:
    assume {:verifier.code 0} true;
    goto $bb5157;

  $bb5157:
    assume {:verifier.code 0} true;
    goto $bb5158;

  $bb5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4064} __const_udelay(4295000);
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    goto $bb5159;

  $bb5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4065} __const_udelay(4295000);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    goto $bb5160;

  $bb5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4066} __const_udelay(4295000);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    goto $bb5161;

  $bb5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4067} __const_udelay(4295000);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    goto $bb5162;

  $bb5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4068} __const_udelay(4295000);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    goto $bb5163;

  $bb5163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4069} __const_udelay(4295000);
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    goto $bb5164;

  $bb5164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4070} __const_udelay(4295000);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    goto $bb5165;

  $bb5165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4071} __const_udelay(4295000);
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    goto $bb5166;

  $bb5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4072} __const_udelay(4295000);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    goto $bb5167;

  $bb5167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4073} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5168;

  $bb5168:
    assume {:verifier.code 0} true;
    goto $bb5169;

  $bb5169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4074} $i861 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i862 := $eq.i32($i858, $i861);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i862} true;
    goto $bb5170, $bb5171;

  $bb5171:
    assume {:verifier.code 0} true;
    assume !($i862 == 1);
    goto $bb5172;

  $bb5172:
    assume {:verifier.code 0} true;
    goto $bb5175;

  $bb5175:
    assume {:verifier.code 0} true;
    goto $bb5176;

  $bb5176:
    assume {:verifier.code 0} true;
    goto $bb5177;

  $bb5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4075} __const_udelay(4295000);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    goto $bb5178;

  $bb5178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4076} __const_udelay(4295000);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    goto $bb5179;

  $bb5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4077} __const_udelay(4295000);
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    goto $bb5180;

  $bb5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4078} __const_udelay(4295000);
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    goto $bb5181;

  $bb5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4079} __const_udelay(4295000);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    goto $bb5182;

  $bb5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4080} __const_udelay(4295000);
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    goto $bb5183;

  $bb5183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4081} __const_udelay(4295000);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    goto $bb5184;

  $bb5184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4082} __const_udelay(4295000);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    goto $bb5185;

  $bb5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4083} __const_udelay(4295000);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    goto $bb5186;

  $bb5186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4084} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5187;

  $bb5187:
    assume {:verifier.code 0} true;
    goto $bb5188;

  $bb5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4085} $i864 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    $i865 := $eq.i32($i861, $i864);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i865} true;
    goto $bb5189, $bb5190;

  $bb5190:
    assume {:verifier.code 0} true;
    assume !($i865 == 1);
    goto $bb5191;

  $bb5191:
    assume {:verifier.code 0} true;
    goto $bb5194;

  $bb5194:
    assume {:verifier.code 0} true;
    goto $bb5195;

  $bb5195:
    assume {:verifier.code 0} true;
    goto $bb5196;

  $bb5196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4086} __const_udelay(4295000);
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    goto $bb5197;

  $bb5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4087} __const_udelay(4295000);
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    goto $bb5198;

  $bb5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4088} __const_udelay(4295000);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    goto $bb5199;

  $bb5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4089} __const_udelay(4295000);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    goto $bb5200;

  $bb5200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4090} __const_udelay(4295000);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    goto $bb5201;

  $bb5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4091} __const_udelay(4295000);
    goto corral_source_split_12653;

  corral_source_split_12653:
    assume {:verifier.code 0} true;
    goto $bb5202;

  $bb5202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4092} __const_udelay(4295000);
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    goto $bb5203;

  $bb5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4093} __const_udelay(4295000);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    goto $bb5204;

  $bb5204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4094} __const_udelay(4295000);
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    goto $bb5205;

  $bb5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4095} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5206;

  $bb5206:
    assume {:verifier.code 0} true;
    goto $bb5207;

  $bb5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4096} $i867 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    $i868 := $eq.i32($i864, $i867);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i868} true;
    goto $bb5208, $bb5209;

  $bb5209:
    assume {:verifier.code 0} true;
    assume !($i868 == 1);
    goto $bb5210;

  $bb5210:
    assume {:verifier.code 0} true;
    goto $bb5213;

  $bb5213:
    assume {:verifier.code 0} true;
    goto $bb5214;

  $bb5214:
    assume {:verifier.code 0} true;
    goto $bb5215;

  $bb5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4097} __const_udelay(4295000);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    goto $bb5216;

  $bb5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4098} __const_udelay(4295000);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    goto $bb5217;

  $bb5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4099} __const_udelay(4295000);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    goto $bb5218;

  $bb5218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4100} __const_udelay(4295000);
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    goto $bb5219;

  $bb5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4101} __const_udelay(4295000);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    goto $bb5220;

  $bb5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4102} __const_udelay(4295000);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    goto $bb5221;

  $bb5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4103} __const_udelay(4295000);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    goto $bb5222;

  $bb5222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4104} __const_udelay(4295000);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    goto $bb5223;

  $bb5223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4105} __const_udelay(4295000);
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    goto $bb5224;

  $bb5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4106} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5225;

  $bb5225:
    assume {:verifier.code 0} true;
    goto $bb5226;

  $bb5226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4107} $i870 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i871 := $eq.i32($i867, $i870);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i871} true;
    goto $bb5227, $bb5228;

  $bb5228:
    assume {:verifier.code 0} true;
    assume !($i871 == 1);
    goto $bb5229;

  $bb5229:
    assume {:verifier.code 0} true;
    goto $bb5232;

  $bb5232:
    assume {:verifier.code 0} true;
    goto $bb5233;

  $bb5233:
    assume {:verifier.code 0} true;
    goto $bb5234;

  $bb5234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4108} __const_udelay(4295000);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    goto $bb5235;

  $bb5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4109} __const_udelay(4295000);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    goto $bb5236;

  $bb5236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4110} __const_udelay(4295000);
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    goto $bb5237;

  $bb5237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4111} __const_udelay(4295000);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    goto $bb5238;

  $bb5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4112} __const_udelay(4295000);
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    goto $bb5239;

  $bb5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4113} __const_udelay(4295000);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    goto $bb5240;

  $bb5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4114} __const_udelay(4295000);
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    goto $bb5241;

  $bb5241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4115} __const_udelay(4295000);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    goto $bb5242;

  $bb5242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4116} __const_udelay(4295000);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    goto $bb5243;

  $bb5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4117} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5244;

  $bb5244:
    assume {:verifier.code 0} true;
    goto $bb5245;

  $bb5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4118} $i873 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $i874 := $eq.i32($i870, $i873);
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i874} true;
    goto $bb5246, $bb5247;

  $bb5247:
    assume {:verifier.code 0} true;
    assume !($i874 == 1);
    goto $bb5248;

  $bb5248:
    assume {:verifier.code 0} true;
    goto $bb5251;

  $bb5251:
    assume {:verifier.code 0} true;
    goto $bb5252;

  $bb5252:
    assume {:verifier.code 0} true;
    goto $bb5253;

  $bb5253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4119} __const_udelay(4295000);
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    goto $bb5254;

  $bb5254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4120} __const_udelay(4295000);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    goto $bb5255;

  $bb5255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4121} __const_udelay(4295000);
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    goto $bb5256;

  $bb5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4122} __const_udelay(4295000);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    goto $bb5257;

  $bb5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4123} __const_udelay(4295000);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    goto $bb5258;

  $bb5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4124} __const_udelay(4295000);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    goto $bb5259;

  $bb5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4125} __const_udelay(4295000);
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    goto $bb5260;

  $bb5260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4126} __const_udelay(4295000);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    goto $bb5261;

  $bb5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4127} __const_udelay(4295000);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    goto $bb5262;

  $bb5262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4128} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5263;

  $bb5263:
    assume {:verifier.code 0} true;
    goto $bb5264;

  $bb5264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4129} $i876 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $i877 := $eq.i32($i873, $i876);
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i877} true;
    goto $bb5265, $bb5266;

  $bb5266:
    assume {:verifier.code 0} true;
    assume !($i877 == 1);
    goto $bb5267;

  $bb5267:
    assume {:verifier.code 0} true;
    goto $bb5270;

  $bb5270:
    assume {:verifier.code 0} true;
    goto $bb5271;

  $bb5271:
    assume {:verifier.code 0} true;
    goto $bb5272;

  $bb5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4130} __const_udelay(4295000);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    goto $bb5273;

  $bb5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4131} __const_udelay(4295000);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    goto $bb5274;

  $bb5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4132} __const_udelay(4295000);
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    goto $bb5275;

  $bb5275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4133} __const_udelay(4295000);
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    goto $bb5276;

  $bb5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4134} __const_udelay(4295000);
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    goto $bb5277;

  $bb5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4135} __const_udelay(4295000);
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    goto $bb5278;

  $bb5278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4136} __const_udelay(4295000);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    goto $bb5279;

  $bb5279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4137} __const_udelay(4295000);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    goto $bb5280;

  $bb5280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4138} __const_udelay(4295000);
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    goto $bb5281;

  $bb5281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4139} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5282;

  $bb5282:
    assume {:verifier.code 0} true;
    goto $bb5283;

  $bb5283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4140} $i879 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    $i880 := $eq.i32($i876, $i879);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i880} true;
    goto $bb5284, $bb5285;

  $bb5285:
    assume {:verifier.code 0} true;
    assume !($i880 == 1);
    goto $bb5286;

  $bb5286:
    assume {:verifier.code 0} true;
    goto $bb5289;

  $bb5289:
    assume {:verifier.code 0} true;
    goto $bb5290;

  $bb5290:
    assume {:verifier.code 0} true;
    goto $bb5291;

  $bb5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4141} __const_udelay(4295000);
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    goto $bb5292;

  $bb5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4142} __const_udelay(4295000);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    goto $bb5293;

  $bb5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4143} __const_udelay(4295000);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    goto $bb5294;

  $bb5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4144} __const_udelay(4295000);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    goto $bb5295;

  $bb5295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4145} __const_udelay(4295000);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    goto $bb5296;

  $bb5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4146} __const_udelay(4295000);
    goto corral_source_split_12773;

  corral_source_split_12773:
    assume {:verifier.code 0} true;
    goto $bb5297;

  $bb5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4147} __const_udelay(4295000);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    goto $bb5298;

  $bb5298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4148} __const_udelay(4295000);
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    goto $bb5299;

  $bb5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4149} __const_udelay(4295000);
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    goto $bb5300;

  $bb5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4150} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5301;

  $bb5301:
    assume {:verifier.code 0} true;
    goto $bb5302;

  $bb5302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4151} $i882 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $i883 := $eq.i32($i879, $i882);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i883} true;
    goto $bb5303, $bb5304;

  $bb5304:
    assume {:verifier.code 0} true;
    assume !($i883 == 1);
    goto $bb5305;

  $bb5305:
    assume {:verifier.code 0} true;
    goto $bb5308;

  $bb5308:
    assume {:verifier.code 0} true;
    goto $bb5309;

  $bb5309:
    assume {:verifier.code 0} true;
    goto $bb5310;

  $bb5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4152} __const_udelay(4295000);
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    goto $bb5311;

  $bb5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4153} __const_udelay(4295000);
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    goto $bb5312;

  $bb5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4154} __const_udelay(4295000);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    goto $bb5313;

  $bb5313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4155} __const_udelay(4295000);
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    goto $bb5314;

  $bb5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4156} __const_udelay(4295000);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    goto $bb5315;

  $bb5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4157} __const_udelay(4295000);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    goto $bb5316;

  $bb5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4158} __const_udelay(4295000);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    goto $bb5317;

  $bb5317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4159} __const_udelay(4295000);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    goto $bb5318;

  $bb5318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4160} __const_udelay(4295000);
    goto corral_source_split_12803;

  corral_source_split_12803:
    assume {:verifier.code 0} true;
    goto $bb5319;

  $bb5319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4161} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5320;

  $bb5320:
    assume {:verifier.code 0} true;
    goto $bb5321;

  $bb5321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4162} $i885 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $i886 := $eq.i32($i882, $i885);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i886} true;
    goto $bb5322, $bb5323;

  $bb5323:
    assume {:verifier.code 0} true;
    assume !($i886 == 1);
    goto $bb5324;

  $bb5324:
    assume {:verifier.code 0} true;
    goto $bb5327;

  $bb5327:
    assume {:verifier.code 0} true;
    goto $bb5328;

  $bb5328:
    assume {:verifier.code 0} true;
    goto $bb5329;

  $bb5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4163} __const_udelay(4295000);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    goto $bb5330;

  $bb5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4164} __const_udelay(4295000);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    goto $bb5331;

  $bb5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4165} __const_udelay(4295000);
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    goto $bb5332;

  $bb5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4166} __const_udelay(4295000);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    goto $bb5333;

  $bb5333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4167} __const_udelay(4295000);
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    goto $bb5334;

  $bb5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4168} __const_udelay(4295000);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    goto $bb5335;

  $bb5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4169} __const_udelay(4295000);
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    goto $bb5336;

  $bb5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4170} __const_udelay(4295000);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    goto $bb5337;

  $bb5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4171} __const_udelay(4295000);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    goto $bb5338;

  $bb5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4172} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5339;

  $bb5339:
    assume {:verifier.code 0} true;
    goto $bb5340;

  $bb5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4173} $i888 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i889 := $eq.i32($i885, $i888);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i889} true;
    goto $bb5341, $bb5342;

  $bb5342:
    assume {:verifier.code 0} true;
    assume !($i889 == 1);
    goto $bb5343;

  $bb5343:
    assume {:verifier.code 0} true;
    goto $bb5346;

  $bb5346:
    assume {:verifier.code 0} true;
    goto $bb5347;

  $bb5347:
    assume {:verifier.code 0} true;
    goto $bb5348;

  $bb5348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4174} __const_udelay(4295000);
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    goto $bb5349;

  $bb5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4175} __const_udelay(4295000);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    goto $bb5350;

  $bb5350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4176} __const_udelay(4295000);
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    goto $bb5351;

  $bb5351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4177} __const_udelay(4295000);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    goto $bb5352;

  $bb5352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4178} __const_udelay(4295000);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    goto $bb5353;

  $bb5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4179} __const_udelay(4295000);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    goto $bb5354;

  $bb5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4180} __const_udelay(4295000);
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    goto $bb5355;

  $bb5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4181} __const_udelay(4295000);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    goto $bb5356;

  $bb5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4182} __const_udelay(4295000);
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    goto $bb5357;

  $bb5357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4183} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5358;

  $bb5358:
    assume {:verifier.code 0} true;
    goto $bb5359;

  $bb5359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4184} $i891 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $i892 := $eq.i32($i888, $i891);
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i892} true;
    goto $bb5360, $bb5361;

  $bb5361:
    assume {:verifier.code 0} true;
    assume !($i892 == 1);
    goto $bb5362;

  $bb5362:
    assume {:verifier.code 0} true;
    goto $bb5365;

  $bb5365:
    assume {:verifier.code 0} true;
    goto $bb5366;

  $bb5366:
    assume {:verifier.code 0} true;
    goto $bb5367;

  $bb5367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4185} __const_udelay(4295000);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    goto $bb5368;

  $bb5368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4186} __const_udelay(4295000);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    goto $bb5369;

  $bb5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4187} __const_udelay(4295000);
    goto corral_source_split_12863;

  corral_source_split_12863:
    assume {:verifier.code 0} true;
    goto $bb5370;

  $bb5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4188} __const_udelay(4295000);
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    goto $bb5371;

  $bb5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4189} __const_udelay(4295000);
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    goto $bb5372;

  $bb5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4190} __const_udelay(4295000);
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    goto $bb5373;

  $bb5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4191} __const_udelay(4295000);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    goto $bb5374;

  $bb5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4192} __const_udelay(4295000);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    goto $bb5375;

  $bb5375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4193} __const_udelay(4295000);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    goto $bb5376;

  $bb5376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4194} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5377;

  $bb5377:
    assume {:verifier.code 0} true;
    goto $bb5378;

  $bb5378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4195} $i894 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $i895 := $eq.i32($i891, $i894);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i895} true;
    goto $bb5379, $bb5380;

  $bb5380:
    assume {:verifier.code 0} true;
    assume !($i895 == 1);
    goto $bb5381;

  $bb5381:
    assume {:verifier.code 0} true;
    goto $bb5384;

  $bb5384:
    assume {:verifier.code 0} true;
    goto $bb5385;

  $bb5385:
    assume {:verifier.code 0} true;
    goto $bb5386;

  $bb5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4196} __const_udelay(4295000);
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    goto $bb5387;

  $bb5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4197} __const_udelay(4295000);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    goto $bb5388;

  $bb5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4198} __const_udelay(4295000);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    goto $bb5389;

  $bb5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4199} __const_udelay(4295000);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    goto $bb5390;

  $bb5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4200} __const_udelay(4295000);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    goto $bb5391;

  $bb5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4201} __const_udelay(4295000);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    goto $bb5392;

  $bb5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4202} __const_udelay(4295000);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    goto $bb5393;

  $bb5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4203} __const_udelay(4295000);
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    goto $bb5394;

  $bb5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4204} __const_udelay(4295000);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    goto $bb5395;

  $bb5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4205} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5396;

  $bb5396:
    assume {:verifier.code 0} true;
    goto $bb5397;

  $bb5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4206} $i897 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i898 := $eq.i32($i894, $i897);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i898} true;
    goto $bb5398, $bb5399;

  $bb5399:
    assume {:verifier.code 0} true;
    assume !($i898 == 1);
    goto $bb5400;

  $bb5400:
    assume {:verifier.code 0} true;
    goto $bb5403;

  $bb5403:
    assume {:verifier.code 0} true;
    goto $bb5404;

  $bb5404:
    assume {:verifier.code 0} true;
    goto $bb5405;

  $bb5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4207} __const_udelay(4295000);
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    goto $bb5406;

  $bb5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4208} __const_udelay(4295000);
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    goto $bb5407;

  $bb5407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4209} __const_udelay(4295000);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    goto $bb5408;

  $bb5408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4210} __const_udelay(4295000);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    goto $bb5409;

  $bb5409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4211} __const_udelay(4295000);
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    goto $bb5410;

  $bb5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4212} __const_udelay(4295000);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    goto $bb5411;

  $bb5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4213} __const_udelay(4295000);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    goto $bb5412;

  $bb5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4214} __const_udelay(4295000);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    goto $bb5413;

  $bb5413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4215} __const_udelay(4295000);
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    goto $bb5414;

  $bb5414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4216} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5415;

  $bb5415:
    assume {:verifier.code 0} true;
    goto $bb5416;

  $bb5416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4217} $i900 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $i901 := $eq.i32($i897, $i900);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i901} true;
    goto $bb5417, $bb5418;

  $bb5418:
    assume {:verifier.code 0} true;
    assume !($i901 == 1);
    goto $bb5419;

  $bb5419:
    assume {:verifier.code 0} true;
    goto $bb5422;

  $bb5422:
    assume {:verifier.code 0} true;
    goto $bb5423;

  $bb5423:
    assume {:verifier.code 0} true;
    goto $bb5424;

  $bb5424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4218} __const_udelay(4295000);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    goto $bb5425;

  $bb5425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4219} __const_udelay(4295000);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    goto $bb5426;

  $bb5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4220} __const_udelay(4295000);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    goto $bb5427;

  $bb5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4221} __const_udelay(4295000);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    goto $bb5428;

  $bb5428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4222} __const_udelay(4295000);
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    goto $bb5429;

  $bb5429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4223} __const_udelay(4295000);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    goto $bb5430;

  $bb5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4224} __const_udelay(4295000);
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    goto $bb5431;

  $bb5431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4225} __const_udelay(4295000);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    goto $bb5432;

  $bb5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4226} __const_udelay(4295000);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    goto $bb5433;

  $bb5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4227} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5434;

  $bb5434:
    assume {:verifier.code 0} true;
    goto $bb5435;

  $bb5435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4228} $i903 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $i904 := $eq.i32($i900, $i903);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i904} true;
    goto $bb5436, $bb5437;

  $bb5437:
    assume {:verifier.code 0} true;
    assume !($i904 == 1);
    goto $bb5438;

  $bb5438:
    assume {:verifier.code 0} true;
    goto $bb5441;

  $bb5441:
    assume {:verifier.code 0} true;
    goto $bb5442;

  $bb5442:
    assume {:verifier.code 0} true;
    goto $bb5443;

  $bb5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4229} __const_udelay(4295000);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    goto $bb5444;

  $bb5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4230} __const_udelay(4295000);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    goto $bb5445;

  $bb5445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4231} __const_udelay(4295000);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    goto $bb5446;

  $bb5446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4232} __const_udelay(4295000);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    goto $bb5447;

  $bb5447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4233} __const_udelay(4295000);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    goto $bb5448;

  $bb5448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4234} __const_udelay(4295000);
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    goto $bb5449;

  $bb5449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4235} __const_udelay(4295000);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    goto $bb5450;

  $bb5450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4236} __const_udelay(4295000);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    goto $bb5451;

  $bb5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4237} __const_udelay(4295000);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    goto $bb5452;

  $bb5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4238} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5453;

  $bb5453:
    assume {:verifier.code 0} true;
    goto $bb5454;

  $bb5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4239} $i906 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $i907 := $eq.i32($i903, $i906);
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i907} true;
    goto $bb5455, $bb5456;

  $bb5456:
    assume {:verifier.code 0} true;
    assume !($i907 == 1);
    goto $bb5457;

  $bb5457:
    assume {:verifier.code 0} true;
    goto $bb5460;

  $bb5460:
    assume {:verifier.code 0} true;
    goto $bb5461;

  $bb5461:
    assume {:verifier.code 0} true;
    goto $bb5462;

  $bb5462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4240} __const_udelay(4295000);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    goto $bb5463;

  $bb5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4241} __const_udelay(4295000);
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    goto $bb5464;

  $bb5464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4242} __const_udelay(4295000);
    goto corral_source_split_12983;

  corral_source_split_12983:
    assume {:verifier.code 0} true;
    goto $bb5465;

  $bb5465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4243} __const_udelay(4295000);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    goto $bb5466;

  $bb5466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4244} __const_udelay(4295000);
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    goto $bb5467;

  $bb5467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4245} __const_udelay(4295000);
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    goto $bb5468;

  $bb5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4246} __const_udelay(4295000);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    goto $bb5469;

  $bb5469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4247} __const_udelay(4295000);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    goto $bb5470;

  $bb5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4248} __const_udelay(4295000);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    goto $bb5471;

  $bb5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4249} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5472;

  $bb5472:
    assume {:verifier.code 0} true;
    goto $bb5473;

  $bb5473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4250} $i909 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    $i910 := $eq.i32($i906, $i909);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i910} true;
    goto $bb5474, $bb5475;

  $bb5475:
    assume {:verifier.code 0} true;
    assume !($i910 == 1);
    goto $bb5476;

  $bb5476:
    assume {:verifier.code 0} true;
    goto $bb5479;

  $bb5479:
    assume {:verifier.code 0} true;
    goto $bb5480;

  $bb5480:
    assume {:verifier.code 0} true;
    goto $bb5481;

  $bb5481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4251} __const_udelay(4295000);
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    goto $bb5482;

  $bb5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4252} __const_udelay(4295000);
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    goto $bb5483;

  $bb5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4253} __const_udelay(4295000);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    goto $bb5484;

  $bb5484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4254} __const_udelay(4295000);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    goto $bb5485;

  $bb5485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4255} __const_udelay(4295000);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    goto $bb5486;

  $bb5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4256} __const_udelay(4295000);
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    goto $bb5487;

  $bb5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4257} __const_udelay(4295000);
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    goto $bb5488;

  $bb5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4258} __const_udelay(4295000);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    goto $bb5489;

  $bb5489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4259} __const_udelay(4295000);
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    goto $bb5490;

  $bb5490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4260} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5491;

  $bb5491:
    assume {:verifier.code 0} true;
    goto $bb5492;

  $bb5492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4261} $i912 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $i913 := $eq.i32($i909, $i912);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i913} true;
    goto $bb5493, $bb5494;

  $bb5494:
    assume {:verifier.code 0} true;
    assume !($i913 == 1);
    goto $bb5495;

  $bb5495:
    assume {:verifier.code 0} true;
    goto $bb5498;

  $bb5498:
    assume {:verifier.code 0} true;
    goto $bb5499;

  $bb5499:
    assume {:verifier.code 0} true;
    goto $bb5500;

  $bb5500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4262} __const_udelay(4295000);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    goto $bb5501;

  $bb5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4263} __const_udelay(4295000);
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    goto $bb5502;

  $bb5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4264} __const_udelay(4295000);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    goto $bb5503;

  $bb5503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4265} __const_udelay(4295000);
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    goto $bb5504;

  $bb5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4266} __const_udelay(4295000);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    goto $bb5505;

  $bb5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4267} __const_udelay(4295000);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    goto $bb5506;

  $bb5506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4268} __const_udelay(4295000);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    goto $bb5507;

  $bb5507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4269} __const_udelay(4295000);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    goto $bb5508;

  $bb5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4270} __const_udelay(4295000);
    goto corral_source_split_13043;

  corral_source_split_13043:
    assume {:verifier.code 0} true;
    goto $bb5509;

  $bb5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4271} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5510;

  $bb5510:
    assume {:verifier.code 0} true;
    goto $bb5511;

  $bb5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4272} $i915 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $i916 := $eq.i32($i912, $i915);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i916} true;
    goto $bb5512, $bb5513;

  $bb5513:
    assume {:verifier.code 0} true;
    assume !($i916 == 1);
    goto $bb5514;

  $bb5514:
    assume {:verifier.code 0} true;
    goto $bb5517;

  $bb5517:
    assume {:verifier.code 0} true;
    goto $bb5518;

  $bb5518:
    assume {:verifier.code 0} true;
    goto $bb5519;

  $bb5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4273} __const_udelay(4295000);
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    goto $bb5520;

  $bb5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4274} __const_udelay(4295000);
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    goto $bb5521;

  $bb5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4275} __const_udelay(4295000);
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    goto $bb5522;

  $bb5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4276} __const_udelay(4295000);
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    goto $bb5523;

  $bb5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4277} __const_udelay(4295000);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    goto $bb5524;

  $bb5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4278} __const_udelay(4295000);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    goto $bb5525;

  $bb5525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4279} __const_udelay(4295000);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    goto $bb5526;

  $bb5526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4280} __const_udelay(4295000);
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    goto $bb5527;

  $bb5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4281} __const_udelay(4295000);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    goto $bb5528;

  $bb5528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4282} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5529;

  $bb5529:
    assume {:verifier.code 0} true;
    goto $bb5530;

  $bb5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4283} $i918 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $i919 := $eq.i32($i915, $i918);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i919} true;
    goto $bb5531, $bb5532;

  $bb5532:
    assume {:verifier.code 0} true;
    assume !($i919 == 1);
    goto $bb5533;

  $bb5533:
    assume {:verifier.code 0} true;
    goto $bb5536;

  $bb5536:
    assume {:verifier.code 0} true;
    goto $bb5537;

  $bb5537:
    assume {:verifier.code 0} true;
    goto $bb5538;

  $bb5538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4284} __const_udelay(4295000);
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    goto $bb5539;

  $bb5539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4285} __const_udelay(4295000);
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    goto $bb5540;

  $bb5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4286} __const_udelay(4295000);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    goto $bb5541;

  $bb5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4287} __const_udelay(4295000);
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    goto $bb5542;

  $bb5542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4288} __const_udelay(4295000);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    goto $bb5543;

  $bb5543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4289} __const_udelay(4295000);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    goto $bb5544;

  $bb5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4290} __const_udelay(4295000);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    goto $bb5545;

  $bb5545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4291} __const_udelay(4295000);
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    goto $bb5546;

  $bb5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4292} __const_udelay(4295000);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    goto $bb5547;

  $bb5547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4293} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5548;

  $bb5548:
    assume {:verifier.code 0} true;
    goto $bb5549;

  $bb5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4294} $i921 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $i922 := $eq.i32($i918, $i921);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i922} true;
    goto $bb5550, $bb5551;

  $bb5551:
    assume {:verifier.code 0} true;
    assume !($i922 == 1);
    goto $bb5552;

  $bb5552:
    assume {:verifier.code 0} true;
    goto $bb5555;

  $bb5555:
    assume {:verifier.code 0} true;
    goto $bb5556;

  $bb5556:
    assume {:verifier.code 0} true;
    goto $bb5557;

  $bb5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4295} __const_udelay(4295000);
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    goto $bb5558;

  $bb5558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4296} __const_udelay(4295000);
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    goto $bb5559;

  $bb5559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4297} __const_udelay(4295000);
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    goto $bb5560;

  $bb5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4298} __const_udelay(4295000);
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    goto $bb5561;

  $bb5561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4299} __const_udelay(4295000);
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    goto $bb5562;

  $bb5562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4300} __const_udelay(4295000);
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    goto $bb5563;

  $bb5563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4301} __const_udelay(4295000);
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    goto $bb5564;

  $bb5564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4302} __const_udelay(4295000);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    goto $bb5565;

  $bb5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4303} __const_udelay(4295000);
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    goto $bb5566;

  $bb5566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4304} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5567;

  $bb5567:
    assume {:verifier.code 0} true;
    goto $bb5568;

  $bb5568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4305} $i924 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $i925 := $eq.i32($i921, $i924);
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i925} true;
    goto $bb5569, $bb5570;

  $bb5570:
    assume {:verifier.code 0} true;
    assume !($i925 == 1);
    goto $bb5571;

  $bb5571:
    assume {:verifier.code 0} true;
    goto $bb5574;

  $bb5574:
    assume {:verifier.code 0} true;
    goto $bb5575;

  $bb5575:
    assume {:verifier.code 0} true;
    goto $bb5576;

  $bb5576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4306} __const_udelay(4295000);
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    goto $bb5577;

  $bb5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4307} __const_udelay(4295000);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    goto $bb5578;

  $bb5578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4308} __const_udelay(4295000);
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    goto $bb5579;

  $bb5579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4309} __const_udelay(4295000);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    goto $bb5580;

  $bb5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4310} __const_udelay(4295000);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    goto $bb5581;

  $bb5581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4311} __const_udelay(4295000);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    goto $bb5582;

  $bb5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4312} __const_udelay(4295000);
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    goto $bb5583;

  $bb5583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4313} __const_udelay(4295000);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    goto $bb5584;

  $bb5584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4314} __const_udelay(4295000);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    goto $bb5585;

  $bb5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4315} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5586;

  $bb5586:
    assume {:verifier.code 0} true;
    goto $bb5587;

  $bb5587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4316} $i927 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $i928 := $eq.i32($i924, $i927);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i928} true;
    goto $bb5588, $bb5589;

  $bb5589:
    assume {:verifier.code 0} true;
    assume !($i928 == 1);
    goto $bb5590;

  $bb5590:
    assume {:verifier.code 0} true;
    goto $bb5593;

  $bb5593:
    assume {:verifier.code 0} true;
    goto $bb5594;

  $bb5594:
    assume {:verifier.code 0} true;
    goto $bb5595;

  $bb5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4317} __const_udelay(4295000);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    goto $bb5596;

  $bb5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4318} __const_udelay(4295000);
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    goto $bb5597;

  $bb5597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4319} __const_udelay(4295000);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    goto $bb5598;

  $bb5598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4320} __const_udelay(4295000);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    goto $bb5599;

  $bb5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4321} __const_udelay(4295000);
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    goto $bb5600;

  $bb5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4322} __const_udelay(4295000);
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    goto $bb5601;

  $bb5601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4323} __const_udelay(4295000);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    goto $bb5602;

  $bb5602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4324} __const_udelay(4295000);
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    goto $bb5603;

  $bb5603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4325} __const_udelay(4295000);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    goto $bb5604;

  $bb5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4326} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5605;

  $bb5605:
    assume {:verifier.code 0} true;
    goto $bb5606;

  $bb5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4327} $i930 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $i931 := $eq.i32($i927, $i930);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i931} true;
    goto $bb5607, $bb5608;

  $bb5608:
    assume {:verifier.code 0} true;
    assume !($i931 == 1);
    goto $bb5609;

  $bb5609:
    assume {:verifier.code 0} true;
    goto $bb5612;

  $bb5612:
    assume {:verifier.code 0} true;
    goto $bb5613;

  $bb5613:
    assume {:verifier.code 0} true;
    goto $bb5614;

  $bb5614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4328} __const_udelay(4295000);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    goto $bb5615;

  $bb5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4329} __const_udelay(4295000);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    goto $bb5616;

  $bb5616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4330} __const_udelay(4295000);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    goto $bb5617;

  $bb5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4331} __const_udelay(4295000);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    goto $bb5618;

  $bb5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4332} __const_udelay(4295000);
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    goto $bb5619;

  $bb5619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4333} __const_udelay(4295000);
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    goto $bb5620;

  $bb5620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4334} __const_udelay(4295000);
    goto corral_source_split_13183;

  corral_source_split_13183:
    assume {:verifier.code 0} true;
    goto $bb5621;

  $bb5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4335} __const_udelay(4295000);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    goto $bb5622;

  $bb5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4336} __const_udelay(4295000);
    goto corral_source_split_13187;

  corral_source_split_13187:
    assume {:verifier.code 0} true;
    goto $bb5623;

  $bb5623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4337} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5624;

  $bb5624:
    assume {:verifier.code 0} true;
    goto $bb5625;

  $bb5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4338} $i933 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $i934 := $eq.i32($i930, $i933);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i934} true;
    goto $bb5626, $bb5627;

  $bb5627:
    assume {:verifier.code 0} true;
    assume !($i934 == 1);
    goto $bb5628;

  $bb5628:
    assume {:verifier.code 0} true;
    goto $bb5631;

  $bb5631:
    assume {:verifier.code 0} true;
    goto $bb5632;

  $bb5632:
    assume {:verifier.code 0} true;
    goto $bb5633;

  $bb5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4339} __const_udelay(4295000);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    goto $bb5634;

  $bb5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4340} __const_udelay(4295000);
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    goto $bb5635;

  $bb5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4341} __const_udelay(4295000);
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    goto $bb5636;

  $bb5636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4342} __const_udelay(4295000);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    goto $bb5637;

  $bb5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4343} __const_udelay(4295000);
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    goto $bb5638;

  $bb5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4344} __const_udelay(4295000);
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    goto $bb5639;

  $bb5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4345} __const_udelay(4295000);
    goto corral_source_split_13207;

  corral_source_split_13207:
    assume {:verifier.code 0} true;
    goto $bb5640;

  $bb5640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4346} __const_udelay(4295000);
    goto corral_source_split_13209;

  corral_source_split_13209:
    assume {:verifier.code 0} true;
    goto $bb5641;

  $bb5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4347} __const_udelay(4295000);
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    goto $bb5642;

  $bb5642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4348} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5643;

  $bb5643:
    assume {:verifier.code 0} true;
    goto $bb5644;

  $bb5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4349} $i936 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $i937 := $eq.i32($i933, $i936);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i937} true;
    goto $bb5645, $bb5646;

  $bb5646:
    assume {:verifier.code 0} true;
    assume !($i937 == 1);
    goto $bb5647;

  $bb5647:
    assume {:verifier.code 0} true;
    goto $bb5650;

  $bb5650:
    assume {:verifier.code 0} true;
    goto $bb5651;

  $bb5651:
    assume {:verifier.code 0} true;
    goto $bb5652;

  $bb5652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4350} __const_udelay(4295000);
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    goto $bb5653;

  $bb5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4351} __const_udelay(4295000);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    goto $bb5654;

  $bb5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4352} __const_udelay(4295000);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    goto $bb5655;

  $bb5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4353} __const_udelay(4295000);
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    goto $bb5656;

  $bb5656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4354} __const_udelay(4295000);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    goto $bb5657;

  $bb5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4355} __const_udelay(4295000);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    goto $bb5658;

  $bb5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4356} __const_udelay(4295000);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    goto $bb5659;

  $bb5659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4357} __const_udelay(4295000);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    goto $bb5660;

  $bb5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4358} __const_udelay(4295000);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    goto $bb5661;

  $bb5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4359} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5662;

  $bb5662:
    assume {:verifier.code 0} true;
    goto $bb5663;

  $bb5663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4360} $i939 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $i940 := $eq.i32($i936, $i939);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i940} true;
    goto $bb5664, $bb5665;

  $bb5665:
    assume {:verifier.code 0} true;
    assume !($i940 == 1);
    goto $bb5666;

  $bb5666:
    assume {:verifier.code 0} true;
    goto $bb5669;

  $bb5669:
    assume {:verifier.code 0} true;
    goto $bb5670;

  $bb5670:
    assume {:verifier.code 0} true;
    goto $bb5671;

  $bb5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4361} __const_udelay(4295000);
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    goto $bb5672;

  $bb5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4362} __const_udelay(4295000);
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    goto $bb5673;

  $bb5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4363} __const_udelay(4295000);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    goto $bb5674;

  $bb5674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4364} __const_udelay(4295000);
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    goto $bb5675;

  $bb5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4365} __const_udelay(4295000);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    goto $bb5676;

  $bb5676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4366} __const_udelay(4295000);
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    goto $bb5677;

  $bb5677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4367} __const_udelay(4295000);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    goto $bb5678;

  $bb5678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4368} __const_udelay(4295000);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    goto $bb5679;

  $bb5679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4369} __const_udelay(4295000);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    goto $bb5680;

  $bb5680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4370} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5681;

  $bb5681:
    assume {:verifier.code 0} true;
    goto $bb5682;

  $bb5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4371} $i942 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $i943 := $eq.i32($i939, $i942);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i943} true;
    goto $bb5683, $bb5684;

  $bb5684:
    assume {:verifier.code 0} true;
    assume !($i943 == 1);
    goto $bb5685;

  $bb5685:
    assume {:verifier.code 0} true;
    goto $bb5688;

  $bb5688:
    assume {:verifier.code 0} true;
    goto $bb5689;

  $bb5689:
    assume {:verifier.code 0} true;
    goto $bb5690;

  $bb5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4372} __const_udelay(4295000);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    goto $bb5691;

  $bb5691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4373} __const_udelay(4295000);
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    goto $bb5692;

  $bb5692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4374} __const_udelay(4295000);
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    goto $bb5693;

  $bb5693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4375} __const_udelay(4295000);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    goto $bb5694;

  $bb5694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4376} __const_udelay(4295000);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    goto $bb5695;

  $bb5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4377} __const_udelay(4295000);
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    goto $bb5696;

  $bb5696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4378} __const_udelay(4295000);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    goto $bb5697;

  $bb5697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4379} __const_udelay(4295000);
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    goto $bb5698;

  $bb5698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4380} __const_udelay(4295000);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    goto $bb5699;

  $bb5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4381} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5700;

  $bb5700:
    assume {:verifier.code 0} true;
    goto $bb5701;

  $bb5701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4382} $i945 := pch_vbus_gpio_get_value($p5);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $i946 := $eq.i32($i942, $i945);
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i946} true;
    goto $bb5702, $bb5703;

  $bb5703:
    assume {:verifier.code 0} true;
    assume !($i946 == 1);
    goto $bb5704;

  $bb5704:
    assume {:verifier.code 0} true;
    goto $bb5707;

  $bb5707:
    assume {:verifier.code 0} true;
    goto $bb5708;

  $bb5708:
    assume {:verifier.code 0} true;
    goto $bb5709;

  $bb5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4383} __const_udelay(4295000);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    goto $bb5710;

  $bb5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4384} __const_udelay(4295000);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    goto $bb5711;

  $bb5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4385} __const_udelay(4295000);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    goto $bb5712;

  $bb5712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4386} __const_udelay(4295000);
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    goto $bb5713;

  $bb5713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4387} __const_udelay(4295000);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    goto $bb5714;

  $bb5714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4388} __const_udelay(4295000);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    goto $bb5715;

  $bb5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4389} __const_udelay(4295000);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    goto $bb5716;

  $bb5716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4390} __const_udelay(4295000);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    goto $bb5717;

  $bb5717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4391} __const_udelay(4295000);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    goto $bb5718;

  $bb5718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4392} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb5719;

  $bb5719:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5702:
    assume $i946 == 1;
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $i947 := $eq.i32($i945, 0);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb5705, $bb5706;

  $bb5706:
    assume {:verifier.code 0} true;
    assume !($i947 == 1);
    goto $bb5704;

  $bb5705:
    assume {:verifier.code 0} true;
    assume $i947 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.1);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p14, .str.78);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p15, .str.5);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p16, .str.79);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.11, $p18);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1302);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p18, $i21);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p22, 0);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.12, $p23);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1089} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(1568, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.1, $p32);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.1, $p48);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i50 == 1);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} pch_udc_reconnect($p5);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} pch_udc_init($p5);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(1568, 1));
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb18;

  $bb19:
    assume $i41 == 1;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(1568, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(0, 1));
    call {:si_unique_call 1091} devirtbounce.4($p45, $p46);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(1576, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} __dynamic_dev_dbg.ref.ref.ref($p1, $p31, .str.79);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5683:
    assume $i943 == 1;
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $i944 := $eq.i32($i942, 0);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i944} true;
    goto $bb5686, $bb5687;

  $bb5687:
    assume {:verifier.code 0} true;
    assume !($i944 == 1);
    goto $bb5685;

  $bb5686:
    assume {:verifier.code 0} true;
    assume $i944 == 1;
    goto $bb11;

  $bb5664:
    assume $i940 == 1;
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $i941 := $eq.i32($i939, 0);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i941} true;
    goto $bb5667, $bb5668;

  $bb5668:
    assume {:verifier.code 0} true;
    assume !($i941 == 1);
    goto $bb5666;

  $bb5667:
    assume {:verifier.code 0} true;
    assume $i941 == 1;
    goto $bb11;

  $bb5645:
    assume $i937 == 1;
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $i938 := $eq.i32($i936, 0);
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i938} true;
    goto $bb5648, $bb5649;

  $bb5649:
    assume {:verifier.code 0} true;
    assume !($i938 == 1);
    goto $bb5647;

  $bb5648:
    assume {:verifier.code 0} true;
    assume $i938 == 1;
    goto $bb11;

  $bb5626:
    assume $i934 == 1;
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $i935 := $eq.i32($i933, 0);
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i935} true;
    goto $bb5629, $bb5630;

  $bb5630:
    assume {:verifier.code 0} true;
    assume !($i935 == 1);
    goto $bb5628;

  $bb5629:
    assume {:verifier.code 0} true;
    assume $i935 == 1;
    goto $bb11;

  $bb5607:
    assume $i931 == 1;
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $i932 := $eq.i32($i930, 0);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i932} true;
    goto $bb5610, $bb5611;

  $bb5611:
    assume {:verifier.code 0} true;
    assume !($i932 == 1);
    goto $bb5609;

  $bb5610:
    assume {:verifier.code 0} true;
    assume $i932 == 1;
    goto $bb11;

  $bb5588:
    assume $i928 == 1;
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    $i929 := $eq.i32($i927, 0);
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i929} true;
    goto $bb5591, $bb5592;

  $bb5592:
    assume {:verifier.code 0} true;
    assume !($i929 == 1);
    goto $bb5590;

  $bb5591:
    assume {:verifier.code 0} true;
    assume $i929 == 1;
    goto $bb11;

  $bb5569:
    assume $i925 == 1;
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    $i926 := $eq.i32($i924, 0);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i926} true;
    goto $bb5572, $bb5573;

  $bb5573:
    assume {:verifier.code 0} true;
    assume !($i926 == 1);
    goto $bb5571;

  $bb5572:
    assume {:verifier.code 0} true;
    assume $i926 == 1;
    goto $bb11;

  $bb5550:
    assume $i922 == 1;
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    $i923 := $eq.i32($i921, 0);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i923} true;
    goto $bb5553, $bb5554;

  $bb5554:
    assume {:verifier.code 0} true;
    assume !($i923 == 1);
    goto $bb5552;

  $bb5553:
    assume {:verifier.code 0} true;
    assume $i923 == 1;
    goto $bb11;

  $bb5531:
    assume $i919 == 1;
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $i920 := $eq.i32($i918, 0);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i920} true;
    goto $bb5534, $bb5535;

  $bb5535:
    assume {:verifier.code 0} true;
    assume !($i920 == 1);
    goto $bb5533;

  $bb5534:
    assume {:verifier.code 0} true;
    assume $i920 == 1;
    goto $bb11;

  $bb5512:
    assume $i916 == 1;
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    $i917 := $eq.i32($i915, 0);
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i917} true;
    goto $bb5515, $bb5516;

  $bb5516:
    assume {:verifier.code 0} true;
    assume !($i917 == 1);
    goto $bb5514;

  $bb5515:
    assume {:verifier.code 0} true;
    assume $i917 == 1;
    goto $bb11;

  $bb5493:
    assume $i913 == 1;
    goto corral_source_split_13024;

  corral_source_split_13024:
    assume {:verifier.code 0} true;
    $i914 := $eq.i32($i912, 0);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i914} true;
    goto $bb5496, $bb5497;

  $bb5497:
    assume {:verifier.code 0} true;
    assume !($i914 == 1);
    goto $bb5495;

  $bb5496:
    assume {:verifier.code 0} true;
    assume $i914 == 1;
    goto $bb11;

  $bb5474:
    assume $i910 == 1;
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i911 := $eq.i32($i909, 0);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i911} true;
    goto $bb5477, $bb5478;

  $bb5478:
    assume {:verifier.code 0} true;
    assume !($i911 == 1);
    goto $bb5476;

  $bb5477:
    assume {:verifier.code 0} true;
    assume $i911 == 1;
    goto $bb11;

  $bb5455:
    assume $i907 == 1;
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $i908 := $eq.i32($i906, 0);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i908} true;
    goto $bb5458, $bb5459;

  $bb5459:
    assume {:verifier.code 0} true;
    assume !($i908 == 1);
    goto $bb5457;

  $bb5458:
    assume {:verifier.code 0} true;
    assume $i908 == 1;
    goto $bb11;

  $bb5436:
    assume $i904 == 1;
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $i905 := $eq.i32($i903, 0);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i905} true;
    goto $bb5439, $bb5440;

  $bb5440:
    assume {:verifier.code 0} true;
    assume !($i905 == 1);
    goto $bb5438;

  $bb5439:
    assume {:verifier.code 0} true;
    assume $i905 == 1;
    goto $bb11;

  $bb5417:
    assume $i901 == 1;
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $i902 := $eq.i32($i900, 0);
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i902} true;
    goto $bb5420, $bb5421;

  $bb5421:
    assume {:verifier.code 0} true;
    assume !($i902 == 1);
    goto $bb5419;

  $bb5420:
    assume {:verifier.code 0} true;
    assume $i902 == 1;
    goto $bb11;

  $bb5398:
    assume $i898 == 1;
    goto corral_source_split_12904;

  corral_source_split_12904:
    assume {:verifier.code 0} true;
    $i899 := $eq.i32($i897, 0);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i899} true;
    goto $bb5401, $bb5402;

  $bb5402:
    assume {:verifier.code 0} true;
    assume !($i899 == 1);
    goto $bb5400;

  $bb5401:
    assume {:verifier.code 0} true;
    assume $i899 == 1;
    goto $bb11;

  $bb5379:
    assume $i895 == 1;
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i896 := $eq.i32($i894, 0);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb5382, $bb5383;

  $bb5383:
    assume {:verifier.code 0} true;
    assume !($i896 == 1);
    goto $bb5381;

  $bb5382:
    assume {:verifier.code 0} true;
    assume $i896 == 1;
    goto $bb11;

  $bb5360:
    assume $i892 == 1;
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $i893 := $eq.i32($i891, 0);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i893} true;
    goto $bb5363, $bb5364;

  $bb5364:
    assume {:verifier.code 0} true;
    assume !($i893 == 1);
    goto $bb5362;

  $bb5363:
    assume {:verifier.code 0} true;
    assume $i893 == 1;
    goto $bb11;

  $bb5341:
    assume $i889 == 1;
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i890 := $eq.i32($i888, 0);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i890} true;
    goto $bb5344, $bb5345;

  $bb5345:
    assume {:verifier.code 0} true;
    assume !($i890 == 1);
    goto $bb5343;

  $bb5344:
    assume {:verifier.code 0} true;
    assume $i890 == 1;
    goto $bb11;

  $bb5322:
    assume $i886 == 1;
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $i887 := $eq.i32($i885, 0);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i887} true;
    goto $bb5325, $bb5326;

  $bb5326:
    assume {:verifier.code 0} true;
    assume !($i887 == 1);
    goto $bb5324;

  $bb5325:
    assume {:verifier.code 0} true;
    assume $i887 == 1;
    goto $bb11;

  $bb5303:
    assume $i883 == 1;
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    $i884 := $eq.i32($i882, 0);
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i884} true;
    goto $bb5306, $bb5307;

  $bb5307:
    assume {:verifier.code 0} true;
    assume !($i884 == 1);
    goto $bb5305;

  $bb5306:
    assume {:verifier.code 0} true;
    assume $i884 == 1;
    goto $bb11;

  $bb5284:
    assume $i880 == 1;
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i881 := $eq.i32($i879, 0);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i881} true;
    goto $bb5287, $bb5288;

  $bb5288:
    assume {:verifier.code 0} true;
    assume !($i881 == 1);
    goto $bb5286;

  $bb5287:
    assume {:verifier.code 0} true;
    assume $i881 == 1;
    goto $bb11;

  $bb5265:
    assume $i877 == 1;
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $i878 := $eq.i32($i876, 0);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i878} true;
    goto $bb5268, $bb5269;

  $bb5269:
    assume {:verifier.code 0} true;
    assume !($i878 == 1);
    goto $bb5267;

  $bb5268:
    assume {:verifier.code 0} true;
    assume $i878 == 1;
    goto $bb11;

  $bb5246:
    assume $i874 == 1;
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $i875 := $eq.i32($i873, 0);
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i875} true;
    goto $bb5249, $bb5250;

  $bb5250:
    assume {:verifier.code 0} true;
    assume !($i875 == 1);
    goto $bb5248;

  $bb5249:
    assume {:verifier.code 0} true;
    assume $i875 == 1;
    goto $bb11;

  $bb5227:
    assume $i871 == 1;
    goto corral_source_split_12688;

  corral_source_split_12688:
    assume {:verifier.code 0} true;
    $i872 := $eq.i32($i870, 0);
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i872} true;
    goto $bb5230, $bb5231;

  $bb5231:
    assume {:verifier.code 0} true;
    assume !($i872 == 1);
    goto $bb5229;

  $bb5230:
    assume {:verifier.code 0} true;
    assume $i872 == 1;
    goto $bb11;

  $bb5208:
    assume $i868 == 1;
    goto corral_source_split_12664;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    $i869 := $eq.i32($i867, 0);
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i869} true;
    goto $bb5211, $bb5212;

  $bb5212:
    assume {:verifier.code 0} true;
    assume !($i869 == 1);
    goto $bb5210;

  $bb5211:
    assume {:verifier.code 0} true;
    assume $i869 == 1;
    goto $bb11;

  $bb5189:
    assume $i865 == 1;
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i866 := $eq.i32($i864, 0);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i866} true;
    goto $bb5192, $bb5193;

  $bb5193:
    assume {:verifier.code 0} true;
    assume !($i866 == 1);
    goto $bb5191;

  $bb5192:
    assume {:verifier.code 0} true;
    assume $i866 == 1;
    goto $bb11;

  $bb5170:
    assume $i862 == 1;
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i863 := $eq.i32($i861, 0);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i863} true;
    goto $bb5173, $bb5174;

  $bb5174:
    assume {:verifier.code 0} true;
    assume !($i863 == 1);
    goto $bb5172;

  $bb5173:
    assume {:verifier.code 0} true;
    assume $i863 == 1;
    goto $bb11;

  $bb5151:
    assume $i859 == 1;
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i860 := $eq.i32($i858, 0);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i860} true;
    goto $bb5154, $bb5155;

  $bb5155:
    assume {:verifier.code 0} true;
    assume !($i860 == 1);
    goto $bb5153;

  $bb5154:
    assume {:verifier.code 0} true;
    assume $i860 == 1;
    goto $bb11;

  $bb5132:
    assume $i856 == 1;
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $i857 := $eq.i32($i855, 0);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i857} true;
    goto $bb5135, $bb5136;

  $bb5136:
    assume {:verifier.code 0} true;
    assume !($i857 == 1);
    goto $bb5134;

  $bb5135:
    assume {:verifier.code 0} true;
    assume $i857 == 1;
    goto $bb11;

  $bb5113:
    assume $i853 == 1;
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i854 := $eq.i32($i852, 0);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb5116, $bb5117;

  $bb5117:
    assume {:verifier.code 0} true;
    assume !($i854 == 1);
    goto $bb5115;

  $bb5116:
    assume {:verifier.code 0} true;
    assume $i854 == 1;
    goto $bb11;

  $bb5094:
    assume $i850 == 1;
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $i851 := $eq.i32($i849, 0);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i851} true;
    goto $bb5097, $bb5098;

  $bb5098:
    assume {:verifier.code 0} true;
    assume !($i851 == 1);
    goto $bb5096;

  $bb5097:
    assume {:verifier.code 0} true;
    assume $i851 == 1;
    goto $bb11;

  $bb5075:
    assume $i847 == 1;
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $i848 := $eq.i32($i846, 0);
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i848} true;
    goto $bb5078, $bb5079;

  $bb5079:
    assume {:verifier.code 0} true;
    assume !($i848 == 1);
    goto $bb5077;

  $bb5078:
    assume {:verifier.code 0} true;
    assume $i848 == 1;
    goto $bb11;

  $bb5056:
    assume $i844 == 1;
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $i845 := $eq.i32($i843, 0);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i845} true;
    goto $bb5059, $bb5060;

  $bb5060:
    assume {:verifier.code 0} true;
    assume !($i845 == 1);
    goto $bb5058;

  $bb5059:
    assume {:verifier.code 0} true;
    assume $i845 == 1;
    goto $bb11;

  $bb5037:
    assume $i841 == 1;
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i840, 0);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i842} true;
    goto $bb5040, $bb5041;

  $bb5041:
    assume {:verifier.code 0} true;
    assume !($i842 == 1);
    goto $bb5039;

  $bb5040:
    assume {:verifier.code 0} true;
    assume $i842 == 1;
    goto $bb11;

  $bb5018:
    assume $i838 == 1;
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    $i839 := $eq.i32($i837, 0);
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i839} true;
    goto $bb5021, $bb5022;

  $bb5022:
    assume {:verifier.code 0} true;
    assume !($i839 == 1);
    goto $bb5020;

  $bb5021:
    assume {:verifier.code 0} true;
    assume $i839 == 1;
    goto $bb11;

  $bb4999:
    assume $i835 == 1;
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $i836 := $eq.i32($i834, 0);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i836} true;
    goto $bb5002, $bb5003;

  $bb5003:
    assume {:verifier.code 0} true;
    assume !($i836 == 1);
    goto $bb5001;

  $bb5002:
    assume {:verifier.code 0} true;
    assume $i836 == 1;
    goto $bb11;

  $bb4980:
    assume $i832 == 1;
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $i833 := $eq.i32($i831, 0);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i833} true;
    goto $bb4983, $bb4984;

  $bb4984:
    assume {:verifier.code 0} true;
    assume !($i833 == 1);
    goto $bb4982;

  $bb4983:
    assume {:verifier.code 0} true;
    assume $i833 == 1;
    goto $bb11;

  $bb4961:
    assume $i829 == 1;
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i828, 0);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i830} true;
    goto $bb4964, $bb4965;

  $bb4965:
    assume {:verifier.code 0} true;
    assume !($i830 == 1);
    goto $bb4963;

  $bb4964:
    assume {:verifier.code 0} true;
    assume $i830 == 1;
    goto $bb11;

  $bb4942:
    assume $i826 == 1;
    goto corral_source_split_12328;

  corral_source_split_12328:
    assume {:verifier.code 0} true;
    $i827 := $eq.i32($i825, 0);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i827} true;
    goto $bb4945, $bb4946;

  $bb4946:
    assume {:verifier.code 0} true;
    assume !($i827 == 1);
    goto $bb4944;

  $bb4945:
    assume {:verifier.code 0} true;
    assume $i827 == 1;
    goto $bb11;

  $bb4923:
    assume $i823 == 1;
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $i824 := $eq.i32($i822, 0);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i824} true;
    goto $bb4926, $bb4927;

  $bb4927:
    assume {:verifier.code 0} true;
    assume !($i824 == 1);
    goto $bb4925;

  $bb4926:
    assume {:verifier.code 0} true;
    assume $i824 == 1;
    goto $bb11;

  $bb4904:
    assume $i820 == 1;
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $i821 := $eq.i32($i819, 0);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb4907, $bb4908;

  $bb4908:
    assume {:verifier.code 0} true;
    assume !($i821 == 1);
    goto $bb4906;

  $bb4907:
    assume {:verifier.code 0} true;
    assume $i821 == 1;
    goto $bb11;

  $bb4885:
    assume $i817 == 1;
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i816, 0);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i818} true;
    goto $bb4888, $bb4889;

  $bb4889:
    assume {:verifier.code 0} true;
    assume !($i818 == 1);
    goto $bb4887;

  $bb4888:
    assume {:verifier.code 0} true;
    assume $i818 == 1;
    goto $bb11;

  $bb4866:
    assume $i814 == 1;
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $i815 := $eq.i32($i813, 0);
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i815} true;
    goto $bb4869, $bb4870;

  $bb4870:
    assume {:verifier.code 0} true;
    assume !($i815 == 1);
    goto $bb4868;

  $bb4869:
    assume {:verifier.code 0} true;
    assume $i815 == 1;
    goto $bb11;

  $bb4847:
    assume $i811 == 1;
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $i812 := $eq.i32($i810, 0);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i812} true;
    goto $bb4850, $bb4851;

  $bb4851:
    assume {:verifier.code 0} true;
    assume !($i812 == 1);
    goto $bb4849;

  $bb4850:
    assume {:verifier.code 0} true;
    assume $i812 == 1;
    goto $bb11;

  $bb4828:
    assume $i808 == 1;
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $i809 := $eq.i32($i807, 0);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i809} true;
    goto $bb4831, $bb4832;

  $bb4832:
    assume {:verifier.code 0} true;
    assume !($i809 == 1);
    goto $bb4830;

  $bb4831:
    assume {:verifier.code 0} true;
    assume $i809 == 1;
    goto $bb11;

  $bb4809:
    assume $i805 == 1;
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i806 := $eq.i32($i804, 0);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i806} true;
    goto $bb4812, $bb4813;

  $bb4813:
    assume {:verifier.code 0} true;
    assume !($i806 == 1);
    goto $bb4811;

  $bb4812:
    assume {:verifier.code 0} true;
    assume $i806 == 1;
    goto $bb11;

  $bb4790:
    assume $i802 == 1;
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $i803 := $eq.i32($i801, 0);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i803} true;
    goto $bb4793, $bb4794;

  $bb4794:
    assume {:verifier.code 0} true;
    assume !($i803 == 1);
    goto $bb4792;

  $bb4793:
    assume {:verifier.code 0} true;
    assume $i803 == 1;
    goto $bb11;

  $bb4771:
    assume $i799 == 1;
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $i800 := $eq.i32($i798, 0);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i800} true;
    goto $bb4774, $bb4775;

  $bb4775:
    assume {:verifier.code 0} true;
    assume !($i800 == 1);
    goto $bb4773;

  $bb4774:
    assume {:verifier.code 0} true;
    assume $i800 == 1;
    goto $bb11;

  $bb4752:
    assume $i796 == 1;
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $i797 := $eq.i32($i795, 0);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i797} true;
    goto $bb4755, $bb4756;

  $bb4756:
    assume {:verifier.code 0} true;
    assume !($i797 == 1);
    goto $bb4754;

  $bb4755:
    assume {:verifier.code 0} true;
    assume $i797 == 1;
    goto $bb11;

  $bb4733:
    assume $i793 == 1;
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $i794 := $eq.i32($i792, 0);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i794} true;
    goto $bb4736, $bb4737;

  $bb4737:
    assume {:verifier.code 0} true;
    assume !($i794 == 1);
    goto $bb4735;

  $bb4736:
    assume {:verifier.code 0} true;
    assume $i794 == 1;
    goto $bb11;

  $bb4714:
    assume $i790 == 1;
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i791 := $eq.i32($i789, 0);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb4717, $bb4718;

  $bb4718:
    assume {:verifier.code 0} true;
    assume !($i791 == 1);
    goto $bb4716;

  $bb4717:
    assume {:verifier.code 0} true;
    assume $i791 == 1;
    goto $bb11;

  $bb4695:
    assume $i787 == 1;
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i788 := $eq.i32($i786, 0);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i788} true;
    goto $bb4698, $bb4699;

  $bb4699:
    assume {:verifier.code 0} true;
    assume !($i788 == 1);
    goto $bb4697;

  $bb4698:
    assume {:verifier.code 0} true;
    assume $i788 == 1;
    goto $bb11;

  $bb4676:
    assume $i784 == 1;
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $i785 := $eq.i32($i783, 0);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i785} true;
    goto $bb4679, $bb4680;

  $bb4680:
    assume {:verifier.code 0} true;
    assume !($i785 == 1);
    goto $bb4678;

  $bb4679:
    assume {:verifier.code 0} true;
    assume $i785 == 1;
    goto $bb11;

  $bb4657:
    assume $i781 == 1;
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $i782 := $eq.i32($i780, 0);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i782} true;
    goto $bb4660, $bb4661;

  $bb4661:
    assume {:verifier.code 0} true;
    assume !($i782 == 1);
    goto $bb4659;

  $bb4660:
    assume {:verifier.code 0} true;
    assume $i782 == 1;
    goto $bb11;

  $bb4638:
    assume $i778 == 1;
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $i779 := $eq.i32($i777, 0);
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i779} true;
    goto $bb4641, $bb4642;

  $bb4642:
    assume {:verifier.code 0} true;
    assume !($i779 == 1);
    goto $bb4640;

  $bb4641:
    assume {:verifier.code 0} true;
    assume $i779 == 1;
    goto $bb11;

  $bb4619:
    assume $i775 == 1;
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i776 := $eq.i32($i774, 0);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i776} true;
    goto $bb4622, $bb4623;

  $bb4623:
    assume {:verifier.code 0} true;
    assume !($i776 == 1);
    goto $bb4621;

  $bb4622:
    assume {:verifier.code 0} true;
    assume $i776 == 1;
    goto $bb11;

  $bb4600:
    assume $i772 == 1;
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $i773 := $eq.i32($i771, 0);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i773} true;
    goto $bb4603, $bb4604;

  $bb4604:
    assume {:verifier.code 0} true;
    assume !($i773 == 1);
    goto $bb4602;

  $bb4603:
    assume {:verifier.code 0} true;
    assume $i773 == 1;
    goto $bb11;

  $bb4581:
    assume $i769 == 1;
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i770 := $eq.i32($i768, 0);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i770} true;
    goto $bb4584, $bb4585;

  $bb4585:
    assume {:verifier.code 0} true;
    assume !($i770 == 1);
    goto $bb4583;

  $bb4584:
    assume {:verifier.code 0} true;
    assume $i770 == 1;
    goto $bb11;

  $bb4562:
    assume $i766 == 1;
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    $i767 := $eq.i32($i765, 0);
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i767} true;
    goto $bb4565, $bb4566;

  $bb4566:
    assume {:verifier.code 0} true;
    assume !($i767 == 1);
    goto $bb4564;

  $bb4565:
    assume {:verifier.code 0} true;
    assume $i767 == 1;
    goto $bb11;

  $bb4543:
    assume $i763 == 1;
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i762, 0);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i764} true;
    goto $bb4546, $bb4547;

  $bb4547:
    assume {:verifier.code 0} true;
    assume !($i764 == 1);
    goto $bb4545;

  $bb4546:
    assume {:verifier.code 0} true;
    assume $i764 == 1;
    goto $bb11;

  $bb4524:
    assume $i760 == 1;
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i761 := $eq.i32($i759, 0);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i761} true;
    goto $bb4527, $bb4528;

  $bb4528:
    assume {:verifier.code 0} true;
    assume !($i761 == 1);
    goto $bb4526;

  $bb4527:
    assume {:verifier.code 0} true;
    assume $i761 == 1;
    goto $bb11;

  $bb4505:
    assume $i757 == 1;
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $i758 := $eq.i32($i756, 0);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i758} true;
    goto $bb4508, $bb4509;

  $bb4509:
    assume {:verifier.code 0} true;
    assume !($i758 == 1);
    goto $bb4507;

  $bb4508:
    assume {:verifier.code 0} true;
    assume $i758 == 1;
    goto $bb11;

  $bb4486:
    assume $i754 == 1;
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i755 := $eq.i32($i753, 0);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb4489, $bb4490;

  $bb4490:
    assume {:verifier.code 0} true;
    assume !($i755 == 1);
    goto $bb4488;

  $bb4489:
    assume {:verifier.code 0} true;
    assume $i755 == 1;
    goto $bb11;

  $bb4467:
    assume $i751 == 1;
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    $i752 := $eq.i32($i750, 0);
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i752} true;
    goto $bb4470, $bb4471;

  $bb4471:
    assume {:verifier.code 0} true;
    assume !($i752 == 1);
    goto $bb4469;

  $bb4470:
    assume {:verifier.code 0} true;
    assume $i752 == 1;
    goto $bb11;

  $bb4448:
    assume $i748 == 1;
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i747, 0);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb4451, $bb4452;

  $bb4452:
    assume {:verifier.code 0} true;
    assume !($i749 == 1);
    goto $bb4450;

  $bb4451:
    assume {:verifier.code 0} true;
    assume $i749 == 1;
    goto $bb11;

  $bb4429:
    assume $i745 == 1;
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i744, 0);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb4432, $bb4433;

  $bb4433:
    assume {:verifier.code 0} true;
    assume !($i746 == 1);
    goto $bb4431;

  $bb4432:
    assume {:verifier.code 0} true;
    assume $i746 == 1;
    goto $bb11;

  $bb4410:
    assume $i742 == 1;
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $i743 := $eq.i32($i741, 0);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i743} true;
    goto $bb4413, $bb4414;

  $bb4414:
    assume {:verifier.code 0} true;
    assume !($i743 == 1);
    goto $bb4412;

  $bb4413:
    assume {:verifier.code 0} true;
    assume $i743 == 1;
    goto $bb11;

  $bb4391:
    assume $i739 == 1;
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i738, 0);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i740} true;
    goto $bb4394, $bb4395;

  $bb4395:
    assume {:verifier.code 0} true;
    assume !($i740 == 1);
    goto $bb4393;

  $bb4394:
    assume {:verifier.code 0} true;
    assume $i740 == 1;
    goto $bb11;

  $bb4372:
    assume $i736 == 1;
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i735, 0);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i737} true;
    goto $bb4375, $bb4376;

  $bb4376:
    assume {:verifier.code 0} true;
    assume !($i737 == 1);
    goto $bb4374;

  $bb4375:
    assume {:verifier.code 0} true;
    assume $i737 == 1;
    goto $bb11;

  $bb4353:
    assume $i733 == 1;
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i732, 0);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i734} true;
    goto $bb4356, $bb4357;

  $bb4357:
    assume {:verifier.code 0} true;
    assume !($i734 == 1);
    goto $bb4355;

  $bb4356:
    assume {:verifier.code 0} true;
    assume $i734 == 1;
    goto $bb11;

  $bb4334:
    assume $i730 == 1;
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $i731 := $eq.i32($i729, 0);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i731} true;
    goto $bb4337, $bb4338;

  $bb4338:
    assume {:verifier.code 0} true;
    assume !($i731 == 1);
    goto $bb4336;

  $bb4337:
    assume {:verifier.code 0} true;
    assume $i731 == 1;
    goto $bb11;

  $bb4315:
    assume $i727 == 1;
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i728 := $eq.i32($i726, 0);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb4318, $bb4319;

  $bb4319:
    assume {:verifier.code 0} true;
    assume !($i728 == 1);
    goto $bb4317;

  $bb4318:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb11;

  $bb4296:
    assume $i724 == 1;
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i725 := $eq.i32($i723, 0);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb4299, $bb4300;

  $bb4300:
    assume {:verifier.code 0} true;
    assume !($i725 == 1);
    goto $bb4298;

  $bb4299:
    assume {:verifier.code 0} true;
    assume $i725 == 1;
    goto $bb11;

  $bb4277:
    assume $i721 == 1;
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $i722 := $eq.i32($i720, 0);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i722} true;
    goto $bb4280, $bb4281;

  $bb4281:
    assume {:verifier.code 0} true;
    assume !($i722 == 1);
    goto $bb4279;

  $bb4280:
    assume {:verifier.code 0} true;
    assume $i722 == 1;
    goto $bb11;

  $bb4258:
    assume $i718 == 1;
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $i719 := $eq.i32($i717, 0);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i719} true;
    goto $bb4261, $bb4262;

  $bb4262:
    assume {:verifier.code 0} true;
    assume !($i719 == 1);
    goto $bb4260;

  $bb4261:
    assume {:verifier.code 0} true;
    assume $i719 == 1;
    goto $bb11;

  $bb4239:
    assume $i715 == 1;
    goto corral_source_split_11440;

  corral_source_split_11440:
    assume {:verifier.code 0} true;
    $i716 := $eq.i32($i714, 0);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i716} true;
    goto $bb4242, $bb4243;

  $bb4243:
    assume {:verifier.code 0} true;
    assume !($i716 == 1);
    goto $bb4241;

  $bb4242:
    assume {:verifier.code 0} true;
    assume $i716 == 1;
    goto $bb11;

  $bb4220:
    assume $i712 == 1;
    goto corral_source_split_11416;

  corral_source_split_11416:
    assume {:verifier.code 0} true;
    $i713 := $eq.i32($i711, 0);
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i713} true;
    goto $bb4223, $bb4224;

  $bb4224:
    assume {:verifier.code 0} true;
    assume !($i713 == 1);
    goto $bb4222;

  $bb4223:
    assume {:verifier.code 0} true;
    assume $i713 == 1;
    goto $bb11;

  $bb4201:
    assume $i709 == 1;
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $i710 := $eq.i32($i708, 0);
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i710} true;
    goto $bb4204, $bb4205;

  $bb4205:
    assume {:verifier.code 0} true;
    assume !($i710 == 1);
    goto $bb4203;

  $bb4204:
    assume {:verifier.code 0} true;
    assume $i710 == 1;
    goto $bb11;

  $bb4182:
    assume $i706 == 1;
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i707 := $eq.i32($i705, 0);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb4185, $bb4186;

  $bb4186:
    assume {:verifier.code 0} true;
    assume !($i707 == 1);
    goto $bb4184;

  $bb4185:
    assume {:verifier.code 0} true;
    assume $i707 == 1;
    goto $bb11;

  $bb4163:
    assume $i703 == 1;
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $i704 := $eq.i32($i702, 0);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i704} true;
    goto $bb4166, $bb4167;

  $bb4167:
    assume {:verifier.code 0} true;
    assume !($i704 == 1);
    goto $bb4165;

  $bb4166:
    assume {:verifier.code 0} true;
    assume $i704 == 1;
    goto $bb11;

  $bb4144:
    assume $i700 == 1;
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i701 := $eq.i32($i699, 0);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i701} true;
    goto $bb4147, $bb4148;

  $bb4148:
    assume {:verifier.code 0} true;
    assume !($i701 == 1);
    goto $bb4146;

  $bb4147:
    assume {:verifier.code 0} true;
    assume $i701 == 1;
    goto $bb11;

  $bb4125:
    assume $i697 == 1;
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i698 := $eq.i32($i696, 0);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb4128, $bb4129;

  $bb4129:
    assume {:verifier.code 0} true;
    assume !($i698 == 1);
    goto $bb4127;

  $bb4128:
    assume {:verifier.code 0} true;
    assume $i698 == 1;
    goto $bb11;

  $bb4106:
    assume $i694 == 1;
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i693, 0);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb4109, $bb4110;

  $bb4110:
    assume {:verifier.code 0} true;
    assume !($i695 == 1);
    goto $bb4108;

  $bb4109:
    assume {:verifier.code 0} true;
    assume $i695 == 1;
    goto $bb11;

  $bb4087:
    assume $i691 == 1;
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i692 := $eq.i32($i690, 0);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i692} true;
    goto $bb4090, $bb4091;

  $bb4091:
    assume {:verifier.code 0} true;
    assume !($i692 == 1);
    goto $bb4089;

  $bb4090:
    assume {:verifier.code 0} true;
    assume $i692 == 1;
    goto $bb11;

  $bb4068:
    assume $i688 == 1;
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    $i689 := $eq.i32($i687, 0);
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i689} true;
    goto $bb4071, $bb4072;

  $bb4072:
    assume {:verifier.code 0} true;
    assume !($i689 == 1);
    goto $bb4070;

  $bb4071:
    assume {:verifier.code 0} true;
    assume $i689 == 1;
    goto $bb11;

  $bb4049:
    assume $i685 == 1;
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $i686 := $eq.i32($i684, 0);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb4052, $bb4053;

  $bb4053:
    assume {:verifier.code 0} true;
    assume !($i686 == 1);
    goto $bb4051;

  $bb4052:
    assume {:verifier.code 0} true;
    assume $i686 == 1;
    goto $bb11;

  $bb4030:
    assume $i682 == 1;
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $i683 := $eq.i32($i681, 0);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb4033, $bb4034;

  $bb4034:
    assume {:verifier.code 0} true;
    assume !($i683 == 1);
    goto $bb4032;

  $bb4033:
    assume {:verifier.code 0} true;
    assume $i683 == 1;
    goto $bb11;

  $bb4011:
    assume $i679 == 1;
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $i680 := $eq.i32($i678, 0);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i680} true;
    goto $bb4014, $bb4015;

  $bb4015:
    assume {:verifier.code 0} true;
    assume !($i680 == 1);
    goto $bb4013;

  $bb4014:
    assume {:verifier.code 0} true;
    assume $i680 == 1;
    goto $bb11;

  $bb3992:
    assume $i676 == 1;
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $i677 := $eq.i32($i675, 0);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i677} true;
    goto $bb3995, $bb3996;

  $bb3996:
    assume {:verifier.code 0} true;
    assume !($i677 == 1);
    goto $bb3994;

  $bb3995:
    assume {:verifier.code 0} true;
    assume $i677 == 1;
    goto $bb11;

  $bb3973:
    assume $i673 == 1;
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i674 := $eq.i32($i672, 0);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i674} true;
    goto $bb3976, $bb3977;

  $bb3977:
    assume {:verifier.code 0} true;
    assume !($i674 == 1);
    goto $bb3975;

  $bb3976:
    assume {:verifier.code 0} true;
    assume $i674 == 1;
    goto $bb11;

  $bb3954:
    assume $i670 == 1;
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $i671 := $eq.i32($i669, 0);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i671} true;
    goto $bb3957, $bb3958;

  $bb3958:
    assume {:verifier.code 0} true;
    assume !($i671 == 1);
    goto $bb3956;

  $bb3957:
    assume {:verifier.code 0} true;
    assume $i671 == 1;
    goto $bb11;

  $bb3935:
    assume $i667 == 1;
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $i668 := $eq.i32($i666, 0);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i668} true;
    goto $bb3938, $bb3939;

  $bb3939:
    assume {:verifier.code 0} true;
    assume !($i668 == 1);
    goto $bb3937;

  $bb3938:
    assume {:verifier.code 0} true;
    assume $i668 == 1;
    goto $bb11;

  $bb3916:
    assume $i664 == 1;
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i665 := $eq.i32($i663, 0);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb3919, $bb3920;

  $bb3920:
    assume {:verifier.code 0} true;
    assume !($i665 == 1);
    goto $bb3918;

  $bb3919:
    assume {:verifier.code 0} true;
    assume $i665 == 1;
    goto $bb11;

  $bb3897:
    assume $i661 == 1;
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32($i660, 0);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i662} true;
    goto $bb3900, $bb3901;

  $bb3901:
    assume {:verifier.code 0} true;
    assume !($i662 == 1);
    goto $bb3899;

  $bb3900:
    assume {:verifier.code 0} true;
    assume $i662 == 1;
    goto $bb11;

  $bb3878:
    assume $i658 == 1;
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i657, 0);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i659} true;
    goto $bb3881, $bb3882;

  $bb3882:
    assume {:verifier.code 0} true;
    assume !($i659 == 1);
    goto $bb3880;

  $bb3881:
    assume {:verifier.code 0} true;
    assume $i659 == 1;
    goto $bb11;

  $bb3859:
    assume $i655 == 1;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i656 := $eq.i32($i654, 0);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i656} true;
    goto $bb3862, $bb3863;

  $bb3863:
    assume {:verifier.code 0} true;
    assume !($i656 == 1);
    goto $bb3861;

  $bb3862:
    assume {:verifier.code 0} true;
    assume $i656 == 1;
    goto $bb11;

  $bb3840:
    assume $i652 == 1;
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $i653 := $eq.i32($i651, 0);
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb3843, $bb3844;

  $bb3844:
    assume {:verifier.code 0} true;
    assume !($i653 == 1);
    goto $bb3842;

  $bb3843:
    assume {:verifier.code 0} true;
    assume $i653 == 1;
    goto $bb11;

  $bb3821:
    assume $i649 == 1;
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i648, 0);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i650} true;
    goto $bb3824, $bb3825;

  $bb3825:
    assume {:verifier.code 0} true;
    assume !($i650 == 1);
    goto $bb3823;

  $bb3824:
    assume {:verifier.code 0} true;
    assume $i650 == 1;
    goto $bb11;

  $bb3802:
    assume $i646 == 1;
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $i647 := $eq.i32($i645, 0);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i647} true;
    goto $bb3805, $bb3806;

  $bb3806:
    assume {:verifier.code 0} true;
    assume !($i647 == 1);
    goto $bb3804;

  $bb3805:
    assume {:verifier.code 0} true;
    assume $i647 == 1;
    goto $bb11;

  $bb3783:
    assume $i643 == 1;
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i644 := $eq.i32($i642, 0);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb3786, $bb3787;

  $bb3787:
    assume {:verifier.code 0} true;
    assume !($i644 == 1);
    goto $bb3785;

  $bb3786:
    assume {:verifier.code 0} true;
    assume $i644 == 1;
    goto $bb11;

  $bb3764:
    assume $i640 == 1;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i641 := $eq.i32($i639, 0);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb3767, $bb3768;

  $bb3768:
    assume {:verifier.code 0} true;
    assume !($i641 == 1);
    goto $bb3766;

  $bb3767:
    assume {:verifier.code 0} true;
    assume $i641 == 1;
    goto $bb11;

  $bb3745:
    assume $i637 == 1;
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32($i636, 0);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i638} true;
    goto $bb3748, $bb3749;

  $bb3749:
    assume {:verifier.code 0} true;
    assume !($i638 == 1);
    goto $bb3747;

  $bb3748:
    assume {:verifier.code 0} true;
    assume $i638 == 1;
    goto $bb11;

  $bb3726:
    assume $i634 == 1;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i635 := $eq.i32($i633, 0);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb3729, $bb3730;

  $bb3730:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb3728;

  $bb3729:
    assume {:verifier.code 0} true;
    assume $i635 == 1;
    goto $bb11;

  $bb3707:
    assume $i631 == 1;
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i632 := $eq.i32($i630, 0);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb3710, $bb3711;

  $bb3711:
    assume {:verifier.code 0} true;
    assume !($i632 == 1);
    goto $bb3709;

  $bb3710:
    assume {:verifier.code 0} true;
    assume $i632 == 1;
    goto $bb11;

  $bb3688:
    assume $i628 == 1;
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $i629 := $eq.i32($i627, 0);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i629} true;
    goto $bb3691, $bb3692;

  $bb3692:
    assume {:verifier.code 0} true;
    assume !($i629 == 1);
    goto $bb3690;

  $bb3691:
    assume {:verifier.code 0} true;
    assume $i629 == 1;
    goto $bb11;

  $bb3669:
    assume $i625 == 1;
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i626 := $eq.i32($i624, 0);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i626} true;
    goto $bb3672, $bb3673;

  $bb3673:
    assume {:verifier.code 0} true;
    assume !($i626 == 1);
    goto $bb3671;

  $bb3672:
    assume {:verifier.code 0} true;
    assume $i626 == 1;
    goto $bb11;

  $bb3650:
    assume $i622 == 1;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i621, 0);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb3653, $bb3654;

  $bb3654:
    assume {:verifier.code 0} true;
    assume !($i623 == 1);
    goto $bb3652;

  $bb3653:
    assume {:verifier.code 0} true;
    assume $i623 == 1;
    goto $bb11;

  $bb3631:
    assume $i619 == 1;
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i620 := $eq.i32($i618, 0);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb3634, $bb3635;

  $bb3635:
    assume {:verifier.code 0} true;
    assume !($i620 == 1);
    goto $bb3633;

  $bb3634:
    assume {:verifier.code 0} true;
    assume $i620 == 1;
    goto $bb11;

  $bb3612:
    assume $i616 == 1;
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i615, 0);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i617} true;
    goto $bb3615, $bb3616;

  $bb3616:
    assume {:verifier.code 0} true;
    assume !($i617 == 1);
    goto $bb3614;

  $bb3615:
    assume {:verifier.code 0} true;
    assume $i617 == 1;
    goto $bb11;

  $bb3593:
    assume $i613 == 1;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i612, 0);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i614} true;
    goto $bb3596, $bb3597;

  $bb3597:
    assume {:verifier.code 0} true;
    assume !($i614 == 1);
    goto $bb3595;

  $bb3596:
    assume {:verifier.code 0} true;
    assume $i614 == 1;
    goto $bb11;

  $bb3574:
    assume $i610 == 1;
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i609, 0);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb3577, $bb3578;

  $bb3578:
    assume {:verifier.code 0} true;
    assume !($i611 == 1);
    goto $bb3576;

  $bb3577:
    assume {:verifier.code 0} true;
    assume $i611 == 1;
    goto $bb11;

  $bb3555:
    assume $i607 == 1;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i608 := $eq.i32($i606, 0);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i608} true;
    goto $bb3558, $bb3559;

  $bb3559:
    assume {:verifier.code 0} true;
    assume !($i608 == 1);
    goto $bb3557;

  $bb3558:
    assume {:verifier.code 0} true;
    assume $i608 == 1;
    goto $bb11;

  $bb3536:
    assume $i604 == 1;
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $i605 := $eq.i32($i603, 0);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb3539, $bb3540;

  $bb3540:
    assume {:verifier.code 0} true;
    assume !($i605 == 1);
    goto $bb3538;

  $bb3539:
    assume {:verifier.code 0} true;
    assume $i605 == 1;
    goto $bb11;

  $bb3517:
    assume $i601 == 1;
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i600, 0);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb3520, $bb3521;

  $bb3521:
    assume {:verifier.code 0} true;
    assume !($i602 == 1);
    goto $bb3519;

  $bb3520:
    assume {:verifier.code 0} true;
    assume $i602 == 1;
    goto $bb11;

  $bb3498:
    assume $i598 == 1;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i599 := $eq.i32($i597, 0);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i599} true;
    goto $bb3501, $bb3502;

  $bb3502:
    assume {:verifier.code 0} true;
    assume !($i599 == 1);
    goto $bb3500;

  $bb3501:
    assume {:verifier.code 0} true;
    assume $i599 == 1;
    goto $bb11;

  $bb3479:
    assume $i595 == 1;
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i594, 0);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i596} true;
    goto $bb3482, $bb3483;

  $bb3483:
    assume {:verifier.code 0} true;
    assume !($i596 == 1);
    goto $bb3481;

  $bb3482:
    assume {:verifier.code 0} true;
    assume $i596 == 1;
    goto $bb11;

  $bb3460:
    assume $i592 == 1;
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $i593 := $eq.i32($i591, 0);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb3463, $bb3464;

  $bb3464:
    assume {:verifier.code 0} true;
    assume !($i593 == 1);
    goto $bb3462;

  $bb3463:
    assume {:verifier.code 0} true;
    assume $i593 == 1;
    goto $bb11;

  $bb3441:
    assume $i589 == 1;
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32($i588, 0);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i590} true;
    goto $bb3444, $bb3445;

  $bb3445:
    assume {:verifier.code 0} true;
    assume !($i590 == 1);
    goto $bb3443;

  $bb3444:
    assume {:verifier.code 0} true;
    assume $i590 == 1;
    goto $bb11;

  $bb3422:
    assume $i586 == 1;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i585, 0);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i587} true;
    goto $bb3425, $bb3426;

  $bb3426:
    assume {:verifier.code 0} true;
    assume !($i587 == 1);
    goto $bb3424;

  $bb3425:
    assume {:verifier.code 0} true;
    assume $i587 == 1;
    goto $bb11;

  $bb3403:
    assume $i583 == 1;
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i584 := $eq.i32($i582, 0);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i584} true;
    goto $bb3406, $bb3407;

  $bb3407:
    assume {:verifier.code 0} true;
    assume !($i584 == 1);
    goto $bb3405;

  $bb3406:
    assume {:verifier.code 0} true;
    assume $i584 == 1;
    goto $bb11;

  $bb3384:
    assume $i580 == 1;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i581 := $eq.i32($i579, 0);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb3387, $bb3388;

  $bb3388:
    assume {:verifier.code 0} true;
    assume !($i581 == 1);
    goto $bb3386;

  $bb3387:
    assume {:verifier.code 0} true;
    assume $i581 == 1;
    goto $bb11;

  $bb3365:
    assume $i577 == 1;
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i576, 0);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i578} true;
    goto $bb3368, $bb3369;

  $bb3369:
    assume {:verifier.code 0} true;
    assume !($i578 == 1);
    goto $bb3367;

  $bb3368:
    assume {:verifier.code 0} true;
    assume $i578 == 1;
    goto $bb11;

  $bb3346:
    assume $i574 == 1;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i575 := $eq.i32($i573, 0);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i575} true;
    goto $bb3349, $bb3350;

  $bb3350:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb3348;

  $bb3349:
    assume {:verifier.code 0} true;
    assume $i575 == 1;
    goto $bb11;

  $bb3327:
    assume $i571 == 1;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i572 := $eq.i32($i570, 0);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb3330, $bb3331;

  $bb3331:
    assume {:verifier.code 0} true;
    assume !($i572 == 1);
    goto $bb3329;

  $bb3330:
    assume {:verifier.code 0} true;
    assume $i572 == 1;
    goto $bb11;

  $bb3308:
    assume $i568 == 1;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i567, 0);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i569} true;
    goto $bb3311, $bb3312;

  $bb3312:
    assume {:verifier.code 0} true;
    assume !($i569 == 1);
    goto $bb3310;

  $bb3311:
    assume {:verifier.code 0} true;
    assume $i569 == 1;
    goto $bb11;

  $bb3289:
    assume $i565 == 1;
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i564, 0);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i566} true;
    goto $bb3292, $bb3293;

  $bb3293:
    assume {:verifier.code 0} true;
    assume !($i566 == 1);
    goto $bb3291;

  $bb3292:
    assume {:verifier.code 0} true;
    assume $i566 == 1;
    goto $bb11;

  $bb3270:
    assume $i562 == 1;
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $i563 := $eq.i32($i561, 0);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i563} true;
    goto $bb3273, $bb3274;

  $bb3274:
    assume {:verifier.code 0} true;
    assume !($i563 == 1);
    goto $bb3272;

  $bb3273:
    assume {:verifier.code 0} true;
    assume $i563 == 1;
    goto $bb11;

  $bb3251:
    assume $i559 == 1;
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i560 := $eq.i32($i558, 0);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb3254, $bb3255;

  $bb3255:
    assume {:verifier.code 0} true;
    assume !($i560 == 1);
    goto $bb3253;

  $bb3254:
    assume {:verifier.code 0} true;
    assume $i560 == 1;
    goto $bb11;

  $bb3232:
    assume $i556 == 1;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i557 := $eq.i32($i555, 0);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i557} true;
    goto $bb3235, $bb3236;

  $bb3236:
    assume {:verifier.code 0} true;
    assume !($i557 == 1);
    goto $bb3234;

  $bb3235:
    assume {:verifier.code 0} true;
    assume $i557 == 1;
    goto $bb11;

  $bb3213:
    assume $i553 == 1;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i552, 0);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i554} true;
    goto $bb3216, $bb3217;

  $bb3217:
    assume {:verifier.code 0} true;
    assume !($i554 == 1);
    goto $bb3215;

  $bb3216:
    assume {:verifier.code 0} true;
    assume $i554 == 1;
    goto $bb11;

  $bb3194:
    assume $i550 == 1;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i549, 0);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i551} true;
    goto $bb3197, $bb3198;

  $bb3198:
    assume {:verifier.code 0} true;
    assume !($i551 == 1);
    goto $bb3196;

  $bb3197:
    assume {:verifier.code 0} true;
    assume $i551 == 1;
    goto $bb11;

  $bb3175:
    assume $i547 == 1;
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i548 := $eq.i32($i546, 0);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb3178, $bb3179;

  $bb3179:
    assume {:verifier.code 0} true;
    assume !($i548 == 1);
    goto $bb3177;

  $bb3178:
    assume {:verifier.code 0} true;
    assume $i548 == 1;
    goto $bb11;

  $bb3156:
    assume $i544 == 1;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i545 := $eq.i32($i543, 0);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb3159, $bb3160;

  $bb3160:
    assume {:verifier.code 0} true;
    assume !($i545 == 1);
    goto $bb3158;

  $bb3159:
    assume {:verifier.code 0} true;
    assume $i545 == 1;
    goto $bb11;

  $bb3137:
    assume $i541 == 1;
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i540, 0);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i542} true;
    goto $bb3140, $bb3141;

  $bb3141:
    assume {:verifier.code 0} true;
    assume !($i542 == 1);
    goto $bb3139;

  $bb3140:
    assume {:verifier.code 0} true;
    assume $i542 == 1;
    goto $bb11;

  $bb3118:
    assume $i538 == 1;
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i537, 0);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb3121, $bb3122;

  $bb3122:
    assume {:verifier.code 0} true;
    assume !($i539 == 1);
    goto $bb3120;

  $bb3121:
    assume {:verifier.code 0} true;
    assume $i539 == 1;
    goto $bb11;

  $bb3099:
    assume $i535 == 1;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i534, 0);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb3102, $bb3103;

  $bb3103:
    assume {:verifier.code 0} true;
    assume !($i536 == 1);
    goto $bb3101;

  $bb3102:
    assume {:verifier.code 0} true;
    assume $i536 == 1;
    goto $bb11;

  $bb3080:
    assume $i532 == 1;
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i533 := $eq.i32($i531, 0);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i533} true;
    goto $bb3083, $bb3084;

  $bb3084:
    assume {:verifier.code 0} true;
    assume !($i533 == 1);
    goto $bb3082;

  $bb3083:
    assume {:verifier.code 0} true;
    assume $i533 == 1;
    goto $bb11;

  $bb3061:
    assume $i529 == 1;
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i528, 0);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i530} true;
    goto $bb3064, $bb3065;

  $bb3065:
    assume {:verifier.code 0} true;
    assume !($i530 == 1);
    goto $bb3063;

  $bb3064:
    assume {:verifier.code 0} true;
    assume $i530 == 1;
    goto $bb11;

  $bb3042:
    assume $i526 == 1;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i525, 0);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb3045, $bb3046;

  $bb3046:
    assume {:verifier.code 0} true;
    assume !($i527 == 1);
    goto $bb3044;

  $bb3045:
    assume {:verifier.code 0} true;
    assume $i527 == 1;
    goto $bb11;

  $bb3023:
    assume $i523 == 1;
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i522, 0);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i524} true;
    goto $bb3026, $bb3027;

  $bb3027:
    assume {:verifier.code 0} true;
    assume !($i524 == 1);
    goto $bb3025;

  $bb3026:
    assume {:verifier.code 0} true;
    assume $i524 == 1;
    goto $bb11;

  $bb3004:
    assume $i520 == 1;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i521 := $eq.i32($i519, 0);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb3007, $bb3008;

  $bb3008:
    assume {:verifier.code 0} true;
    assume !($i521 == 1);
    goto $bb3006;

  $bb3007:
    assume {:verifier.code 0} true;
    assume $i521 == 1;
    goto $bb11;

  $bb2985:
    assume $i517 == 1;
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i516, 0);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb2988, $bb2989;

  $bb2989:
    assume {:verifier.code 0} true;
    assume !($i518 == 1);
    goto $bb2987;

  $bb2988:
    assume {:verifier.code 0} true;
    assume $i518 == 1;
    goto $bb11;

  $bb2966:
    assume $i514 == 1;
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i515 := $eq.i32($i513, 0);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb2969, $bb2970;

  $bb2970:
    assume {:verifier.code 0} true;
    assume !($i515 == 1);
    goto $bb2968;

  $bb2969:
    assume {:verifier.code 0} true;
    assume $i515 == 1;
    goto $bb11;

  $bb2947:
    assume $i511 == 1;
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i510, 0);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb2950, $bb2951;

  $bb2951:
    assume {:verifier.code 0} true;
    assume !($i512 == 1);
    goto $bb2949;

  $bb2950:
    assume {:verifier.code 0} true;
    assume $i512 == 1;
    goto $bb11;

  $bb2928:
    assume $i508 == 1;
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i507, 0);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i509} true;
    goto $bb2931, $bb2932;

  $bb2932:
    assume {:verifier.code 0} true;
    assume !($i509 == 1);
    goto $bb2930;

  $bb2931:
    assume {:verifier.code 0} true;
    assume $i509 == 1;
    goto $bb11;

  $bb2909:
    assume $i505 == 1;
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i504, 0);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i506} true;
    goto $bb2912, $bb2913;

  $bb2913:
    assume {:verifier.code 0} true;
    assume !($i506 == 1);
    goto $bb2911;

  $bb2912:
    assume {:verifier.code 0} true;
    assume $i506 == 1;
    goto $bb11;

  $bb2890:
    assume $i502 == 1;
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i501, 0);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb2893, $bb2894;

  $bb2894:
    assume {:verifier.code 0} true;
    assume !($i503 == 1);
    goto $bb2892;

  $bb2893:
    assume {:verifier.code 0} true;
    assume $i503 == 1;
    goto $bb11;

  $bb2871:
    assume $i499 == 1;
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i498, 0);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb2874, $bb2875;

  $bb2875:
    assume {:verifier.code 0} true;
    assume !($i500 == 1);
    goto $bb2873;

  $bb2874:
    assume {:verifier.code 0} true;
    assume $i500 == 1;
    goto $bb11;

  $bb2852:
    assume $i496 == 1;
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i495, 0);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb2855, $bb2856;

  $bb2856:
    assume {:verifier.code 0} true;
    assume !($i497 == 1);
    goto $bb2854;

  $bb2855:
    assume {:verifier.code 0} true;
    assume $i497 == 1;
    goto $bb11;

  $bb2833:
    assume $i493 == 1;
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i492, 0);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb2836, $bb2837;

  $bb2837:
    assume {:verifier.code 0} true;
    assume !($i494 == 1);
    goto $bb2835;

  $bb2836:
    assume {:verifier.code 0} true;
    assume $i494 == 1;
    goto $bb11;

  $bb2814:
    assume $i490 == 1;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i491 := $eq.i32($i489, 0);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i491} true;
    goto $bb2817, $bb2818;

  $bb2818:
    assume {:verifier.code 0} true;
    assume !($i491 == 1);
    goto $bb2816;

  $bb2817:
    assume {:verifier.code 0} true;
    assume $i491 == 1;
    goto $bb11;

  $bb2795:
    assume $i487 == 1;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i486, 0);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i488} true;
    goto $bb2798, $bb2799;

  $bb2799:
    assume {:verifier.code 0} true;
    assume !($i488 == 1);
    goto $bb2797;

  $bb2798:
    assume {:verifier.code 0} true;
    assume $i488 == 1;
    goto $bb11;

  $bb2776:
    assume $i484 == 1;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i483, 0);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb2779, $bb2780;

  $bb2780:
    assume {:verifier.code 0} true;
    assume !($i485 == 1);
    goto $bb2778;

  $bb2779:
    assume {:verifier.code 0} true;
    assume $i485 == 1;
    goto $bb11;

  $bb2757:
    assume $i481 == 1;
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i480, 0);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i482} true;
    goto $bb2760, $bb2761;

  $bb2761:
    assume {:verifier.code 0} true;
    assume !($i482 == 1);
    goto $bb2759;

  $bb2760:
    assume {:verifier.code 0} true;
    assume $i482 == 1;
    goto $bb11;

  $bb2738:
    assume $i478 == 1;
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    $i479 := $eq.i32($i477, 0);
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i479} true;
    goto $bb2741, $bb2742;

  $bb2742:
    assume {:verifier.code 0} true;
    assume !($i479 == 1);
    goto $bb2740;

  $bb2741:
    assume {:verifier.code 0} true;
    assume $i479 == 1;
    goto $bb11;

  $bb2719:
    assume $i475 == 1;
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i474, 0);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb2722, $bb2723;

  $bb2723:
    assume {:verifier.code 0} true;
    assume !($i476 == 1);
    goto $bb2721;

  $bb2722:
    assume {:verifier.code 0} true;
    assume $i476 == 1;
    goto $bb11;

  $bb2700:
    assume $i472 == 1;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i471, 0);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb2703, $bb2704;

  $bb2704:
    assume {:verifier.code 0} true;
    assume !($i473 == 1);
    goto $bb2702;

  $bb2703:
    assume {:verifier.code 0} true;
    assume $i473 == 1;
    goto $bb11;

  $bb2681:
    assume $i469 == 1;
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i468, 0);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i470} true;
    goto $bb2684, $bb2685;

  $bb2685:
    assume {:verifier.code 0} true;
    assume !($i470 == 1);
    goto $bb2683;

  $bb2684:
    assume {:verifier.code 0} true;
    assume $i470 == 1;
    goto $bb11;

  $bb2662:
    assume $i466 == 1;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i465, 0);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i467} true;
    goto $bb2665, $bb2666;

  $bb2666:
    assume {:verifier.code 0} true;
    assume !($i467 == 1);
    goto $bb2664;

  $bb2665:
    assume {:verifier.code 0} true;
    assume $i467 == 1;
    goto $bb11;

  $bb2643:
    assume $i463 == 1;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i462, 0);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i464} true;
    goto $bb2646, $bb2647;

  $bb2647:
    assume {:verifier.code 0} true;
    assume !($i464 == 1);
    goto $bb2645;

  $bb2646:
    assume {:verifier.code 0} true;
    assume $i464 == 1;
    goto $bb11;

  $bb2624:
    assume $i460 == 1;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i461 := $eq.i32($i459, 0);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb2627, $bb2628;

  $bb2628:
    assume {:verifier.code 0} true;
    assume !($i461 == 1);
    goto $bb2626;

  $bb2627:
    assume {:verifier.code 0} true;
    assume $i461 == 1;
    goto $bb11;

  $bb2605:
    assume $i457 == 1;
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i456, 0);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb2608, $bb2609;

  $bb2609:
    assume {:verifier.code 0} true;
    assume !($i458 == 1);
    goto $bb2607;

  $bb2608:
    assume {:verifier.code 0} true;
    assume $i458 == 1;
    goto $bb11;

  $bb2586:
    assume $i454 == 1;
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i453, 0);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb2589, $bb2590;

  $bb2590:
    assume {:verifier.code 0} true;
    assume !($i455 == 1);
    goto $bb2588;

  $bb2589:
    assume {:verifier.code 0} true;
    assume $i455 == 1;
    goto $bb11;

  $bb2567:
    assume $i451 == 1;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i452 := $eq.i32($i450, 0);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb2570, $bb2571;

  $bb2571:
    assume {:verifier.code 0} true;
    assume !($i452 == 1);
    goto $bb2569;

  $bb2570:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb11;

  $bb2548:
    assume $i448 == 1;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i447, 0);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i449} true;
    goto $bb2551, $bb2552;

  $bb2552:
    assume {:verifier.code 0} true;
    assume !($i449 == 1);
    goto $bb2550;

  $bb2551:
    assume {:verifier.code 0} true;
    assume $i449 == 1;
    goto $bb11;

  $bb2529:
    assume $i445 == 1;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i444, 0);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb2532, $bb2533;

  $bb2533:
    assume {:verifier.code 0} true;
    assume !($i446 == 1);
    goto $bb2531;

  $bb2532:
    assume {:verifier.code 0} true;
    assume $i446 == 1;
    goto $bb11;

  $bb2510:
    assume $i442 == 1;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i441, 0);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb2513, $bb2514;

  $bb2514:
    assume {:verifier.code 0} true;
    assume !($i443 == 1);
    goto $bb2512;

  $bb2513:
    assume {:verifier.code 0} true;
    assume $i443 == 1;
    goto $bb11;

  $bb2491:
    assume $i439 == 1;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i438, 0);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb2494, $bb2495;

  $bb2495:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb2493;

  $bb2494:
    assume {:verifier.code 0} true;
    assume $i440 == 1;
    goto $bb11;

  $bb2472:
    assume $i436 == 1;
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i435, 0);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb2475, $bb2476;

  $bb2476:
    assume {:verifier.code 0} true;
    assume !($i437 == 1);
    goto $bb2474;

  $bb2475:
    assume {:verifier.code 0} true;
    assume $i437 == 1;
    goto $bb11;

  $bb2453:
    assume $i433 == 1;
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i432, 0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb2456, $bb2457;

  $bb2457:
    assume {:verifier.code 0} true;
    assume !($i434 == 1);
    goto $bb2455;

  $bb2456:
    assume {:verifier.code 0} true;
    assume $i434 == 1;
    goto $bb11;

  $bb2434:
    assume $i430 == 1;
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i431 := $eq.i32($i429, 0);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb2437, $bb2438;

  $bb2438:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb2436;

  $bb2437:
    assume {:verifier.code 0} true;
    assume $i431 == 1;
    goto $bb11;

  $bb2415:
    assume $i427 == 1;
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i426, 0);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb2418, $bb2419;

  $bb2419:
    assume {:verifier.code 0} true;
    assume !($i428 == 1);
    goto $bb2417;

  $bb2418:
    assume {:verifier.code 0} true;
    assume $i428 == 1;
    goto $bb11;

  $bb2396:
    assume $i424 == 1;
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i423, 0);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb2399, $bb2400;

  $bb2400:
    assume {:verifier.code 0} true;
    assume !($i425 == 1);
    goto $bb2398;

  $bb2399:
    assume {:verifier.code 0} true;
    assume $i425 == 1;
    goto $bb11;

  $bb2377:
    assume $i421 == 1;
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i420, 0);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i422} true;
    goto $bb2380, $bb2381;

  $bb2381:
    assume {:verifier.code 0} true;
    assume !($i422 == 1);
    goto $bb2379;

  $bb2380:
    assume {:verifier.code 0} true;
    assume $i422 == 1;
    goto $bb11;

  $bb2358:
    assume $i418 == 1;
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i417, 0);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i419} true;
    goto $bb2361, $bb2362;

  $bb2362:
    assume {:verifier.code 0} true;
    assume !($i419 == 1);
    goto $bb2360;

  $bb2361:
    assume {:verifier.code 0} true;
    assume $i419 == 1;
    goto $bb11;

  $bb2339:
    assume $i415 == 1;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i414, 0);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb2342, $bb2343;

  $bb2343:
    assume {:verifier.code 0} true;
    assume !($i416 == 1);
    goto $bb2341;

  $bb2342:
    assume {:verifier.code 0} true;
    assume $i416 == 1;
    goto $bb11;

  $bb2320:
    assume $i412 == 1;
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i411, 0);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb2323, $bb2324;

  $bb2324:
    assume {:verifier.code 0} true;
    assume !($i413 == 1);
    goto $bb2322;

  $bb2323:
    assume {:verifier.code 0} true;
    assume $i413 == 1;
    goto $bb11;

  $bb2301:
    assume $i409 == 1;
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i408, 0);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i410} true;
    goto $bb2304, $bb2305;

  $bb2305:
    assume {:verifier.code 0} true;
    assume !($i410 == 1);
    goto $bb2303;

  $bb2304:
    assume {:verifier.code 0} true;
    assume $i410 == 1;
    goto $bb11;

  $bb2282:
    assume $i406 == 1;
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i405, 0);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb2285, $bb2286;

  $bb2286:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb2284;

  $bb2285:
    assume {:verifier.code 0} true;
    assume $i407 == 1;
    goto $bb11;

  $bb2263:
    assume $i403 == 1;
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i402, 0);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb2266, $bb2267;

  $bb2267:
    assume {:verifier.code 0} true;
    assume !($i404 == 1);
    goto $bb2265;

  $bb2266:
    assume {:verifier.code 0} true;
    assume $i404 == 1;
    goto $bb11;

  $bb2244:
    assume $i400 == 1;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i399, 0);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb2247, $bb2248;

  $bb2248:
    assume {:verifier.code 0} true;
    assume !($i401 == 1);
    goto $bb2246;

  $bb2247:
    assume {:verifier.code 0} true;
    assume $i401 == 1;
    goto $bb11;

  $bb2225:
    assume $i397 == 1;
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i396, 0);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i398} true;
    goto $bb2228, $bb2229;

  $bb2229:
    assume {:verifier.code 0} true;
    assume !($i398 == 1);
    goto $bb2227;

  $bb2228:
    assume {:verifier.code 0} true;
    assume $i398 == 1;
    goto $bb11;

  $bb2206:
    assume $i394 == 1;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i395 := $eq.i32($i393, 0);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb2209, $bb2210;

  $bb2210:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb2208;

  $bb2209:
    assume {:verifier.code 0} true;
    assume $i395 == 1;
    goto $bb11;

  $bb2187:
    assume $i391 == 1;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i390, 0);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb2190, $bb2191;

  $bb2191:
    assume {:verifier.code 0} true;
    assume !($i392 == 1);
    goto $bb2189;

  $bb2190:
    assume {:verifier.code 0} true;
    assume $i392 == 1;
    goto $bb11;

  $bb2168:
    assume $i388 == 1;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i387, 0);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i389} true;
    goto $bb2171, $bb2172;

  $bb2172:
    assume {:verifier.code 0} true;
    assume !($i389 == 1);
    goto $bb2170;

  $bb2171:
    assume {:verifier.code 0} true;
    assume $i389 == 1;
    goto $bb11;

  $bb2149:
    assume $i385 == 1;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i384, 0);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb2152, $bb2153;

  $bb2153:
    assume {:verifier.code 0} true;
    assume !($i386 == 1);
    goto $bb2151;

  $bb2152:
    assume {:verifier.code 0} true;
    assume $i386 == 1;
    goto $bb11;

  $bb2130:
    assume $i382 == 1;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i383 := $eq.i32($i381, 0);
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i383} true;
    goto $bb2133, $bb2134;

  $bb2134:
    assume {:verifier.code 0} true;
    assume !($i383 == 1);
    goto $bb2132;

  $bb2133:
    assume {:verifier.code 0} true;
    assume $i383 == 1;
    goto $bb11;

  $bb2111:
    assume $i379 == 1;
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i378, 0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb2114, $bb2115;

  $bb2115:
    assume {:verifier.code 0} true;
    assume !($i380 == 1);
    goto $bb2113;

  $bb2114:
    assume {:verifier.code 0} true;
    assume $i380 == 1;
    goto $bb11;

  $bb2092:
    assume $i376 == 1;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i375, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i377} true;
    goto $bb2095, $bb2096;

  $bb2096:
    assume {:verifier.code 0} true;
    assume !($i377 == 1);
    goto $bb2094;

  $bb2095:
    assume {:verifier.code 0} true;
    assume $i377 == 1;
    goto $bb11;

  $bb2073:
    assume $i373 == 1;
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i372, 0);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb2076, $bb2077;

  $bb2077:
    assume {:verifier.code 0} true;
    assume !($i374 == 1);
    goto $bb2075;

  $bb2076:
    assume {:verifier.code 0} true;
    assume $i374 == 1;
    goto $bb11;

  $bb2054:
    assume $i370 == 1;
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $i371 := $eq.i32($i369, 0);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb2057, $bb2058;

  $bb2058:
    assume {:verifier.code 0} true;
    assume !($i371 == 1);
    goto $bb2056;

  $bb2057:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb11;

  $bb2035:
    assume $i367 == 1;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i368 := $eq.i32($i366, 0);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i368} true;
    goto $bb2038, $bb2039;

  $bb2039:
    assume {:verifier.code 0} true;
    assume !($i368 == 1);
    goto $bb2037;

  $bb2038:
    assume {:verifier.code 0} true;
    assume $i368 == 1;
    goto $bb11;

  $bb2016:
    assume $i364 == 1;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i363, 0);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb2019, $bb2020;

  $bb2020:
    assume {:verifier.code 0} true;
    assume !($i365 == 1);
    goto $bb2018;

  $bb2019:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb11;

  $bb1997:
    assume $i361 == 1;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i360, 0);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i362} true;
    goto $bb2000, $bb2001;

  $bb2001:
    assume {:verifier.code 0} true;
    assume !($i362 == 1);
    goto $bb1999;

  $bb2000:
    assume {:verifier.code 0} true;
    assume $i362 == 1;
    goto $bb11;

  $bb1978:
    assume $i358 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i357, 0);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb1981, $bb1982;

  $bb1982:
    assume {:verifier.code 0} true;
    assume !($i359 == 1);
    goto $bb1980;

  $bb1981:
    assume {:verifier.code 0} true;
    assume $i359 == 1;
    goto $bb11;

  $bb1959:
    assume $i355 == 1;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i356 := $eq.i32($i354, 0);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb1962, $bb1963;

  $bb1963:
    assume {:verifier.code 0} true;
    assume !($i356 == 1);
    goto $bb1961;

  $bb1962:
    assume {:verifier.code 0} true;
    assume $i356 == 1;
    goto $bb11;

  $bb1940:
    assume $i352 == 1;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i351, 0);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb1943, $bb1944;

  $bb1944:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb1942;

  $bb1943:
    assume {:verifier.code 0} true;
    assume $i353 == 1;
    goto $bb11;

  $bb1921:
    assume $i349 == 1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i348, 0);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb1924, $bb1925;

  $bb1925:
    assume {:verifier.code 0} true;
    assume !($i350 == 1);
    goto $bb1923;

  $bb1924:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb11;

  $bb1902:
    assume $i346 == 1;
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i347 := $eq.i32($i345, 0);
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i347} true;
    goto $bb1905, $bb1906;

  $bb1906:
    assume {:verifier.code 0} true;
    assume !($i347 == 1);
    goto $bb1904;

  $bb1905:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb11;

  $bb1883:
    assume $i343 == 1;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i342, 0);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb1886, $bb1887;

  $bb1887:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb1885;

  $bb1886:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb11;

  $bb1864:
    assume $i340 == 1;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i339, 0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb1867, $bb1868;

  $bb1868:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb1866;

  $bb1867:
    assume {:verifier.code 0} true;
    assume $i341 == 1;
    goto $bb11;

  $bb1845:
    assume $i337 == 1;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i336, 0);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb1848, $bb1849;

  $bb1849:
    assume {:verifier.code 0} true;
    assume !($i338 == 1);
    goto $bb1847;

  $bb1848:
    assume {:verifier.code 0} true;
    assume $i338 == 1;
    goto $bb11;

  $bb1826:
    assume $i334 == 1;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $i335 := $eq.i32($i333, 0);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb1829, $bb1830;

  $bb1830:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb1828;

  $bb1829:
    assume {:verifier.code 0} true;
    assume $i335 == 1;
    goto $bb11;

  $bb1807:
    assume $i331 == 1;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i330, 0);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb1810, $bb1811;

  $bb1811:
    assume {:verifier.code 0} true;
    assume !($i332 == 1);
    goto $bb1809;

  $bb1810:
    assume {:verifier.code 0} true;
    assume $i332 == 1;
    goto $bb11;

  $bb1788:
    assume $i328 == 1;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i327, 0);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb1791, $bb1792;

  $bb1792:
    assume {:verifier.code 0} true;
    assume !($i329 == 1);
    goto $bb1790;

  $bb1791:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb11;

  $bb1769:
    assume $i325 == 1;
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i324, 0);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb1772, $bb1773;

  $bb1773:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb1771;

  $bb1772:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb11;

  $bb1750:
    assume $i322 == 1;
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i321, 0);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb1753, $bb1754;

  $bb1754:
    assume {:verifier.code 0} true;
    assume !($i323 == 1);
    goto $bb1752;

  $bb1753:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb11;

  $bb1731:
    assume $i319 == 1;
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i318, 0);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i320} true;
    goto $bb1734, $bb1735;

  $bb1735:
    assume {:verifier.code 0} true;
    assume !($i320 == 1);
    goto $bb1733;

  $bb1734:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb11;

  $bb1712:
    assume $i316 == 1;
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i315, 0);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb1715, $bb1716;

  $bb1716:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb1714;

  $bb1715:
    assume {:verifier.code 0} true;
    assume $i317 == 1;
    goto $bb11;

  $bb1693:
    assume $i313 == 1;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i312, 0);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb1696, $bb1697;

  $bb1697:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb1695;

  $bb1696:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb11;

  $bb1674:
    assume $i310 == 1;
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i309, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i311} true;
    goto $bb1677, $bb1678;

  $bb1678:
    assume {:verifier.code 0} true;
    assume !($i311 == 1);
    goto $bb1676;

  $bb1677:
    assume {:verifier.code 0} true;
    assume $i311 == 1;
    goto $bb11;

  $bb1655:
    assume $i307 == 1;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i306, 0);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb1658, $bb1659;

  $bb1659:
    assume {:verifier.code 0} true;
    assume !($i308 == 1);
    goto $bb1657;

  $bb1658:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb11;

  $bb1636:
    assume $i304 == 1;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i303, 0);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb1639, $bb1640;

  $bb1640:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb1638;

  $bb1639:
    assume {:verifier.code 0} true;
    assume $i305 == 1;
    goto $bb11;

  $bb1617:
    assume $i301 == 1;
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i300, 0);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb1620, $bb1621;

  $bb1621:
    assume {:verifier.code 0} true;
    assume !($i302 == 1);
    goto $bb1619;

  $bb1620:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb11;

  $bb1598:
    assume $i298 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i297, 0);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb1601, $bb1602;

  $bb1602:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb1600;

  $bb1601:
    assume {:verifier.code 0} true;
    assume $i299 == 1;
    goto $bb11;

  $bb1579:
    assume $i295 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i294, 0);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb1582, $bb1583;

  $bb1583:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb1581;

  $bb1582:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb11;

  $bb1560:
    assume $i292 == 1;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i291, 0);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb1563, $bb1564;

  $bb1564:
    assume {:verifier.code 0} true;
    assume !($i293 == 1);
    goto $bb1562;

  $bb1563:
    assume {:verifier.code 0} true;
    assume $i293 == 1;
    goto $bb11;

  $bb1541:
    assume $i289 == 1;
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i288, 0);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb1544, $bb1545;

  $bb1545:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb1543;

  $bb1544:
    assume {:verifier.code 0} true;
    assume $i290 == 1;
    goto $bb11;

  $bb1522:
    assume $i286 == 1;
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i285, 0);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb1525, $bb1526;

  $bb1526:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb1524;

  $bb1525:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb11;

  $bb1503:
    assume $i283 == 1;
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i282, 0);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb1506, $bb1507;

  $bb1507:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb1505;

  $bb1506:
    assume {:verifier.code 0} true;
    assume $i284 == 1;
    goto $bb11;

  $bb1484:
    assume $i280 == 1;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i279, 0);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb1487, $bb1488;

  $bb1488:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb1486;

  $bb1487:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb11;

  $bb1465:
    assume $i277 == 1;
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i276, 0);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb1468, $bb1469;

  $bb1469:
    assume {:verifier.code 0} true;
    assume !($i278 == 1);
    goto $bb1467;

  $bb1468:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb11;

  $bb1446:
    assume $i274 == 1;
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i275 := $eq.i32($i273, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb1449, $bb1450;

  $bb1450:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb1448;

  $bb1449:
    assume {:verifier.code 0} true;
    assume $i275 == 1;
    goto $bb11;

  $bb1427:
    assume $i271 == 1;
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i270, 0);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb1430, $bb1431;

  $bb1431:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb1429;

  $bb1430:
    assume {:verifier.code 0} true;
    assume $i272 == 1;
    goto $bb11;

  $bb1408:
    assume $i268 == 1;
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i267, 0);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i269} true;
    goto $bb1411, $bb1412;

  $bb1412:
    assume {:verifier.code 0} true;
    assume !($i269 == 1);
    goto $bb1410;

  $bb1411:
    assume {:verifier.code 0} true;
    assume $i269 == 1;
    goto $bb11;

  $bb1389:
    assume $i265 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i264, 0);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb1392, $bb1393;

  $bb1393:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb1391;

  $bb1392:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb11;

  $bb1370:
    assume $i262 == 1;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i261, 0);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb1373, $bb1374;

  $bb1374:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb1372;

  $bb1373:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb11;

  $bb1351:
    assume $i259 == 1;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i258, 0);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb1354, $bb1355;

  $bb1355:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb1353;

  $bb1354:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb11;

  $bb1332:
    assume $i256 == 1;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i255, 0);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb1335, $bb1336;

  $bb1336:
    assume {:verifier.code 0} true;
    assume !($i257 == 1);
    goto $bb1334;

  $bb1335:
    assume {:verifier.code 0} true;
    assume $i257 == 1;
    goto $bb11;

  $bb1313:
    assume $i253 == 1;
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i252, 0);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb1316, $bb1317;

  $bb1317:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb1315;

  $bb1316:
    assume {:verifier.code 0} true;
    assume $i254 == 1;
    goto $bb11;

  $bb1294:
    assume $i250 == 1;
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i249, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb1297, $bb1298;

  $bb1298:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb1296;

  $bb1297:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb11;

  $bb1275:
    assume $i247 == 1;
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i246, 0);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i248} true;
    goto $bb1278, $bb1279;

  $bb1279:
    assume {:verifier.code 0} true;
    assume !($i248 == 1);
    goto $bb1277;

  $bb1278:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb11;

  $bb1256:
    assume $i244 == 1;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i243, 0);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb1259, $bb1260;

  $bb1260:
    assume {:verifier.code 0} true;
    assume !($i245 == 1);
    goto $bb1258;

  $bb1259:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb11;

  $bb1237:
    assume $i241 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i240, 0);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb1240, $bb1241;

  $bb1241:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb1239;

  $bb1240:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb11;

  $bb1218:
    assume $i238 == 1;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i237, 0);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb1221, $bb1222;

  $bb1222:
    assume {:verifier.code 0} true;
    assume !($i239 == 1);
    goto $bb1220;

  $bb1221:
    assume {:verifier.code 0} true;
    assume $i239 == 1;
    goto $bb11;

  $bb1199:
    assume $i235 == 1;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i234, 0);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb1202, $bb1203;

  $bb1203:
    assume {:verifier.code 0} true;
    assume !($i236 == 1);
    goto $bb1201;

  $bb1202:
    assume {:verifier.code 0} true;
    assume $i236 == 1;
    goto $bb11;

  $bb1180:
    assume $i232 == 1;
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i231, 0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb1183, $bb1184;

  $bb1184:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb1182;

  $bb1183:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb11;

  $bb1161:
    assume $i229 == 1;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i228, 0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb1164, $bb1165;

  $bb1165:
    assume {:verifier.code 0} true;
    assume !($i230 == 1);
    goto $bb1163;

  $bb1164:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb11;

  $bb1142:
    assume $i226 == 1;
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i225, 0);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb1145, $bb1146;

  $bb1146:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb1144;

  $bb1145:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb11;

  $bb1123:
    assume $i223 == 1;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i222, 0);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb1126, $bb1127;

  $bb1127:
    assume {:verifier.code 0} true;
    assume !($i224 == 1);
    goto $bb1125;

  $bb1126:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb11;

  $bb1104:
    assume $i220 == 1;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i219, 0);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb1107, $bb1108;

  $bb1108:
    assume {:verifier.code 0} true;
    assume !($i221 == 1);
    goto $bb1106;

  $bb1107:
    assume {:verifier.code 0} true;
    assume $i221 == 1;
    goto $bb11;

  $bb1085:
    assume $i217 == 1;
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i216, 0);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb1088, $bb1089;

  $bb1089:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb1087;

  $bb1088:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb11;

  $bb1066:
    assume $i214 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i213, 0);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb1069, $bb1070;

  $bb1070:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb1068;

  $bb1069:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb11;

  $bb1047:
    assume $i211 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i210, 0);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb1050, $bb1051;

  $bb1051:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb1049;

  $bb1050:
    assume {:verifier.code 0} true;
    assume $i212 == 1;
    goto $bb11;

  $bb1028:
    assume $i208 == 1;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i207, 0);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb1031, $bb1032;

  $bb1032:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb1030;

  $bb1031:
    assume {:verifier.code 0} true;
    assume $i209 == 1;
    goto $bb11;

  $bb1009:
    assume $i205 == 1;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i204, 0);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb1012, $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb1011;

  $bb1012:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb11;

  $bb990:
    assume $i202 == 1;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i201, 0);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb993, $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb992;

  $bb993:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb11;

  $bb971:
    assume $i199 == 1;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i198, 0);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb974, $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb973;

  $bb974:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb11;

  $bb952:
    assume $i196 == 1;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i195, 0);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb955, $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb954;

  $bb955:
    assume {:verifier.code 0} true;
    assume $i197 == 1;
    goto $bb11;

  $bb933:
    assume $i193 == 1;
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i192, 0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb936, $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb935;

  $bb936:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb11;

  $bb914:
    assume $i190 == 1;
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i189, 0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb917, $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb916;

  $bb917:
    assume {:verifier.code 0} true;
    assume $i191 == 1;
    goto $bb11;

  $bb895:
    assume $i187 == 1;
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i186, 0);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb898, $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb897;

  $bb898:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb11;

  $bb876:
    assume $i184 == 1;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i183, 0);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb879, $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb878;

  $bb879:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb11;

  $bb857:
    assume $i181 == 1;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i180, 0);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb860, $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb859;

  $bb860:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb11;

  $bb838:
    assume $i178 == 1;
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i177, 0);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb841, $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb840;

  $bb841:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb11;

  $bb819:
    assume $i175 == 1;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i174, 0);
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb822, $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb821;

  $bb822:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb11;

  $bb800:
    assume $i172 == 1;
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i171, 0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb803, $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb802;

  $bb803:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb11;

  $bb781:
    assume $i169 == 1;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i168, 0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb784, $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb783;

  $bb784:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb11;

  $bb762:
    assume $i166 == 1;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i165, 0);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb765, $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb764;

  $bb765:
    assume {:verifier.code 0} true;
    assume $i167 == 1;
    goto $bb11;

  $bb743:
    assume $i163 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i162, 0);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb746, $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb745;

  $bb746:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb11;

  $bb724:
    assume $i160 == 1;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i159, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb727, $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    assume !($i161 == 1);
    goto $bb726;

  $bb727:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb11;

  $bb705:
    assume $i157 == 1;
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i156, 0);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb708, $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    assume !($i158 == 1);
    goto $bb707;

  $bb708:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb11;

  $bb686:
    assume $i154 == 1;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i153, 0);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb689, $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb688;

  $bb689:
    assume {:verifier.code 0} true;
    assume $i155 == 1;
    goto $bb11;

  $bb667:
    assume $i151 == 1;
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i150, 0);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb670, $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb669;

  $bb670:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb11;

  $bb648:
    assume $i148 == 1;
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i147, 0);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb651, $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb650;

  $bb651:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb11;

  $bb629:
    assume $i145 == 1;
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i144, 0);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb632, $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb631;

  $bb632:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb11;

  $bb610:
    assume $i142 == 1;
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i141, 0);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb613, $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb612;

  $bb613:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb11;

  $bb591:
    assume $i139 == 1;
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i138, 0);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb593;

  $bb594:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb11;

  $bb572:
    assume $i136 == 1;
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i135, 0);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb575, $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb574;

  $bb575:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb11;

  $bb553:
    assume $i133 == 1;
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i132, 0);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb556, $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    assume !($i134 == 1);
    goto $bb555;

  $bb556:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb11;

  $bb534:
    assume $i130 == 1;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i129, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb537, $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb536;

  $bb537:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb11;

  $bb515:
    assume $i127 == 1;
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i126, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb517;

  $bb518:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb11;

  $bb496:
    assume $i124 == 1;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i123, 0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb499, $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb498;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i125 == 1;
    goto $bb11;

  $bb477:
    assume $i121 == 1;
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i120, 0);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb479;

  $bb480:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb11;

  $bb458:
    assume $i118 == 1;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i117, 0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb461, $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb460;

  $bb461:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb11;

  $bb439:
    assume $i115 == 1;
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i114, 0);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb442, $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb441;

  $bb442:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb11;

  $bb420:
    assume $i112 == 1;
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i111, 0);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb423, $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb422;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb11;

  $bb401:
    assume $i109 == 1;
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i108, 0);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb404, $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb403;

  $bb404:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb11;

  $bb382:
    assume $i106 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i105, 0);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb385, $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb384;

  $bb385:
    assume {:verifier.code 0} true;
    assume $i107 == 1;
    goto $bb11;

  $bb363:
    assume $i103 == 1;
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i102, 0);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb366, $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb365;

  $bb366:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb11;

  $bb344:
    assume $i100 == 1;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i99, 0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb346;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb11;

  $bb325:
    assume $i97 == 1;
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i96, 0);
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb328, $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb327;

  $bb328:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb11;

  $bb306:
    assume $i94 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i93, 0);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb309, $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb308;

  $bb309:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb11;

  $bb287:
    assume $i91 == 1;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i90, 0);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb290, $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb289;

  $bb290:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb11;

  $bb268:
    assume $i88 == 1;
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i87, 0);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb270;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i89 == 1;
    goto $bb11;

  $bb249:
    assume $i85 == 1;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i84, 0);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb252, $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb251;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb11;

  $bb230:
    assume $i82 == 1;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i81, 0);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb233, $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb232;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb11;

  $bb211:
    assume $i79 == 1;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i78, 0);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb213;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb11;

  $bb192:
    assume $i76 == 1;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i75, 0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb194;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb11;

  $bb173:
    assume $i73 == 1;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i72, 0);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb175;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb11;

  $bb154:
    assume $i70 == 1;
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i69, 0);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb156;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb11;

  $bb135:
    assume $i67 == 1;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i66, 0);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb137;

  $bb138:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb11;

  $bb116:
    assume $i64 == 1;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i63, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb118;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb11;

  $bb97:
    assume $i61 == 1;
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i60, 0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb99;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb11;

  $bb78:
    assume $i58 == 1;
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i57, 0);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb80;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb11;

  $bb59:
    assume $i55 == 1;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i54, 0);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb11;

  $bb40:
    assume $i52 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i51, 0);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb42;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb11;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const gpio_to_irq: ref;

axiom gpio_to_irq == $sub.ref(0, 360781);

procedure gpio_to_irq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation gpio_to_irq($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4393} {:cexpr "gpio_to_irq:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4394} $i1 := __gpio_to_irq($i0);
    call {:si_unique_call 4395} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const irq_set_irq_type: ref;

axiom irq_set_irq_type == $sub.ref(0, 361813);

procedure irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4396} {:cexpr "irq_set_irq_type:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 4397} {:cexpr "irq_set_irq_type:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4398} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 4399} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_request_irq_102: ref;

axiom ldv_request_irq_102 == $sub.ref(0, 362845);

procedure ldv_request_irq_102($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16;



implementation ldv_request_irq_102($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4400} {:cexpr "ldv_request_irq_102:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 4401} {:cexpr "ldv_request_irq_102:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4402} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 4403} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4404} $i6 := ldv_request_irq($i5, $i0, $p1, $i2, $p3, $p4);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    call {:si_unique_call 4405} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const pch_vbus_gpio_work_rise: ref;

axiom pch_vbus_gpio_work_rise == $sub.ref(0, 363877);

procedure pch_vbus_gpio_work_rise($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr;



implementation pch_vbus_gpio_work_rise($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4406} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 88), 168));
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512));
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(6344, 1)), $mul.ref(0, 1));
    goto corral_source_split_13324;

  corral_source_split_13324:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4407} __const_udelay(4295000);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4408} __const_udelay(4295000);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4415} __const_udelay(4295000);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4416} __const_udelay(4295000);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4417} __const_udelay(4295000);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4418} __const_udelay(4295000);
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4419} __const_udelay(4295000);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4420} __const_udelay(4295000);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4421} __const_udelay(4295000);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4422} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4409} $i10 := pch_vbus_gpio_get_value($p5);
    call {:si_unique_call 4410} {:cexpr "vbus"} boogie_si_record_i32($i10);
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p12, .str.1);
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p13, .str.80);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p14, .str.5);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p15, .str.81);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.11, $p17);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1340);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $M.11 := $store.i24($M.11, $p17, $i20);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13352;

  corral_source_split_13352:
    assume {:verifier.code 0} true;
    $M.12 := $store.i8($M.12, $p21, 0);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.12, $p22);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4411} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 4412} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4414} pch_udc_reconnect($p5);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 6336), 6512)), $mul.ref(1576, 1));
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.1, $p28);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4413} __dynamic_dev_dbg.ref.ref.ref($p1, $p30, .str.81);
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __gpio_to_irq: ref;

axiom __gpio_to_irq == $sub.ref(0, 364909);

procedure __gpio_to_irq($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __gpio_to_irq($i0: i32) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4423} {:cexpr "__gpio_to_irq:arg:gpio"} boogie_si_record_i32($i0);
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4424} $p1 := gpio_to_desc($i0);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4425} $i2 := gpiod_to_irq($p1);
    call {:si_unique_call 4426} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const gpiod_to_irq: ref;

axiom gpiod_to_irq == $sub.ref(0, 365941);

procedure gpiod_to_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_to_irq($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4427} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4428} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const gpiod_direction_input: ref;

axiom gpiod_direction_input == $sub.ref(0, 366973);

procedure gpiod_direction_input($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation gpiod_direction_input($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4429} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 4430} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_ep_set_maxpacket_limit: ref;

axiom usb_ep_set_maxpacket_limit == $sub.ref(0, 368005);

procedure usb_ep_set_maxpacket_limit($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation usb_ep_set_maxpacket_limit($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4431} {:cexpr "usb_ep_set_maxpacket_limit:arg:maxpacket_limit"} boogie_si_record_i32($i1);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(42, 1));
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, $i2);
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p5, $i4);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 369037);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4432} __list_add($p0, $p3, $p1);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 370069);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_arch_io_io_mem_remap: ref;

axiom ldv_linux_arch_io_io_mem_remap == $sub.ref(0, 371101);

procedure ldv_linux_arch_io_io_mem_remap() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.5;



implementation ldv_linux_arch_io_io_mem_remap() returns ($r: ref)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4433} $p0 := ldv_undef_ptr();
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $i3 := $M.5;
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $M.5 := $i4;
    call {:si_unique_call 4434} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32($i4);
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 372133);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13418;

  corral_source_split_13418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4435} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 4436} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 373165);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(512, 1));
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $p1);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    return;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 374197);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.1, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4437} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 4438} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4439} ldv_check_alloc_flags($i1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4440} $p2 := ldv_zalloc($i0);
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4441} ldv_after_alloc($p2);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 375229);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4442} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4443} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 376261);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 377293);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4444} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 4445} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4446} $i2 := ldv_undef_int();
    call {:si_unique_call 4447} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_13437;

  corral_source_split_13437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4448} $p4 := calloc($i0, $i1);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4449} ldv_assume($i7);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4450} $i8 := ldv_is_err($p4);
    call {:si_unique_call 4451} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4452} ldv_assume($i10);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const pch_udc_pcd_ep_enable: ref;

axiom pch_udc_pcd_ep_enable == $sub.ref(0, 378325);

procedure pch_udc_pcd_ep_enable($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_pcd_ep_enable($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i16;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13454;

  corral_source_split_13454:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.1, $p4);
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, $p2i.ref.i64(ep0_string));
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    goto corral_source_split_13464;

  corral_source_split_13464:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(1, 1));
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 5);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.1, $p14);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i25 == 1);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.1, $p27);
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4453} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107($p30);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, $p1);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $i35 := $and.i8($i34, $sub.i8(0, 65));
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p33, $i35);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 6512)), $mul.ref(6336, 1));
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4454} pch_udc_ep_enable($p19, $p38, $p1);
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4455} $i39 := usb_endpoint_maxp($p1);
    call {:si_unique_call 4456} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p42, $i40);
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p19, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, 31);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p19);
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(128, 1));
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_13519;

  corral_source_split_13519:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $i54 := (if $i53 == 1 then 0 else 16);
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i48, $i54);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32(1, $i55);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4457} pch_udc_enable_ep_interrupts($p44, $i56);
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p21, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4458} ldv_spin_unlock_irqrestore_99($p57, $u3);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_13480;

  corral_source_split_13480:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 108);
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 22);
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const pch_udc_pcd_ep_disable: ref;

axiom pch_udc_pcd_ep_disable == $sub.ref(0, 379357);

procedure pch_udc_pcd_ep_disable($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_pcd_ep_disable($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i8;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_13540;

  corral_source_split_13540:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, $p2i.ref.i64(ep0_string));
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.1, $p10);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4459} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109($p16);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4460} empty_req_queue($p4);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.1, $p17);
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, $sub.i8(0, 65));
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $i20 := $or.i8($i19, 64);
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p17, $i20);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4461} pch_udc_ep_disable($p4);
    goto corral_source_split_13559;

  corral_source_split_13559:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.1, $p23);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i24, 31);
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p4);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p27, $mul.ref(128, 1));
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 0 else 16);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i26, $i32);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $i34 := $shl.i32(1, $i33);
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4462} pch_udc_disable_ep_interrupts($p22, $i34);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, $0.ref);
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4463} INIT_LIST_HEAD($p37);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.1, $p38);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4464} ldv_spin_unlock_irqrestore_99($p40, $u3);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_alloc_request: ref;

axiom pch_udc_alloc_request == $sub.ref(0, 380389);

procedure pch_udc_alloc_request($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation pch_udc_alloc_request($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4465} {:cexpr "pch_udc_alloc_request:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4466} $p6 := kzalloc(152, $i1);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p11, $sub.i64(0, 1));
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p12, $sub.i64(0, 1));
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4467} INIT_LIST_HEAD($p13);
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 6512)), $mul.ref(6288, 1));
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p16);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_13616;

  corral_source_split_13616:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4468} $p25 := ldv_dma_pool_alloc_111($p23, $i1, $p24);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.1, $p30);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, $sub.i32(0, 1073741824));
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p33, $i32);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p26, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p34, $sub.i32(0, 1));
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, $p25);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(104, 1));
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, $p25);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, 1);
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p7);
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4469} kfree($p29);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const pch_udc_free_request: ref;

axiom pch_udc_free_request == $sub.ref(0, 381421);

procedure pch_udc_free_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_free_request($p0: ref, $p1: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4470} $i11 := list_empty($p10);
    call {:si_unique_call 4471} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_13658;

  corral_source_split_13658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p7);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4475} kfree($p36);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.1, $p22);
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i23, 1);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.1, $p27);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.1, $p29);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.1, $p31);
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.1, $p34);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4474} dma_pool_free($p30, $p33, $i35);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.1, $p25);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4473} pch_udc_free_dma_chain($p26, $p7);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4472} dev_err.ref.ref.ref.ref.ref($p15, .str.26, .str.27, $p17, $p7);
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const pch_udc_pcd_queue: ref;

axiom pch_udc_pcd_queue == $sub.ref(0, 382453);

procedure pch_udc_pcd_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed, $CurrAddr;



implementation pch_udc_pcd_queue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i64;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i8;
  var $i124: i8;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i8;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $i149: i8;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i88: i32;
  var $p163: ref;
  var $i15: i32;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4476} {:cexpr "pch_udc_pcd_queue:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p0);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p1);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4477} $i31 := list_empty($p30);
    call {:si_unique_call 4478} {:cexpr "tmp"} boogie_si_record_i32($i31);
    goto corral_source_split_13738;

  corral_source_split_13738:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.1, $p33);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_13746;

  corral_source_split_13746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i36 == 1);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.1, $p38);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4479} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p41);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.1, $p42);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.1, $p125);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i127} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i130 := 0;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(84, 1));
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p131, 0);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p132, $sub.i32(0, 115));
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.1, $p133);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $i135 := $and.i8($i134, $sub.i8(0, 5));
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p133, $i135);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4489} $i137 := list_empty($p136);
    call {:si_unique_call 4490} {:cexpr "tmp___0"} boogie_si_record_i32($i137);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p29);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $i160 := $ne.i64($i159, 0);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i88 := $i130;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4483} ldv_spin_unlock_irqrestore_99($p163, $u3);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_13826;

  corral_source_split_13826:
    assume {:verifier.code 0} true;
    $i15 := $i88;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i160 == 1;
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4496} list_add_tail($p161, $p162);
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb52:
    assume $i138 == 1;
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $p139 := $bitcast.ref.ref($p16);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p139, $mul.ref(128, 1));
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.1, $p140);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i143 == 1);
    goto $bb54;

  $bb55:
    assume $i143 == 1;
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.1, $p144);
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 0);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p16);
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($p147, $mul.ref(128, 1));
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.1, $p148);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 0);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i151 == 1);
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4493} pch_udc_wait_ep_stall($p16);
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4494} pch_udc_ep_clear_nak($p16);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.1, $p152);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p16, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.1, $p154);
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $i156 := $and.i8($i155, 31);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $i158 := $shl.i32(1, $i157);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4495} pch_udc_enable_ep_interrupts($p153, $i158);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i151 == 1;
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4492} pch_udc_start_rxrequest($p16, $p29);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb57:
    assume $i146 == 1;
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4491} process_zlp($p16, $p29);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    $i88 := 0;
    goto $bb40;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i127 == 1;
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4487} $i128 := prepare_dma($p16, $p29, 32);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    call {:si_unique_call 4488} {:cexpr "retval"} boogie_si_record_i32($i128);
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i130 := $i128;
    goto $bb51;

  $bb48:
    assume $i129 == 1;
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $i88 := $i128;
    goto $bb40;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i44 == 1;
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.1, $p45);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $i47 := $sub.i64($i46, 1);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $i48 := $ugt.i64($i47, 18446744073709551613);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb29;

  $bb30:
    assume $i48 == 1;
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.1, $p49);
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 3);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i53 == 1);
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.1, $p79);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $i81 := $zext.i32.i64($i80);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4480} $p82 := kzalloc($i81, 32);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p83, $p82);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.1, $p84);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p16);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(128, 1));
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.1, $p90);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i93 == 1);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.1, $p111);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.1, $p114);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.1, $p116);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i117);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4486} $i119 := dma_map_single_attrs($p113, $p115, $i118, 2, $0.ref);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p120, $i119);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.1, $p121);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    $i123 := $and.i8($i122, $sub.i8(0, 3));
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    $i124 := $or.i8($i123, 2);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p121, $i124);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i93 == 1;
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.1, $p94);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.1, $p96);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.1, $p98);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.1;
    cmdloc_dummy_var_21 := $M.1;
    call {:si_unique_call 4484} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p95, $p97, $i100, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_22;
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.1, $p101);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.1, $p104);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.1, $p106);
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $i108 := $zext.i32.i64($i107);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4485} $i109 := dma_map_single_attrs($p103, $p105, $i108, 1, $0.ref);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p110, $i109);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb38:
    assume $i87 == 1;
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32(0, 12);
    goto $bb40;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i53 == 1;
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p16);
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(128, 1));
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.1, $p55);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i58 == 1);
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.1, $p69);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.1, $p72);
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13810;

  corral_source_split_13810:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.1, $p74);
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4482} $i77 := dma_map_single_attrs($p71, $p73, $i76, 2, $0.ref);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p78, $i77);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i58 == 1;
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p18, $mul.ref(0, 6512)), $mul.ref(1576, 1));
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 2976)), $mul.ref(152, 1));
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.1, $p62);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i65);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4481} $i67 := dma_map_single_attrs($p61, $p63, $i66, 1, $0.ref);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $M.1 := $store.i64($M.1, $p68, $i67);
    goto corral_source_split_13802;

  corral_source_split_13802:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 108);
    goto $bb10;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb22;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p16);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref(128, 1));
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.1, $p25);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const pch_udc_pcd_dequeue: ref;

axiom pch_udc_pcd_dequeue == $sub.ref(0, 383485);

procedure pch_udc_pcd_dequeue($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_pcd_dequeue($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p29: ref;
  var $i38: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.1, $p8);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4497} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p20);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_13962;

  corral_source_split_13962:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i26, $i27);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 22);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.1, $p46);
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4502} ldv_spin_unlock_irqrestore_99($p48, $u3);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    $i17 := $i38;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $p29 := $p25;
    goto $bb16;

  $bb16:
    call $p30, $i31, $i32, $i33, $p34, $p40, $p41, $p42, $p43, $i44, $i45, $p29 := pch_udc_pcd_dequeue_loop_$bb16($p1, $i27, $p30, $i31, $i32, $i33, $p34, $p40, $p41, $p42, $p43, $i44, $i45, $p29);
    goto $bb16_last;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p1);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $p34 := $p29;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 152)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_13994;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, $i27);
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i45 == 1);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb25:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $p29 := $p43;
    goto $bb25_dummy;

  $bb18:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4498} pch_udc_ep_set_nak($p2);
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 152)), $mul.ref(112, 1));
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4499} $i36 := list_empty($p35);
    call {:si_unique_call 4500} {:cexpr "tmp"} boogie_si_record_i32($i36);
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb23;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4501} complete_req($p2, $p34, $sub.i32(0, 104));
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(128, 1));
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.1, $p13);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb25_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13971;
}



const pch_udc_pcd_set_halt: ref;

axiom pch_udc_pcd_set_halt == $sub.ref(0, 384517);

procedure pch_udc_pcd_set_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.17, assertsPassed;



implementation pch_udc_pcd_set_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i16;
  var $i42: i16;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4503} {:cexpr "pch_udc_pcd_set_halt:arg:halt___0"} boogie_si_record_i32($i1);
    goto corral_source_split_14002;

  corral_source_split_14002:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_14010;

  corral_source_split_14010:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i21 == 1);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.1, $p22);
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.1, $p25);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4504} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116(udc_stall_spinlock);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4505} $i29 := list_empty($p28);
    call {:si_unique_call 4506} {:cexpr "tmp"} boogie_si_record_i32($i29);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 11);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4510} ldv_spin_unlock_irqrestore_117(udc_stall_spinlock, $u3);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    $i4 := $i57;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i1, 0);
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4507} pch_udc_ep_clear_stall($p5);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb25;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p5);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref(128, 1));
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.1, $p33);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4508} pch_udc_ep_set_stall($p5);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.1, $p45);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $i47 := $and.i8($i46, 31);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p5);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(128, 1));
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.1, $p50);
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $i54 := (if $i53 == 1 then 0 else 16);
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i48, $i54);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32(1, $i55);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4509} pch_udc_enable_ep_interrupts($p44, $i56);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i36 == 1;
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.1, $p37);
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.1, $p39);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i41 := $and.i16($i40, $sub.i16(0, 3));
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $i42 := $or.i16($i41, 2);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p39, $i42);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 108);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb12;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(128, 1));
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_set_wedge: ref;

axiom pch_udc_pcd_set_wedge == $sub.ref(0, 385549);

procedure pch_udc_pcd_set_wedge($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.17, assertsPassed;



implementation pch_udc_pcd_set_wedge($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i16;
  var $i41: i16;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i8;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i16;
  var $i61: i16;
  var $i30: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.1, $p6);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.1, $p17);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 6512)), $mul.ref(0, 1)), $mul.ref(112, 1));
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.1, $p24);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4511} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118(udc_stall_spinlock);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_14122;

  corral_source_split_14122:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4512} $i28 := list_empty($p27);
    call {:si_unique_call 4513} {:cexpr "tmp"} boogie_si_record_i32($i28);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p4);
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(128, 1));
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.1, $p32);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4515} pch_udc_ep_set_stall($p4);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.1, $p42);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.1, $p44);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    $i46 := $and.i8($i45, 31);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p4);
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(128, 1));
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.1, $p49);
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    $i53 := (if $i52 == 1 then 0 else 16);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i47, $i53);
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32(1, $i54);
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4516} pch_udc_enable_ep_interrupts($p43, $i55);
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.1, $p56);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.1, $p58);
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    $i60 := $and.i16($i59, $sub.i16(0, 5));
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    $i61 := $or.i16($i60, 4);
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p58, $i61);
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4514} ldv_spin_unlock_irqrestore_117(udc_stall_spinlock, $u3);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $i3 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.1, $p36);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.1, $p38);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    $i40 := $and.i16($i39, $sub.i16(0, 3));
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $i41 := $or.i16($i40, 2);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p38, $i41);
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 11);
    goto $bb19;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 108);
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb12;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(128, 1));
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.1, $p11);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_fifo_flush: ref;

axiom pch_udc_pcd_fifo_flush == $sub.ref(0, 386581);

procedure pch_udc_pcd_fifo_flush($p0: ref);
  free requires assertsPassed;



implementation pch_udc_pcd_fifo_flush($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i8;
  var $i17: i8;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(48, 1));
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(128, 1));
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.1, $p10);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.1, $p14);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i8($i15, 5);
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    $i17 := $and.i8($i16, 1);
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4517} pch_udc_ep_fifo_flush($p3, $i18);
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118 == $sub.ref(0, 387613);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_118($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4518} ldv_linux_kernel_locking_spinlock_spin_lock_udc_stall_spinlock();
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4519} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_117: ref;

axiom ldv_spin_unlock_irqrestore_117 == $sub.ref(0, 388645);

procedure ldv_spin_unlock_irqrestore_117($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_spin_unlock_irqrestore_117($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4520} {:cexpr "ldv_spin_unlock_irqrestore_117:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4521} ldv_linux_kernel_locking_spinlock_spin_unlock_udc_stall_spinlock();
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4522} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_udc_stall_spinlock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_udc_stall_spinlock == $sub.ref(0, 389677);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_udc_stall_spinlock();
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_udc_stall_spinlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $i0 := $M.17;
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4523} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    $i3 := $M.17;
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4524} ldv_assume($i5);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $M.17 := 1;
    call {:si_unique_call 4525} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_udc_stall_spinlock"} boogie_si_record_i32(1);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 390709);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4526} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_14218;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4527} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 391741);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4528} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_udc_stall_spinlock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_udc_stall_spinlock == $sub.ref(0, 392773);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_udc_stall_spinlock();
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_udc_stall_spinlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    $i0 := $M.17;
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4529} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $i3 := $M.17;
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4530} ldv_assume($i5);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    $M.17 := 2;
    call {:si_unique_call 4531} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_udc_stall_spinlock"} boogie_si_record_i32(2);
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 393805);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14234;

  corral_source_split_14234:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116 == $sub.ref(0, 394837);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p0: ref);
  free requires assertsPassed;
  modifies $M.17, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4532} ldv_linux_kernel_locking_spinlock_spin_lock_udc_stall_spinlock();
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4533} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114 == $sub.ref(0, 395869);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4534} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev();
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4535} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_99: ref;

axiom ldv_spin_unlock_irqrestore_99 == $sub.ref(0, 396901);

procedure ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4536} {:cexpr "ldv_spin_unlock_irqrestore_99:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4537} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_pch_udc_dev();
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4538} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112 == $sub.ref(0, 397933);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4539} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev();
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4540} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const prepare_dma: ref;

axiom prepare_dma == $sub.ref(0, 398965);

procedure prepare_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, assertsPassed;



implementation prepare_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i10: i32;
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4541} {:cexpr "prepare_dma:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(40, 1));
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.1, $p4);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i64($i5);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4542} $i7 := pch_udc_create_dma_chain($p0, $p1, $i6, $i2);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 4543} {:cexpr "retval"} boogie_si_record_i32($i7);
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(128, 1));
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.1, $p16);
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.1, $p18);
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1073741823);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.1, $p21);
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i20);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4544} vslice_dummy_var_47 := printk.ref.ref.i32(.str.28, .str.29, $i7);
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb3;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const process_zlp: ref;

axiom process_zlp == $sub.ref(0, 399997);

procedure process_zlp($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation process_zlp($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $i21: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4545} complete_req($p0, $p1, 0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(6257, 1));
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.1, $p5);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref(3128, 2));
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.1, $p13);
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 512);
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 6512)), $mul.ref(1584, 1));
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4547} pch_udc_ep_clear_nak($p18);
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.1, $p19);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i21 := $and.i16($i20, $sub.i16(0, 513));
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p19, $i21);
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4546} pch_udc_set_csr_done($p3);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.1, $p9);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $i11 := $and.i16($i10, $sub.i16(0, 257));
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p9, $i11);
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const pch_udc_set_csr_done: ref;

axiom pch_udc_set_csr_done == $sub.ref(0, 401029);

procedure pch_udc_set_csr_done($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_csr_done($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4548} pch_udc_bit_set($p0, 1028, 8192);
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_create_dma_chain: ref;

axiom pch_udc_create_dma_chain == $sub.ref(0, 402061);

procedure pch_udc_create_dma_chain($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, assertsPassed;



implementation pch_udc_create_dma_chain($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $i33: i1;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4549} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 4550} {:cexpr "pch_udc_create_dma_chain:arg:buf_len"} boogie_si_record_i64($i2);
    call {:si_unique_call 4551} {:cexpr "pch_udc_create_dma_chain:arg:gfp_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.1, $p8);
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    call {:si_unique_call 4552} {:cexpr "bytes"} boogie_si_record_i64($i10);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.1, $p11);
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 1);
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.1, $p16);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, $sub.i64(0, 1));
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.1, $p24);
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i32($i25);
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p27, $i26);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p28, $sub.i32(0, 1073741824));
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $p29, $i30, $i31, $i32 := $p6, $i10, 0, 1;
    goto $bb7;

  $bb7:
    call $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $i62 := pch_udc_create_dma_chain_loop_$bb7($p0, $p1, $i2, $i3, $p4, $p29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $p37, $i38, $p39, $i40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $i54, $i55, $i56, $p57, $i58, $i59, $p60, $i61, $i62);
    goto $bb7_last;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    $i33 := $ult.i64($i2, $i30);
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $i34 := $i30;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i35, $sub.i32(0, 1073741824));
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p37, $i36);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    $i38 := $ule.i64($i30, $i2);
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $p39, $i40 := $p29, $i32;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.1, $p41);
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.1, $p43);
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4555} $p45 := ldv_dma_pool_alloc_106($p44, $i3, $p4);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $i49 := $i32;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i50 := $add.i64($i31, $i2);
    call {:si_unique_call 4556} {:cexpr "i"} boogie_si_record_i64($i50);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.1, $p53);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i50);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i54, $i55);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14402;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p57, $i56);
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.18, $p4);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p29, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p60, $i59);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $i61 := $sub.i64($i30, $i2);
    call {:si_unique_call 4557} {:cexpr "bytes"} boogie_si_record_i64($i61);
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i32, 1);
    call {:si_unique_call 4558} {:cexpr "len"} boogie_si_record_i32($i62);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    $p29, $i30, $i31, $i32 := $p45, $i61, $i50, $i62;
    goto corral_source_split_14409_dummy;

  $bb15:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i74 := $ugt.i32($i49, 1);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p78, 1);
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 12);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    $r := $i73;
    return;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p75, $i49);
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.1, $p76);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4559} pch_udc_free_dma_chain($p77, $p1);
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(104, 1));
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p63, $p39);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.1, $p64);
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i65, 134217728);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p67, $i66);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(88, 1));
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.1, $p68);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i64.i32($i69);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p71, $i70);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p72, $i40);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    $i73 := 0;
    goto $bb19;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_14354;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    $i34 := $i2;
    goto $bb10;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.1, $p20);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p23, $i22);
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.1, $p14);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4553} pch_udc_free_dma_chain($p15, $p1);
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_14409_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4554} {:cexpr "pch_udc_create_dma_chain:arg:_min1"} boogie_si_record_i64($i2);
    goto corral_source_split_14351;
}



const pch_udc_free_dma_chain: ref;

axiom pch_udc_free_dma_chain == $sub.ref(0, 403093);

procedure pch_udc_free_dma_chain($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_free_dma_chain($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i11: i64;
  var $i12: i32;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.1, $p2);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.1, $p4);
    call {:si_unique_call 4560} {:cexpr "i"} boogie_si_record_i32($i5);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.1, $p6);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    call {:si_unique_call 4561} {:cexpr "addr"} boogie_si_record_i64($i8);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p9, 0);
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i5, 1);
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 152)), $mul.ref(132, 1));
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p24, 1);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    $i11, $i12 := $i8, $i5;
    goto $bb4;

  $bb4:
    call $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i11, $i12 := pch_udc_free_dma_chain_loop_$bb4($p0, $p13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $p21, $i22, $i23, $i11, $i12);
    goto $bb4_last;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4562} $p13 := phys_to_virt($i11);
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.1, $p15);
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    call {:si_unique_call 4563} {:cexpr "addr2"} boogie_si_record_i64($i17);
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p14);
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4564} dma_pool_free($p19, $p20, $i11);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p21, 0);
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i12, 1);
    call {:si_unique_call 4565} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 1);
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12 := $i17, $i22;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14437;
}



const ldv_dma_pool_alloc_106: ref;

axiom ldv_dma_pool_alloc_106 == $sub.ref(0, 404125);

procedure ldv_dma_pool_alloc_106($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_106($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4566} {:cexpr "ldv_dma_pool_alloc_106:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4567} ldv_check_alloc_flags($i1);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4568} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_dma_pool_alloc_111: ref;

axiom ldv_dma_pool_alloc_111 == $sub.ref(0, 405157);

procedure ldv_dma_pool_alloc_111($p0: ref, $i1: i32, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_dma_pool_alloc_111($p0: ref, $i1: i32, $p2: ref) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4569} {:cexpr "ldv_dma_pool_alloc_111:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4570} ldv_check_alloc_flags($i1);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4571} $p3 := ldv_malloc_unknown_size();
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109 == $sub.ref(0, 406189);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4572} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev();
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4573} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const pch_udc_ep_disable: ref;

axiom pch_udc_ep_disable == $sub.ref(0, 407221);

procedure pch_udc_ep_disable($p0: ref);
  free requires assertsPassed;



implementation pch_udc_ep_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(128, 1));
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.1, $p2);
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_14474;

  corral_source_split_14474:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4577} pch_udc_ep_writel($p0, 128, 0);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4578} pch_udc_ep_writel($p0, 0, 20);
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4574} pch_udc_ep_writel($p0, 2, 0);
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4575} pch_udc_ep_writel($p0, 128, 0);
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4576} pch_udc_ep_bit_set($p0, 4, 64);
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107 == $sub.ref(0, 408253);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4579} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev();
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4580} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const pch_udc_ep_enable: ref;

axiom pch_udc_ep_enable == $sub.ref(0, 409285);

procedure pch_udc_ep_enable($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation pch_udc_ep_enable($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i8;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14490;

  corral_source_split_14490:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p3);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4581} pch_udc_ep_set_trfr_type($p0, $i6);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(128, 1));
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_14498;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.1, $p12);
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i8($i13, 5);
    goto corral_source_split_14506;

  corral_source_split_14506:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, 1);
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4582} pch_udc_ep_set_bufsz($p0, 256, $i16);
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4583} $i17 := usb_endpoint_maxp($p2);
    call {:si_unique_call 4584} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4585} pch_udc_ep_set_maxpkt($p0, $i17);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4586} pch_udc_ep_set_nak($p0);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.1, $p18);
    goto corral_source_split_14514;

  corral_source_split_14514:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i8($i19, 5);
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $i21 := $and.i8($i20, 1);
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4587} pch_udc_ep_fifo_flush($p0, $i22);
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4588} $i23 := usb_endpoint_maxp($p2);
    call {:si_unique_call 4589} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.1, $p24);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    $i26 := $and.i8($i25, 31);
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.1, $p28);
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i8($i29, 5);
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, 1);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_14528;

  corral_source_split_14528:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 4);
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i27, $i33);
    goto corral_source_split_14530;

  corral_source_split_14530:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.1, $p35);
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 3);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $i39 := $shl.i32($i38, 5);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i34, $i39);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.1, $p41);
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    $i44 := $shl.i32($i43, 7);
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i40, $i44);
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.1, $p46);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i48, 11);
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i45, $i49);
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.1, $p51);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $i54 := $shl.i32($i53, 15);
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i50, $i54);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    $i56 := $shl.i32($i23, 19);
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i55, $i56);
    call {:si_unique_call 4590} {:cexpr "val"} boogie_si_record_i32($i57);
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p0);
    goto corral_source_split_14554;

  corral_source_split_14554:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref(128, 1));
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.1, $p59);
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i62 == 1);
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.1, $p71);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i57);
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.1, $p74);
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    $i76 := $and.i8($i75, 31);
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    $i78 := $mul.i32($i77, 2);
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 1);
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4592} pch_udc_write_csr($p72, $i73, $i79);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i62 == 1;
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.1, $p63);
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 0} true;
    $i65 := $zext.i32.i64($i57);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.1, $p66);
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i67, 31);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    $i70 := $mul.i32($i69, 2);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4591} pch_udc_write_csr($p64, $i65, $i70);
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 410317);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.1, $p1);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pch_udc_ep_set_trfr_type: ref;

axiom pch_udc_ep_set_trfr_type == $sub.ref(0, 411349);

procedure pch_udc_ep_set_trfr_type($p0: ref, $i1: i8);
  free requires assertsPassed;



implementation pch_udc_ep_set_trfr_type($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4593} {:cexpr "pch_udc_ep_set_trfr_type:arg:type"} boogie_si_record_i8($i1);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i2, 4);
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 48);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4594} pch_udc_ep_writel($p0, $i5, 0);
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_pcd_get_frame: ref;

axiom pch_udc_pcd_get_frame == $sub.ref(0, 412381);

procedure pch_udc_pcd_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_get_frame($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $i5: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4595} $i5 := pch_udc_get_frame($p4);
    call {:si_unique_call 4596} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_wakeup: ref;

axiom pch_udc_pcd_wakeup == $sub.ref(0, 413413);

procedure pch_udc_pcd_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation pch_udc_pcd_wakeup($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4597} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p5);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4598} pch_udc_rmt_wakeup($p4);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4599} ldv_spin_unlock_irqrestore_99($p6, $u3);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_selfpowered: ref;

axiom pch_udc_pcd_selfpowered == $sub.ref(0, 414445);

procedure pch_udc_pcd_selfpowered($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_pcd_selfpowered($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $i10: i8;
  var $i11: i8;
  var $i12: i8;
  var $i13: i8;
  var $p14: ref;
  var $i15: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4600} {:cexpr "pch_udc_pcd_selfpowered:arg:value"} boogie_si_record_i32($i1);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 0);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(1560, 1));
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.1, $p8);
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $i10 := $and.i8($i7, 1);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    $i11 := $shl.i8($i10, 7);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i9, 127);
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $i13 := $or.i8($i12, $i11);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    $M.1 := $store.i8($M.1, $p8, $i13);
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i1, 0);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4602} pch_udc_clear_selfpowered($p14);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4601} pch_udc_set_selfpowered($p14);
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_vbus_session: ref;

axiom pch_udc_pcd_vbus_session == $sub.ref(0, 415477);

procedure pch_udc_pcd_vbus_session($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5, $CurrAddr;



implementation pch_udc_pcd_vbus_session($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4603} {:cexpr "pch_udc_pcd_vbus_session:arg:is_active"} boogie_si_record_i32($i1);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4604} pch_udc_vbus_session($p5, $i1);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_pcd_vbus_draw: ref;

axiom pch_udc_pcd_vbus_draw == $sub.ref(0, 416509);

procedure pch_udc_pcd_vbus_draw($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_pcd_vbus_draw($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4605} {:cexpr "pch_udc_pcd_vbus_draw:arg:mA"} boogie_si_record_i32($i1);
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 95);
    return;
}



const pch_udc_pcd_pullup: ref;

axiom pch_udc_pcd_pullup == $sub.ref(0, 417541);

procedure pch_udc_pcd_pullup($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5, $CurrAddr;



implementation pch_udc_pcd_pullup($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4606} {:cexpr "pch_udc_pcd_pullup:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p0);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14674;

  corral_source_split_14674:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4611} pch_udc_set_disconnect($p5);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_14682;

  corral_source_split_14682:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4608} ldv_spin_unlock_96($p17);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14690;

  corral_source_split_14690:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 6512)), $mul.ref(0, 1));
    call {:si_unique_call 4609} devirtbounce.4($p21, $p22);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4610} ldv_spin_lock_97($p23);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4607} pch_udc_reconnect($p5);
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const pch_udc_start: ref;

axiom pch_udc_start == $sub.ref(0, 418573);

procedure pch_udc_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i16;
  var $i15: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1)), $mul.ref(8, 1));
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, $0.ref);
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, $p1);
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4612} pch_udc_setup_ep0($p2);
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4613} $i6 := pch_vbus_gpio_get_value($p2);
    call {:si_unique_call 4614} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_14706;

  corral_source_split_14706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6344, 1)), $mul.ref(4, 1));
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.1, $p9);
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.1, $p12);
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    $i14 := $and.i16($i13, $sub.i16(0, 65));
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $i15 := $or.i16($i14, 64);
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p12, $i15);
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4615} pch_udc_clear_disconnect($p2);
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;
}



const pch_udc_stop: ref;

axiom pch_udc_stop == $sub.ref(0, 419605);

procedure pch_udc_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation pch_udc_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4616} pch_udc_disable_interrupts($p1, 127);
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, $0.ref);
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    $i5 := $and.i16($i4, $sub.i16(0, 65));
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, $i5);
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4617} pch_udc_set_disconnect($p1);
    goto corral_source_split_14730;

  corral_source_split_14730:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const pch_udc_setup_ep0: ref;

axiom pch_udc_setup_ep0 == $sub.ref(0, 420637);

procedure pch_udc_setup_ep0($p0: ref);
  free requires assertsPassed;



implementation pch_udc_setup_ep0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4618} pch_udc_enable_ep_interrupts($p0, 65537);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4619} pch_udc_enable_interrupts($p0, 95);
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_disconnect: ref;

axiom pch_udc_clear_disconnect == $sub.ref(0, 421669);

procedure pch_udc_clear_disconnect($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4620} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4621} pch_udc_bit_clr($p0, 1028, 1024);
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4624} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4623} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4622} __const_udelay(4295000);
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_vbus_session: ref;

axiom pch_udc_vbus_session == $sub.ref(0, 422701);

procedure pch_udc_vbus_session($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5, $CurrAddr;



implementation pch_udc_vbus_session($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i16;
  var $i5: i16;
  var $i6: i16;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4625} {:cexpr "pch_udc_vbus_session:arg:is_active"} boogie_si_record_i32($i1);
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.1, $p7);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4630} pch_udc_set_disconnect($p0);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.1, $p24);
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    $i26 := $and.i16($i25, $sub.i16(0, 129));
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p24, $i26);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.1, $p11);
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.1, $p13);
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4627} ldv_spin_unlock_96($p17);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(1568, 1));
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.1, $p18);
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(40, 1));
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.1, $p20);
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(0, 1));
    call {:si_unique_call 4628} devirtbounce.4($p21, $p22);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6192, 1));
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4629} ldv_spin_lock_97($p23);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4626} pch_udc_reconnect($p0);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 6512)), $mul.ref(6264, 1));
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.1, $p3);
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    $i5 := $and.i16($i4, $sub.i16(0, 129));
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    $i6 := $or.i16($i5, 128);
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    $M.1 := $store.i16($M.1, $p3, $i6);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_set_selfpowered: ref;

axiom pch_udc_set_selfpowered == $sub.ref(0, 423733);

procedure pch_udc_set_selfpowered($p0: ref);
  free requires assertsPassed;



implementation pch_udc_set_selfpowered($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4631} pch_udc_bit_set($p0, 1024, 8);
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_clear_selfpowered: ref;

axiom pch_udc_clear_selfpowered == $sub.ref(0, 424765);

procedure pch_udc_clear_selfpowered($p0: ref);
  free requires assertsPassed;



implementation pch_udc_clear_selfpowered($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4632} pch_udc_bit_clr($p0, 1024, 8);
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98 == $sub.ref(0, 425797);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4633} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_pch_udc_dev();
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4634} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const pch_udc_rmt_wakeup: ref;

axiom pch_udc_rmt_wakeup == $sub.ref(0, 426829);

procedure pch_udc_rmt_wakeup($p0: ref);
  free requires assertsPassed;



implementation pch_udc_rmt_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4635} pch_udc_bit_set($p0, 1028, 1);
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !(1 == 1);
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4638} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4637} pch_udc_bit_clr($p0, 1028, 1);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume 1 == 1;
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4636} __const_udelay(4295000);
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pch_udc_get_frame: ref;

axiom pch_udc_get_frame == $sub.ref(0, 427861);

procedure pch_udc_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pch_udc_get_frame($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4639} $i1 := pch_udc_readl($p0, 1032);
    call {:si_unique_call 4640} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 18);
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_EMGentry_exit_pch_udc_driver_exit_13_2: ref;

axiom ldv_EMGentry_exit_pch_udc_driver_exit_13_2 == $sub.ref(0, 428893);

procedure ldv_EMGentry_exit_pch_udc_driver_exit_13_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_pch_udc_driver_exit_13_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4641} pch_udc_driver_exit();
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    return;
}



const pch_udc_driver_exit: ref;

axiom pch_udc_driver_exit == $sub.ref(0, 429925);

procedure pch_udc_driver_exit();
  free requires assertsPassed;



implementation pch_udc_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4642} ldv_pci_unregister_driver_141(pch_udc_driver);
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver_141: ref;

axiom ldv_pci_unregister_driver_141 == $sub.ref(0, 430957);

procedure ldv_pci_unregister_driver_141($p0: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver_141($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14818;

  corral_source_split_14818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4643} pci_unregister_driver($p0);
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4644} ldv_pci_unregister_driver($0.ref, $p0);
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 431989);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_unregister_driver: ref;

axiom ldv_pci_unregister_driver == $sub.ref(0, 433021);

procedure ldv_pci_unregister_driver($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_unregister_driver($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4645} ldv_dispatch_deregister_11_1($p1);
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_11_1: ref;

axiom ldv_dispatch_deregister_11_1 == $sub.ref(0, 434053);

procedure ldv_dispatch_deregister_11_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_11_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_pch_udc_driver_init_13_15: ref;

axiom ldv_EMGentry_init_pch_udc_driver_init_13_15 == $sub.ref(0, 435085);

procedure ldv_EMGentry_init_pch_udc_driver_init_13_15($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.3, $M.21, $CurrAddr, $M.22, $M.23, $M.4, $M.14, $M.5, $M.16, $M.17, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.0;



implementation ldv_EMGentry_init_pch_udc_driver_init_13_15($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4646} $i1 := pch_udc_driver_init();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 4647} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;
}



const pch_udc_driver_init: ref;

axiom pch_udc_driver_init == $sub.ref(0, 436117);

procedure pch_udc_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.3, $M.21, $CurrAddr, $M.22, $M.23, $M.4, $M.14, $M.5, $M.16, $M.17, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.0;



implementation pch_udc_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4648} $i0 := ldv___pci_register_driver_140(pch_udc_driver, __this_module, .str.1);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 4649} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const ldv___pci_register_driver_140: ref;

axiom ldv___pci_register_driver_140 == $sub.ref(0, 437149);

procedure ldv___pci_register_driver_140($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.3, $M.21, $CurrAddr, $M.22, $M.23, $M.4, $M.14, $M.5, $M.16, $M.17, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.0;



implementation ldv___pci_register_driver_140($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4650} $i3 := __pci_register_driver($p0, $p1, $p2);
    call {:si_unique_call 4651} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4652} $i4 := ldv___pci_register_driver($i3, $p0, $p1, $p2);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 4653} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 438181);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4654} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 4655} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv___pci_register_driver: ref;

axiom ldv___pci_register_driver == $sub.ref(0, 439213);

procedure ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.3, $M.21, $CurrAddr, $M.22, $M.23, $M.4, $M.14, $M.5, $M.16, $M.17, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.0;



implementation ldv___pci_register_driver($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4656} {:cexpr "ldv___pci_register_driver:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4657} $i4 := ldv_undef_int();
    call {:si_unique_call 4658} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4661} ldv_assume($i9);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4659} ldv_assume($i7);
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4660} ldv_dispatch_register_12_2($p1);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_14850;

  corral_source_split_14850:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_12_2: ref;

axiom ldv_dispatch_register_12_2 == $sub.ref(0, 440245);

procedure ldv_dispatch_register_12_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.3, $M.21, $CurrAddr, $M.22, $M.23, $M.4, $M.14, $M.5, $M.16, $M.17, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.0;



implementation ldv_dispatch_register_12_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4662} $p1 := ldv_xmalloc(16);
    goto corral_source_split_14858;

  corral_source_split_14858:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, $p0);
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4663} ldv_pci_pci_instance_2($p4);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;
}



const ldv_pci_pci_instance_2: ref;

axiom ldv_pci_pci_instance_2 == $sub.ref(0, 441277);

procedure ldv_pci_pci_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.20, $M.3, $M.21, $CurrAddr, $M.22, $M.23, $M.4, $M.14, $M.5, $M.16, $M.17, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.0;



implementation ldv_pci_pci_instance_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4664} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p8 := $u4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4666} $p9 := ldv_xmalloc(2968);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4667} $p11 := ldv_xmalloc(32);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4668} $i13 := ldv_undef_int();
    call {:si_unique_call 4669} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p10);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4670} ldv_free($p27);
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p12);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4671} ldv_free($p28);
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i29, $i30, $i31, $i32, $i33, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62 := ldv_pci_pci_instance_2_loop_$bb7($p1, $p8, $p10, $p12, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i29, $i30, $i31, $i32, $i33, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58, $p59, $p60, $p61, $p62);
    goto $bb7_last;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.1, $p15);
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4673} $i17 := ldv_pci_instance_probe_2_17($p16, $p10, $p12);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 4674} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i17);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4675} $i18 := ldv_ldv_post_probe_147($i17);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 4676} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i18);
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4677} $i19 := ldv_undef_int();
    call {:si_unique_call 4678} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i18, 0);
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4680} ldv_assume($i24);
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4683} $i25 := ldv_undef_int();
    call {:si_unique_call 4684} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i18, 0);
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4679} ldv_assume($i22);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i29, $i30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58 := ldv_pci_pci_instance_2_loop_$bb10($p1, $p8, $p10, $i29, $i30, $i31, $i32, $p34, $p35, $p36, $i37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $i53, $i54, $p55, $p56, $p57, $p58);
    goto $bb10_last;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, 2);
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    $i32 := $i29;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 3);
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4691} ldv_stop();
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.1, $p59);
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4689} ldv_pci_instance_shutdown_2_3($p60, $p10);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.1, $p61);
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4690} ldv_pci_instance_release_2_2($p62, $p10);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.1, $p34);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.19, $p36);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4685} $i38 := ldv_pci_instance_suspend_2_8($p35, $p10, $i37);
    call {:si_unique_call 4686} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i38);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4687} $i39 := ldv_filter_err_code($i38);
    call {:si_unique_call 4688} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i39);
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.1, $p40);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i39;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4694} $i50 := ldv_filter_err_code($i49);
    call {:si_unique_call 4695} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i50);
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.1, $p51);
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.1, $p57);
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4697} ldv_pci_instance_resume_2_5($p58, $p10);
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  $bb32:
    assume $i54 == 1;
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.1, $p55);
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4696} ldv_pci_instance_resume_early_2_6($p56, $p10);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.1, $p44);
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.19, $p46);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4692} $i48 := ldv_pci_instance_suspend_late_2_7($p45, $p10, $i47);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    call {:si_unique_call 4693} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i48);
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb31;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.1, $p5);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4665} ldv_free($p7);
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;

  $bb28_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4681} $i29 := ldv_undef_int();
    call {:si_unique_call 4682} {:cexpr "tmp___3"} boogie_si_record_i32($i29);
    goto corral_source_split_14909;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4672} ldv_ldv_pre_probe_146();
    goto corral_source_split_14891;
}



const ldv_ldv_pre_probe_146: ref;

axiom ldv_ldv_pre_probe_146 == $sub.ref(0, 442309);

procedure ldv_ldv_pre_probe_146();
  free requires assertsPassed;
  modifies $M.22, $M.23;



implementation ldv_ldv_pre_probe_146()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4698} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4699} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4700} ldv_pre_probe();
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_probe_2_17: ref;

axiom ldv_pci_instance_probe_2_17 == $sub.ref(0, 443341);

procedure ldv_pci_instance_probe_2_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.5, $M.16, assertsPassed, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.14;



implementation ldv_pci_instance_probe_2_17($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4701} $i3 := pch_udc_probe($p1, $p2);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    call {:si_unique_call 4702} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_147: ref;

axiom ldv_ldv_post_probe_147 == $sub.ref(0, 444373);

procedure ldv_ldv_post_probe_147($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.23, assertsPassed;



implementation ldv_ldv_post_probe_147($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4703} {:cexpr "ldv_ldv_post_probe_147:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4704} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4705} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4706} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 4707} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_suspend_2_8: ref;

axiom ldv_pci_instance_suspend_2_8 == $sub.ref(0, 445405);

procedure ldv_pci_instance_suspend_2_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.3, $M.4, $CurrAddr;



implementation ldv_pci_instance_suspend_2_8($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4708} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p4, $i2);
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.20, $p5);
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4709} $i7 := pch_udc_suspend($p1, $i6);
    call {:si_unique_call 4710} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_14986;

  corral_source_split_14986:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 446437);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4711} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4712} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 4713} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_pci_instance_suspend_late_2_7: ref;

axiom ldv_pci_instance_suspend_late_2_7 == $sub.ref(0, 447469);

procedure ldv_pci_instance_suspend_late_2_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.21, $M.3, $M.1, $CurrAddr, $M.4, $M.17, $M.14, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5;



implementation ldv_pci_instance_suspend_late_2_7($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4714} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p4, $i2);
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.21, $p5);
    call {:si_unique_call 4715} $i7 := devirtbounce.7($p0, $p1, $i6);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    call {:si_unique_call 4716} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_early_2_6: ref;

axiom ldv_pci_instance_resume_early_2_6 == $sub.ref(0, 448501);

procedure ldv_pci_instance_resume_early_2_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pci_instance_resume_early_2_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4717} vslice_dummy_var_48 := devirtbounce.8($p0, $p1);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;
}



const ldv_pci_instance_resume_2_5: ref;

axiom ldv_pci_instance_resume_2_5 == $sub.ref(0, 449533);

procedure ldv_pci_instance_resume_2_5($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_instance_resume_2_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4718} vslice_dummy_var_49 := pch_udc_resume($p1);
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_shutdown_2_3: ref;

axiom ldv_pci_instance_shutdown_2_3 == $sub.ref(0, 450565);

procedure ldv_pci_instance_shutdown_2_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pci_instance_shutdown_2_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4719} pch_udc_shutdown($p1);
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pci_instance_release_2_2: ref;

axiom ldv_pci_instance_release_2_2 == $sub.ref(0, 451597);

procedure ldv_pci_instance_release_2_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, assertsPassed;



implementation ldv_pci_instance_release_2_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4720} pch_udc_remove($p1);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 452629);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 453661);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4721} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4722} ldv_assume($i2);
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 454693);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.22, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4723} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4725} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4724} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_445:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 455725);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4726} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $i1 := $M.23;
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4728} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4727} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_448:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 456757);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4729} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4730} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 4731} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 457789);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4732} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4733} __VERIFIER_error();
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 458821);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    $M.23 := 0;
    call {:si_unique_call 4734} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 459853);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4735} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4736} __VERIFIER_error();
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 460885);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 4737} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_15054;

  corral_source_split_15054:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 461917);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_11_13_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_11_13_4 == $sub.ref(0, 462949);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_11_13_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_11_13_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_io_instance_10_13_5: ref;

axiom ldv_dispatch_deregister_io_instance_10_13_5 == $sub.ref(0, 463981);

procedure ldv_dispatch_deregister_io_instance_10_13_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_io_instance_10_13_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_platform_instance_8_13_6: ref;

axiom ldv_dispatch_deregister_platform_instance_8_13_6 == $sub.ref(0, 465013);

procedure ldv_dispatch_deregister_platform_instance_8_13_6();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_platform_instance_8_13_6()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_rtc_class_instance_9_13_7: ref;

axiom ldv_dispatch_deregister_rtc_class_instance_9_13_7 == $sub.ref(0, 466045);

procedure ldv_dispatch_deregister_rtc_class_instance_9_13_7();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_rtc_class_instance_9_13_7()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_deregister_4_5: ref;

axiom ldv_dispatch_pm_deregister_4_5 == $sub.ref(0, 467077);

procedure ldv_dispatch_pm_deregister_4_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_4_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_register_4_6: ref;

axiom ldv_dispatch_pm_register_4_6 == $sub.ref(0, 468109);

procedure ldv_dispatch_pm_register_4_6();
  free requires assertsPassed;
  modifies $CurrAddr, $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_dispatch_pm_register_4_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4738} $p0 := ldv_xmalloc(4);
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4739} ldv_pm_pm_ops_instance_3($p2);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;
}



const ldv_pm_pm_ops_instance_3: ref;

axiom ldv_pm_pm_ops_instance_3 == $sub.ref(0, 469141);

procedure ldv_pm_pm_ops_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_pm_ops_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150 := ldv_pm_pm_ops_instance_3_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150);
    goto $bb1_last;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_15095;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4742} ldv_stop();
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.30, $p25);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4747} $i31 := ldv_undef_int();
    call {:si_unique_call 4748} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_15154;

  corral_source_split_15154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4749} ldv_stop();
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.68, $p149);
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4758} ldv_pm_ops_instance_complete_3_3($p150, $u6);
    goto corral_source_split_15227;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.56, $p111);
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4768} $i117 := ldv_undef_int();
    call {:si_unique_call 4769} {:cexpr "tmp___3"} boogie_si_record_i32($i117);
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i118 == 1);
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.62, $p131);
    goto corral_source_split_15305;

  corral_source_split_15305:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_15306;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_15307;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_15334;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.64, $p137);
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_15336;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.66, $p143);
    goto corral_source_split_15325;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_15327;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb106:
    assume $i146 == 1;
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.67, $p147);
    goto corral_source_split_15346;

  corral_source_split_15346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4774} ldv_pm_ops_instance_restore_3_4($p148, $u6);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i140 == 1;
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.65, $p141);
    goto corral_source_split_15341;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4773} ldv_pm_ops_instance_restore_noirq_3_5($p142, $u6);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i134 == 1;
    goto corral_source_split_15329;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_15330;

  corral_source_split_15330:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.63, $p135);
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4772} ldv_pm_ops_instance_poweroff_noirq_3_6($p136, $u6);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i118 == 1;
    goto corral_source_split_15297;

  corral_source_split_15297:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_15298;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.58, $p119);
    goto corral_source_split_15299;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_15301;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_15314;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.60, $p125);
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i128 == 1;
    goto corral_source_split_15319;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.61, $p129);
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4771} ldv_pm_ops_instance_restore_early_3_7($p130, $u6);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_15322;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i122 == 1;
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_15310;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.59, $p123);
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4770} ldv_pm_ops_instance_poweroff_late_3_8($p124, $u6);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i114 == 1;
    goto corral_source_split_15289;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_15290;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.57, $p115);
    goto corral_source_split_15291;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4767} ldv_pm_ops_instance_poweroff_3_9($p116, $u6);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_15292;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.44, $p73);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4760} $i79 := ldv_undef_int();
    call {:si_unique_call 4761} {:cexpr "tmp___2"} boogie_si_record_i32($i79);
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_15235;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i80 == 1);
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.50, $p93);
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_15247;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.52, $p99);
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_15276;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_15264;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.54, $p105);
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_15267;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb85:
    assume $i108 == 1;
    goto corral_source_split_15284;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.55, $p109);
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4766} ldv_pm_ops_instance_thaw_3_10($p110, $u6);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_15287;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i102 == 1;
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_15280;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.53, $p103);
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4765} ldv_pm_ops_instance_thaw_noirq_3_11($p104, $u6);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_15282;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i96 == 1;
    goto corral_source_split_15269;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.51, $p97);
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4764} ldv_pm_ops_instance_freeze_noirq_3_12($p98, $u6);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_15272;

  corral_source_split_15272:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i80 == 1;
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.46, $p81);
    goto corral_source_split_15239;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.48, $p87);
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_15256;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i90 == 1;
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.49, $p91);
    goto corral_source_split_15261;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4763} ldv_pm_ops_instance_thaw_early_3_13($p92, $u6);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i84 == 1;
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.47, $p85);
    goto corral_source_split_15251;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4762} ldv_pm_ops_instance_freeze_late_3_14($p86, $u6);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i76 == 1;
    goto corral_source_split_15229;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.45, $p77);
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4759} ldv_pm_ops_instance_freeze_3_15($p78, $u6);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_15232;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.32, $p35);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4751} $i41 := ldv_undef_int();
    call {:si_unique_call 4752} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_15170;

  corral_source_split_15170:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_15171;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    goto corral_source_split_15179;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.38, $p55);
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_15183;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.40, $p61);
    goto corral_source_split_15211;

  corral_source_split_15211:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_15213;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.42, $p67);
    goto corral_source_split_15201;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_15203;

  corral_source_split_15203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_15221;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.43, $p71);
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4757} ldv_pm_ops_instance_resume_3_16($p72, $u6);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_15223;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i64 == 1;
    goto corral_source_split_15215;

  corral_source_split_15215:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.41, $p65);
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4756} ldv_pm_ops_instance_resume_early_3_17($p66, $u6);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i58 == 1;
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_15206;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.39, $p59);
    goto corral_source_split_15207;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4755} ldv_pm_ops_instance_suspend_late_3_18($p60, $u6);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i42 == 1;
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.34, $p43);
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.36, $p49);
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_15193;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i52 == 1;
    goto corral_source_split_15195;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.37, $p53);
    goto corral_source_split_15197;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4754} ldv_pm_ops_instance_resume_noirq_3_19($p54, $u6);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_15185;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_15186;

  corral_source_split_15186:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.35, $p47);
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4753} ldv_pm_ops_instance_suspend_noirq_3_20($p48, $u6);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.33, $p39);
    goto corral_source_split_15167;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4750} ldv_pm_ops_instance_suspend_3_21($p40, $u6);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.31, $p29);
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4746} ldv_pm_ops_instance_prepare_3_22($p30, $u6);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.26, $p13);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.28, $p19);
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.29, $p23);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4745} ldv_pm_ops_instance_runtime_resume_3_24($p24, $u6);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.27, $p17);
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4744} ldv_pm_ops_instance_runtime_suspend_3_25($p18, $u6);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.24, $p7);
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.25, $p11);
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4743} ldv_pm_ops_instance_runtime_idle_3_27($p12, $u6);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4740} $i1 := ldv_undef_int();
    call {:si_unique_call 4741} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15076;
}



const ldv_pm_ops_instance_runtime_idle_3_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_3_27 == $sub.ref(0, 470173);

procedure ldv_pm_ops_instance_runtime_idle_3_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_runtime_idle_3_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4775} vslice_dummy_var_50 := devirtbounce.9($p0, $p1);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_15349;

  corral_source_split_15349:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_3_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_3_25 == $sub.ref(0, 471205);

procedure ldv_pm_ops_instance_runtime_suspend_3_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_runtime_suspend_3_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4776} vslice_dummy_var_51 := devirtbounce.9($p0, $p1);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_3_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_3_24 == $sub.ref(0, 472237);

procedure ldv_pm_ops_instance_runtime_resume_3_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_runtime_resume_3_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4777} vslice_dummy_var_52 := devirtbounce.9($p0, $p1);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_3_22: ref;

axiom ldv_pm_ops_instance_prepare_3_22 == $sub.ref(0, 473269);

procedure ldv_pm_ops_instance_prepare_3_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_prepare_3_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4778} vslice_dummy_var_53 := devirtbounce.9($p0, $p1);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_15355;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_3_21: ref;

axiom ldv_pm_ops_instance_suspend_3_21 == $sub.ref(0, 474301);

procedure ldv_pm_ops_instance_suspend_3_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_suspend_3_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4779} vslice_dummy_var_54 := devirtbounce.9($p0, $p1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_15357;

  corral_source_split_15357:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_3_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_3_20 == $sub.ref(0, 475333);

procedure ldv_pm_ops_instance_suspend_noirq_3_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_suspend_noirq_3_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4780} vslice_dummy_var_55 := devirtbounce.9($p0, $p1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_15359;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_3_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_3_19 == $sub.ref(0, 476365);

procedure ldv_pm_ops_instance_resume_noirq_3_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_resume_noirq_3_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4781} vslice_dummy_var_56 := devirtbounce.9($p0, $p1);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_3_18: ref;

axiom ldv_pm_ops_instance_suspend_late_3_18 == $sub.ref(0, 477397);

procedure ldv_pm_ops_instance_suspend_late_3_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_suspend_late_3_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4782} vslice_dummy_var_57 := devirtbounce.9($p0, $p1);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_3_17: ref;

axiom ldv_pm_ops_instance_resume_early_3_17 == $sub.ref(0, 478429);

procedure ldv_pm_ops_instance_resume_early_3_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_resume_early_3_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_58: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4783} vslice_dummy_var_58 := devirtbounce.9($p0, $p1);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_15365;

  corral_source_split_15365:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_3_16: ref;

axiom ldv_pm_ops_instance_resume_3_16 == $sub.ref(0, 479461);

procedure ldv_pm_ops_instance_resume_3_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_resume_3_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4784} vslice_dummy_var_59 := devirtbounce.9($p0, $p1);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_15367;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_3_15: ref;

axiom ldv_pm_ops_instance_freeze_3_15 == $sub.ref(0, 480493);

procedure ldv_pm_ops_instance_freeze_3_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_freeze_3_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4785} vslice_dummy_var_60 := devirtbounce.9($p0, $p1);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_3_14: ref;

axiom ldv_pm_ops_instance_freeze_late_3_14 == $sub.ref(0, 481525);

procedure ldv_pm_ops_instance_freeze_late_3_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_freeze_late_3_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4786} vslice_dummy_var_61 := devirtbounce.9($p0, $p1);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_15371;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_3_13: ref;

axiom ldv_pm_ops_instance_thaw_early_3_13 == $sub.ref(0, 482557);

procedure ldv_pm_ops_instance_thaw_early_3_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_thaw_early_3_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4787} vslice_dummy_var_62 := devirtbounce.9($p0, $p1);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_15373;

  corral_source_split_15373:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_3_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_3_12 == $sub.ref(0, 483589);

procedure ldv_pm_ops_instance_freeze_noirq_3_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_freeze_noirq_3_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_63: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4788} vslice_dummy_var_63 := devirtbounce.9($p0, $p1);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_3_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_3_11 == $sub.ref(0, 484621);

procedure ldv_pm_ops_instance_thaw_noirq_3_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_thaw_noirq_3_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4789} vslice_dummy_var_64 := devirtbounce.9($p0, $p1);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_15377;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_568:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_3_10: ref;

axiom ldv_pm_ops_instance_thaw_3_10 == $sub.ref(0, 485653);

procedure ldv_pm_ops_instance_thaw_3_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_thaw_3_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4790} vslice_dummy_var_65 := devirtbounce.9($p0, $p1);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_15379;

  corral_source_split_15379:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_3_9: ref;

axiom ldv_pm_ops_instance_poweroff_3_9 == $sub.ref(0, 486685);

procedure ldv_pm_ops_instance_poweroff_3_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_poweroff_3_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4791} vslice_dummy_var_66 := devirtbounce.9($p0, $p1);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_3_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_3_8 == $sub.ref(0, 487717);

procedure ldv_pm_ops_instance_poweroff_late_3_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_poweroff_late_3_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4792} vslice_dummy_var_67 := devirtbounce.9($p0, $p1);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_15383;

  corral_source_split_15383:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_3_7: ref;

axiom ldv_pm_ops_instance_restore_early_3_7 == $sub.ref(0, 488749);

procedure ldv_pm_ops_instance_restore_early_3_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_restore_early_3_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4793} vslice_dummy_var_68 := devirtbounce.9($p0, $p1);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_15385;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_3_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_3_6 == $sub.ref(0, 489781);

procedure ldv_pm_ops_instance_poweroff_noirq_3_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_poweroff_noirq_3_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4794} vslice_dummy_var_69 := devirtbounce.9($p0, $p1);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_15387;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_3_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_3_5 == $sub.ref(0, 490813);

procedure ldv_pm_ops_instance_restore_noirq_3_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_restore_noirq_3_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4795} vslice_dummy_var_70 := devirtbounce.9($p0, $p1);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_3_4: ref;

axiom ldv_pm_ops_instance_restore_3_4 == $sub.ref(0, 491845);

procedure ldv_pm_ops_instance_restore_3_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_ops_instance_restore_3_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_71: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4796} vslice_dummy_var_71 := devirtbounce.9($p0, $p1);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_15391;

  corral_source_split_15391:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_3_3: ref;

axiom ldv_pm_ops_instance_complete_3_3 == $sub.ref(0, 492877);

procedure ldv_pm_ops_instance_complete_3_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_pm_ops_instance_complete_3_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15393;

  corral_source_split_15393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4797} gadget_release($p1);
    goto corral_source_split_15394;

  corral_source_split_15394:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_11_13_8: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_11_13_8 == $sub.ref(0, 493909);

procedure ldv_dispatch_register_dummy_resourceless_instance_11_13_8();
  free requires assertsPassed;
  modifies $M.14, $M.1, $CurrAddr, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5;



implementation ldv_dispatch_register_dummy_resourceless_instance_11_13_8()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15396;

  corral_source_split_15396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4798} $p0 := ldv_xmalloc(4);
    goto corral_source_split_15397;

  corral_source_split_15397:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15399;

  corral_source_split_15399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4799} ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7($p2);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7: ref;

axiom ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7 == $sub.ref(0, 494941);

procedure ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.1, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5, $CurrAddr;



implementation ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15402;

  corral_source_split_15402:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10 := ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1($i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10);
    goto $bb1_last;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_15405;

  corral_source_split_15405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_15411;

  corral_source_split_15411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_15417;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 4);
    goto corral_source_split_15423;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 5);
    goto corral_source_split_15429;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 6);
    goto corral_source_split_15435;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 7);
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 8);
    goto corral_source_split_15447;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    $i10 := $i1;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 9);
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4810} ldv_stop();
    goto corral_source_split_15457;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i11 == 1;
    goto corral_source_split_15455;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i9 == 1;
    goto corral_source_split_15449;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4809} ldv_dummy_resourceless_instance_callback_7_3($u7, $u8);
    goto corral_source_split_15451;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  $bb26:
    assume $i8 == 1;
    goto corral_source_split_15443;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4808} ldv_dummy_resourceless_instance_callback_7_7($u9, $u8, $u0);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i7 == 1;
    goto corral_source_split_15437;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4807} ldv_dummy_resourceless_instance_callback_7_10($u9, $u8, $u0);
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb18:
    assume $i6 == 1;
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4806} ldv_dummy_resourceless_instance_callback_7_13($u10, $u8, $u11);
    goto corral_source_split_15433;

  corral_source_split_15433:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb14:
    assume $i5 == 1;
    goto corral_source_split_15425;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4805} ldv_dummy_resourceless_instance_callback_7_14($u7, $u8);
    goto corral_source_split_15427;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4804} ldv_dummy_resourceless_instance_callback_7_15($u9, $u8, $u0);
    goto corral_source_split_15421;

  corral_source_split_15421:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4803} ldv_dummy_resourceless_instance_callback_7_18($u9, $u8, $u0);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_15415;

  corral_source_split_15415:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4802} ldv_dummy_resourceless_instance_callback_7_21($u7, $u8);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_15409;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb39_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4800} $i1 := ldv_undef_int();
    call {:si_unique_call 4801} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15404;
}



const ldv_dummy_resourceless_instance_callback_7_21: ref;

axiom ldv_dummy_resourceless_instance_callback_7_21 == $sub.ref(0, 495973);

procedure ldv_dummy_resourceless_instance_callback_7_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15459;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4811} vslice_dummy_var_72 := pch_udc_pcd_wakeup($p1);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_18: ref;

axiom ldv_dummy_resourceless_instance_callback_7_18 == $sub.ref(0, 497005);

procedure ldv_dummy_resourceless_instance_callback_7_18($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_7_18($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_73: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4812} {:cexpr "ldv_dummy_resourceless_instance_callback_7_18:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4813} vslice_dummy_var_73 := pch_udc_pcd_vbus_session($p1, $i2);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_15463;

  corral_source_split_15463:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_607:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_15: ref;

axiom ldv_dummy_resourceless_instance_callback_7_15 == $sub.ref(0, 498037);

procedure ldv_dummy_resourceless_instance_callback_7_15($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_15($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4814} {:cexpr "ldv_dummy_resourceless_instance_callback_7_15:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15465;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4815} vslice_dummy_var_74 := pch_udc_pcd_vbus_draw($p1, $i2);
    goto corral_source_split_15466;

  corral_source_split_15466:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_14: ref;

axiom ldv_dummy_resourceless_instance_callback_7_14 == $sub.ref(0, 499069);

procedure ldv_dummy_resourceless_instance_callback_7_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_dummy_resourceless_instance_callback_7_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4816} vslice_dummy_var_75 := pch_udc_stop($p1);
    goto corral_source_split_15469;

  corral_source_split_15469:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_13: ref;

axiom ldv_dummy_resourceless_instance_callback_7_13 == $sub.ref(0, 500101);

procedure ldv_dummy_resourceless_instance_callback_7_13($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_dummy_resourceless_instance_callback_7_13($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_76: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4817} vslice_dummy_var_76 := pch_udc_start($p1, $p2);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_10: ref;

axiom ldv_dummy_resourceless_instance_callback_7_10 == $sub.ref(0, 501133);

procedure ldv_dummy_resourceless_instance_callback_7_10($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_dummy_resourceless_instance_callback_7_10($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4818} {:cexpr "ldv_dummy_resourceless_instance_callback_7_10:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15474;

  corral_source_split_15474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4819} vslice_dummy_var_77 := pch_udc_pcd_selfpowered($p1, $i2);
    goto corral_source_split_15475;

  corral_source_split_15475:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_7: ref;

axiom ldv_dummy_resourceless_instance_callback_7_7 == $sub.ref(0, 502165);

procedure ldv_dummy_resourceless_instance_callback_7_7($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.14, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_7_7($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4820} {:cexpr "ldv_dummy_resourceless_instance_callback_7_7:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15477;

  corral_source_split_15477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4821} vslice_dummy_var_78 := pch_udc_pcd_pullup($p1, $i2);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_15478;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_610:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 503197);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4822} vslice_dummy_var_79 := pch_udc_pcd_get_frame($p1);
    goto corral_source_split_15481;

  corral_source_split_15481:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_io_instance_10_13_9: ref;

axiom ldv_dispatch_register_io_instance_10_13_9 == $sub.ref(0, 504229);

procedure ldv_dispatch_register_io_instance_10_13_9();
  free requires assertsPassed;
  modifies $M.1, $CurrAddr, $M.14, $M.17, assertsPassed;



implementation ldv_dispatch_register_io_instance_10_13_9()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15483;

  corral_source_split_15483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4823} $p0 := ldv_xmalloc(4);
    goto corral_source_split_15484;

  corral_source_split_15484:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15485;

  corral_source_split_15485:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4824} ldv_struct_usb_ep_ops_io_instance_6($p2);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_15487;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_613:
    assume !assertsPassed;
    return;
}



const ldv_struct_usb_ep_ops_io_instance_6: ref;

axiom ldv_struct_usb_ep_ops_io_instance_6 == $sub.ref(0, 505261);

procedure ldv_struct_usb_ep_ops_io_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, $CurrAddr, assertsPassed;



implementation ldv_struct_usb_ep_ops_io_instance_6($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15489;

  corral_source_split_15489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4825} $p1 := ldv_xmalloc(9);
    goto corral_source_split_15490;

  corral_source_split_15490:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4826} $p3 := ldv_xmalloc(64);
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4827} $p5 := ldv_xmalloc(88);
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15495;

  corral_source_split_15495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4828} $i7 := ldv_undef_int();
    call {:si_unique_call 4829} {:cexpr "tmp___3"} boogie_si_record_i32($i7);
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_15497;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p2);
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4830} ldv_free($p23);
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4831} ldv_free($p24);
    goto corral_source_split_15504;

  corral_source_split_15504:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p6);
    goto corral_source_split_15505;

  corral_source_split_15505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4832} ldv_free($p25);
    goto corral_source_split_15506;

  corral_source_split_15506:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_15499;

  corral_source_split_15499:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4($p2, $p4, $p6, $p9, $p10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37);
    goto $bb4_last;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.69, $p9);
    goto corral_source_split_15509;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4833} $i11 := ldv_io_instance_probe_6_11($p10, $p4, $p2);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    call {:si_unique_call 4834} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32($i11);
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4835} $i12 := ldv_filter_err_code($i11);
    call {:si_unique_call 4836} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32($i12);
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4837} $i13 := ldv_undef_int();
    call {:si_unique_call 4838} {:cexpr "tmp___2"} boogie_si_record_i32($i13);
    goto corral_source_split_15512;

  corral_source_split_15512:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_15513;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_15522;

  corral_source_split_15522:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i12, 0);
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_15524;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4842} ldv_assume($i20);
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4846} $i21 := ldv_undef_int();
    call {:si_unique_call 4847} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_15537;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    goto corral_source_split_15539;

  corral_source_split_15539:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12_dummy;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_15515;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 0);
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4839} ldv_assume($i16);
    goto corral_source_split_15518;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4840} $i17 := ldv_undef_int();
    call {:si_unique_call 4841} {:cexpr "tmp___5"} boogie_si_record_i32($i17);
    goto corral_source_split_15519;

  corral_source_split_15519:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_15520;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_15531;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10($p4, $p6, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37);
    goto $bb10_last;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i28, 2);
    goto corral_source_split_15547;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i28, 3);
    goto corral_source_split_15553;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i28, 4);
    goto corral_source_split_15559;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i28, 5);
    goto corral_source_split_15565;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i28, 6);
    goto corral_source_split_15571;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i28, 7);
    goto corral_source_split_15577;

  corral_source_split_15577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4855} ldv_stop();
    goto corral_source_split_15583;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4856} $i36 := ldv_undef_int();
    call {:si_unique_call 4857} {:cexpr "tmp___5"} boogie_si_record_i32($i36);
    goto corral_source_split_15585;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_15586;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb47_dummy;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_15541;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($u12, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_15527;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.70, $p26);
    goto corral_source_split_15528;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4843} ldv_io_instance_release_6_2($p27, $p4);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_15529;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i35 == 1;
    goto corral_source_split_15579;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4854} ldv_io_instance_callback_6_4($u19, $p4, $u0);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_15581;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i34 == 1;
    goto corral_source_split_15573;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4853} ldv_io_instance_callback_6_19($u18, $p4, $p6);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_15575;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i33 == 1;
    goto corral_source_split_15567;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4852} ldv_io_instance_callback_6_20($u17, $p4);
    goto corral_source_split_15569;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb27:
    assume $i32 == 1;
    goto corral_source_split_15561;

  corral_source_split_15561:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4851} ldv_io_instance_callback_6_21($u16, $p4, $p6);
    goto corral_source_split_15563;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb23:
    assume $i31 == 1;
    goto corral_source_split_15555;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4850} ldv_io_instance_callback_6_22($u15, $p4, $p6, $u0);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_15557;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_15549;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4849} ldv_io_instance_callback_6_25($u14, $p4, $u0);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_15551;

  corral_source_split_15551:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_15543;

  corral_source_split_15543:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4848} ldv_io_instance_callback_6_28($u13, $p4);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb8;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb47_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4844} $i28 := ldv_undef_int();
    call {:si_unique_call 4845} {:cexpr "tmp___4"} boogie_si_record_i32($i28);
    goto corral_source_split_15533;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($u12, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_15508;
}



const ldv_io_instance_probe_6_11: ref;

axiom ldv_io_instance_probe_6_11 == $sub.ref(0, 506293);

procedure ldv_io_instance_probe_6_11($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation ldv_io_instance_probe_6_11($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15588;

  corral_source_split_15588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4858} $i3 := pch_udc_pcd_ep_enable($p1, $p2);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    call {:si_unique_call 4859} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_15589;

  corral_source_split_15589:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_637:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_release_6_2: ref;

axiom ldv_io_instance_release_6_2 == $sub.ref(0, 507325);

procedure ldv_io_instance_release_6_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation ldv_io_instance_release_6_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15591;

  corral_source_split_15591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4860} vslice_dummy_var_80 := pch_udc_pcd_ep_disable($p1);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_15592;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_640:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_28: ref;

axiom ldv_io_instance_callback_6_28 == $sub.ref(0, 508357);

procedure ldv_io_instance_callback_6_28($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.17, assertsPassed;



implementation ldv_io_instance_callback_6_28($p0: ref, $p1: ref)
{
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15594;

  corral_source_split_15594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4861} vslice_dummy_var_81 := pch_udc_pcd_set_wedge($p1);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_15595;

  corral_source_split_15595:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_643:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_25: ref;

axiom ldv_io_instance_callback_6_25 == $sub.ref(0, 509389);

procedure ldv_io_instance_callback_6_25($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, $M.17, assertsPassed;



implementation ldv_io_instance_callback_6_25($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4862} {:cexpr "ldv_io_instance_callback_6_25:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15597;

  corral_source_split_15597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4863} vslice_dummy_var_82 := pch_udc_pcd_set_halt($p1, $i2);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_646:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_22: ref;

axiom ldv_io_instance_callback_6_22 == $sub.ref(0, 510421);

procedure ldv_io_instance_callback_6_22($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed, $CurrAddr;



implementation ldv_io_instance_callback_6_22($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4864} {:cexpr "ldv_io_instance_callback_6_22:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4865} vslice_dummy_var_83 := pch_udc_pcd_queue($p1, $p2, $i3);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_15601;

  corral_source_split_15601:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_21: ref;

axiom ldv_io_instance_callback_6_21 == $sub.ref(0, 511453);

procedure ldv_io_instance_callback_6_21($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1;



implementation ldv_io_instance_callback_6_21($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15603;

  corral_source_split_15603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4866} pch_udc_free_request($p1, $p2);
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_6_20: ref;

axiom ldv_io_instance_callback_6_20 == $sub.ref(0, 512485);

procedure ldv_io_instance_callback_6_20($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_6_20($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4867} pch_udc_pcd_fifo_flush($p1);
    goto corral_source_split_15607;

  corral_source_split_15607:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_6_19: ref;

axiom ldv_io_instance_callback_6_19 == $sub.ref(0, 513517);

procedure ldv_io_instance_callback_6_19($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, assertsPassed;



implementation ldv_io_instance_callback_6_19($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15609;

  corral_source_split_15609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4868} vslice_dummy_var_84 := pch_udc_pcd_dequeue($p1, $p2);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_15610;

  corral_source_split_15610:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_6_4: ref;

axiom ldv_io_instance_callback_6_4 == $sub.ref(0, 514549);

procedure ldv_io_instance_callback_6_4($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.1, assertsPassed, $CurrAddr;



implementation ldv_io_instance_callback_6_4($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_85: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4869} {:cexpr "ldv_io_instance_callback_6_4:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15612;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4870} vslice_dummy_var_85 := pch_udc_alloc_request($p1, $i2);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_15613;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_platform_instance_8_13_10: ref;

axiom ldv_dispatch_register_platform_instance_8_13_10 == $sub.ref(0, 515581);

procedure ldv_dispatch_register_platform_instance_8_13_10();
  free requires assertsPassed;
  modifies $M.22, $M.23, $CurrAddr, $M.1, $M.14, assertsPassed, $M.17;



implementation ldv_dispatch_register_platform_instance_8_13_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15615;

  corral_source_split_15615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4871} $p0 := ldv_xmalloc(4);
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15617;

  corral_source_split_15617:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15618;

  corral_source_split_15618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4872} ldv_pm_platform_instance_4($p2);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_15619;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;
}



const ldv_pm_platform_instance_4: ref;

axiom ldv_pm_platform_instance_4 == $sub.ref(0, 516613);

procedure ldv_pm_platform_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.1, $M.14, $CurrAddr, assertsPassed, $M.17;



implementation ldv_pm_platform_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i22: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15621;

  corral_source_split_15621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4873} $i1 := ldv_undef_int();
    call {:si_unique_call 4874} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_15622;

  corral_source_split_15622:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15625;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40 := ldv_pm_platform_instance_4_loop_$bb4($i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40);
    goto $bb4_last;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4875} $p4 := ldv_xmalloc(1464);
    goto corral_source_split_15628;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_15629;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4876} ldv_ldv_pre_probe_148();
    goto corral_source_split_15630;

  corral_source_split_15630:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_15631;

  corral_source_split_15631:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.71, $p6);
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_15633;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_15634;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_15641;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4879} $i14 := ldv_ldv_post_probe_149($i13);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    call {:si_unique_call 4880} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_15642;

  corral_source_split_15642:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_15643;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4881} ldv_free($p15);
    goto corral_source_split_15644;

  corral_source_split_15644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4882} $i16 := ldv_undef_int();
    call {:si_unique_call 4883} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_15645;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_15646;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_15655;

  corral_source_split_15655:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i14, 0);
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_15657;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4887} ldv_assume($i24);
    goto corral_source_split_15658;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_15662;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4888} $i26 := ldv_undef_int();
    call {:si_unique_call 4889} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_15663;

  corral_source_split_15663:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_15664;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_15666;

  corral_source_split_15666:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i25;
    goto $bb15_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_15648;

  corral_source_split_15648:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 0);
    goto corral_source_split_15649;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_15650;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4884} ldv_assume($i19);
    goto corral_source_split_15651;

  corral_source_split_15651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4885} $i20 := ldv_undef_int();
    call {:si_unique_call 4886} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_15652;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_15653;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_15660;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb13;

  $bb13:
    call $i22, $i28, $i29, $i39, $i40 := ldv_pm_platform_instance_4_loop_$bb13($i22, $i28, $i29, $i39, $i40);
    goto $bb13_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 2);
    goto corral_source_split_15677;

  corral_source_split_15677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i22, 3);
    goto corral_source_split_15681;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4893} ldv_stop();
    goto corral_source_split_15688;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_15683;

  corral_source_split_15683:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4891} ldv_dispatch_pm_register_4_6();
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_15685;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4892} ldv_dispatch_pm_deregister_4_5();
    goto corral_source_split_15686;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4896} $i39 := ldv_undef_int();
    call {:si_unique_call 4897} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_15698;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_15699;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i39;
    goto $bb34_dummy;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_15668;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4890} $p30 := ldv_xmalloc(1464);
    goto corral_source_split_15670;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_15671;

  corral_source_split_15671:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_15672;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.73, $p32);
    goto corral_source_split_15673;

  corral_source_split_15673:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_15674;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_15675;

  corral_source_split_15675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_15695;

  corral_source_split_15695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4895} ldv_free($p38);
    goto corral_source_split_15696;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_15690;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_15691;

  corral_source_split_15691:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.74, $p36);
    goto corral_source_split_15692;

  corral_source_split_15692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4894} ldv_platform_instance_release_4_3($p37, $p31);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_15693;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_15679;

  corral_source_split_15679:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_15636;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_15637;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.72, $p10);
    goto corral_source_split_15638;

  corral_source_split_15638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4877} $i12 := ldv_platform_instance_probe_4_14($p11, $p5);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    call {:si_unique_call 4878} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32($i12);
    goto corral_source_split_15639;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15627;
}



const ldv_ldv_pre_probe_148: ref;

axiom ldv_ldv_pre_probe_148 == $sub.ref(0, 517645);

procedure ldv_ldv_pre_probe_148();
  free requires assertsPassed;
  modifies $M.22, $M.23;



implementation ldv_ldv_pre_probe_148()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15701;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4898} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_15702;

  corral_source_split_15702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4899} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_15703;

  corral_source_split_15703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4900} ldv_pre_probe();
    goto corral_source_split_15704;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_4_14: ref;

axiom ldv_platform_instance_probe_4_14 == $sub.ref(0, 518677);

procedure ldv_platform_instance_probe_4_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_platform_instance_probe_4_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4901} $i2 := devirtbounce.10($p0, $p1);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    call {:si_unique_call 4902} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_15706;

  corral_source_split_15706:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_149: ref;

axiom ldv_ldv_post_probe_149 == $sub.ref(0, 519709);

procedure ldv_ldv_post_probe_149($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.23, assertsPassed;



implementation ldv_ldv_post_probe_149($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4903} {:cexpr "ldv_ldv_post_probe_149:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_15708;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4904} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_15709;

  corral_source_split_15709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4905} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_15710;

  corral_source_split_15710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4906} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 4907} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15711;

  corral_source_split_15711:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;
}



const ldv_platform_instance_release_4_3: ref;

axiom ldv_platform_instance_release_4_3 == $sub.ref(0, 520741);

procedure ldv_platform_instance_release_4_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_platform_instance_release_4_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4908} vslice_dummy_var_86 := devirtbounce.10($p0, $p1);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_15713;

  corral_source_split_15713:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_rtc_class_instance_9_13_11: ref;

axiom ldv_dispatch_register_rtc_class_instance_9_13_11 == $sub.ref(0, 521773);

procedure ldv_dispatch_register_rtc_class_instance_9_13_11();
  free requires assertsPassed;
  modifies $M.22, $M.23, $CurrAddr, $M.1, $M.14, assertsPassed, $M.17;



implementation ldv_dispatch_register_rtc_class_instance_9_13_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15715;

  corral_source_split_15715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4909} $p0 := ldv_xmalloc(4);
    goto corral_source_split_15716;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_15717;

  corral_source_split_15717:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_15718;

  corral_source_split_15718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4910} ldv_rtc_rtc_class_instance_5($p2);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_15719;

  corral_source_split_15719:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;
}



const ldv_rtc_rtc_class_instance_5: ref;

axiom ldv_rtc_rtc_class_instance_5 == $sub.ref(0, 522805);

procedure ldv_rtc_rtc_class_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.1, $M.14, assertsPassed, $M.17;



implementation ldv_rtc_rtc_class_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15721;

  corral_source_split_15721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4911} $i1 := ldv_undef_int();
    call {:si_unique_call 4912} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_15722;

  corral_source_split_15722:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_15723;

  corral_source_split_15723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_15725;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $i6, $i7, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p24 := ldv_rtc_rtc_class_instance_5_loop_$bb4($i3, $p4, $p5, $i6, $i7, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $p23, $p24);
    goto $bb4_last;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4913} ldv_ldv_pre_probe_150();
    goto corral_source_split_15728;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($u21, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_15729;

  corral_source_split_15729:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.75, $p4);
    goto corral_source_split_15730;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_15731;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_15732;

  corral_source_split_15732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_15739;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4916} $i12 := ldv_ldv_post_probe_151($i11);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    call {:si_unique_call 4917} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i12);
    goto corral_source_split_15740;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4918} $i13 := ldv_undef_int();
    call {:si_unique_call 4919} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_15741;

  corral_source_split_15741:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_15742;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_15749;

  corral_source_split_15749:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i12, 0);
    goto corral_source_split_15750;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_15751;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4921} ldv_assume($i18);
    goto corral_source_split_15752;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4924} $i19 := ldv_undef_int();
    call {:si_unique_call 4925} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_15757;

  corral_source_split_15757:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_15758;

  corral_source_split_15758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_15760;

  corral_source_split_15760:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i12;
    goto $bb12_dummy;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_15744;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 0);
    goto corral_source_split_15745;

  corral_source_split_15745:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_15746;

  corral_source_split_15746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4920} ldv_assume($i16);
    goto corral_source_split_15747;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i21, $i22 := ldv_rtc_rtc_class_instance_5_loop_$bb10($i21, $i22);
    goto $bb10_last;

  corral_source_split_15754:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_15755;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i22 == 1);
    goto corral_source_split_15762;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u21, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_15763;

  corral_source_split_15763:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.77, $p23);
    goto corral_source_split_15764;

  corral_source_split_15764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4926} ldv_rtc_class_instance_release_5_2($p24, $u6);
    goto corral_source_split_15765;

  corral_source_split_15765:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb14_dummy;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_15734;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($u21, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_15735;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.76, $p8);
    goto corral_source_split_15736;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4914} $i10 := ldv_rtc_class_instance_probe_5_10($p9, $u6);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    call {:si_unique_call 4915} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32($i10);
    goto corral_source_split_15737;

  corral_source_split_15737:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb7;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4922} $i21 := ldv_undef_int();
    call {:si_unique_call 4923} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_15754;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15727;
}



const ldv_ldv_pre_probe_150: ref;

axiom ldv_ldv_pre_probe_150 == $sub.ref(0, 523837);

procedure ldv_ldv_pre_probe_150();
  free requires assertsPassed;
  modifies $M.22, $M.23;



implementation ldv_ldv_pre_probe_150()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15767;

  corral_source_split_15767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4927} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_15768;

  corral_source_split_15768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4928} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_15769;

  corral_source_split_15769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4929} ldv_pre_probe();
    goto corral_source_split_15770;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    return;
}



const ldv_rtc_class_instance_probe_5_10: ref;

axiom ldv_rtc_class_instance_probe_5_10 == $sub.ref(0, 524869);

procedure ldv_rtc_class_instance_probe_5_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_rtc_class_instance_probe_5_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4930} $i2 := devirtbounce.9($p0, $p1);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    call {:si_unique_call 4931} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_15772;

  corral_source_split_15772:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_151: ref;

axiom ldv_ldv_post_probe_151 == $sub.ref(0, 525901);

procedure ldv_ldv_post_probe_151($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.23, assertsPassed;



implementation ldv_ldv_post_probe_151($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4932} {:cexpr "ldv_ldv_post_probe_151:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_15774;

  corral_source_split_15774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4933} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_15775;

  corral_source_split_15775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4934} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_15776;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4935} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 4936} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15777;

  corral_source_split_15777:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const ldv_rtc_class_instance_release_5_2: ref;

axiom ldv_rtc_class_instance_release_5_2 == $sub.ref(0, 526933);

procedure ldv_rtc_class_instance_release_5_2($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_rtc_class_instance_release_5_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15779;

  corral_source_split_15779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4937} gadget_release($p1);
    goto corral_source_split_15780;

  corral_source_split_15780:
    assume {:verifier.code 0} true;
    return;
}



const ldv_entry_EMGentry_13: ref;

axiom ldv_entry_EMGentry_13 == $sub.ref(0, 527965);

procedure ldv_entry_EMGentry_13($p0: ref);
  free requires assertsPassed;
  modifies $M.22, $M.23, $M.1, $M.14, $CurrAddr, $M.17, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.5, $M.20, $M.3, $M.21, $M.4, $M.16, $M.0;



implementation ldv_entry_EMGentry_13($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15782;

  corral_source_split_15782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4938} $i1 := ldv_EMGentry_init_pch_udc_driver_init_13_15($u22);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    call {:si_unique_call 4939} {:cexpr "ldv_13_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_15783;

  corral_source_split_15783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4940} $i2 := ldv_ldv_post_init_142($i1);
    call {:si_unique_call 4941} {:cexpr "ldv_13_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_15784;

  corral_source_split_15784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4942} $i3 := ldv_undef_int();
    call {:si_unique_call 4943} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_15785;

  corral_source_split_15785:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_15786;

  corral_source_split_15786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_15795;

  corral_source_split_15795:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_15796;

  corral_source_split_15796:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15797;

  corral_source_split_15797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4947} ldv_assume($i8);
    goto corral_source_split_15798;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4948} $i9 := ldv_undef_int();
    call {:si_unique_call 4949} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_15799;

  corral_source_split_15799:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_15800;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4958} ldv_EMGentry_exit_pch_udc_driver_exit_13_2($u23);
    goto corral_source_split_15812;

  corral_source_split_15812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4959} ldv_ldv_check_final_state_144();
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_15813;

  corral_source_split_15813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4960} ldv_stop();
    goto corral_source_split_15814;

  corral_source_split_15814:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_15802;

  corral_source_split_15802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4950} ldv_dispatch_register_rtc_class_instance_9_13_11();
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_15803;

  corral_source_split_15803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4951} ldv_dispatch_register_platform_instance_8_13_10();
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_15804;

  corral_source_split_15804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4952} ldv_dispatch_register_io_instance_10_13_9();
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_15805;

  corral_source_split_15805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4953} ldv_dispatch_register_dummy_resourceless_instance_11_13_8();
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_15806;

  corral_source_split_15806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4954} ldv_dispatch_deregister_rtc_class_instance_9_13_7();
    goto corral_source_split_15807;

  corral_source_split_15807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4955} ldv_dispatch_deregister_platform_instance_8_13_6();
    goto corral_source_split_15808;

  corral_source_split_15808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4956} ldv_dispatch_deregister_io_instance_10_13_5();
    goto corral_source_split_15809;

  corral_source_split_15809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4957} ldv_dispatch_deregister_dummy_resourceless_instance_11_13_4();
    goto corral_source_split_15810;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15788;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_15789;

  corral_source_split_15789:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_15790;

  corral_source_split_15790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4944} ldv_assume($i6);
    goto corral_source_split_15791;

  corral_source_split_15791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4945} ldv_ldv_check_final_state_143();
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_15792;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4946} ldv_stop();
    goto corral_source_split_15793;

  corral_source_split_15793:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_142: ref;

axiom ldv_ldv_post_init_142 == $sub.ref(0, 528997);

procedure ldv_ldv_post_init_142($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.23;



implementation ldv_ldv_post_init_142($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4961} {:cexpr "ldv_ldv_post_init_142:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_15816;

  corral_source_split_15816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4962} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_15817;

  corral_source_split_15817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4963} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_15818;

  corral_source_split_15818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4964} $i1 := ldv_post_init($i0);
    call {:si_unique_call 4965} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15819;

  corral_source_split_15819:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_143: ref;

axiom ldv_ldv_check_final_state_143 == $sub.ref(0, 530029);

procedure ldv_ldv_check_final_state_143();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_143()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15821;

  corral_source_split_15821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4966} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_15822;

  corral_source_split_15822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4967} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_15823;

  corral_source_split_15823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4968} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_15824;

  corral_source_split_15824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4969} ldv_linux_block_request_check_final_state();
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_15825;

  corral_source_split_15825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4970} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_15826;

  corral_source_split_15826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4971} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_15827;

  corral_source_split_15827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4972} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_15828;

  corral_source_split_15828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4973} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_15829;

  corral_source_split_15829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4974} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_15830;

  corral_source_split_15830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4975} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_15831;

  corral_source_split_15831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4976} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_15832;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4977} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_15833;

  corral_source_split_15833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4978} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_15834;

  corral_source_split_15834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4979} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_15835;

  corral_source_split_15835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4980} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_15836;

  corral_source_split_15836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4981} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_15837;

  corral_source_split_15837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4982} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_15838;

  corral_source_split_15838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4983} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_15839;

  corral_source_split_15839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4984} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_15840;

  corral_source_split_15840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4985} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_15841;

  corral_source_split_15841:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_144: ref;

axiom ldv_ldv_check_final_state_144 == $sub.ref(0, 531061);

procedure ldv_ldv_check_final_state_144();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_144()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15843;

  corral_source_split_15843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4986} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_15844;

  corral_source_split_15844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4987} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_15845;

  corral_source_split_15845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4988} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_15846;

  corral_source_split_15846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4989} ldv_linux_block_request_check_final_state();
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_15847;

  corral_source_split_15847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4990} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_15848;

  corral_source_split_15848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4991} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_15849;

  corral_source_split_15849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4992} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_15850;

  corral_source_split_15850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4993} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_15851;

  corral_source_split_15851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4994} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_15852;

  corral_source_split_15852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4995} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_15853;

  corral_source_split_15853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4996} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_15854;

  corral_source_split_15854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4997} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_15855;

  corral_source_split_15855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4998} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_15856;

  corral_source_split_15856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4999} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_15857;

  corral_source_split_15857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5000} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_15858;

  corral_source_split_15858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5001} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_15859;

  corral_source_split_15859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5002} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_15860;

  corral_source_split_15860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5003} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_15861;

  corral_source_split_15861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5004} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_15862;

  corral_source_split_15862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5005} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_15863;

  corral_source_split_15863:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 532093);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15865;

  corral_source_split_15865:
    assume {:verifier.code 0} true;
    $i0 := $M.5;
    goto corral_source_split_15866;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15867;

  corral_source_split_15867:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15868;

  corral_source_split_15868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5006} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_15869;

  corral_source_split_15869:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 533125);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15871;

  corral_source_split_15871:
    assume {:verifier.code 0} true;
    $i0 := $M.78;
    goto corral_source_split_15872;

  corral_source_split_15872:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15873;

  corral_source_split_15873:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15874;

  corral_source_split_15874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5007} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_15875;

  corral_source_split_15875:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 534157);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15877;

  corral_source_split_15877:
    assume {:verifier.code 0} true;
    $i0 := $M.79;
    goto corral_source_split_15878;

  corral_source_split_15878:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15879;

  corral_source_split_15879:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15880;

  corral_source_split_15880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5008} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_15881;

  corral_source_split_15881:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 535189);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15883;

  corral_source_split_15883:
    assume {:verifier.code 0} true;
    $i0 := $M.80;
    goto corral_source_split_15884;

  corral_source_split_15884:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15885;

  corral_source_split_15885:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15886;

  corral_source_split_15886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5009} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_15887;

  corral_source_split_15887:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 536221);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15889;

  corral_source_split_15889:
    assume {:verifier.code 0} true;
    $i0 := $M.81;
    goto corral_source_split_15890;

  corral_source_split_15890:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15891;

  corral_source_split_15891:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15892;

  corral_source_split_15892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5010} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_15893;

  corral_source_split_15893:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 537253);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15895;

  corral_source_split_15895:
    assume {:verifier.code 0} true;
    $i0 := $M.82;
    goto corral_source_split_15896;

  corral_source_split_15896:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15897;

  corral_source_split_15897:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15898;

  corral_source_split_15898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5011} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_15899;

  corral_source_split_15899:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 538285);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15901;

  corral_source_split_15901:
    assume {:verifier.code 0} true;
    $i0 := $M.83;
    goto corral_source_split_15902;

  corral_source_split_15902:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15903;

  corral_source_split_15903:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15904;

  corral_source_split_15904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5012} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_15905;

  corral_source_split_15905:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 539317);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15907;

  corral_source_split_15907:
    assume {:verifier.code 0} true;
    $i0 := $M.84;
    goto corral_source_split_15908;

  corral_source_split_15908:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_15909;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15910;

  corral_source_split_15910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5013} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_15911;

  corral_source_split_15911:
    assume {:verifier.code 0} true;
    $i3 := $M.85;
    goto corral_source_split_15912;

  corral_source_split_15912:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_15913;

  corral_source_split_15913:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_15914;

  corral_source_split_15914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5014} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_15915;

  corral_source_split_15915:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 540349);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15917;

  corral_source_split_15917:
    assume {:verifier.code 0} true;
    $i0 := $M.86;
    goto corral_source_split_15918;

  corral_source_split_15918:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_15919;

  corral_source_split_15919:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15920;

  corral_source_split_15920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5015} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_15921;

  corral_source_split_15921:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 541381);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15923;

  corral_source_split_15923:
    assume {:verifier.code 0} true;
    $i0 := $M.87;
    goto corral_source_split_15924;

  corral_source_split_15924:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15925;

  corral_source_split_15925:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15926;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5016} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_15927;

  corral_source_split_15927:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 542413);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15929;

  corral_source_split_15929:
    assume {:verifier.code 0} true;
    $i0 := $M.88;
    goto corral_source_split_15930;

  corral_source_split_15930:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15931;

  corral_source_split_15931:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15932;

  corral_source_split_15932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5017} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_15933;

  corral_source_split_15933:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 543445);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15935;

  corral_source_split_15935:
    assume {:verifier.code 0} true;
    $i0 := $M.89;
    goto corral_source_split_15936;

  corral_source_split_15936:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15937;

  corral_source_split_15937:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15938;

  corral_source_split_15938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5018} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_15939;

  corral_source_split_15939:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 544477);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15941;

  corral_source_split_15941:
    assume {:verifier.code 0} true;
    $i0 := $M.90;
    goto corral_source_split_15942;

  corral_source_split_15942:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15943;

  corral_source_split_15943:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15944;

  corral_source_split_15944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5019} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_15945;

  corral_source_split_15945:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 545509);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15947;

  corral_source_split_15947:
    assume {:verifier.code 0} true;
    $i0 := $M.91;
    goto corral_source_split_15948;

  corral_source_split_15948:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15949;

  corral_source_split_15949:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_15955;

  corral_source_split_15955:
    assume {:verifier.code 0} true;
    $i3 := $M.91;
    goto corral_source_split_15956;

  corral_source_split_15956:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_15957;

  corral_source_split_15957:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_15951;

  corral_source_split_15951:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_15952;

  corral_source_split_15952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5020} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_15953;

  corral_source_split_15953:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 546541);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15959;

  corral_source_split_15959:
    assume {:verifier.code 0} true;
    $i0 := $M.92;
    goto corral_source_split_15960;

  corral_source_split_15960:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_15961;

  corral_source_split_15961:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_15962;

  corral_source_split_15962:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_15963;

  corral_source_split_15963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5021} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_15964;

  corral_source_split_15964:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 547573);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15966;

  corral_source_split_15966:
    assume {:verifier.code 0} true;
    $i0 := $M.93;
    goto corral_source_split_15967;

  corral_source_split_15967:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15968;

  corral_source_split_15968:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15969;

  corral_source_split_15969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5022} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_15970;

  corral_source_split_15970:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 548605);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15972;

  corral_source_split_15972:
    assume {:verifier.code 0} true;
    $i0 := $M.94;
    goto corral_source_split_15973;

  corral_source_split_15973:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15974;

  corral_source_split_15974:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15975;

  corral_source_split_15975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5023} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_15976;

  corral_source_split_15976:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 549637);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15978;

  corral_source_split_15978:
    assume {:verifier.code 0} true;
    $i0 := $M.95;
    goto corral_source_split_15979;

  corral_source_split_15979:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15980;

  corral_source_split_15980:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15981;

  corral_source_split_15981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5024} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_15982;

  corral_source_split_15982:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 550669);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15984;

  corral_source_split_15984:
    assume {:verifier.code 0} true;
    $i0 := $M.96;
    goto corral_source_split_15985;

  corral_source_split_15985:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15986;

  corral_source_split_15986:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15987;

  corral_source_split_15987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5025} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_15988;

  corral_source_split_15988:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 551701);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15990;

  corral_source_split_15990:
    assume {:verifier.code 0} true;
    $i0 := $M.97;
    goto corral_source_split_15991;

  corral_source_split_15991:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_15992;

  corral_source_split_15992:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15993;

  corral_source_split_15993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5026} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_15994;

  corral_source_split_15994:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 552733);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5027} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_15996;

  corral_source_split_15996:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15997;

  corral_source_split_15997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_15999;

  corral_source_split_15999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5028} __VERIFIER_error();
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_16000;

  corral_source_split_16000:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 553765);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5029} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16002;

  corral_source_split_16002:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16003;

  corral_source_split_16003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16005;

  corral_source_split_16005:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5030} __VERIFIER_error();
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_16006;

  corral_source_split_16006:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 554797);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5031} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16008;

  corral_source_split_16008:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16009;

  corral_source_split_16009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16011;

  corral_source_split_16011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5032} __VERIFIER_error();
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_16012;

  corral_source_split_16012:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 555829);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5033} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16014;

  corral_source_split_16014:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16015;

  corral_source_split_16015:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16017;

  corral_source_split_16017:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5034} __VERIFIER_error();
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_16018;

  corral_source_split_16018:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 556861);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5035} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16020;

  corral_source_split_16020:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16021;

  corral_source_split_16021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16023;

  corral_source_split_16023:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5036} __VERIFIER_error();
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_16024;

  corral_source_split_16024:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 557893);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5037} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16026;

  corral_source_split_16026:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16027;

  corral_source_split_16027:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16029;

  corral_source_split_16029:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5038} __VERIFIER_error();
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_16030;

  corral_source_split_16030:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 558925);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5039} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16032;

  corral_source_split_16032:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16033;

  corral_source_split_16033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16035;

  corral_source_split_16035:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5040} __VERIFIER_error();
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_16036;

  corral_source_split_16036:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 559957);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5041} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16038;

  corral_source_split_16038:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16039;

  corral_source_split_16039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16041;

  corral_source_split_16041:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5042} __VERIFIER_error();
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_16042;

  corral_source_split_16042:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 560989);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5043} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16044;

  corral_source_split_16044:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16045;

  corral_source_split_16045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16047;

  corral_source_split_16047:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5044} __VERIFIER_error();
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_16048;

  corral_source_split_16048:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 562021);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5045} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16050;

  corral_source_split_16050:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16051;

  corral_source_split_16051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16053;

  corral_source_split_16053:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5046} __VERIFIER_error();
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_16054;

  corral_source_split_16054:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 563053);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5047} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16056;

  corral_source_split_16056:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16057;

  corral_source_split_16057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16059;

  corral_source_split_16059:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5048} __VERIFIER_error();
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_16060;

  corral_source_split_16060:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 564085);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5049} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16062;

  corral_source_split_16062:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16063;

  corral_source_split_16063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16065;

  corral_source_split_16065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5050} __VERIFIER_error();
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_16066;

  corral_source_split_16066:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 565117);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5051} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16068;

  corral_source_split_16068:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16069;

  corral_source_split_16069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16071;

  corral_source_split_16071:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5052} __VERIFIER_error();
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_16072;

  corral_source_split_16072:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 566149);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5053} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16074;

  corral_source_split_16074:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16075;

  corral_source_split_16075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16077;

  corral_source_split_16077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5054} __VERIFIER_error();
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_16078;

  corral_source_split_16078:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 567181);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5055} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16080;

  corral_source_split_16080:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16081;

  corral_source_split_16081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16083;

  corral_source_split_16083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5056} __VERIFIER_error();
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_16084;

  corral_source_split_16084:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 568213);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5057} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16086;

  corral_source_split_16086:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16087;

  corral_source_split_16087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16089;

  corral_source_split_16089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5058} __VERIFIER_error();
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_16090;

  corral_source_split_16090:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 569245);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5059} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16092;

  corral_source_split_16092:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16093;

  corral_source_split_16093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16095;

  corral_source_split_16095:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5060} __VERIFIER_error();
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_16096;

  corral_source_split_16096:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 570277);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5061} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16098;

  corral_source_split_16098:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16099;

  corral_source_split_16099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16101;

  corral_source_split_16101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5062} __VERIFIER_error();
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_16102;

  corral_source_split_16102:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 571309);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5063} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16104;

  corral_source_split_16104:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16105;

  corral_source_split_16105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16107;

  corral_source_split_16107:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5064} __VERIFIER_error();
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_16108;

  corral_source_split_16108:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 572341);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5065} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16110;

  corral_source_split_16110:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16111;

  corral_source_split_16111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16113;

  corral_source_split_16113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5066} __VERIFIER_error();
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_16114;

  corral_source_split_16114:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 573373);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5067} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_16116;

  corral_source_split_16116:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16117;

  corral_source_split_16117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_16119;

  corral_source_split_16119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5068} __VERIFIER_error();
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_16120;

  corral_source_split_16120:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 574405);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5069} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_16122;

  corral_source_split_16122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5070} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 5071} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_16123;

  corral_source_split_16123:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 575437);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.5, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.90, $M.87, $M.88, $M.89, $M.92, $M.22, $M.93, $M.94, $M.95, $M.96, $M.23, $M.97, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.91, $M.17, $M.14, $M.0, $M.79, $M.78, $M.1, $M.6, $M.15, $M.135, $CurrAddr, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, assertsPassed, $M.20, $M.3, $M.21, $M.4, $M.16;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 5072} $initialize();
    goto corral_source_split_16125;

  corral_source_split_16125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5073} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_16126;

  corral_source_split_16126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5074} ldv_ldv_initialize_145();
    goto corral_source_split_16127;

  corral_source_split_16127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5075} ldv_entry_EMGentry_13($0.ref);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_16128;

  corral_source_split_16128:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_145: ref;

axiom ldv_ldv_initialize_145 == $sub.ref(0, 576469);

procedure ldv_ldv_initialize_145();
  free requires assertsPassed;



implementation ldv_ldv_initialize_145()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16130;

  corral_source_split_16130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5076} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_16131;

  corral_source_split_16131:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 577501);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_16133;

  corral_source_split_16133:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.1, nr_cpu_ids);
    goto corral_source_split_16134;

  corral_source_split_16134:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_16135;

  corral_source_split_16135:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_16136;

  corral_source_split_16136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5077} ldv_assume($i2);
    goto corral_source_split_16137;

  corral_source_split_16137:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 578533);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5078} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_16139;

  corral_source_split_16139:
    assume {:verifier.code 1} true;
    goto corral_source_split_16140;

  corral_source_split_16140:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_16141;

  corral_source_split_16141:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 579565);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 580597);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 581629);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16143;

  corral_source_split_16143:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_16144;

  corral_source_split_16144:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 582661);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 583693);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 584725);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 585757);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 586789);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 587821);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 588853);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 589885);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 590917);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 591949);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16146;

  corral_source_split_16146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5079} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 5080} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5081} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16147;

  corral_source_split_16147:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_16148;

  corral_source_split_16148:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16152;

  corral_source_split_16152:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_16153;

  corral_source_split_16153:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5082} __VERIFIER_assume($i4);
    goto corral_source_split_16154;

  corral_source_split_16154:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_16150;

  corral_source_split_16150:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 592981);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 594013);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 595045);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 596077);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16156;

  corral_source_split_16156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5083} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 5084} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5085} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16157;

  corral_source_split_16157:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5086} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 5087} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 5088} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_16158;

  corral_source_split_16158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5089} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 5090} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 5091} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_16159;

  corral_source_split_16159:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_16160;

  corral_source_split_16160:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16165;

  corral_source_split_16165:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_16166;

  corral_source_split_16166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5092} __VERIFIER_assume($i7);
    goto corral_source_split_16167;

  corral_source_split_16167:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_16168;

  corral_source_split_16168:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_16174;

  corral_source_split_16174:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_16175;

  corral_source_split_16175:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5093} __VERIFIER_assume($i11);
    goto corral_source_split_16176;

  corral_source_split_16176:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_16172;

  corral_source_split_16172:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16162;

  corral_source_split_16162:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_16163;

  corral_source_split_16163:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_16170;

  corral_source_split_16170:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 597109);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 598141);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 599173);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 600205);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 601237);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 602269);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16178;

  corral_source_split_16178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5094} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 5095} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 5096} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_16179;

  corral_source_split_16179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5097} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 5098} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 5099} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_16180;

  corral_source_split_16180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5100} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 5101} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 5102} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_16181;

  corral_source_split_16181:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_16182;

  corral_source_split_16182:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_16187;

  corral_source_split_16187:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_16188;

  corral_source_split_16188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5103} __VERIFIER_assume($i7);
    goto corral_source_split_16189;

  corral_source_split_16189:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_16190;

  corral_source_split_16190:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_16196;

  corral_source_split_16196:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_16197;

  corral_source_split_16197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5104} __VERIFIER_assume($i11);
    goto corral_source_split_16198;

  corral_source_split_16198:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_16194;

  corral_source_split_16194:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16184;

  corral_source_split_16184:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_16185;

  corral_source_split_16185:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_16192;

  corral_source_split_16192:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 603301);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 604333);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 605365);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 606397);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 607429);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 608461);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 609493);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 610525);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 611557);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16200;

  corral_source_split_16200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5105} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 5106} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_16201;

  corral_source_split_16201:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_16202;

  corral_source_split_16202:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 5107} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_16203;

  corral_source_split_16203:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_16204;

  corral_source_split_16204:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_16205;

  corral_source_split_16205:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_16206;

  corral_source_split_16206:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_16213;

  corral_source_split_16213:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_16214;

  corral_source_split_16214:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_16215;

  corral_source_split_16215:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_16216;

  corral_source_split_16216:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_16208;

  corral_source_split_16208:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_16209;

  corral_source_split_16209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5108} __VERIFIER_assume($i10);
    goto corral_source_split_16210;

  corral_source_split_16210:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_16211;

  corral_source_split_16211:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 612589);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16218;

  corral_source_split_16218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5109} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 5110} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 5111} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_16219;

  corral_source_split_16219:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 613621);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16221;

  corral_source_split_16221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5112} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 5113} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 5114} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_16222;

  corral_source_split_16222:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 614653);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16224;

  corral_source_split_16224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5115} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 5116} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_16225;

  corral_source_split_16225:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 615685);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 616717);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 5117} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 5118} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 617749);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 618781);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_16227;

  corral_source_split_16227:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_16228;

  corral_source_split_16228:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 619813);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5119} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 5120} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_16230;

  corral_source_split_16230:
    assume {:verifier.code 1} true;
    call {:si_unique_call 5121} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 5122} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_16231;

  corral_source_split_16231:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_16232;

  corral_source_split_16232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_16236;

  corral_source_split_16236:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_16237;

  corral_source_split_16237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5123} $p6 := malloc($i5);
    goto corral_source_split_16238;

  corral_source_split_16238:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_16239;

  corral_source_split_16239:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.1;
    call {:si_unique_call 5124} cmdloc_dummy_var_24 := $memset.i8(cmdloc_dummy_var_23, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.1 := cmdloc_dummy_var_24;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_16241;

  corral_source_split_16241:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_16234;

  corral_source_split_16234:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 620845);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 621877);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.13, $M.5, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.90, $M.87, $M.88, $M.89, $M.92, $M.22, $M.93, $M.94, $M.95, $M.96, $M.23, $M.97, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.91, $M.17, $M.14, $M.0, $M.79, $M.78, $M.1, $M.6, $M.15, $M.135;



implementation __SMACK_static_init()
{

  $bb0:
    $M.13 := 1;
    call {:si_unique_call 5125} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.5 := 0;
    call {:si_unique_call 5126} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.80 := 0;
    call {:si_unique_call 5127} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 5128} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 5129} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 5130} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.84 := 1;
    call {:si_unique_call 5131} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.85 := 1;
    call {:si_unique_call 5132} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.86 := 1;
    call {:si_unique_call 5133} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.90 := 0;
    call {:si_unique_call 5134} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 5135} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.88 := 0;
    call {:si_unique_call 5136} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.89 := 0;
    call {:si_unique_call 5137} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 5138} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.22 := 0;
    call {:si_unique_call 5139} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.93 := 0;
    call {:si_unique_call 5140} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 5141} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 5142} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    call {:si_unique_call 5143} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 5144} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 5145} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 5146} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 5147} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 5148} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 5149} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    $M.102 := $store.i32($M.102, __mod_pci__pch_udc_pcidev_id_device_table, 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.105 := $store.i32($M.105, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.105 := $store.i32($M.105, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.105 := $store.i32($M.105, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(20, 1)), 0);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.105 := $store.i32($M.105, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(20, 1)), 0);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i32($M.102, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.104 := $store.i32($M.104, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.105 := $store.i32($M.105, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.106 := $store.i32($M.106, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.107 := $store.i32($M.107, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.108 := $store.i64($M.108, $add.ref($add.ref($add.ref(__mod_pci__pch_udc_pcidev_id_device_table, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.91 := 0;
    call {:si_unique_call 5150} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 5151} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    $M.17 := 1;
    call {:si_unique_call 5152} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_udc_stall_spinlock"} boogie_si_record_i32(1);
    call {:si_unique_call 5153} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 5154} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 5155} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    $M.14 := 1;
    call {:si_unique_call 5156} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_pch_udc_dev"} boogie_si_record_i32(1);
    call {:si_unique_call 5157} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 5158} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 5159} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 5160} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.0 := 0;
    call {:si_unique_call 5161} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.79 := 0;
    call {:si_unique_call 5162} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 5163} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.1 := $store.ref($M.1, pch_udc_ops, pch_udc_pcd_get_frame);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), pch_udc_pcd_wakeup);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), pch_udc_pcd_selfpowered);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), pch_udc_pcd_vbus_session);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), pch_udc_pcd_vbus_draw);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), pch_udc_pcd_pullup);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), pch_udc_start);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), pch_udc_stop);
    $M.6 := $sub.i32(0, 1);
    call {:si_unique_call 5164} {:cexpr "vbus_gpio_port"} boogie_si_record_i32($sub.i32(0, 1));
    $M.1 := $store.ref($M.1, pch_udc_ep_ops, pch_udc_pcd_ep_enable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(8, 1)), pch_udc_pcd_ep_disable);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(16, 1)), pch_udc_alloc_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(24, 1)), pch_udc_free_request);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(32, 1)), pch_udc_pcd_queue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(40, 1)), pch_udc_pcd_dequeue);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(48, 1)), pch_udc_pcd_set_halt);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(56, 1)), pch_udc_pcd_set_wedge);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_ep_ops, $mul.ref(0, 80)), $mul.ref(72, 1)), pch_udc_pcd_fifo_flush);
    $M.1 := $store.i8($M.1, ep0_string, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(2, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(ep0_string, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i32($M.1, udc_stall_spinlock, 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.30);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref(udc_stall_spinlock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.15 := 0;
    call {:si_unique_call 5165} {:cexpr "speed_fs"} boogie_si_record_i8(0);
    $M.1 := $store.i32($M.1, pch_udc_pcidev_id, 32902);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(4, 1)), 2361);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(16, 1)), 787454);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(0, 1)), 32902);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(4, 1)), 34824);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(16, 1)), 787454);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(0, 1)), 4315);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(4, 1)), 32797);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(16, 1)), 787454);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(0, 1)), 4315);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(4, 1)), 34824);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(16, 1)), 787454);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(20, 1)), $sub.i32(0, 1));
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(20, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref(pch_udc_pcidev_id, $mul.ref(0, 160)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.1 := $store.ref($M.1, pch_udc_driver, $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), .str.1);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), pch_udc_pcidev_id);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), pch_udc_probe);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), pch_udc_remove);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), pch_udc_suspend);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), pch_udc_resume);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), pch_udc_shutdown);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i8($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.1 := $store.i32($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.1 := $store.i64($M.1, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.1 := $store.ref($M.1, $add.ref($add.ref($add.ref($add.ref(pch_udc_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.1 := $store.i8($M.1, .str.1, 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(2, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.1, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.135 := $store.i8($M.135, .str.75, 118);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(1, 1)), 98);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(2, 1)), 117);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(3, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(4, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(5, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(6, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(8, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(9, 1)), 99);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(10, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(.str.75, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.1 := $store.i8($M.1, .str.39, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(2, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.39, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.40, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 6)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.40, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.41, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.41, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.42, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 6)), $mul.ref(2, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.42, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.43, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(2, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.43, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.44, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 6)), $mul.ref(2, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.44, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.45, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(2, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.45, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.46, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 6)), $mul.ref(2, 1)), 52);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.46, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.47, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 7)), $mul.ref(2, 1)), 52);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.47, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.48, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 6)), $mul.ref(2, 1)), 53);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.48, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.49, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(2, 1)), 53);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.49, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.50, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(2, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.50, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.51, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(2, 1)), 54);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.51, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.52, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.52, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.52, $mul.ref(0, 6)), $mul.ref(2, 1)), 55);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.52, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.52, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.52, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.53, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(2, 1)), 55);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.53, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.54, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.54, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.54, $mul.ref(0, 6)), $mul.ref(2, 1)), 56);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.54, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.54, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.54, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.55, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(2, 1)), 56);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.55, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.56, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.56, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.56, $mul.ref(0, 6)), $mul.ref(2, 1)), 57);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.56, $mul.ref(0, 6)), $mul.ref(3, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.56, $mul.ref(0, 6)), $mul.ref(4, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.56, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.1 := $store.i8($M.1, .str.57, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(2, 1)), 57);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(3, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.57, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.58, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(3, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.59, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.59, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.60, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 7)), $mul.ref(3, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.60, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.61, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(3, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.62, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 7)), $mul.ref(3, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.62, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.63, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(3, 1)), 50);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.63, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.64, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(3, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.64, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.65, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(3, 1)), 51);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.65, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.66, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.66, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.66, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.66, $mul.ref(0, 7)), $mul.ref(3, 1)), 52);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.66, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.66, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.66, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.67, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(3, 1)), 52);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.67, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.68, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 7)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 7)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 7)), $mul.ref(3, 1)), 53);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 7)), $mul.ref(4, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 7)), $mul.ref(5, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.68, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.1 := $store.i8($M.1, .str.69, 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(1, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(2, 1)), 49);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(3, 1)), 53);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.69, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.1 := $store.i8($M.1, .str.30, 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(1, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(2, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(5, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(7, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(9, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(10, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(11, 1)), 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(12, 1)), 105);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(15, 1)), 111);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(16, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(17, 1)), 107);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.30, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.1 := $store.i8($M.1, .str.27, 112);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(1, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(2, 1)), 104);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(4, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(5, 1)), 100);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(6, 1)), 99);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(7, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(8, 1)), 102);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(15, 1)), 113);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(16, 1)), 117);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.1 := $store.i8($M.1, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    call {:si_unique_call 5166} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 622909);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 623941);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 624973);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 626005);

procedure devirtbounce.3(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.1, $CurrAddr, $M.14, assertsPassed, $M.5, $M.16, $M.0;



implementation devirtbounce.3(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(pch_vbus_gpio_irq, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(pch_udc_isr, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 5167} $i1 := pch_udc_isr(arg, arg1);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    $r := $i1;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 5168} $i2 := pch_vbus_gpio_irq(arg, arg1);
    $r := $i2;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 627037);

procedure devirtbounce.4(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.5, $CurrAddr, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(pch_udc_pcd_fifo_flush, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(pch_vbus_gpio_work_rise, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(pch_vbus_gpio_work_fall, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(gadget_release, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i9 == 1);
    $i8 := $eq.ref(pch_udc_shutdown, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i8 == 1);
    $i7 := $eq.ref(pch_udc_remove, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5169} pch_udc_remove($p1);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5170} pch_udc_shutdown($p2);
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5171} gadget_release($p3);
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5172} pch_vbus_gpio_work_fall($p4);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5173} pch_vbus_gpio_work_rise($p5);
    return;

  $bb7:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5174} pch_udc_pcd_fifo_flush($p6);
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 628069);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $CurrAddr, $M.5, $M.16, assertsPassed, $M.0, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(pch_udc_start, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_pcd_dequeue, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_udc_pcd_ep_enable, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i13 == 1);
    $i12 := $eq.ref(pch_udc_probe, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 5175} $i3 := pch_udc_probe($p1, $p2);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    $r := $i3;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 5176} $i6 := pch_udc_pcd_ep_enable($p4, $p5);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    $r := $i6;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 5177} $i9 := pch_udc_pcd_dequeue($p7, $p8);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    $r := $i9;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 5178} $i11 := pch_udc_start(arg, $p10);
    $r := $i11;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 629101);

procedure devirtbounce.6(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 630133);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.1, $M.4, $M.17, $M.14, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $CurrAddr, assertsPassed, $M.5;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i17 := $eq.ref(pch_udc_pcd_pullup, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(pch_udc_pcd_vbus_draw, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_udc_pcd_vbus_session, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_pcd_selfpowered, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_udc_pcd_set_halt, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(pch_udc_suspend, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    call {:si_unique_call 5179} $i1 := pch_udc_suspend(arg, arg1);
    $r := $i1;
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5180} $i3 := pch_udc_pcd_set_halt($p2, arg1);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    $r := $i3;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5181} $i5 := pch_udc_pcd_selfpowered($p4, arg1);
    $r := $i5;
    return;

  $bb5:
    assume $i15 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5182} $i7 := pch_udc_pcd_vbus_session($p6, arg1);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    $r := $i7;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5183} $i9 := pch_udc_pcd_vbus_draw($p8, arg1);
    $r := $i9;
    return;

  $bb7:
    assume $i17 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5184} $i11 := pch_udc_pcd_pullup($p10, arg1);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    $r := $i11;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 631165);

procedure devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i17 := $eq.ref(pch_udc_stop, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(pch_udc_pcd_wakeup, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_udc_pcd_get_frame, $p0);
    assume {:branchcond $i15} true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_pcd_set_wedge, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_udc_pcd_ep_disable, $p0);
    assume {:branchcond $i13} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i13 == 1);
    $i12 := $eq.ref(pch_udc_resume, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    call {:si_unique_call 5185} $i1 := pch_udc_resume(arg);
    $r := $i1;
    return;

  $bb3:
    assume $i13 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5186} $i3 := pch_udc_pcd_ep_disable($p2);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    $r := $i3;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i14 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5187} $i5 := pch_udc_pcd_set_wedge($p4);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    $r := $i5;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i15 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5188} $i7 := pch_udc_pcd_get_frame($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i16 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5189} $i9 := pch_udc_pcd_wakeup($p8);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    $r := $i9;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5190} $i11 := pch_udc_stop($p10);
    $r := $i11;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 632197);

procedure devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(pch_udc_pcd_ep_disable, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(pch_udc_stop, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(pch_udc_pcd_wakeup, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_udc_pcd_get_frame, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_pcd_set_wedge, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_udc_resume, $p0);
    assume {:branchcond $i13} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5191} $i2 := pch_udc_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5192} $i4 := pch_udc_pcd_set_wedge($p3);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    $r := $i4;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5193} $i6 := pch_udc_pcd_get_frame($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5194} $i8 := pch_udc_pcd_wakeup($p7);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    $r := $i8;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5195} $i10 := pch_udc_stop($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5196} $i12 := pch_udc_pcd_ep_disable($p11);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    $r := $i12;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 633229);

procedure devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i18 := $eq.ref(pch_udc_pcd_ep_disable, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(pch_udc_stop, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(pch_udc_pcd_wakeup, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(pch_udc_pcd_get_frame, $p0);
    assume {:branchcond $i15} true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i15 == 1);
    $i14 := $eq.ref(pch_udc_pcd_set_wedge, $p0);
    assume true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(pch_udc_resume, $p0);
    assume {:branchcond $i13} true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5197} $i2 := pch_udc_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i14 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5198} $i4 := pch_udc_pcd_set_wedge($p3);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    $r := $i4;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5199} $i6 := pch_udc_pcd_get_frame($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i16 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5200} $i8 := pch_udc_pcd_wakeup($p7);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    $r := $i8;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5201} $i10 := pch_udc_stop($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i18 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 5202} $i12 := pch_udc_pcd_ep_disable($p11);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    $r := $i12;
    return;

  SeqInstr_1027:
    assume !assertsPassed;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u3: i64;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.13, $M.5, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.90, $M.87, $M.88, $M.89, $M.92, $M.22, $M.93, $M.94, $M.95, $M.96, $M.23, $M.97, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.91, $M.17, $M.14, $M.0, $M.79, $M.78, $M.1, $M.6, $M.15, $M.135, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 5203} __SMACK_static_init();
    call {:si_unique_call 5204} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.13, $M.5, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.90, $M.87, $M.88, $M.89, $M.92, $M.22, $M.93, $M.94, $M.95, $M.96, $M.23, $M.97, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.91, $M.17, $M.14, $M.0, $M.79, $M.78, $M.1, $M.6, $M.15, $M.135, $CurrAddr, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.20, $M.3, $M.21, $M.4, $M.16;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation {:SIextraRecBound 3} pch_udc_isr_loop_$bb31(in_$p3: ref, in_$i5: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i40: i32) returns (out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i40: i32)
{

  entry:
    out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i40 := in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i40;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_695;

  $bb36:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := out_$i44;
    goto $bb36_dummy;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i45 := $sle.i32(out_$i44, 3);
    goto corral_source_split_706;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i40, 1);
    call {:si_unique_call 200} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_705;

  $bb34:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} pch_udc_postsvc_epinters(in_$p3, out_$i40);
    goto corral_source_split_703;

  SeqInstr_48:
    goto corral_source_split_702;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} pch_udc_svc_data_in(in_$p3, out_$i40);
    goto SeqInstr_47;

  $bb33:
    assume out_$i43 == 1;
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_699;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(in_$i5, out_$i41);
    goto corral_source_split_698;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i41 := $shl.i32(1, out_$i40);
    goto corral_source_split_697;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i40 := pch_udc_isr_loop_$bb31(in_$p3, in_$i5, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i40);
    return;

  exit:
    return;
}



procedure pch_udc_isr_loop_$bb31(in_$p3: ref, in_$i5: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$i44: i32, in_$i45: i1, in_$i40: i32) returns (out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$i44: i32, out_$i45: i1, out_$i40: i32);
  modifies $M.1, $M.14, assertsPassed;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation pch_udc_start_rxrequest_loop_$bb4(in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27 := in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$p14 := out_$p18;
    goto $bb8_dummy;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i25, 134217728);
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.1, out_$p24);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p23, out_$i22);
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 1073741823);
    goto corral_source_split_2222;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.1, out_$p20);
    goto corral_source_split_2221;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p19, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$p19 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} out_$p18 := phys_to_virt(out_$i17);
    goto corral_source_split_2218;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.1, out_$p15);
    goto corral_source_split_2216;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2215;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27 := pch_udc_start_rxrequest_loop_$bb4(out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure pch_udc_start_rxrequest_loop_$bb4(in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i1);
  modifies $M.1;



implementation pch_udc_complete_receiver_loop_$bb11(in_$p9: ref, in_$p28: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p60: ref, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1) returns (out_$p28: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p60: ref, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1)
{

  entry:
    out_$p28, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68 := in_$p28, in_$p40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb24:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$p28 := out_$p63;
    goto $bb24_dummy;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(out_$i67, 0);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i66, 805306368);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.1, out_$p65);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p64, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} out_$p63 := phys_to_virt(out_$i62);
    goto corral_source_split_2338;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i32.i64(out_$i61);
    call {:si_unique_call 535} {:cexpr "addr"} boogie_si_record_i64(out_$i62);
    goto corral_source_split_2337;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.1, out_$p60);
    goto corral_source_split_2336;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2335;

  $bb22:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i52, out_$i55);
    goto corral_source_split_2327;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_2326;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.1, out_$p53);
    goto corral_source_split_2325;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p9, $mul.ref($sub.ref(0, 112), 152)), $mul.ref(104, 1));
    goto corral_source_split_2324;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_2323;

  $bb15:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb17:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    out_$p48 := out_$p28;
    assume true;
    goto $bb17;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_2314;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    out_$i46 := $and.i32(out_$i45, 134217728);
    goto corral_source_split_2313;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.1, out_$p44);
    goto corral_source_split_2312;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2311;

  $bb14:
    assume out_$i43 == 1;
    goto corral_source_split_2310;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, $sub.i32(0, 2147483648));
    goto corral_source_split_2308;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, $sub.i32(0, 1073741824));
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.1, out_$p40);
    goto corral_source_split_2306;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p28, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2305;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p28, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68 := pch_udc_complete_receiver_loop_$bb11(in_$p9, out_$p28, out_$p40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68);
    return;

  exit:
    return;
}



procedure pch_udc_complete_receiver_loop_$bb11(in_$p9: ref, in_$p28: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p60: ref, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1) returns (out_$p28: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p60: ref, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1);



implementation pch_udc_ep_clear_nak_loop_$bb25(in_$p0: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i32: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i36: i32) returns (out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i32: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i36: i32)
{

  entry:
    out_$i33, out_$i34, out_$i35, out_$i32, out_$i37, out_$i38, out_$i39, out_$i36 := in_$i33, in_$i34, in_$i35, in_$i32, in_$i37, in_$i38, in_$i39, in_$i36;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_2665;

  $bb27:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := out_$i37;
    goto $bb27_dummy;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i37;
    assume true;
    goto $bb27;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_2673;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i33, 64);
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} out_$i33 := pch_udc_read_ep_control(in_$p0);
    call {:si_unique_call 602} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_2671;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} __const_udelay(21475);
    goto corral_source_split_2670;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} pch_udc_ep_bit_set(in_$p0, 0, 256);
    goto corral_source_split_2669;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume out_$i38 == 1;
    goto corral_source_split_2677;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i39 := out_$i37;
    assume true;
    goto $bb29;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, 0);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i32, 1);
    call {:si_unique_call 598} {:cexpr "loopcnt"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_2666;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$i35, out_$i32, out_$i37, out_$i38, out_$i39, out_$i36 := pch_udc_ep_clear_nak_loop_$bb25(in_$p0, out_$i33, out_$i34, out_$i35, out_$i32, out_$i37, out_$i38, out_$i39, out_$i36);
    return;

  exit:
    return;
}



procedure pch_udc_ep_clear_nak_loop_$bb25(in_$p0: ref, in_$i33: i32, in_$i34: i32, in_$i35: i1, in_$i32: i32, in_$i37: i32, in_$i38: i1, in_$i39: i32, in_$i36: i32) returns (out_$i33: i32, out_$i34: i32, out_$i35: i1, out_$i32: i32, out_$i37: i32, out_$i38: i1, out_$i39: i32, out_$i36: i32);



implementation pch_udc_ep_clear_nak_loop_$bb10(in_$p0: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i15: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i19: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i15: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i19: i32)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$i15, out_$i20, out_$i21, out_$i22, out_$i19 := in_$i16, in_$i17, in_$i18, in_$i15, in_$i20, in_$i21, in_$i22, in_$i19;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2635;

  $bb12:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i20;
    goto $bb12_dummy;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i20;
    assume true;
    goto $bb12;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i17, 0);
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i32(out_$i16, 256);
    goto corral_source_split_2641;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} out_$i16 := pch_udc_read_ep_status(in_$p0);
    call {:si_unique_call 594} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_2640;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __const_udelay(21475);
    goto corral_source_split_2639;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume out_$i21 == 1;
    goto corral_source_split_2646;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    assume true;
    goto $bb14;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$i20 := $sub.i32(out_$i15, 1);
    call {:si_unique_call 591} {:cexpr "loopcnt"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_2636;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$i15, out_$i20, out_$i21, out_$i22, out_$i19 := pch_udc_ep_clear_nak_loop_$bb10(in_$p0, out_$i16, out_$i17, out_$i18, out_$i15, out_$i20, out_$i21, out_$i22, out_$i19);
    return;

  exit:
    return;
}



procedure pch_udc_ep_clear_nak_loop_$bb10(in_$p0: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i15: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i19: i32) returns (out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i15: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i19: i32);



implementation pch_udc_start_next_txrequest_loop_$bb17(in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1) returns (out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1)
{

  entry:
    out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48 := in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$p35 := out_$p39;
    goto $bb21_dummy;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_2903;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 134217728);
    goto corral_source_split_2902;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.1, out_$p45);
    goto corral_source_split_2901;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2900;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p44, out_$i43);
    goto corral_source_split_2899;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2898;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 1073741823);
    goto corral_source_split_2897;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.1, out_$p41);
    goto corral_source_split_2896;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p40, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2895;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_2894;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} out_$p39 := phys_to_virt(out_$i38);
    goto corral_source_split_2893;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i37);
    goto corral_source_split_2892;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.1, out_$p36);
    goto corral_source_split_2891;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p35, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2890;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48 := pch_udc_start_next_txrequest_loop_$bb17(out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48);
    return;

  exit:
    return;
}



procedure pch_udc_start_next_txrequest_loop_$bb17(in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i32, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1) returns (out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i32, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1);
  modifies $M.1;



implementation pch_udc_wait_ep_stall_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := in_$i6, in_$i7, in_$i8, in_$i5, in_$i10, in_$i11, in_$i12, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2912;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_2919;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, 1);
    goto corral_source_split_2918;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} out_$i6 := pch_udc_read_ep_control(in_$p0);
    call {:si_unique_call 637} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_2917;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __const_udelay(21475);
    goto corral_source_split_2916;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_2923;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb8;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_2914;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 634} {:cexpr "count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2913;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := pch_udc_wait_ep_stall_loop_$bb4(in_$p0, out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9);
    return;

  exit:
    return;
}



procedure pch_udc_wait_ep_stall_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32);



implementation pch_udc_csr_busy_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := in_$i6, in_$i7, in_$i8, in_$i5, in_$i10, in_$i11, in_$i12, in_$i9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3772;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb6_dummy;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i10;
    assume true;
    goto $bb6;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i32(out_$i7, 0);
    goto corral_source_split_3779;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    out_$i7 := $and.i32(out_$i6, 1);
    goto corral_source_split_3778;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_$i6 := pch_udc_readl(in_$p0, 1264);
    call {:si_unique_call 896} {:cexpr "tmp"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_3777;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} cpu_relax();
    goto corral_source_split_3776;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_3783;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i10;
    assume true;
    goto $bb8;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 0);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i10 := $sub.i32(out_$i5, 1);
    call {:si_unique_call 893} {:cexpr "count"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_3773;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9 := pch_udc_csr_busy_loop_$bb4(in_$p0, out_$i6, out_$i7, out_$i8, out_$i5, out_$i10, out_$i11, out_$i12, out_$i9);
    return;

  exit:
    return;
}



procedure pch_udc_csr_busy_loop_$bb4(in_$p0: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i5: i32, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i9: i32) returns (out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i5: i32, out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i9: i32);



implementation empty_req_queue_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14 := in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i14 == 1;
    goto $bb6_dummy;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_$i13 := list_empty(in_$p5);
    call {:si_unique_call 937} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_3934;

  SeqInstr_246:
    goto corral_source_split_3933;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} complete_req(in_$p0, out_$p12, $sub.i32(0, 108));
    goto SeqInstr_245;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p11, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.1, out_$p9);
    goto corral_source_split_3930;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 144)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_3929;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14 := empty_req_queue_loop_$bb4(in_$p0, in_$p5, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14);
    return;

  exit:
    return;
}



procedure empty_req_queue_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i1) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i1);
  modifies $M.1, $M.14, assertsPassed;



implementation pch_udc_pcd_dequeue_loop_$bb16(in_$p1: ref, in_$i27: i64, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p29: ref) returns (out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p29: ref)
{

  entry:
    out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p29 := in_$p30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p29;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_13971;

  $bb25:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$p29 := out_$p43;
    goto $bb25_dummy;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, in_$i27);
    goto corral_source_split_13998;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_13997;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p42, $mul.ref($sub.ref(0, 112), 152));
    goto corral_source_split_13996;

  corral_source_split_13994:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_13995;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_13994;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(out_$p29, $mul.ref(0, 152)), $mul.ref(112, 1)), $mul.ref(0, 1));
    goto corral_source_split_13993;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    out_$p34 := out_$p29;
    assume true;
    goto $bb19;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i64(out_$i31, out_$i32);
    goto corral_source_split_13976;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    out_$i32 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_13975;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_13974;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_13973;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p29 := pch_udc_pcd_dequeue_loop_$bb16(in_$p1, in_$i27, out_$p30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p29);
    return;

  exit:
    return;
}



procedure pch_udc_pcd_dequeue_loop_$bb16(in_$p1: ref, in_$i27: i64, in_$p30: ref, in_$i31: i64, in_$i32: i64, in_$i33: i1, in_$p34: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$p29: ref) returns (out_$p30: ref, out_$i31: i64, out_$i32: i64, out_$i33: i1, out_$p34: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$p29: ref);



implementation pch_udc_create_dma_chain_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i32, in_$p4: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$i58: i64, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i32) returns (out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$i58: i64, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i32)
{

  entry:
    out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62 := in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p39, in_$i40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 4554} {:cexpr "pch_udc_create_dma_chain:arg:_min1"} boogie_si_record_i64(in_$i2);
    goto corral_source_split_14351;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    out_$p29, out_$i30, out_$i31, out_$i32 := out_$p45, out_$i61, out_$i50, out_$i62;
    goto corral_source_split_14409_dummy;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i32, 1);
    call {:si_unique_call 4558} {:cexpr "len"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_14409;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    out_$i61 := $sub.i64(out_$i30, in_$i2);
    call {:si_unique_call 4557} {:cexpr "bytes"} boogie_si_record_i64(out_$i61);
    goto corral_source_split_14408;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p60, out_$i59);
    goto corral_source_split_14407;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p29, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14406;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i64.i32(out_$i58);
    goto corral_source_split_14405;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    out_$i58 := $load.i64($M.18, in_$p4);
    goto corral_source_split_14404;

  corral_source_split_14402:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p57, out_$i56);
    goto corral_source_split_14403;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p46, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14402;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i32(out_$i54, out_$i55);
    goto corral_source_split_14401;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i64.i32(out_$i50);
    goto corral_source_split_14400;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.1, out_$p53);
    goto corral_source_split_14399;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_14398;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_14397;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p1, $mul.ref(0, 152)), $mul.ref(96, 1));
    goto corral_source_split_14396;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i64(out_$i31, in_$i2);
    call {:si_unique_call 4556} {:cexpr "i"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_14395;

  $bb16:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i32;
    assume true;
    goto $bb16;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i64(out_$i47, 0);
    goto corral_source_split_14389;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_14388;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_14387;

  SeqInstr_354:
    goto corral_source_split_14386;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4555} out_$p45 := ldv_dma_pool_alloc_106(out_$p44, in_$i3, in_$p4);
    goto SeqInstr_353;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.1, out_$p43);
    goto corral_source_split_14385;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_14384;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.1, out_$p41);
    goto corral_source_split_14383;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_14382;

  $bb12:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    out_$p39, out_$i40 := out_$p29, out_$i32;
    assume true;
    goto $bb12;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    out_$i38 := $ule.i64(out_$i30, in_$i2);
    goto corral_source_split_14363;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p37, out_$i36);
    goto corral_source_split_14362;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p29, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14361;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    out_$i36 := $or.i32(out_$i35, $sub.i32(0, 1073741824));
    goto corral_source_split_14360;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i64.i32(out_$i34);
    goto corral_source_split_14359;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_14358;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i30;
    goto $bb10;

  corral_source_split_14354:
    assume {:verifier.code 0} true;
    out_$i34 := in_$i2;
    goto $bb10;

  $bb8:
    assume out_$i33 == 1;
    goto corral_source_split_14354;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    out_$i33 := $ult.i64(in_$i2, out_$i30);
    goto corral_source_split_14352;

  $bb9:
    assume !(out_$i33 == 1);
    goto corral_source_split_14356;

  corral_source_split_14409_dummy:
    call {:si_unique_call 1} out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62 := pch_udc_create_dma_chain_loop_$bb7(in_$p0, in_$p1, in_$i2, in_$i3, in_$p4, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$i40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62);
    return;

  exit:
    return;
}



procedure pch_udc_create_dma_chain_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i3: i32, in_$p4: ref, in_$p29: ref, in_$i30: i64, in_$i31: i64, in_$i32: i32, in_$i33: i1, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$p37: ref, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$p57: ref, in_$i58: i64, in_$i59: i32, in_$p60: ref, in_$i61: i64, in_$i62: i32) returns (out_$p29: ref, out_$i30: i64, out_$i31: i64, out_$i32: i32, out_$i33: i1, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$p37: ref, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$p57: ref, out_$i58: i64, out_$i59: i32, out_$p60: ref, out_$i61: i64, out_$i62: i32);
  modifies $M.1, assertsPassed;



implementation pch_udc_free_dma_chain_loop_$bb4(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i11: i64, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i11: i64, out_$i12: i32)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i11, out_$i12 := in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i11, in_$i12;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14437;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12 := out_$i17, out_$i22;
    goto $bb6_dummy;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    out_$i23 := $ugt.i32(out_$i22, 1);
    goto corral_source_split_14451;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 4565} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_14450;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, out_$p21, 0);
    goto corral_source_split_14449;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14448;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4564} dma_pool_free(out_$p19, out_$p20, out_$i11);
    goto corral_source_split_14447;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_14446;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.1, out_$p18);
    goto corral_source_split_14445;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 6512)), $mul.ref(6272, 1));
    goto corral_source_split_14444;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    call {:si_unique_call 4563} {:cexpr "addr2"} boogie_si_record_i64(out_$i17);
    goto corral_source_split_14443;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.1, out_$p15);
    goto corral_source_split_14442;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_14441;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_14440;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4562} out_$p13 := phys_to_virt(out_$i11);
    goto corral_source_split_14439;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i11, out_$i12 := pch_udc_free_dma_chain_loop_$bb4(in_$p0, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i11, out_$i12);
    return;

  exit:
    return;
}



procedure pch_udc_free_dma_chain_loop_$bb4(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i11: i64, in_$i12: i32) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i11: i64, out_$i12: i32);
  modifies $M.1;



implementation ldv_pci_pci_instance_2_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref) returns (out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref)
{

  entry:
    out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58 := in_$i29, in_$i30, in_$i31, in_$i32, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4681} out_$i29 := ldv_undef_int();
    call {:si_unique_call 4682} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_14909;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb28_dummy;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i30 == 1;
    goto corral_source_split_14917;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_14910;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4697} ldv_pci_instance_resume_2_5(out_$p58, in_$p10);
    goto corral_source_split_14968;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.1, out_$p57);
    goto corral_source_split_14967;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14966;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_426:
    goto corral_source_split_14964;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4696} ldv_pci_instance_resume_early_2_6(out_$p56, in_$p10);
    goto SeqInstr_425;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.1, out_$p55);
    goto corral_source_split_14963;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14962;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_14961;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_14959;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_14958;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_14957;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14956;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4694} out_$i50 := ldv_filter_err_code(out_$i49);
    call {:si_unique_call 4695} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_14955;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_14954;

  $bb30:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i39;
    goto $bb31;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i48;
    goto $bb31;

  SeqInstr_423:
    call {:si_unique_call 4693} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_14952;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4692} out_$i48 := ldv_pci_instance_suspend_late_2_7(out_$p45, in_$p10, out_$i47);
    goto SeqInstr_422;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.19, out_$p46);
    goto corral_source_split_14951;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14950;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_14949;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14948;

  $bb29:
    assume out_$i43 == 1;
    goto corral_source_split_14947;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_14932;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_14931;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_14930;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14929;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4687} out_$i39 := ldv_filter_err_code(out_$i38);
    call {:si_unique_call 4688} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_14928;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4685} out_$i38 := ldv_pci_instance_suspend_2_8(out_$p35, in_$p10, out_$i37);
    call {:si_unique_call 4686} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_14927;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.19, out_$p36);
    goto corral_source_split_14926;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14925;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_14924;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14923;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_14921;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i29;
    assume true;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i29, 2);
    goto corral_source_split_14919;

  $bb16:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58 := ldv_pci_pci_instance_2_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_2_loop_$bb10(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref) returns (out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref);
  modifies $M.1, $M.14, $M.17, assertsPassed, $M.21, $M.3, $CurrAddr, $M.4, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.5, $M.20;



implementation ldv_pci_pci_instance_2_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4672} ldv_ldv_pre_probe_146();
    goto corral_source_split_14891;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i26 == 1;
    goto $bb12_dummy;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_14913;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4683} out_$i25 := ldv_undef_int();
    call {:si_unique_call 4684} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_14912;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_420:
    goto corral_source_split_14943;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4690} ldv_pci_instance_release_2_2(out_$p62, in_$p10);
    goto SeqInstr_419;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.1, out_$p61);
    goto corral_source_split_14942;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(40, 1));
    goto corral_source_split_14941;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4689} ldv_pci_instance_shutdown_2_3(out_$p60, in_$p10);
    goto corral_source_split_14940;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.1, out_$p59);
    goto corral_source_split_14939;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(80, 1));
    goto corral_source_split_14938;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i33 == 1;
    goto corral_source_split_14936;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, 3);
    goto corral_source_split_14934;

  $bb20:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i29;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i29, 2);
    goto corral_source_split_14919;

  $bb16:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 1);
    goto corral_source_split_14910;

  $bb10:
    call out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58 := ldv_pci_pci_instance_2_loop_$bb10(in_$p1, in_$p8, in_$p10, out_$i29, out_$i30, out_$i31, out_$i32, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4681} out_$i29 := ldv_undef_int();
    call {:si_unique_call 4682} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_14909;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb28:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i30 == 1;
    goto corral_source_split_14917;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4697} ldv_pci_instance_resume_2_5(out_$p58, in_$p10);
    goto corral_source_split_14968;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.1, out_$p57);
    goto corral_source_split_14967;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(72, 1));
    goto corral_source_split_14966;

  $bb33:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_426:
    goto corral_source_split_14964;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4696} ldv_pci_instance_resume_early_2_6(out_$p56, in_$p10);
    goto SeqInstr_425;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.1, out_$p55);
    goto corral_source_split_14963;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14962;

  $bb32:
    assume out_$i54 == 1;
    goto corral_source_split_14961;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    out_$i54 := $ne.i64(out_$i53, 0);
    goto corral_source_split_14959;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_14958;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.1, out_$p51);
    goto corral_source_split_14957;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(64, 1));
    goto corral_source_split_14956;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4694} out_$i50 := ldv_filter_err_code(out_$i49);
    call {:si_unique_call 4695} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_14955;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_14954;

  $bb30:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i49 := out_$i39;
    goto $bb31;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i48;
    goto $bb31;

  SeqInstr_423:
    call {:si_unique_call 4693} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_14952;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4692} out_$i48 := ldv_pci_instance_suspend_late_2_7(out_$p45, in_$p10, out_$i47);
    goto SeqInstr_422;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.19, out_$p46);
    goto corral_source_split_14951;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14950;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.1, out_$p44);
    goto corral_source_split_14949;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14948;

  $bb29:
    assume out_$i43 == 1;
    goto corral_source_split_14947;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, 0);
    goto corral_source_split_14932;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_14931;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.1, out_$p40);
    goto corral_source_split_14930;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(56, 1));
    goto corral_source_split_14929;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4687} out_$i39 := ldv_filter_err_code(out_$i38);
    call {:si_unique_call 4688} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_14928;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4685} out_$i38 := ldv_pci_instance_suspend_2_8(out_$p35, in_$p10, out_$i37);
    call {:si_unique_call 4686} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_14927;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.19, out_$p36);
    goto corral_source_split_14926;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_14925;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.1, out_$p34);
    goto corral_source_split_14924;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(48, 1));
    goto corral_source_split_14923;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_14921;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4679} ldv_assume(out_$i22);
    goto corral_source_split_14902;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_14901;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i18, 0);
    goto corral_source_split_14900;

  $bb8:
    assume out_$i20 == 1;
    goto corral_source_split_14899;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_14897;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4677} out_$i19 := ldv_undef_int();
    call {:si_unique_call 4678} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_14896;

  SeqInstr_417:
    call {:si_unique_call 4676} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_14895;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4675} out_$i18 := ldv_ldv_post_probe_147(out_$i17);
    goto SeqInstr_416;

  SeqInstr_414:
    call {:si_unique_call 4674} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_14894;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4673} out_$i17 := ldv_pci_instance_probe_2_17(out_$p16, in_$p10, in_$p12);
    goto SeqInstr_413;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.1, out_$p15);
    goto corral_source_split_14893;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p8, $mul.ref(0, 312)), $mul.ref(32, 1));
    goto corral_source_split_14892;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4680} ldv_assume(out_$i24);
    goto corral_source_split_14907;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_14906;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i18, 0);
    goto corral_source_split_14905;

  $bb9:
    assume !(out_$i20 == 1);
    goto corral_source_split_14904;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62 := ldv_pci_pci_instance_2_loop_$bb7(in_$p1, in_$p8, in_$p10, in_$p12, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62);
    return;

  exit:
    return;
}



procedure ldv_pci_pci_instance_2_loop_$bb7(in_$p1: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i29: i32, in_$i30: i1, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i32, in_$i38: i32, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i29: i32, out_$i30: i1, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i32, out_$i38: i32, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref);
  modifies $M.22, $M.23, $M.5, assertsPassed, $M.1, $M.14, $M.17, $M.21, $M.3, $CurrAddr, $M.4, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.20, $M.16, $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_pm_pm_ops_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4740} out_$i1 := ldv_undef_int();
    call {:si_unique_call 4741} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_15076;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_462:
    goto corral_source_split_15113;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4743} ldv_pm_ops_instance_runtime_idle_3_27(out_$p12, $u6);
    goto SeqInstr_461;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.25, out_$p11);
    goto corral_source_split_15112;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_15111;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_15110;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_15084;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_15083;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.24, out_$p7);
    goto corral_source_split_15082;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_15081;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_15079;

  corral_source_split_15077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_15077;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_468:
    goto corral_source_split_15128;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4745} ldv_pm_ops_instance_runtime_resume_3_24(out_$p24, $u6);
    goto SeqInstr_467;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.29, out_$p23);
    goto corral_source_split_15127;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_15126;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_15125;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_15123;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_15122;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.28, out_$p19);
    goto corral_source_split_15121;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_15120;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_465:
    goto corral_source_split_15118;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4744} ldv_pm_ops_instance_runtime_suspend_3_25(out_$p18, $u6);
    goto SeqInstr_464;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.27, out_$p17);
    goto corral_source_split_15117;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_15116;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_15115;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_15093;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_15092;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.26, out_$p13);
    goto corral_source_split_15091;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_15090;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_15088;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_15086;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4758} ldv_pm_ops_instance_complete_3_3(out_$p150, $u6);
    goto corral_source_split_15227;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.68, out_$p149);
    goto corral_source_split_15226;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_15225;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_489:
    goto corral_source_split_15223;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4757} ldv_pm_ops_instance_resume_3_16(out_$p72, $u6);
    goto SeqInstr_488;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.43, out_$p71);
    goto corral_source_split_15222;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_15221;

  $bb63:
    assume out_$i70 == 1;
    goto corral_source_split_15220;

  corral_source_split_15203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_15203;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_15202;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.42, out_$p67);
    goto corral_source_split_15201;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_15200;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_480:
    goto corral_source_split_15198;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4754} ldv_pm_ops_instance_resume_noirq_3_19(out_$p54, $u6);
    goto SeqInstr_479;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.37, out_$p53);
    goto corral_source_split_15197;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_15196;

  $bb53:
    assume out_$i52 == 1;
    goto corral_source_split_15195;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_15193;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_15192;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.36, out_$p49);
    goto corral_source_split_15191;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_15190;

  $bb51:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_477:
    goto corral_source_split_15188;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4753} ldv_pm_ops_instance_suspend_noirq_3_20(out_$p48, $u6);
    goto SeqInstr_476;

  corral_source_split_15186:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.35, out_$p47);
    goto corral_source_split_15187;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_15186;

  $bb50:
    assume out_$i46 == 1;
    goto corral_source_split_15185;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_15177;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_15176;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.34, out_$p43);
    goto corral_source_split_15175;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_15174;

  $bb48:
    assume out_$i42 == 1;
    goto corral_source_split_15173;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_15170:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_15171;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4751} out_$i41 := ldv_undef_int();
    call {:si_unique_call 4752} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_15170;

  $bb46:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_474:
    goto corral_source_split_15168;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4750} ldv_pm_ops_instance_suspend_3_21(out_$p40, $u6);
    goto SeqInstr_473;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.33, out_$p39);
    goto corral_source_split_15167;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_15166;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_15165;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_15143;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_15142;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.32, out_$p35);
    goto corral_source_split_15141;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_15140;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_15138;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_15136;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4747} out_$i31 := ldv_undef_int();
    call {:si_unique_call 4748} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_15135;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_471:
    goto corral_source_split_15133;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4746} ldv_pm_ops_instance_prepare_3_22(out_$p30, $u6);
    goto SeqInstr_470;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.31, out_$p29);
    goto corral_source_split_15132;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_15131;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_15130;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_15102;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_15101;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.30, out_$p25);
    goto corral_source_split_15100;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_15099;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_15097;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_15095;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb61:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_15218:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_486:
    goto corral_source_split_15218;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4756} ldv_pm_ops_instance_resume_early_3_17(out_$p66, $u6);
    goto SeqInstr_485;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.41, out_$p65);
    goto corral_source_split_15217;

  corral_source_split_15215:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_15216;

  $bb60:
    assume out_$i64 == 1;
    goto corral_source_split_15215;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_15213;

  corral_source_split_15211:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_15212;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.40, out_$p61);
    goto corral_source_split_15211;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_15210;

  $bb58:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_483:
    goto corral_source_split_15208;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4755} ldv_pm_ops_instance_suspend_late_3_18(out_$p60, $u6);
    goto SeqInstr_482;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.39, out_$p59);
    goto corral_source_split_15207;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_15206;

  $bb57:
    assume out_$i58 == 1;
    goto corral_source_split_15205;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_15183;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_15182;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.38, out_$p55);
    goto corral_source_split_15181;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_15180;

  $bb49:
    assume !(out_$i42 == 1);
    goto corral_source_split_15179;

  $bb86:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_507:
    goto corral_source_split_15287;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4766} ldv_pm_ops_instance_thaw_3_10(out_$p110, $u6);
    goto SeqInstr_506;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.55, out_$p109);
    goto corral_source_split_15286;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_15285;

  $bb85:
    assume out_$i108 == 1;
    goto corral_source_split_15284;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_15267;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_15266;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.54, out_$p105);
    goto corral_source_split_15265;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_15264;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_498:
    goto corral_source_split_15262;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4763} ldv_pm_ops_instance_thaw_early_3_13(out_$p92, $u6);
    goto SeqInstr_497;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.49, out_$p91);
    goto corral_source_split_15261;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_15260;

  $bb75:
    assume out_$i90 == 1;
    goto corral_source_split_15259;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_15257;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_15256;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.48, out_$p87);
    goto corral_source_split_15255;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_15254;

  $bb73:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_495:
    goto corral_source_split_15252;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4762} ldv_pm_ops_instance_freeze_late_3_14(out_$p86, $u6);
    goto SeqInstr_494;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.47, out_$p85);
    goto corral_source_split_15251;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_15250;

  $bb72:
    assume out_$i84 == 1;
    goto corral_source_split_15249;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_15241;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_15240;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.46, out_$p81);
    goto corral_source_split_15239;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_15238;

  $bb70:
    assume out_$i80 == 1;
    goto corral_source_split_15237;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_15235;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4760} out_$i79 := ldv_undef_int();
    call {:si_unique_call 4761} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_15234;

  $bb68:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_492:
    goto corral_source_split_15232;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4759} ldv_pm_ops_instance_freeze_3_15(out_$p78, $u6);
    goto SeqInstr_491;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.45, out_$p77);
    goto corral_source_split_15231;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_15230;

  $bb67:
    assume out_$i76 == 1;
    goto corral_source_split_15229;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_15152;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_15151;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.44, out_$p73);
    goto corral_source_split_15150;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_15149;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_15147;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_15145;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb83:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_504:
    goto corral_source_split_15282;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4765} ldv_pm_ops_instance_thaw_noirq_3_11(out_$p104, $u6);
    goto SeqInstr_503;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.53, out_$p103);
    goto corral_source_split_15281;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_15280;

  $bb82:
    assume out_$i102 == 1;
    goto corral_source_split_15279;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_15277;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_15276;

  corral_source_split_15274:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.52, out_$p99);
    goto corral_source_split_15275;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_15274;

  $bb80:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_15272:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_501:
    goto corral_source_split_15272;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4764} ldv_pm_ops_instance_freeze_noirq_3_12(out_$p98, $u6);
    goto SeqInstr_500;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.51, out_$p97);
    goto corral_source_split_15271;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_15270;

  $bb79:
    assume out_$i96 == 1;
    goto corral_source_split_15269;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_15247;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_15246;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.50, out_$p93);
    goto corral_source_split_15245;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_15244;

  $bb71:
    assume !(out_$i80 == 1);
    goto corral_source_split_15243;

  $bb107:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_525:
    goto corral_source_split_15347;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_15346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4774} ldv_pm_ops_instance_restore_3_4(out_$p148, $u6);
    goto SeqInstr_524;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.67, out_$p147);
    goto corral_source_split_15346;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_15345;

  $bb106:
    assume out_$i146 == 1;
    goto corral_source_split_15344;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_15327;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p144);
    goto corral_source_split_15326;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.66, out_$p143);
    goto corral_source_split_15325;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_15324;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_15322:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_516:
    goto corral_source_split_15322;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4771} ldv_pm_ops_instance_restore_early_3_7(out_$p130, $u6);
    goto SeqInstr_515;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.61, out_$p129);
    goto corral_source_split_15321;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_15320;

  $bb96:
    assume out_$i128 == 1;
    goto corral_source_split_15319;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_15317;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_15316;

  corral_source_split_15314:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.60, out_$p125);
    goto corral_source_split_15315;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_15314;

  $bb94:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_513:
    goto corral_source_split_15312;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4770} ldv_pm_ops_instance_poweroff_late_3_8(out_$p124, $u6);
    goto SeqInstr_512;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.59, out_$p123);
    goto corral_source_split_15311;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_15310;

  $bb93:
    assume out_$i122 == 1;
    goto corral_source_split_15309;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_15301;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_15300;

  corral_source_split_15298:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.58, out_$p119);
    goto corral_source_split_15299;

  corral_source_split_15297:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_15298;

  $bb91:
    assume out_$i118 == 1;
    goto corral_source_split_15297;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_15295;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4768} out_$i117 := ldv_undef_int();
    call {:si_unique_call 4769} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_15294;

  $bb89:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_510:
    goto corral_source_split_15292;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4767} ldv_pm_ops_instance_poweroff_3_9(out_$p116, $u6);
    goto SeqInstr_509;

  corral_source_split_15290:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.57, out_$p115);
    goto corral_source_split_15291;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_15290;

  $bb88:
    assume out_$i114 == 1;
    goto corral_source_split_15289;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_15161;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_15160;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.56, out_$p111);
    goto corral_source_split_15159;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_15158;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_15156;

  corral_source_split_15154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_15154;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb104:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_522:
    goto corral_source_split_15342;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4773} ldv_pm_ops_instance_restore_noirq_3_5(out_$p142, $u6);
    goto SeqInstr_521;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.65, out_$p141);
    goto corral_source_split_15341;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_15340;

  $bb103:
    assume out_$i140 == 1;
    goto corral_source_split_15339;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i64(out_$i139, 0);
    goto corral_source_split_15337;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    out_$i139 := $p2i.ref.i64(out_$p138);
    goto corral_source_split_15336;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.64, out_$p137);
    goto corral_source_split_15335;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_15334;

  $bb101:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_519:
    goto corral_source_split_15332;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4772} ldv_pm_ops_instance_poweroff_noirq_3_6(out_$p136, $u6);
    goto SeqInstr_518;

  corral_source_split_15330:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.63, out_$p135);
    goto corral_source_split_15331;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_15330;

  $bb100:
    assume out_$i134 == 1;
    goto corral_source_split_15329;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_15306:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i64(out_$i133, 0);
    goto corral_source_split_15307;

  corral_source_split_15305:
    assume {:verifier.code 0} true;
    out_$i133 := $p2i.ref.i64(out_$p132);
    goto corral_source_split_15306;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.62, out_$p131);
    goto corral_source_split_15305;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($u5, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_15304;

  $bb92:
    assume !(out_$i118 == 1);
    goto corral_source_split_15303;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4749} ldv_stop();
    goto corral_source_split_15163;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150 := ldv_pm_pm_ops_instance_3_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150);
    return;

  exit:
    return;
}



procedure ldv_pm_pm_ops_instance_3_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref);
  modifies $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4800} out_$i1 := ldv_undef_int();
    call {:si_unique_call 4801} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_15404;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb39_dummy;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_15433:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_15421:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_15415:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_597:
    goto corral_source_split_15409;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4802} ldv_dummy_resourceless_instance_callback_7_21($u7, $u8);
    goto SeqInstr_596;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_15407;

  corral_source_split_15405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_15405;

  SeqInstr_600:
    goto corral_source_split_15415;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4803} ldv_dummy_resourceless_instance_callback_7_18($u9, $u8, $u0);
    goto SeqInstr_599;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_15413;

  corral_source_split_15411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_15411;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4804} ldv_dummy_resourceless_instance_callback_7_15($u9, $u8, $u0);
    goto corral_source_split_15421;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_15419;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_15417;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4805} ldv_dummy_resourceless_instance_callback_7_14($u7, $u8);
    goto corral_source_split_15427;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i5 == 1;
    goto corral_source_split_15425;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i1, 4);
    goto corral_source_split_15423;

  $bb11:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4806} ldv_dummy_resourceless_instance_callback_7_13($u10, $u8, $u11);
    goto corral_source_split_15433;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i6 == 1;
    goto corral_source_split_15431;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i1, 5);
    goto corral_source_split_15429;

  $bb15:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4807} ldv_dummy_resourceless_instance_callback_7_10($u9, $u8, $u0);
    goto corral_source_split_15439;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i7 == 1;
    goto corral_source_split_15437;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i1, 6);
    goto corral_source_split_15435;

  $bb19:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_603:
    goto corral_source_split_15445;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4808} ldv_dummy_resourceless_instance_callback_7_7($u9, $u8, $u0);
    goto SeqInstr_602;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i8 == 1;
    goto corral_source_split_15443;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i1, 7);
    goto corral_source_split_15441;

  $bb23:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4809} ldv_dummy_resourceless_instance_callback_7_3($u7, $u8);
    goto corral_source_split_15451;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb30:
    assume out_$i9 == 1;
    goto corral_source_split_15449;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i1;
    assume true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i1, 8);
    goto corral_source_split_15447;

  $bb27:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_usb_gadget_ops_dummy_resourceless_instance_7_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i32) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i32);
  modifies $M.14, assertsPassed, $M.1, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.5, $CurrAddr;



implementation ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4: ref, in_$p6: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4844} out_$i28 := ldv_undef_int();
    call {:si_unique_call 4845} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_15533;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb47_dummy;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_15586;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4856} out_$i36 := ldv_undef_int();
    call {:si_unique_call 4857} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_15585;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15551:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_624:
    goto corral_source_split_15545;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4848} ldv_io_instance_callback_6_28($u13, in_$p4);
    goto SeqInstr_623;

  corral_source_split_15543:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_15543;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 1);
    goto corral_source_split_15534;

  SeqInstr_627:
    goto corral_source_split_15551;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4849} ldv_io_instance_callback_6_25($u14, in_$p4, $u0);
    goto SeqInstr_626;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_15549;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i28, 2);
    goto corral_source_split_15547;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_630:
    goto corral_source_split_15557;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4850} ldv_io_instance_callback_6_22($u15, in_$p4, in_$p6, $u0);
    goto SeqInstr_629;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i31 == 1;
    goto corral_source_split_15555;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i28, 3);
    goto corral_source_split_15553;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4851} ldv_io_instance_callback_6_21($u16, in_$p4, in_$p6);
    goto corral_source_split_15563;

  corral_source_split_15561:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i32 == 1;
    goto corral_source_split_15561;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i28, 4);
    goto corral_source_split_15559;

  $bb24:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4852} ldv_io_instance_callback_6_20($u17, in_$p4);
    goto corral_source_split_15569;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i33 == 1;
    goto corral_source_split_15567;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i28, 5);
    goto corral_source_split_15565;

  $bb28:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_633:
    goto corral_source_split_15575;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4853} ldv_io_instance_callback_6_19($u18, in_$p4, in_$p6);
    goto SeqInstr_632;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i34 == 1;
    goto corral_source_split_15573;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i28, 6);
    goto corral_source_split_15571;

  $bb32:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_636:
    goto corral_source_split_15581;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4854} ldv_io_instance_callback_6_4($u19, in_$p4, $u0);
    goto SeqInstr_635;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i35 == 1;
    goto corral_source_split_15579;

  corral_source_split_15577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i28, 7);
    goto corral_source_split_15577;

  $bb36:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4855} ldv_stop();
    goto corral_source_split_15583;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb47_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4: ref, in_$p6: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1) returns (out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1);
  modifies $M.1, $M.17, assertsPassed, $M.14, $CurrAddr;



implementation ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($u12, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_15508;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb12_dummy;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_15537;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4846} out_$i21 := ldv_undef_int();
    call {:si_unique_call 4847} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_15536;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_621:
    goto corral_source_split_15529;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4843} ldv_io_instance_release_6_2(out_$p27, in_$p4);
    goto SeqInstr_620;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.70, out_$p26);
    goto corral_source_split_15528;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($u12, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_15527;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb7:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb8;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  corral_source_split_15519:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_15520;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4840} out_$i17 := ldv_undef_int();
    call {:si_unique_call 4841} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_15519;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4839} ldv_assume(out_$i16);
    goto corral_source_split_15518;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_15517;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 0);
    goto corral_source_split_15516;

  $bb5:
    assume out_$i14 == 1;
    goto corral_source_split_15515;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_15512:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_15513;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4837} out_$i13 := ldv_undef_int();
    call {:si_unique_call 4838} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_15512;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4835} out_$i12 := ldv_filter_err_code(out_$i11);
    call {:si_unique_call 4836} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_15511;

  SeqInstr_618:
    call {:si_unique_call 4834} {:cexpr "ldv_6_ret_default"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_15510;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4833} out_$i11 := ldv_io_instance_probe_6_11(out_$p10, in_$p4, in_$p2);
    goto SeqInstr_617;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.69, out_$p9);
    goto corral_source_split_15509;

  $bb14:
    assume out_$i37 == 1;
    goto corral_source_split_15541;

  corral_source_split_15586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb47;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_15586;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4856} out_$i36 := ldv_undef_int();
    call {:si_unique_call 4857} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_15585;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15551:
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_624:
    goto corral_source_split_15545;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4848} ldv_io_instance_callback_6_28($u13, in_$p4);
    goto SeqInstr_623;

  corral_source_split_15543:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume out_$i29 == 1;
    goto corral_source_split_15543;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 1);
    goto corral_source_split_15534;

  $bb10:
    call out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb10(in_$p4, in_$p6, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4844} out_$i28 := ldv_undef_int();
    call {:si_unique_call 4845} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_15533;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    assume false;
    return;

  $bb9:
    assume !(out_$i18 == 1);
    goto corral_source_split_15531;

  SeqInstr_627:
    goto corral_source_split_15551;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4849} ldv_io_instance_callback_6_25($u14, in_$p4, $u0);
    goto SeqInstr_626;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i30 == 1;
    goto corral_source_split_15549;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i28, 2);
    goto corral_source_split_15547;

  $bb16:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_630:
    goto corral_source_split_15557;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4850} ldv_io_instance_callback_6_22($u15, in_$p4, in_$p6, $u0);
    goto SeqInstr_629;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume out_$i31 == 1;
    goto corral_source_split_15555;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i28, 3);
    goto corral_source_split_15553;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4851} ldv_io_instance_callback_6_21($u16, in_$p4, in_$p6);
    goto corral_source_split_15563;

  corral_source_split_15561:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i32 == 1;
    goto corral_source_split_15561;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i28, 4);
    goto corral_source_split_15559;

  $bb24:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4852} ldv_io_instance_callback_6_20($u17, in_$p4);
    goto corral_source_split_15569;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i33 == 1;
    goto corral_source_split_15567;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i28, 5);
    goto corral_source_split_15565;

  $bb28:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_633:
    goto corral_source_split_15575;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4853} ldv_io_instance_callback_6_19($u18, in_$p4, in_$p6);
    goto SeqInstr_632;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i34 == 1;
    goto corral_source_split_15573;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i28, 6);
    goto corral_source_split_15571;

  $bb32:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_636:
    goto corral_source_split_15581;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4854} ldv_io_instance_callback_6_4($u19, in_$p4, $u0);
    goto SeqInstr_635;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i35 == 1;
    goto corral_source_split_15579;

  corral_source_split_15577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i28, 7);
    goto corral_source_split_15577;

  $bb36:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4855} ldv_stop();
    goto corral_source_split_15583;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4842} ldv_assume(out_$i20);
    goto corral_source_split_15525;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    goto corral_source_split_15524;

  corral_source_split_15522:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i12, 0);
    goto corral_source_split_15523;

  $bb6:
    assume !(out_$i14 == 1);
    goto corral_source_split_15522;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37 := ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4(in_$p2, in_$p4, in_$p6, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37);
    return;

  exit:
    return;
}



procedure ldv_struct_usb_ep_ops_io_instance_6_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p6: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i32, in_$i37: i1) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i32, out_$i37: i1);
  modifies $M.1, $M.14, assertsPassed, $M.17, $CurrAddr;



implementation ldv_pm_platform_instance_4_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := in_$i22, in_$i28, in_$i29, in_$i39, in_$i40;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    goto $bb34_dummy;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_15699;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4896} out_$i39 := ldv_undef_int();
    call {:si_unique_call 4897} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_15698;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_15679:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_15679;

  corral_source_split_15677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_15677;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4892} ldv_dispatch_pm_deregister_4_5();
    goto corral_source_split_15686;

  SeqInstr_669:
    goto corral_source_split_15685;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4891} ldv_dispatch_pm_register_4_6();
    goto SeqInstr_668;

  corral_source_split_15683:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_15683;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_15681;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_4_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_4_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1);
  modifies $CurrAddr, $M.1, $M.14, $M.17, assertsPassed;



implementation ldv_pm_platform_instance_4_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i22, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_15627;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i25;
    goto $bb15_dummy;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_15663:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_15664;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4888} out_$i26 := ldv_undef_int();
    call {:si_unique_call 4889} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_15663;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_15662;

  corral_source_split_15658:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    goto $bb14;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    out_$i25 := 1;
    goto $bb14;

  corral_source_split_15695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4895} ldv_free(out_$p38);
    goto corral_source_split_15696;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_15695;

  $bb31:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_672:
    goto corral_source_split_15693;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  corral_source_split_15692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4894} ldv_platform_instance_release_4_3(out_$p37, out_$p31);
    goto SeqInstr_671;

  corral_source_split_15691:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.74, out_$p36);
    goto corral_source_split_15692;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_15691;

  $bb30:
    assume out_$i35 == 1;
    goto corral_source_split_15690;

  corral_source_split_15675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_15675;

  corral_source_split_15673:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_15674;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.73, out_$p32);
    goto corral_source_split_15673;

  corral_source_split_15671:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_15672;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_15671;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4890} out_$p30 := ldv_xmalloc(1464);
    goto corral_source_split_15670;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb11;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 1);
    goto corral_source_split_15653;

  corral_source_split_15651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4885} out_$i20 := ldv_undef_int();
    call {:si_unique_call 4886} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_15652;

  corral_source_split_15650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4884} ldv_assume(out_$i19);
    goto corral_source_split_15651;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_15650;

  corral_source_split_15648:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i14, 0);
    goto corral_source_split_15649;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_15648;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_15646;

  corral_source_split_15644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4882} out_$i16 := ldv_undef_int();
    call {:si_unique_call 4883} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_15645;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4881} ldv_free(out_$p15);
    goto corral_source_split_15644;

  corral_source_split_15642:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_15643;

  SeqInstr_666:
    call {:si_unique_call 4880} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_15642;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4879} out_$i14 := ldv_ldv_post_probe_149(out_$i13);
    goto SeqInstr_665;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_15641;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i3;
    goto $bb7;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb7;

  SeqInstr_663:
    call {:si_unique_call 4878} {:cexpr "ldv_4_probed_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_15639;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  corral_source_split_15638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4877} out_$i12 := ldv_platform_instance_probe_4_14(out_$p11, out_$p5);
    goto SeqInstr_662;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.72, out_$p10);
    goto corral_source_split_15638;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_15637;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_15636;

  corral_source_split_15634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_15634;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_15633;

  corral_source_split_15631:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.71, out_$p6);
    goto corral_source_split_15632;

  corral_source_split_15630:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($u20, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_15631;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4876} ldv_ldv_pre_probe_148();
    goto corral_source_split_15630;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_15629;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4875} out_$p4 := ldv_xmalloc(1464);
    goto corral_source_split_15628;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_15668;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  corral_source_split_15698:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_15699;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4896} out_$i39 := ldv_undef_int();
    call {:si_unique_call 4897} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_15698;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_15679:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_15679;

  corral_source_split_15677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_15677;

  $bb13:
    call out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_4_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    goto $bb13;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    assume false;
    return;

  $bb12:
    assume !(out_$i21 == 1);
    goto corral_source_split_15660;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4892} ldv_dispatch_pm_deregister_4_5();
    goto corral_source_split_15686;

  SeqInstr_669:
    goto corral_source_split_15685;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4891} ldv_dispatch_pm_register_4_6();
    goto SeqInstr_668;

  corral_source_split_15683:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_15683;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_15681;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4887} ldv_assume(out_$i24);
    goto corral_source_split_15658;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_15657;

  corral_source_split_15655:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i14, 0);
    goto corral_source_split_15656;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_15655;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := ldv_pm_platform_instance_4_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_4_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1);
  modifies $M.1, $M.14, $M.17, assertsPassed, $CurrAddr, $M.22, $M.23;



implementation ldv_rtc_rtc_class_instance_5_loop_$bb10(in_$i21: i32, in_$i22: i1) returns (out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i21, out_$i22 := in_$i21, in_$i22;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4922} out_$i21 := ldv_undef_int();
    call {:si_unique_call 4923} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_15754;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    goto $bb14_dummy;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_15754:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_15755;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22 := ldv_rtc_rtc_class_instance_5_loop_$bb10(out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure ldv_rtc_rtc_class_instance_5_loop_$bb10(in_$i21: i32, in_$i22: i1) returns (out_$i21: i32, out_$i22: i1);



implementation ldv_rtc_rtc_class_instance_5_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24 := in_$i3, in_$p4, in_$p5, in_$i6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p23, in_$p24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_15727;

  $bb12:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i12;
    goto $bb12_dummy;

  corral_source_split_15758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_15757:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_15758;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4924} out_$i19 := ldv_undef_int();
    call {:si_unique_call 4925} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_15757;

  corral_source_split_15752:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_15765:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_15764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4926} ldv_rtc_class_instance_release_5_2(out_$p24, $u6);
    goto corral_source_split_15765;

  corral_source_split_15763:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.77, out_$p23);
    goto corral_source_split_15764;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u21, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_15763;

  $bb15:
    assume !(out_$i22 == 1);
    goto corral_source_split_15762;

  corral_source_split_15755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_15754:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_15755;

  $bb10:
    call out_$i21, out_$i22 := ldv_rtc_rtc_class_instance_5_loop_$bb10(out_$i21, out_$i22);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4922} out_$i21 := ldv_undef_int();
    call {:si_unique_call 4923} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_15754;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14:
    assume {:verifier.code 0} true;
    assume out_$i22 == 1;
    assume false;
    return;

  corral_source_split_15746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4920} ldv_assume(out_$i16);
    goto corral_source_split_15747;

  corral_source_split_15745:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_15746;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 0);
    goto corral_source_split_15745;

  $bb8:
    assume out_$i14 == 1;
    goto corral_source_split_15744;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_15741:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_15742;

  corral_source_split_15740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4918} out_$i13 := ldv_undef_int();
    call {:si_unique_call 4919} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_15741;

  SeqInstr_693:
    call {:si_unique_call 4917} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_15740;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4916} out_$i12 := ldv_ldv_post_probe_151(out_$i11);
    goto SeqInstr_692;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_15739;

  $bb6:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i3;
    goto $bb7;

  corral_source_split_15737:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i10;
    goto $bb7;

  SeqInstr_690:
    call {:si_unique_call 4915} {:cexpr "ldv_5_ret_default"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_15737;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4914} out_$i10 := ldv_rtc_class_instance_probe_5_10(out_$p9, $u6);
    goto SeqInstr_689;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.76, out_$p8);
    goto corral_source_split_15736;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($u21, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_15735;

  $bb5:
    assume out_$i7 == 1;
    goto corral_source_split_15734;

  corral_source_split_15732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i6, 0);
    goto corral_source_split_15732;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_15731;

  corral_source_split_15729:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.75, out_$p4);
    goto corral_source_split_15730;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref($u21, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_15729;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4913} ldv_ldv_pre_probe_150();
    goto corral_source_split_15728;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4921} ldv_assume(out_$i18);
    goto corral_source_split_15752;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i32(out_$i17);
    goto corral_source_split_15751;

  corral_source_split_15749:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i12, 0);
    goto corral_source_split_15750;

  $bb9:
    assume !(out_$i14 == 1);
    goto corral_source_split_15749;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24 := ldv_rtc_rtc_class_instance_5_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p23, out_$p24);
    return;

  exit:
    return;
}



procedure ldv_rtc_rtc_class_instance_5_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$i22: i1, in_$p23: ref, in_$p24: ref) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$i22: i1, out_$p23: ref, out_$p24: ref);
  modifies $M.22, $M.23, assertsPassed, $M.1, $M.14, $M.17;


